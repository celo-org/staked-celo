{
  "address": "0x9dd19aa3c4ef6eBD253BAF98Cb27ea7c792cc4e8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZeroNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotManager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "CantWithdrawAccordingToStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "FailedToAddGroup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "FailedToBlockGroup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "FailedToUnblockGroup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupAlreadyBlocked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupBalanced",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotBalanced",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotEligible",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotOverflowing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupStillOverflowing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveGroups",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoGroups",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupBlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupUnblocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "account",
      "outputs": [
        {
          "internalType": "contract IAccount",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "blockGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultStrategy",
      "outputs": [
        {
          "internalType": "contract IDefaultStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "celoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stCeloAmount",
          "type": "uint256"
        }
      ],
      "name": "generateDepositVoteDistribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "finalGroups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "finalVotes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "celoWithdrawalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stCeloWithdrawalAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTransfer",
          "type": "bool"
        }
      ],
      "name": "generateWithdrawalVoteDistribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "groups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBlockedGroup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfBlockedGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfVotedGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getStCeloInGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overflow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unhealthy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVotedGroup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "groupHealth",
      "outputs": [
        {
          "internalType": "contract IGroupHealth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "isBlockedGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "isVotedGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "rebalanceOverflowedGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "rebalanceWhenHealthChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_groupHealth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultStrategy",
          "type": "address"
        }
      ],
      "name": "setDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stCeloInGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStCeloLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStCeloOverflow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStCeloUnhealthy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "unblockGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f570b70d6e69caab32b89c13f0b95de716e9fd1f68ccbc570893de8cc60dfd2",
  "receipt": {
    "to": null,
    "from": "0x5bC1C4C1D67C5E4384189302BC653A611568a788",
    "contractAddress": "0x9dd19aa3c4ef6eBD253BAF98Cb27ea7c792cc4e8",
    "transactionIndex": 1,
    "gasUsed": "4556837",
    "logsBloom": "0x
    "blockHash": "0x114c059c61868b73f2ff95d93a187dbe673acfae9a8d5a9536413dd0eab20d0d",
    "transactionHash": "0x0f570b70d6e69caab32b89c13f0b95de716e9fd1f68ccbc570893de8cc60dfd2",
    "logs": [],
    "blockNumber": 19297583,
    "cumulativeGasUsed": "4577837",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "27c7c680112f4cbd9a19d8d22fcc316c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZeroNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"CantWithdrawAccordingToStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"FailedToAddGroup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"FailedToBlockGroup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"FailedToUnblockGroup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupAlreadyBlocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupBalanced\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotBalanced\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotEligible\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotOverflowing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupStillOverflowing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveGroups\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoGroups\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupUnblocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"account\",\"outputs\":[{\"internalType\":\"contract IAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"blockGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultStrategy\",\"outputs\":[{\"internalType\":\"contract IDefaultStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"celoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stCeloAmount\",\"type\":\"uint256\"}],\"name\":\"generateDepositVoteDistribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"finalGroups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"finalVotes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"celoWithdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stCeloWithdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTransfer\",\"type\":\"bool\"}],\"name\":\"generateWithdrawalVoteDistribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"groups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBlockedGroup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfBlockedGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfVotedGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getStCeloInGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unhealthy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVotedGroup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupHealth\",\"outputs\":[{\"internalType\":\"contract IGroupHealth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"isBlockedGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"isVotedGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"rebalanceOverflowedGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"rebalanceWhenHealthChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_groupHealth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultStrategy\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stCeloInGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStCeloLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStCeloOverflow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStCeloUnhealthy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"unblockGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"params\":{\"caller\":\"`msg.sender` that called the function.\"}}],\"CantWithdrawAccordingToStrategy(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"FailedToAddGroup(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"FailedToBlockGroup(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"FailedToUnblockGroup(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupAlreadyBlocked(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupBalanced(address)\":[{\"params\":{\"group\":\"The group address.\"}}],\"GroupNotBalanced(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupNotEligible(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupNotOverflowing(address)\":[{\"params\":{\"group\":\"The group address.\"}}],\"GroupStillOverflowing(address)\":[{\"params\":{\"group\":\"The group address.\"}}]},\"events\":{\"GroupBlocked(address)\":{\"params\":{\"group\":\"The group's address.\"}},\"GroupUnblocked(address)\":{\"params\":{\"group\":\"The group's address.\"}}},\"kind\":\"dev\",\"methods\":{\"blockGroup(address)\":{\"params\":{\"group\":\"The group address.\"}},\"generateDepositVoteDistribution(address,uint256,uint256)\":{\"params\":{\"celoAmount\":\"The amount of CELO.\",\"group\":\"The validator group that we want to deposit to or transfer from.\",\"stCeloAmount\":\"The amount of stCELO.\"},\"returns\":{\"finalGroups\":\"The groups to withdraw from.\",\"finalVotes\":\"The amount to withdraw from each group.\"}},\"generateWithdrawalVoteDistribution(address,uint256,uint256,bool)\":{\"params\":{\"celoWithdrawalAmount\":\"The amount of CELO to withdraw.\",\"group\":\"The validator group that we want to withdraw from.\",\"stCeloWithdrawalAmount\":\"The amount of stCELO to withdraw.\"},\"returns\":{\"groups\":\"The groups to withdraw from.\",\"votes\":\"The amount to withdraw from each group.\"}},\"getBlockedGroup(uint256)\":{\"returns\":{\"_0\":\"The blocked group.\"}},\"getNumberOfBlockedGroups()\":{\"returns\":{\"_0\":\"The length of blocked groups.\"}},\"getNumberOfVotedGroups()\":{\"returns\":{\"_0\":\"The length of voted groups.\"}},\"getStCeloInGroup(address)\":{\"returns\":{\"overflow\":\"The stCELO amount that is overflowed to default strategy.\",\"total\":\"The total stCELO amount.\",\"unhealthy\":\"The stCELO amount that is moved to default strategy because group is/was unhealthy.\"}},\"getVersionNumber()\":{\"returns\":{\"_0\":\"Storage version of the contract.\",\"_1\":\"Major version of the contract.\",\"_2\":\"Minor version of the contract.\",\"_3\":\"Patch version of the contract.\"}},\"getVotedGroup(uint256)\":{\"returns\":{\"_0\":\"The specific group.\"}},\"initialize(address,address)\":{\"params\":{\"_manager\":\"The address of the Manager contract.\",\"_owner\":\"The address of the contract owner.\"}},\"isBlockedGroup(address)\":{\"params\":{\"group\":\"The validator group.\"},\"returns\":{\"_0\":\"Whether or not group is blocked.\"}},\"isVotedGroup(address)\":{\"params\":{\"group\":\"The validator group.\"},\"returns\":{\"_0\":\"Whether or not is group is voted.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rebalanceOverflowedGroup(address)\":{\"params\":{\"group\":\"The group address.\"}},\"rebalanceWhenHealthChanged(address)\":{\"params\":{\"group\":\"The group address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDependencies(address,address,address)\":{\"params\":{\"_account\":\"The address of the Account contract.\",\"_defaultStrategy\":\"The address of the DefaultStrategy contract.\",\"_groupHealth\":\"The address of the GroupHealth contract.\"}},\"setManager(address)\":{\"params\":{\"_manager\":\"The new manager address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unblockGroup(address)\":{\"params\":{\"group\":\"The address of the group to add to the set of specific group strategies.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"totalStCeloLocked\":{\"details\":\"To get the actual stCelo in specific strategy it is necessary to subtract `totalStCeloOverflow`.\"}},\"title\":\"SpecificGroupStrategy is responsible for handling any deposit/withdrawal for accounts with specific strategy selected.\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressZeroNotAllowed()\":[{\"notice\":\"Used when attempting to pass in address zero where not allowed.\"}],\"CallerNotManager(address)\":[{\"notice\":\"Used when an `onlyManager` function is called by a non-manager.\"}],\"CantWithdrawAccordingToStrategy(address)\":[{\"notice\":\"Used when there isn't enough CELO voting for an account's strategy to fulfill a withdrawal.\"}],\"FailedToAddGroup(address)\":[{\"notice\":\"Used when an attempt to add an specific group to the EnumerableSet fails.\"}],\"FailedToBlockGroup(address)\":[{\"notice\":\"Used when attempting to block a group failed.\"}],\"FailedToUnblockGroup(address)\":[{\"notice\":\"Used when attempting to unblock a group that is not blocked.\"}],\"GroupAlreadyBlocked(address)\":[{\"notice\":\"Used when attempting to block a group that is not allowed.\"}],\"GroupBalanced(address)\":[{\"notice\":\"Used when trying to `rebalanceWhenHealthChanged` when the group cannot be rebalanced since it is in correct state.\"}],\"GroupNotBalanced(address)\":[{\"notice\":\"Used when attempting to withdraw from specific group but group does not have enough CELO. It is necessary to rebalance the group.\"}],\"GroupNotEligible(address)\":[{\"notice\":\"Used when a group does not meet the validator group health requirements.\"}],\"GroupNotOverflowing(address)\":[{\"notice\":\"Used when trying to `rebalanceOverflowedGroup` when the group is not overflowing.\"}],\"GroupStillOverflowing(address)\":[{\"notice\":\"Used when trying to `rebalanceOverflowedGroup` when the overflowing group cannot be rebalanced since it has no receivable votes.\"}],\"NoActiveGroups()\":[{\"notice\":\"Used when attempting to deposit when there are not active groups to vote for.\"}],\"NoGroups()\":[{\"notice\":\"Used when attempting to withdraw but there are no groups being voted for.\"}],\"NullAddress()\":[{\"notice\":\"Used when a passed address is address(0).\"}]},\"events\":{\"GroupBlocked(address)\":{\"notice\":\"Emmited when group is blocked.\"},\"GroupUnblocked(address)\":{\"notice\":\"Emitted when a group was unblocked.\"},\"ManagerSet(address)\":{\"notice\":\"Emitted when the manager is initially set or later modified.\"}},\"kind\":\"user\",\"methods\":{\"account()\":{\"notice\":\"An instance of the Account contract for the StakedCelo protocol.\"},\"blockGroup(address)\":{\"notice\":\"Marks a group as blocked for voting.\"},\"constructor\":{\"notice\":\"Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized.\"},\"defaultStrategy()\":{\"notice\":\"An instance of the DefaultStrategy contract for the StakedCelo protocol.\"},\"generateDepositVoteDistribution(address,uint256,uint256)\":{\"notice\":\"Generates groups and votes to distribute votes to.\"},\"generateWithdrawalVoteDistribution(address,uint256,uint256,bool)\":{\"notice\":\"Used to withdraw CELO from a specific group that account voted for previously. It is expected that strategy will be balanced. For balancing use `rebalance` function.\"},\"getBlockedGroup(uint256)\":{\"notice\":\"Returns the blocked group at index.\"},\"getNumberOfBlockedGroups()\":{\"notice\":\"Returns the number of blocked groups.\"},\"getNumberOfVotedGroups()\":{\"notice\":\"Returns the number of voted groups.\"},\"getStCeloInGroup(address)\":{\"notice\":\"Returns the specific group total stCELO.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"getVotedGroup(uint256)\":{\"notice\":\"Returns the specific group at index.\"},\"groupHealth()\":{\"notice\":\"An instance of the GroupHealth contract for the StakedCelo protocol.\"},\"initialize(address,address)\":{\"notice\":\"Initialize the contract with registry and owner.\"},\"isBlockedGroup(address)\":{\"notice\":\"Returns if group is blocked.\"},\"isVotedGroup(address)\":{\"notice\":\"Returns if a group is a voted group.\"},\"rebalanceOverflowedGroup(address)\":{\"notice\":\"When there is group that is overflowing and in meantime there are votes that freed up. This function makes sure to reschedule votes correctly for overflowing group.\"},\"rebalanceWhenHealthChanged(address)\":{\"notice\":\"Used when validator gets unhealthy and we need to move funds to default strategy\"},\"setDependencies(address,address,address)\":{\"notice\":\"Set this contract's dependencies in the StakedCelo system.\"},\"setManager(address)\":{\"notice\":\"Sets the manager address.\"},\"stCeloInGroup(address)\":{\"notice\":\"stCELO that was cast for specific group strategies, group => stCELO amount\"},\"totalStCeloLocked()\":{\"notice\":\"Total stCELO that was voted with on specific group strategies (including overflows).\"},\"totalStCeloOverflow()\":{\"notice\":\"Total stCelo that was overflowed to default strategy.\"},\"totalStCeloUnhealthy()\":{\"notice\":\"Total stCelo that is cast for unhealthy groups and was moved to default strategy.\"},\"unblockGroup(address)\":{\"notice\":\"Unblocks previously blocked group.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SpecificGroupStrategy.sol\":\"SpecificGroupStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Managed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Used via inheritance to grant special access control to the Manager\\n * contract.\\n */\\nabstract contract Managed is Initializable, OwnableUpgradeable {\\n    address public manager;\\n\\n    /**\\n     * @notice Emitted when the manager is initially set or later modified.\\n     * @param manager The new managing account address.\\n     */\\n    event ManagerSet(address indexed manager);\\n\\n    /**\\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManager(address caller);\\n\\n    /**\\n     * @notice Used when a passed address is address(0).\\n     */\\n    error NullAddress();\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        if (manager != msg.sender) {\\n            revert CallerNotManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function setManager(address _manager) external onlyOwner {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract in an upgradable context.\\n     * @param _manager The initial managing address.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Managed_init(address _manager) internal onlyInitializing {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function _setManager(address _manager) internal {\\n        if (_manager == address(0)) {\\n            revert NullAddress();\\n        }\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xb378cf0f0b77e80291f24b4320f22d6c4213849bd1d2f854370c79837f1081d6\",\"license\":\"LGPL-3.0-only\"},\"contracts/SpecificGroupStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./common/UUPSOwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/IGroupHealth.sol\\\";\\nimport \\\"./interfaces/IManager.sol\\\";\\nimport \\\"./interfaces/IDefaultStrategy.sol\\\";\\nimport \\\"./Managed.sol\\\";\\n\\n/**\\n * @title SpecificGroupStrategy is responsible for handling any deposit/withdrawal\\n * for accounts with specific strategy selected.\\n */\\ncontract SpecificGroupStrategy is UUPSOwnableUpgradeable, Managed {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Validator groups that is voted for.\\n     */\\n    EnumerableSet.AddressSet private votedGroups;\\n\\n    /**\\n     * @notice Validator groups that were blocked from voting.\\n     */\\n    EnumerableSet.AddressSet private blockedGroups;\\n\\n    /**\\n     * @notice stCELO that was cast for specific group strategies,\\n     * group => stCELO amount\\n     */\\n    mapping(address => uint256) public stCeloInGroup;\\n\\n    /**\\n     * @notice Total stCELO that was voted with on specific group strategies (including overflows).\\n     * @dev To get the actual stCelo in specific strategy\\n     * it is necessary to subtract `totalStCeloOverflow`.\\n     */\\n    uint256 public totalStCeloLocked;\\n\\n    /**\\n     * @notice stCELO that was cast for specific group strategies and overflowed\\n     * to default strategy: group => stCELO amount.\\n     */\\n    mapping(address => uint256) private stCeloInGroupOverflowed;\\n\\n    /**\\n     * @notice Total stCelo that was overflowed to default strategy.\\n     */\\n    uint256 public totalStCeloOverflow;\\n\\n    /**\\n     * @notice stCELO that was cast for specific group strategies that\\n     * became unhealthy and was transfered to default strategy:\\n     * group => stCELO amount.\\n     */\\n    mapping(address => uint256) private stCeloInGroupUnhealthy;\\n\\n    /**\\n     * @notice Total stCelo that is cast for unhealthy groups and was moved to default strategy.\\n     */\\n    uint256 public totalStCeloUnhealthy;\\n\\n    /**\\n     * @notice An instance of the GroupHealth contract for the StakedCelo protocol.\\n     */\\n    IGroupHealth public groupHealth;\\n\\n    /**\\n     * @notice An instance of the DefaultStrategy contract for the StakedCelo protocol.\\n     */\\n    IDefaultStrategy public defaultStrategy;\\n\\n    /**\\n     * @notice An instance of the Account contract for the StakedCelo protocol.\\n     */\\n    IAccount public account;\\n\\n    /**\\n     * @notice Emitted when a group was unblocked.\\n     * @param group The group's address.\\n     */\\n    event GroupUnblocked(address indexed group);\\n\\n    /**\\n     * @notice Emmited when group is blocked.\\n     * @param group The group's address.\\n     */\\n    event GroupBlocked(address group);\\n\\n    /**\\n     * @notice Used when attempting to block a group that is not allowed.\\n     * @param group The group's address.\\n     */\\n    error GroupAlreadyBlocked(address group);\\n\\n    /**\\n     * @notice Used when an attempt to add an specific group to the EnumerableSet\\n     * fails.\\n     * @param group The group's address.\\n     */\\n    error FailedToAddGroup(address group);\\n\\n    /**\\n     * @notice Used when attempting to block a group failed.\\n     * @param group The group's address.\\n     */\\n    error FailedToBlockGroup(address group);\\n\\n    /**\\n     * @notice Used when attempting to unblock a group that is not blocked.\\n     * @param group The group's address.\\n     */\\n    error FailedToUnblockGroup(address group);\\n\\n    /**\\n     * @notice Used when a group does not meet the validator group health requirements.\\n     * @param group The group's address.\\n     */\\n    error GroupNotEligible(address group);\\n\\n    /**\\n     * @notice Used when attempting to pass in address zero where not allowed.\\n     */\\n    error AddressZeroNotAllowed();\\n\\n    /**\\n     * @notice Used when attempting to withdraw from specific group\\n     * but group does not have enough CELO. It is necessary to rebalance the group.\\n     * @param group The group's address.\\n     */\\n    error GroupNotBalanced(address group);\\n\\n    /**\\n     * @notice Used when there isn't enough CELO voting for an account's strategy\\n     * to fulfill a withdrawal.\\n     * @param group The group's address.\\n     */\\n    error CantWithdrawAccordingToStrategy(address group);\\n\\n    /**\\n     * @notice Used when attempting to deposit when there are not active groups\\n     * to vote for.\\n     */\\n    error NoActiveGroups();\\n\\n    /**\\n     * @notice Used when attempting to withdraw but there are no groups being\\n     * voted for.\\n     */\\n    error NoGroups();\\n\\n    /**\\n     * Used when trying to `rebalanceOverflowedGroup` when the group is not overflowing.\\n     * @param group The group address.\\n     */\\n    error GroupNotOverflowing(address group);\\n\\n    /**\\n     * Used when trying to `rebalanceOverflowedGroup` when the overflowing group cannot\\n     * be rebalanced since it has no receivable votes.\\n     * @param group The group address.\\n     */\\n    error GroupStillOverflowing(address group);\\n\\n    /**\\n     * Used when trying to `rebalanceWhenHealthChanged` when the group cannot\\n     * be rebalanced since it is in correct state.\\n     * @param group The group address.\\n     */\\n    error GroupBalanced(address group);\\n\\n    /**\\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\\n     * implementation gets initialized.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() initializer {}\\n\\n    /**\\n     * @notice Initialize the contract with registry and owner.\\n     * @param _owner The address of the contract owner.\\n     * @param _manager The address of the Manager contract.\\n     */\\n    function initialize(address _owner, address _manager) external initializer {\\n        _transferOwnership(_owner);\\n        __Managed_init(_manager);\\n    }\\n\\n    /**\\n     * @notice Set this contract's dependencies in the StakedCelo system.\\n     * @param _account The address of the Account contract.\\n     * @param _groupHealth The address of the GroupHealth contract.\\n     * @param _defaultStrategy The address of the DefaultStrategy contract.\\n     */\\n    function setDependencies(\\n        address _account,\\n        address _groupHealth,\\n        address _defaultStrategy\\n    ) external onlyOwner {\\n        if (\\n            _account == address(0) || _groupHealth == address(0) || _defaultStrategy == address(0)\\n        ) {\\n            revert AddressZeroNotAllowed();\\n        }\\n\\n        account = IAccount(_account);\\n        groupHealth = IGroupHealth(_groupHealth);\\n        defaultStrategy = IDefaultStrategy(_defaultStrategy);\\n    }\\n\\n    /**\\n     * @notice Unblocks previously blocked group.\\n     * @param group The address of the group to add to the set of specific group\\n     * strategies.\\n     */\\n    function unblockGroup(address group) external onlyOwner {\\n        if (!groupHealth.isGroupValid(group)) {\\n            revert GroupNotEligible(group);\\n        }\\n\\n        if (!blockedGroups.remove(group)) {\\n            revert FailedToUnblockGroup(group);\\n        }\\n\\n        emit GroupUnblocked(group);\\n    }\\n\\n    /**\\n     * @notice Marks a group as blocked for voting.\\n     * @param group The group address.\\n     */\\n    function blockGroup(address group) external onlyOwner {\\n        _blockGroup(group);\\n    }\\n\\n    /**\\n     * @notice Used to withdraw CELO from a specific group\\n     * that account voted for previously. It is expected that strategy will be balanced.\\n     * For balancing use `rebalance` function.\\n     * @param group The validator group that we want to withdraw from.\\n     * @param celoWithdrawalAmount The amount of CELO to withdraw.\\n     * @param stCeloWithdrawalAmount The amount of stCELO to withdraw.\\n     * @return groups The groups to withdraw from.\\n     * @return votes The amount to withdraw from each group.\\n     */\\n    function generateWithdrawalVoteDistribution(\\n        address group,\\n        uint256 celoWithdrawalAmount,\\n        uint256 stCeloWithdrawalAmount,\\n        bool isTransfer\\n    ) external onlyManager returns (address[] memory groups, uint256[] memory votes) {\\n        if (votedGroups.length() == 0) {\\n            revert NoGroups();\\n        }\\n\\n        if (stCeloWithdrawalAmount > stCeloInGroup[group]) {\\n            revert CantWithdrawAccordingToStrategy(group);\\n        }\\n\\n        updateGroupStCelo(group, stCeloWithdrawalAmount, false);\\n\\n        uint256 overflowingStCelo = stCeloInGroupOverflowed[group];\\n        uint256 unhealthyStCelo = stCeloInGroupUnhealthy[group];\\n        if (overflowingStCelo > 0 || unhealthyStCelo > 0) {\\n            uint256 celoToBeMovedFromDefaultStrategy = Math.min(\\n                celoWithdrawalAmount,\\n                IManager(manager).toCelo(overflowingStCelo + unhealthyStCelo)\\n            );\\n            celoWithdrawalAmount -= celoToBeMovedFromDefaultStrategy;\\n\\n            (address[] memory overflowGroups, uint256[] memory overflowVotes) = defaultStrategy\\n                .generateWithdrawalVoteDistribution(celoToBeMovedFromDefaultStrategy);\\n\\n            handleWithdrawalOverflowAndUnhealthyAccounting(\\n                group,\\n                celoToBeMovedFromDefaultStrategy,\\n                overflowingStCelo\\n            );\\n\\n            if (celoWithdrawalAmount > 0) {\\n                groups = new address[](overflowGroups.length + 1);\\n                votes = new uint256[](overflowGroups.length + 1);\\n                for (uint256 i = 0; i < overflowGroups.length; i++) {\\n                    groups[i] = overflowGroups[i];\\n                    votes[i] = overflowVotes[i];\\n                }\\n                if (!isTransfer && account.getCeloForGroup(group) < celoWithdrawalAmount) {\\n                    revert GroupNotBalanced(group);\\n                }\\n                groups[overflowGroups.length] = group;\\n                votes[overflowGroups.length] = celoWithdrawalAmount;\\n            } else {\\n                groups = overflowGroups;\\n                votes = overflowVotes;\\n            }\\n        } else {\\n            groups = new address[](1);\\n            votes = new uint256[](1);\\n            groups[0] = group;\\n            votes[0] = celoWithdrawalAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Generates groups and votes to distribute votes to.\\n     * @param group The validator group that we want to deposit to or transfer from.\\n     * @param celoAmount The amount of CELO.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @return finalGroups The groups to withdraw from.\\n     * @return finalVotes The amount to withdraw from each group.\\n     */\\n    function generateDepositVoteDistribution(\\n        address group,\\n        uint256 celoAmount,\\n        uint256 stCeloAmount\\n    ) external onlyManager returns (address[] memory finalGroups, uint256[] memory finalVotes) {\\n        votedGroups.add(group);\\n        updateGroupStCelo(group, stCeloAmount, true);\\n\\n        if (groupHealth.isGroupValid(group) && !blockedGroups.contains(group)) {\\n            uint256 receivableVotes = IManager(manager).getReceivableVotesForGroup(group);\\n            uint256 votesToBeScheduledForSpecificGroup = Math.min(receivableVotes, celoAmount);\\n\\n            celoAmount -= votesToBeScheduledForSpecificGroup;\\n            if (celoAmount > 0) {\\n                // overflow\\n                (address[] memory groups, uint256[] memory votesForGroups) = defaultStrategy\\n                    .generateDepositVoteDistribution(celoAmount, group);\\n                updateOverflowGroup(group, IManager(manager).toStakedCelo(celoAmount), true);\\n                finalGroups = new address[](groups.length + 1);\\n                finalVotes = new uint256[](groups.length + 1);\\n                for (uint256 i = 0; i < groups.length; i++) {\\n                    finalGroups[i] = groups[i];\\n                    finalVotes[i] = votesForGroups[i];\\n                }\\n                finalGroups[groups.length] = group;\\n                finalVotes[groups.length] = votesToBeScheduledForSpecificGroup;\\n            } else {\\n                finalGroups = new address[](1);\\n                finalVotes = new uint256[](1);\\n                finalGroups[0] = group;\\n                finalVotes[0] = votesToBeScheduledForSpecificGroup;\\n            }\\n        } else {\\n            (finalGroups, finalVotes) = defaultStrategy.generateDepositVoteDistribution(\\n                celoAmount,\\n                group\\n            );\\n            updateUnhealthyGroupStCelo(group, stCeloAmount, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Used when validator gets unhealthy and we need to move funds to default strategy\\n     * @param group The group address.\\n     */\\n    function rebalanceWhenHealthChanged(address group) external {\\n        bool isGroupValid = groupHealth.isGroupValid(group);\\n        uint256 unhealthyStCelo = stCeloInGroupUnhealthy[group];\\n\\n        if (isGroupValid && !blockedGroups.contains(group)) {\\n            if (unhealthyStCelo == 0) {\\n                revert GroupBalanced(group);\\n            }\\n            uint256 toMove = unhealthyStCelo;\\n\\n            transferFromDefaultStrategy(group, toMove);\\n            updateUnhealthyGroupStCelo(group, toMove, false);\\n        } else {\\n            uint256 totalStCeloInGroup = stCeloInGroup[group];\\n            if (totalStCeloInGroup == unhealthyStCelo) {\\n                revert GroupBalanced(group);\\n            }\\n\\n            if (defaultStrategy.getNumberOfGroups() == 0) {\\n                revert NoActiveGroups();\\n            }\\n\\n            uint256 overflow = stCeloInGroupOverflowed[group];\\n            uint256 toMove = totalStCeloInGroup - unhealthyStCelo - overflow;\\n\\n            transferToDefaultStrategy(group, toMove);\\n            updateUnhealthyGroupStCelo(group, toMove, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns if a group is a voted group.\\n     * @param group The validator group.\\n     * @return Whether or not is group is voted.\\n     */\\n    function isVotedGroup(address group) external view returns (bool) {\\n        return votedGroups.contains(group);\\n    }\\n\\n    /**\\n     * @notice Returns if group is blocked.\\n     * @param group The validator group.\\n     * @return Whether or not group is blocked.\\n     */\\n    function isBlockedGroup(address group) external view returns (bool) {\\n        return blockedGroups.contains(group);\\n    }\\n\\n    /**\\n     * @notice Returns the number of blocked groups.\\n     * @return The length of blocked groups.\\n     */\\n    function getNumberOfBlockedGroups() external view returns (uint256) {\\n        return blockedGroups.length();\\n    }\\n\\n    /**\\n     * @notice Returns the blocked group at index.\\n     * @return The blocked group.\\n     */\\n    function getBlockedGroup(uint256 index) external view returns (address) {\\n        return blockedGroups.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the number of voted groups.\\n     * @return The length of voted groups.\\n     */\\n    function getNumberOfVotedGroups() external view returns (uint256) {\\n        return votedGroups.length();\\n    }\\n\\n    /**\\n     * @notice Returns the specific group at index.\\n     * @return The specific group.\\n     */\\n    function getVotedGroup(uint256 index) external view returns (address) {\\n        return votedGroups.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 1, 0, 0);\\n    }\\n\\n    /**\\n     * @notice When there is group that is overflowing and\\n     * in meantime there are votes that freed up. This function\\n     * makes sure to reschedule votes correctly for overflowing group.\\n     * @param group The group address.\\n     */\\n    function rebalanceOverflowedGroup(address group) public {\\n        if (!groupHealth.isGroupValid(group) || blockedGroups.contains(group)) {\\n            revert GroupNotEligible(group);\\n        }\\n\\n        uint256 overflowingStCelo = stCeloInGroupOverflowed[group];\\n        if (overflowingStCelo == 0) {\\n            revert GroupNotOverflowing(group);\\n        }\\n\\n        uint256 receivableVotes = IManager(manager).getReceivableVotesForGroup(group);\\n        if (receivableVotes == 0) {\\n            revert GroupStillOverflowing(group);\\n        }\\n\\n        uint256 receivableStCelo = IManager(manager).toStakedCelo(receivableVotes);\\n        uint256 toMove = Math.min(receivableStCelo, overflowingStCelo);\\n        transferFromDefaultStrategy(group, toMove);\\n        updateOverflowGroup(group, toMove, false);\\n    }\\n\\n    /**\\n     * @notice Returns the specific group total stCELO.\\n     * @return total The total stCELO amount.\\n     * @return overflow The stCELO amount that is overflowed to default strategy.\\n     * @return unhealthy The stCELO amount that is moved to default strategy\\n     * because group is/was unhealthy.\\n     */\\n    function getStCeloInGroup(address group)\\n        public\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 overflow,\\n            uint256 unhealthy\\n        )\\n    {\\n        total = stCeloInGroup[group];\\n        overflow = stCeloInGroupOverflowed[group];\\n        unhealthy = stCeloInGroupUnhealthy[group];\\n    }\\n\\n    /**\\n     * @notice Adds/substracts value to totals of strategy and\\n     * total stCELO in specific group.\\n     * @param group The validator group that we are updating.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @param add Whether to add or substract.\\n     */\\n    function updateGroupStCelo(\\n        address group,\\n        uint256 stCeloAmount,\\n        bool add\\n    ) internal {\\n        if (add) {\\n            stCeloInGroup[group] += stCeloAmount;\\n            totalStCeloLocked += stCeloAmount;\\n        } else {\\n            stCeloInGroup[group] -= stCeloAmount;\\n            totalStCeloLocked -= stCeloAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds/substracts value to unhealthy totals of strategy and\\n     * unhealthy total stCELO in specific group.\\n     * @param group The validator group that we are updating.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @param add Whether to add or substract.\\n     */\\n    function updateUnhealthyGroupStCelo(\\n        address group,\\n        uint256 stCeloAmount,\\n        bool add\\n    ) internal {\\n        if (add) {\\n            stCeloInGroupUnhealthy[group] += stCeloAmount;\\n            totalStCeloUnhealthy += stCeloAmount;\\n        } else {\\n            stCeloInGroupUnhealthy[group] -= stCeloAmount;\\n            totalStCeloUnhealthy -= stCeloAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates overflow stCELO amount of group.\\n     * @param group The group that is overflowing.\\n     * @param stCeloAmount The stCELO amount.\\n     * @param add Whether to add or subtract stCELO amount.\\n     */\\n    function updateOverflowGroup(\\n        address group,\\n        uint256 stCeloAmount,\\n        bool add\\n    ) private {\\n        if (add) {\\n            stCeloInGroupOverflowed[group] += stCeloAmount;\\n            totalStCeloOverflow += stCeloAmount;\\n        } else {\\n            stCeloInGroupOverflowed[group] -= stCeloAmount;\\n            totalStCeloOverflow -= stCeloAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Blocks a group from being added as voted group.\\n     * @param group The group address.\\n     */\\n    function _blockGroup(address group) private {\\n        if (defaultStrategy.getNumberOfGroups() == 0) {\\n            revert NoActiveGroups();\\n        }\\n\\n        if (blockedGroups.contains(group)) {\\n            revert GroupAlreadyBlocked(group);\\n        }\\n\\n        blockedGroups.add(group);\\n\\n        emit GroupBlocked(group);\\n    }\\n\\n    /**\\n     * Transfers stCelo to default strategy without updating accounting in specific group.\\n     * @param group The group addres.\\n     * @param stCeloToMove StCelo amount to be moved.\\n     */\\n    function transferToDefaultStrategy(address group, uint256 stCeloToMove) private {\\n        uint256 toMoveCelo = IManager(manager).toCelo(stCeloToMove);\\n        address[] memory fromGroups = new address[](1);\\n        uint256[] memory fromVotes = new uint256[](1);\\n        fromGroups[0] = group;\\n        fromVotes[0] = toMoveCelo;\\n        (address[] memory toGroups, uint256[] memory toVotes) = defaultStrategy\\n            .generateDepositVoteDistribution(toMoveCelo, address(0));\\n        IManager(manager).scheduleTransferWithinStrategy(fromGroups, toGroups, fromVotes, toVotes);\\n    }\\n\\n    /**\\n     * Transfers stCelo from default strategy without updating accounting in specific group.\\n     * @param group The group addres.\\n     * @param stCeloToMove StCELO amount to be moved.\\n     */\\n    function transferFromDefaultStrategy(address group, uint256 stCeloToMove) private {\\n        uint256 toMoveCelo = IManager(manager).toCelo(stCeloToMove);\\n        (address[] memory fromGroups, uint256[] memory fromVotes) = defaultStrategy\\n            .generateWithdrawalVoteDistribution(toMoveCelo);\\n        address[] memory toGroups = new address[](1);\\n        uint256[] memory toVotes = new uint256[](1);\\n        toGroups[0] = group;\\n        toVotes[0] = toMoveCelo;\\n        IManager(manager).scheduleTransferWithinStrategy(fromGroups, toGroups, fromVotes, toVotes);\\n    }\\n\\n    /**\\n     * Handles accounting when group is overflowing/unhelthy during withdrawal.\\n     * @param group The group address.\\n     * @param celoToBeMovedFromDefaultStrategy The celo that is being moved from default strategy.\\n     * @param overflowingStCelo StCELO amount that is overflowing.\\n     */\\n    function handleWithdrawalOverflowAndUnhealthyAccounting(\\n        address group,\\n        uint256 celoToBeMovedFromDefaultStrategy,\\n        uint256 overflowingStCelo\\n    ) private {\\n        uint256 stCeloToBeMoved = IManager(manager).toStakedCelo(celoToBeMovedFromDefaultStrategy);\\n        uint256 subtractedFromOveflow = Math.min(overflowingStCelo, stCeloToBeMoved);\\n        if (subtractedFromOveflow > 0) {\\n            updateOverflowGroup(group, subtractedFromOveflow, false);\\n        }\\n        uint256 subtracteddFromUnHealthy = stCeloToBeMoved - subtractedFromOveflow;\\n        if (subtracteddFromUnHealthy > 0) {\\n            updateUnhealthyGroupStCelo(group, subtracteddFromUnHealthy, false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8142d3764e456e926a06fc70ff770dc9206373e71540f2bc52b3643e8d60a9f9\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UUPSOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\\n */\\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\\n    /**\\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\\n     * adds the onlyOwner modifer.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x5dbad350c6ae75b9d15c2080b1de6f02d8b7f32a71a6bcf775c9731820d115ec\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccount {\\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\\n\\n    function scheduleTransfer(\\n        address[] calldata fromGroups,\\n        uint256[] calldata fromVotes,\\n        address[] calldata toGroups,\\n        uint256[] calldata toVotess\\n    ) external;\\n\\n    function scheduleWithdrawals(\\n        address beneficiary,\\n        address[] calldata group,\\n        uint256[] calldata withdrawals\\n    ) external;\\n\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external;\\n\\n    function getTotalCelo() external view returns (uint256);\\n\\n    function getCeloForGroup(address) external view returns (uint256);\\n\\n    function scheduledVotesForGroup(address group) external view returns (uint256);\\n\\n    function scheduledRevokeForGroup(address group) external view returns (uint256);\\n\\n    function scheduledWithdrawalsForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x88cffcc9e6200c2ce1e6ecca97ddde0abde976268314bcd7da451d1fc104c44f\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IDefaultStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IDefaultStrategy {\\n    function generateDepositVoteDistribution(uint256 celoAmount, address depositGroupToIgnore)\\n        external\\n        returns (address[] memory finalGroups, uint256[] memory finalVotes);\\n\\n    function generateWithdrawalVoteDistribution(uint256 celoAmount)\\n        external\\n        returns (address[] memory finalGroups, uint256[] memory finalVotes);\\n\\n    function activateGroup(address group) external;\\n\\n    function isActive(address group) external view returns (bool);\\n\\n    function getNumberOfGroups() external view returns (uint256);\\n\\n    function stCeloInGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x66b2e7ab382f5aaa507c9cf5e64de42849669933cf189537bfb263731bb7a55b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGroupHealth.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGroupHealth {\\n    function isGroupValid(address group) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb38a5b01fae32670a6727bef4d74f88b19e3d6b6dd2bd9e5c9142b2c0d11a400\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IManager {\\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\\n        external\\n        returns (uint256);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function scheduleTransferWithinStrategy(\\n        address[] calldata fromGroups,\\n        address[] calldata toGroups,\\n        uint256[] calldata fromVotes,\\n        uint256[] calldata toVotes\\n    ) external;\\n\\n    function toCelo(uint256 stCeloAmount) external view returns (uint256);\\n\\n    function toStakedCelo(uint256 celoAmount) external view returns (uint256);\\n\\n    function getReceivableVotesForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae2e3dc80238a25d5d402dbb696c5c78445a6e9ac2676b0c25e33a45c7fbbbeb\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50600060019054906101000a900460ff166200006f5760008054906101000a900460ff161562000080565b6200007f6200013c60201b60201c565b5b620000c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b99062000204565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000113576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620001355760008060016101000a81548160ff0219169083151502179055505b5062000226565b600062000154306200015a60201b6200293c1760201c565b15905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000620001ec602e836200017d565b9150620001f9826200018e565b604082019050919050565b600060208201905081810360008301526200021f81620001dd565b9050919050565b60805161513e62000257600039600081816107ce0152818161085d01528181610a920152610b21015261513e6000f3fe6080604052600436106101cd5760003560e01c806385a92cb7116100f7578063cd15285811610095578063f8649e7511610064578063f8649e7514610694578063fac5bb9b146106bf578063fea4765b146106ea578063ff0b583014610715576101cd565b8063cd152858146105db578063d00a5bf814610619578063d0ebdbe714610642578063f2fde38b1461066b576101cd565b8063a3f16ef1116100d1578063a3f16ef11461051f578063b27053291461054a578063b52d326c14610575578063cc222f8d1461059e576101cd565b806385a92cb71461048c5780638ceaa3fe146104c95780638da5cb5b146104f4576101cd565b806354255be01161016f5780636253d7921161013e5780636253d792146103d257806366442085146103fb578063715018a614610438578063843c7a8b1461044f576101cd565b806354255be0146102fc57806356ab819f1461032a5780635c650b5f146103695780635dab2420146103a7576101cd565b8063481c6a75116101ab578063481c6a751461024f578063485cc9551461027a5780634a1376b6146102a35780634f1ef286146102e0576101cd565b806328419796146101d257806332ce1ab4146101fd5780633659cfe614610226575b600080fd5b3480156101de57600080fd5b506101e761073e565b6040516101f49190613ea8565b60405180910390f35b34801561020957600080fd5b50610224600480360381019061021f9190613f35565b610744565b005b34801561023257600080fd5b5061024d60048036038101906102489190613f35565b6107cc565b005b34801561025b57600080fd5b50610264610955565b6040516102719190613f71565b60405180910390f35b34801561028657600080fd5b506102a1600480360381019061029c9190613f8c565b61097b565b005b3480156102af57600080fd5b506102ca60048036038101906102c59190613ff8565b610a73565b6040516102d79190613f71565b60405180910390f35b6102fa60048036038101906102f5919061416b565b610a90565b005b34801561030857600080fd5b50610311610bcd565b60405161032194939291906141c7565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c9190613f35565b610be7565b6040516103609392919061420c565b60405180910390f35b34801561037557600080fd5b50610390600480360381019061038b919061427b565b610cb9565b60405161039e92919061445e565b60405180910390f35b3480156103b357600080fd5b506103bc611432565b6040516103c991906144f4565b60405180910390f35b3480156103de57600080fd5b506103f960048036038101906103f49190613f35565b611458565b005b34801561040757600080fd5b50610422600480360381019061041d9190613f35565b61178d565b60405161042f919061451e565b60405180910390f35b34801561044457600080fd5b5061044d6117aa565b005b34801561045b57600080fd5b5061047660048036038101906104719190613ff8565b611832565b6040516104839190613f71565b60405180910390f35b34801561049857600080fd5b506104b360048036038101906104ae9190613f35565b61184f565b6040516104c09190613ea8565b60405180910390f35b3480156104d557600080fd5b506104de611867565b6040516104eb9190613ea8565b60405180910390f35b34801561050057600080fd5b5061050961186d565b6040516105169190613f71565b60405180910390f35b34801561052b57600080fd5b50610534611897565b604051610541919061455a565b60405180910390f35b34801561055657600080fd5b5061055f6118bd565b60405161056c9190613ea8565b60405180910390f35b34801561058157600080fd5b5061059c60048036038101906105979190614575565b6118c3565b005b3480156105aa57600080fd5b506105c560048036038101906105c09190613f35565b611adc565b6040516105d2919061451e565b60405180910390f35b3480156105e757600080fd5b5061060260048036038101906105fd91906145c8565b611af9565b60405161061092919061445e565b60405180910390f35b34801561062557600080fd5b50610640600480360381019061063b9190613f35565b612240565b005b34801561064e57600080fd5b5061066960048036038101906106649190613f35565b612580565b005b34801561067757600080fd5b50610692600480360381019061068d9190613f35565b612608565b005b3480156106a057600080fd5b506106a9612700565b6040516106b69190613ea8565b60405180910390f35b3480156106cb57600080fd5b506106d4612711565b6040516106e1919061463c565b60405180910390f35b3480156106f657600080fd5b506106ff612737565b60405161070c9190613ea8565b60405180910390f35b34801561072157600080fd5b5061073c60048036038101906107379190613f35565b612748565b005b606f5481565b61074c61295f565b73ffffffffffffffffffffffffffffffffffffffff1661076a61186d565b73ffffffffffffffffffffffffffffffffffffffff16146107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b7906146b4565b60405180910390fd5b6107c981612967565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16141561085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290614746565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661089a612ad7565b73ffffffffffffffffffffffffffffffffffffffff16146108f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e7906147d8565b60405180910390fd5b6108f981612b2e565b61095281600067ffffffffffffffff81111561091857610917614040565b5b6040519080825280601f01601f19166020018201604052801561094a5781602001600182028036833780820191505090505b506000612bad565b50565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff166109a35760008054906101000a900460ff16156109ac565b6109ab612d7e565b5b6109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e29061486a565b60405180910390fd5b60008060019054906101000a900460ff161590508015610a3b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610a4483612d8f565b610a4d82612e55565b8015610a6e5760008060016101000a81548160ff0219169083151502179055505b505050565b6000610a89826068612eb090919063ffffffff16565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1690614746565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610b5e612ad7565b73ffffffffffffffffffffffffffffffffffffffff1614610bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bab906147d8565b60405180910390fd5b610bbd82612b2e565b610bc982826001612bad565b5050565b600080600080600180600080935093509350935090919293565b6000806000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509193909250565b6060803373ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d4e57336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401610d459190613f71565b60405180910390fd5b6000610d5a6066612eca565b1415610d92576040517f377b56d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115610e1657856040517f0d438664000000000000000000000000000000000000000000000000000000008152600401610e0d9190613f71565b60405180910390fd5b610e2286856000612edf565b6000606c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000606e60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000821180610eb95750600081115b1561131e576000610f7088606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f8587610f0e91906148b9565b6040518263ffffffff1660e01b8152600401610f2a9190613ea8565b602060405180830381865afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190614924565b612fce565b90508088610f7e9190614951565b9750600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336691a41846040518263ffffffff1660e01b8152600401610fde9190613ea8565b6000604051808303816000875af1158015610ffd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110269190614b25565b915091506110358b8487612fe7565b60008a111561130f576001825161104c91906148b9565b67ffffffffffffffff81111561106557611064614040565b5b6040519080825280602002602001820160405280156110935781602001602082028036833780820191505090505b509650600182516110a491906148b9565b67ffffffffffffffff8111156110bd576110bc614040565b5b6040519080825280602002602001820160405280156110eb5781602001602082028036833780820191505090505b50955060005b82518110156111af5782818151811061110d5761110c614b9d565b5b602002602001015188828151811061112857611127614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081818151811061117557611174614b9d565b5b60200260200101518782815181106111905761118f614b9d565b5b60200260200101818152505080806111a790614bcc565b9150506110f1565b5087158015611258575089607260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acd201d08d6040518263ffffffff1660e01b81526004016112159190613f71565b602060405180830381865afa158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112569190614924565b105b1561129a578a6040517f339102f10000000000000000000000000000000000000000000000000000000081526004016112919190613f71565b60405180910390fd5b8a878351815181106112af576112ae614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505089868351815181106112fe576112fd614b9d565b5b602002602001018181525050611316565b8196508095505b505050611427565b600167ffffffffffffffff81111561133957611338614040565b5b6040519080825280602002602001820160405280156113675781602001602082028036833780820191505090505b509350600167ffffffffffffffff81111561138557611384614040565b5b6040519080825280602002602001820160405280156113b35781602001602082028036833780820191505090505b50925087846000815181106113cb576113ca614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050868360008151811061141a57611419614b9d565b5b6020026020010181815250505b505094509492505050565b607260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b81526004016114b39190613f71565b602060405180830381865afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190614c2a565b1580611510575061150f8160686130d990919063ffffffff16565b5b1561155257806040517f10a7bc6b0000000000000000000000000000000000000000000000000000000081526004016115499190613f71565b60405180910390fd5b6000606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156115dc57816040517f08015b240000000000000000000000000000000000000000000000000000000081526004016115d39190613f71565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058846040518263ffffffff1660e01b81526004016116399190613f71565b602060405180830381865afa158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a9190614924565b905060008114156116c257826040517feeec2b540000000000000000000000000000000000000000000000000000000081526004016116b99190613f71565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e836040518263ffffffff1660e01b815260040161171f9190613ea8565b602060405180830381865afa15801561173c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117609190614924565b9050600061176e8285612fce565b905061177a8582613109565b611786858260006133fb565b5050505050565b60006117a38260666130d990919063ffffffff16565b9050919050565b6117b261295f565b73ffffffffffffffffffffffffffffffffffffffff166117d061186d565b73ffffffffffffffffffffffffffffffffffffffff1614611826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181d906146b4565b60405180910390fd5b6118306000612d8f565b565b6000611848826066612eb090919063ffffffff16565b9050919050565b606a6020528060005260406000206000915090505481565b606b5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606d5481565b6118cb61295f565b73ffffffffffffffffffffffffffffffffffffffff166118e961186d565b73ffffffffffffffffffffffffffffffffffffffff161461193f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611936906146b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806119a65750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806119dd5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15611a14576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82607260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080607160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000611af28260686130d990919063ffffffff16565b9050919050565b6060803373ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b8e57336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401611b859190613f71565b60405180910390fd5b611ba28560666134ea90919063ffffffff16565b50611baf85846001612edf565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425866040518263ffffffff1660e01b8152600401611c0a9190613f71565b602060405180830381865afa158015611c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4b9190614c2a565b8015611c685750611c668560686130d990919063ffffffff16565b155b1561217e576000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058876040518263ffffffff1660e01b8152600401611cca9190613f71565b602060405180830381865afa158015611ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0b9190614924565b90506000611d198287612fce565b90508086611d279190614951565b9550600086111561206e57600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d27898b6040518363ffffffff1660e01b8152600401611d92929190614c57565b6000604051808303816000875af1158015611db1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611dda9190614b25565b91509150611e8589606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e8b6040518263ffffffff1660e01b8152600401611e3d9190613ea8565b602060405180830381865afa158015611e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7e9190614924565b60016133fb565b60018251611e9391906148b9565b67ffffffffffffffff811115611eac57611eab614040565b5b604051908082528060200260200182016040528015611eda5781602001602082028036833780820191505090505b50955060018251611eeb91906148b9565b67ffffffffffffffff811115611f0457611f03614040565b5b604051908082528060200260200182016040528015611f325781602001602082028036833780820191505090505b50945060005b8251811015611ff657828181518110611f5457611f53614b9d565b5b6020026020010151878281518110611f6f57611f6e614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818181518110611fbc57611fbb614b9d565b5b6020026020010151868281518110611fd757611fd6614b9d565b5b6020026020010181815250508080611fee90614bcc565b915050611f38565b50888683518151811061200c5761200b614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828583518151811061205b5761205a614b9d565b5b6020026020010181815250505050612177565b600167ffffffffffffffff81111561208957612088614040565b5b6040519080825280602002602001820160405280156120b75781602001602082028036833780820191505090505b509350600167ffffffffffffffff8111156120d5576120d4614040565b5b6040519080825280602002602001820160405280156121035781602001602082028036833780820191505090505b509250868460008151811061211b5761211a614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808360008151811061216a57612169614b9d565b5b6020026020010181815250505b5050612238565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d2785876040518363ffffffff1660e01b81526004016121db929190614c57565b6000604051808303816000875af11580156121fa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122239190614b25565b80925081935050506122378584600161351a565b5b935093915050565b6000607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425836040518263ffffffff1660e01b815260040161229d9190613f71565b602060405180830381865afa1580156122ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122de9190614c2a565b90506000606e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081801561234257506123408360686130d990919063ffffffff16565b155b156123ae57600081141561238d57826040517f9bd3a6600000000000000000000000000000000000000000000000000000000081526004016123849190613f71565b60405180910390fd5b600081905061239c8482613109565b6123a88482600061351a565b5061257b565b6000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181141561243757836040517f9bd3a66000000000000000000000000000000000000000000000000000000000815260040161242e9190613f71565b60405180910390fd5b6000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1fa411a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ca9190614924565b1415612502576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008184846125559190614951565b61255f9190614951565b905061256b8682613609565b6125778682600161351a565b5050505b505050565b61258861295f565b73ffffffffffffffffffffffffffffffffffffffff166125a661186d565b73ffffffffffffffffffffffffffffffffffffffff16146125fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f3906146b4565b60405180910390fd5b612605816138fe565b50565b61261061295f565b73ffffffffffffffffffffffffffffffffffffffff1661262e61186d565b73ffffffffffffffffffffffffffffffffffffffff1614612684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267b906146b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126eb90614cf2565b60405180910390fd5b6126fd81612d8f565b50565b600061270c6066612eca565b905090565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006127436068612eca565b905090565b61275061295f565b73ffffffffffffffffffffffffffffffffffffffff1661276e61186d565b73ffffffffffffffffffffffffffffffffffffffff16146127c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127bb906146b4565b60405180910390fd5b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b815260040161281f9190613f71565b602060405180830381865afa15801561283c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128609190614c2a565b6128a157806040517f10a7bc6b0000000000000000000000000000000000000000000000000000000081526004016128989190613f71565b60405180910390fd5b6128b58160686139ec90919063ffffffff16565b6128f657806040517fe9b829ba0000000000000000000000000000000000000000000000000000000081526004016128ed9190613f71565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167f7fab4241c447cd1e7af48ab4c6bbeab72a3836e47ed68c58b78b399531a5cd6c60405160405180910390a250565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1fa411a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fa9190614924565b1415612a32576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612a468160686130d990919063ffffffff16565b15612a8857806040517fe09c4db2000000000000000000000000000000000000000000000000000000008152600401612a7f9190613f71565b60405180910390fd5b612a9c8160686134ea90919063ffffffff16565b507f65aef4c8071073180f00fde0e2179949872e90b7003d3b2a22d7bc182d2cc88681604051612acc9190613f71565b60405180910390a150565b6000612b057f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613a1c565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612b3661295f565b73ffffffffffffffffffffffffffffffffffffffff16612b5461186d565b73ffffffffffffffffffffffffffffffffffffffff1614612baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ba1906146b4565b60405180910390fd5b50565b6000612bb7612ad7565b9050612bc284613a26565b600083511180612bcf5750815b15612be057612bde8484613adf565b505b6000612c0e7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b613b0c565b90508060000160009054906101000a900460ff16612d775760018160000160006101000a81548160ff021916908315150217905550612cda8583604051602401612c589190613f71565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613adf565b5060008160000160006101000a81548160ff021916908315150217905550612d00612ad7565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6490614d84565b60405180910390fd5b612d7685613b16565b5b5050505050565b6000612d893061293c565b15905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16612ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9b90614e16565b60405180910390fd5b612ead816138fe565b50565b6000612ebf8360000183613b65565b60001c905092915050565b6000612ed882600001613b90565b9050919050565b8015612f595781606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f3491906148b9565b9250508190555081606b6000828254612f4d91906148b9565b92505081905550612fc9565b81606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fa89190614951565b9250508190555081606b6000828254612fc19190614951565b925050819055505b505050565b6000818310612fdd5781612fdf565b825b905092915050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e846040518263ffffffff1660e01b81526004016130449190613ea8565b602060405180830381865afa158015613061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130859190614924565b905060006130938383612fce565b905060008111156130ab576130aa858260006133fb565b5b600081836130b99190614951565b905060008111156130d1576130d08682600061351a565b5b505050505050565b6000613101836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613ba1565b905092915050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f836040518263ffffffff1660e01b81526004016131669190613ea8565b602060405180830381865afa158015613183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a79190614924565b9050600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336691a41846040518263ffffffff1660e01b81526004016132079190613ea8565b6000604051808303816000875af1158015613226573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061324f9190614b25565b915091506000600167ffffffffffffffff8111156132705761326f614040565b5b60405190808252806020026020018201604052801561329e5781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff8111156132be576132bd614040565b5b6040519080825280602002602001820160405280156132ec5781602001602082028036833780820191505090505b509050868260008151811061330457613303614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050848160008151811061335357613352614b9d565b5b602002602001018181525050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c4d4e40858486856040518563ffffffff1660e01b81526004016133c09493929190614e36565b600060405180830381600087803b1580156133da57600080fd5b505af11580156133ee573d6000803e3d6000fd5b5050505050505050505050565b80156134755781606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461345091906148b9565b9250508190555081606d600082825461346991906148b9565b925050819055506134e5565b81606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546134c49190614951565b9250508190555081606d60008282546134dd9190614951565b925050819055505b505050565b6000613512836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613bc4565b905092915050565b80156135945781606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461356f91906148b9565b9250508190555081606f600082825461358891906148b9565b92505081905550613604565b81606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135e39190614951565b9250508190555081606f60008282546135fc9190614951565b925050819055505b505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f836040518263ffffffff1660e01b81526004016136669190613ea8565b602060405180830381865afa158015613683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a79190614924565b90506000600167ffffffffffffffff8111156136c6576136c5614040565b5b6040519080825280602002602001820160405280156136f45781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff81111561371457613713614040565b5b6040519080825280602002602001820160405280156137425781602001602082028036833780820191505090505b509050848260008151811061375a57613759614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816000815181106137a9576137a8614b9d565b5b602002602001018181525050600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d278660006040518363ffffffff1660e01b8152600401613816929190614c57565b6000604051808303816000875af1158015613835573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061385e9190614b25565b91509150606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c4d4e40858486856040518563ffffffff1660e01b81526004016138c39493929190614e36565b600060405180830381600087803b1580156138dd57600080fd5b505af11580156138f1573d6000803e3d6000fd5b5050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613965576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b6000613a14836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613c34565b905092915050565b6000819050919050565b613a2f81613d48565b613a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a6590614f09565b60405180910390fd5b80613a9b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613a1c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060613b0483836040518060600160405280602781526020016150e260279139613d5b565b905092915050565b6000819050919050565b613b1f81613a26565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6000826000018281548110613b7d57613b7c614b9d565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6000613bd08383613ba1565b613c29578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050613c2e565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114613d3c576000600182613c669190614951565b9050600060018660000180549050613c7e9190614951565b9050818114613ced576000866000018281548110613c9f57613c9e614b9d565b5b9060005260206000200154905080876000018481548110613cc357613cc2614b9d565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613d0157613d00614f29565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613d42565b60009150505b92915050565b600080823b905060008111915050919050565b6060613d6684613d48565b613da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d9c90614fca565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051613dcd9190615064565b600060405180830381855af49150503d8060008114613e08576040519150601f19603f3d011682016040523d82523d6000602084013e613e0d565b606091505b5091509150613e1d828286613e28565b925050509392505050565b60608315613e3857829050613e88565b600083511115613e4b5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e7f91906150bf565b60405180910390fd5b9392505050565b6000819050919050565b613ea281613e8f565b82525050565b6000602082019050613ebd6000830184613e99565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613f0282613ed7565b9050919050565b613f1281613ef7565b8114613f1d57600080fd5b50565b600081359050613f2f81613f09565b92915050565b600060208284031215613f4b57613f4a613ecd565b5b6000613f5984828501613f20565b91505092915050565b613f6b81613ef7565b82525050565b6000602082019050613f866000830184613f62565b92915050565b60008060408385031215613fa357613fa2613ecd565b5b6000613fb185828601613f20565b9250506020613fc285828601613f20565b9150509250929050565b613fd581613e8f565b8114613fe057600080fd5b50565b600081359050613ff281613fcc565b92915050565b60006020828403121561400e5761400d613ecd565b5b600061401c84828501613fe3565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6140788261402f565b810181811067ffffffffffffffff8211171561409757614096614040565b5b80604052505050565b60006140aa613ec3565b90506140b6828261406f565b919050565b600067ffffffffffffffff8211156140d6576140d5614040565b5b6140df8261402f565b9050602081019050919050565b82818337600083830152505050565b600061410e614109846140bb565b6140a0565b90508281526020810184848401111561412a5761412961402a565b5b6141358482856140ec565b509392505050565b600082601f83011261415257614151614025565b5b81356141628482602086016140fb565b91505092915050565b6000806040838503121561418257614181613ecd565b5b600061419085828601613f20565b925050602083013567ffffffffffffffff8111156141b1576141b0613ed2565b5b6141bd8582860161413d565b9150509250929050565b60006080820190506141dc6000830187613e99565b6141e96020830186613e99565b6141f66040830185613e99565b6142036060830184613e99565b95945050505050565b60006060820190506142216000830186613e99565b61422e6020830185613e99565b61423b6040830184613e99565b949350505050565b60008115159050919050565b61425881614243565b811461426357600080fd5b50565b6000813590506142758161424f565b92915050565b6000806000806080858703121561429557614294613ecd565b5b60006142a387828801613f20565b94505060206142b487828801613fe3565b93505060406142c587828801613fe3565b92505060606142d687828801614266565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61431781613ef7565b82525050565b6000614329838361430e565b60208301905092915050565b6000602082019050919050565b600061434d826142e2565b61435781856142ed565b9350614362836142fe565b8060005b8381101561439357815161437a888261431d565b975061438583614335565b925050600181019050614366565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6143d581613e8f565b82525050565b60006143e783836143cc565b60208301905092915050565b6000602082019050919050565b600061440b826143a0565b61441581856143ab565b9350614420836143bc565b8060005b8381101561445157815161443888826143db565b9750614443836143f3565b925050600181019050614424565b5085935050505092915050565b600060408201905081810360008301526144788185614342565b9050818103602083015261448c8184614400565b90509392505050565b6000819050919050565b60006144ba6144b56144b084613ed7565b614495565b613ed7565b9050919050565b60006144cc8261449f565b9050919050565b60006144de826144c1565b9050919050565b6144ee816144d3565b82525050565b600060208201905061450960008301846144e5565b92915050565b61451881614243565b82525050565b6000602082019050614533600083018461450f565b92915050565b6000614544826144c1565b9050919050565b61455481614539565b82525050565b600060208201905061456f600083018461454b565b92915050565b60008060006060848603121561458e5761458d613ecd565b5b600061459c86828701613f20565b93505060206145ad86828701613f20565b92505060406145be86828701613f20565b9150509250925092565b6000806000606084860312156145e1576145e0613ecd565b5b60006145ef86828701613f20565b935050602061460086828701613fe3565b925050604061461186828701613fe3565b9150509250925092565b6000614626826144c1565b9050919050565b6146368161461b565b82525050565b6000602082019050614651600083018461462d565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061469e602083614657565b91506146a982614668565b602082019050919050565b600060208201905081810360008301526146cd81614691565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000614730602c83614657565b915061473b826146d4565b604082019050919050565b6000602082019050818103600083015261475f81614723565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006147c2602c83614657565b91506147cd82614766565b604082019050919050565b600060208201905081810360008301526147f1816147b5565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614854602e83614657565b915061485f826147f8565b604082019050919050565b6000602082019050818103600083015261488381614847565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006148c482613e8f565b91506148cf83613e8f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149045761490361488a565b5b828201905092915050565b60008151905061491e81613fcc565b92915050565b60006020828403121561493a57614939613ecd565b5b60006149488482850161490f565b91505092915050565b600061495c82613e8f565b915061496783613e8f565b92508282101561497a5761497961488a565b5b828203905092915050565b600067ffffffffffffffff8211156149a05761499f614040565b5b602082029050602081019050919050565b600080fd5b6000815190506149c581613f09565b92915050565b60006149de6149d984614985565b6140a0565b90508083825260208201905060208402830185811115614a0157614a006149b1565b5b835b81811015614a2a5780614a1688826149b6565b845260208401935050602081019050614a03565b5050509392505050565b600082601f830112614a4957614a48614025565b5b8151614a598482602086016149cb565b91505092915050565b600067ffffffffffffffff821115614a7d57614a7c614040565b5b602082029050602081019050919050565b6000614aa1614a9c84614a62565b6140a0565b90508083825260208201905060208402830185811115614ac457614ac36149b1565b5b835b81811015614aed5780614ad9888261490f565b845260208401935050602081019050614ac6565b5050509392505050565b600082601f830112614b0c57614b0b614025565b5b8151614b1c848260208601614a8e565b91505092915050565b60008060408385031215614b3c57614b3b613ecd565b5b600083015167ffffffffffffffff811115614b5a57614b59613ed2565b5b614b6685828601614a34565b925050602083015167ffffffffffffffff811115614b8757614b86613ed2565b5b614b9385828601614af7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614bd782613e8f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c0a57614c0961488a565b5b600182019050919050565b600081519050614c248161424f565b92915050565b600060208284031215614c4057614c3f613ecd565b5b6000614c4e84828501614c15565b91505092915050565b6000604082019050614c6c6000830185613e99565b614c796020830184613f62565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614cdc602683614657565b9150614ce782614c80565b604082019050919050565b60006020820190508181036000830152614d0b81614ccf565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b6000614d6e602f83614657565b9150614d7982614d12565b604082019050919050565b60006020820190508181036000830152614d9d81614d61565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614e00602b83614657565b9150614e0b82614da4565b604082019050919050565b60006020820190508181036000830152614e2f81614df3565b9050919050565b60006080820190508181036000830152614e508187614342565b90508181036020830152614e648186614342565b90508181036040830152614e788185614400565b90508181036060830152614e8c8184614400565b905095945050505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614ef3602d83614657565b9150614efe82614e97565b604082019050919050565b60006020820190508181036000830152614f2281614ee6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000614fb4602683614657565b9150614fbf82614f58565b604082019050919050565b60006020820190508181036000830152614fe381614fa7565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561501e578082015181840152602081019050615003565b8381111561502d576000848401525b50505050565b600061503e82614fea565b6150488185614ff5565b9350615058818560208601615000565b80840191505092915050565b60006150708284615033565b915081905092915050565b600081519050919050565b60006150918261507b565b61509b8185614657565b93506150ab818560208601615000565b6150b48161402f565b840191505092915050565b600060208201905081810360008301526150d98184615086565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205b6088eae052cddc0dd9f9999adb310ef777ae39b90551147470d12787d3a69464736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c806385a92cb7116100f7578063cd15285811610095578063f8649e7511610064578063f8649e7514610694578063fac5bb9b146106bf578063fea4765b146106ea578063ff0b583014610715576101cd565b8063cd152858146105db578063d00a5bf814610619578063d0ebdbe714610642578063f2fde38b1461066b576101cd565b8063a3f16ef1116100d1578063a3f16ef11461051f578063b27053291461054a578063b52d326c14610575578063cc222f8d1461059e576101cd565b806385a92cb71461048c5780638ceaa3fe146104c95780638da5cb5b146104f4576101cd565b806354255be01161016f5780636253d7921161013e5780636253d792146103d257806366442085146103fb578063715018a614610438578063843c7a8b1461044f576101cd565b806354255be0146102fc57806356ab819f1461032a5780635c650b5f146103695780635dab2420146103a7576101cd565b8063481c6a75116101ab578063481c6a751461024f578063485cc9551461027a5780634a1376b6146102a35780634f1ef286146102e0576101cd565b806328419796146101d257806332ce1ab4146101fd5780633659cfe614610226575b600080fd5b3480156101de57600080fd5b506101e761073e565b6040516101f49190613ea8565b60405180910390f35b34801561020957600080fd5b50610224600480360381019061021f9190613f35565b610744565b005b34801561023257600080fd5b5061024d60048036038101906102489190613f35565b6107cc565b005b34801561025b57600080fd5b50610264610955565b6040516102719190613f71565b60405180910390f35b34801561028657600080fd5b506102a1600480360381019061029c9190613f8c565b61097b565b005b3480156102af57600080fd5b506102ca60048036038101906102c59190613ff8565b610a73565b6040516102d79190613f71565b60405180910390f35b6102fa60048036038101906102f5919061416b565b610a90565b005b34801561030857600080fd5b50610311610bcd565b60405161032194939291906141c7565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c9190613f35565b610be7565b6040516103609392919061420c565b60405180910390f35b34801561037557600080fd5b50610390600480360381019061038b919061427b565b610cb9565b60405161039e92919061445e565b60405180910390f35b3480156103b357600080fd5b506103bc611432565b6040516103c991906144f4565b60405180910390f35b3480156103de57600080fd5b506103f960048036038101906103f49190613f35565b611458565b005b34801561040757600080fd5b50610422600480360381019061041d9190613f35565b61178d565b60405161042f919061451e565b60405180910390f35b34801561044457600080fd5b5061044d6117aa565b005b34801561045b57600080fd5b5061047660048036038101906104719190613ff8565b611832565b6040516104839190613f71565b60405180910390f35b34801561049857600080fd5b506104b360048036038101906104ae9190613f35565b61184f565b6040516104c09190613ea8565b60405180910390f35b3480156104d557600080fd5b506104de611867565b6040516104eb9190613ea8565b60405180910390f35b34801561050057600080fd5b5061050961186d565b6040516105169190613f71565b60405180910390f35b34801561052b57600080fd5b50610534611897565b604051610541919061455a565b60405180910390f35b34801561055657600080fd5b5061055f6118bd565b60405161056c9190613ea8565b60405180910390f35b34801561058157600080fd5b5061059c60048036038101906105979190614575565b6118c3565b005b3480156105aa57600080fd5b506105c560048036038101906105c09190613f35565b611adc565b6040516105d2919061451e565b60405180910390f35b3480156105e757600080fd5b5061060260048036038101906105fd91906145c8565b611af9565b60405161061092919061445e565b60405180910390f35b34801561062557600080fd5b50610640600480360381019061063b9190613f35565b612240565b005b34801561064e57600080fd5b5061066960048036038101906106649190613f35565b612580565b005b34801561067757600080fd5b50610692600480360381019061068d9190613f35565b612608565b005b3480156106a057600080fd5b506106a9612700565b6040516106b69190613ea8565b60405180910390f35b3480156106cb57600080fd5b506106d4612711565b6040516106e1919061463c565b60405180910390f35b3480156106f657600080fd5b506106ff612737565b60405161070c9190613ea8565b60405180910390f35b34801561072157600080fd5b5061073c60048036038101906107379190613f35565b612748565b005b606f5481565b61074c61295f565b73ffffffffffffffffffffffffffffffffffffffff1661076a61186d565b73ffffffffffffffffffffffffffffffffffffffff16146107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b7906146b4565b60405180910390fd5b6107c981612967565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16141561085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290614746565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661089a612ad7565b73ffffffffffffffffffffffffffffffffffffffff16146108f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e7906147d8565b60405180910390fd5b6108f981612b2e565b61095281600067ffffffffffffffff81111561091857610917614040565b5b6040519080825280601f01601f19166020018201604052801561094a5781602001600182028036833780820191505090505b506000612bad565b50565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff166109a35760008054906101000a900460ff16156109ac565b6109ab612d7e565b5b6109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e29061486a565b60405180910390fd5b60008060019054906101000a900460ff161590508015610a3b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610a4483612d8f565b610a4d82612e55565b8015610a6e5760008060016101000a81548160ff0219169083151502179055505b505050565b6000610a89826068612eb090919063ffffffff16565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1690614746565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610b5e612ad7565b73ffffffffffffffffffffffffffffffffffffffff1614610bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bab906147d8565b60405180910390fd5b610bbd82612b2e565b610bc982826001612bad565b5050565b600080600080600180600080935093509350935090919293565b6000806000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509193909250565b6060803373ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d4e57336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401610d459190613f71565b60405180910390fd5b6000610d5a6066612eca565b1415610d92576040517f377b56d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115610e1657856040517f0d438664000000000000000000000000000000000000000000000000000000008152600401610e0d9190613f71565b60405180910390fd5b610e2286856000612edf565b6000606c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000606e60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000821180610eb95750600081115b1561131e576000610f7088606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f8587610f0e91906148b9565b6040518263ffffffff1660e01b8152600401610f2a9190613ea8565b602060405180830381865afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190614924565b612fce565b90508088610f7e9190614951565b9750600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336691a41846040518263ffffffff1660e01b8152600401610fde9190613ea8565b6000604051808303816000875af1158015610ffd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110269190614b25565b915091506110358b8487612fe7565b60008a111561130f576001825161104c91906148b9565b67ffffffffffffffff81111561106557611064614040565b5b6040519080825280602002602001820160405280156110935781602001602082028036833780820191505090505b509650600182516110a491906148b9565b67ffffffffffffffff8111156110bd576110bc614040565b5b6040519080825280602002602001820160405280156110eb5781602001602082028036833780820191505090505b50955060005b82518110156111af5782818151811061110d5761110c614b9d565b5b602002602001015188828151811061112857611127614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081818151811061117557611174614b9d565b5b60200260200101518782815181106111905761118f614b9d565b5b60200260200101818152505080806111a790614bcc565b9150506110f1565b5087158015611258575089607260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acd201d08d6040518263ffffffff1660e01b81526004016112159190613f71565b602060405180830381865afa158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112569190614924565b105b1561129a578a6040517f339102f10000000000000000000000000000000000000000000000000000000081526004016112919190613f71565b60405180910390fd5b8a878351815181106112af576112ae614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505089868351815181106112fe576112fd614b9d565b5b602002602001018181525050611316565b8196508095505b505050611427565b600167ffffffffffffffff81111561133957611338614040565b5b6040519080825280602002602001820160405280156113675781602001602082028036833780820191505090505b509350600167ffffffffffffffff81111561138557611384614040565b5b6040519080825280602002602001820160405280156113b35781602001602082028036833780820191505090505b50925087846000815181106113cb576113ca614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050868360008151811061141a57611419614b9d565b5b6020026020010181815250505b505094509492505050565b607260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b81526004016114b39190613f71565b602060405180830381865afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190614c2a565b1580611510575061150f8160686130d990919063ffffffff16565b5b1561155257806040517f10a7bc6b0000000000000000000000000000000000000000000000000000000081526004016115499190613f71565b60405180910390fd5b6000606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156115dc57816040517f08015b240000000000000000000000000000000000000000000000000000000081526004016115d39190613f71565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058846040518263ffffffff1660e01b81526004016116399190613f71565b602060405180830381865afa158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a9190614924565b905060008114156116c257826040517feeec2b540000000000000000000000000000000000000000000000000000000081526004016116b99190613f71565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e836040518263ffffffff1660e01b815260040161171f9190613ea8565b602060405180830381865afa15801561173c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117609190614924565b9050600061176e8285612fce565b905061177a8582613109565b611786858260006133fb565b5050505050565b60006117a38260666130d990919063ffffffff16565b9050919050565b6117b261295f565b73ffffffffffffffffffffffffffffffffffffffff166117d061186d565b73ffffffffffffffffffffffffffffffffffffffff1614611826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181d906146b4565b60405180910390fd5b6118306000612d8f565b565b6000611848826066612eb090919063ffffffff16565b9050919050565b606a6020528060005260406000206000915090505481565b606b5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606d5481565b6118cb61295f565b73ffffffffffffffffffffffffffffffffffffffff166118e961186d565b73ffffffffffffffffffffffffffffffffffffffff161461193f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611936906146b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806119a65750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806119dd5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15611a14576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82607260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080607160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000611af28260686130d990919063ffffffff16565b9050919050565b6060803373ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b8e57336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401611b859190613f71565b60405180910390fd5b611ba28560666134ea90919063ffffffff16565b50611baf85846001612edf565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425866040518263ffffffff1660e01b8152600401611c0a9190613f71565b602060405180830381865afa158015611c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4b9190614c2a565b8015611c685750611c668560686130d990919063ffffffff16565b155b1561217e576000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058876040518263ffffffff1660e01b8152600401611cca9190613f71565b602060405180830381865afa158015611ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0b9190614924565b90506000611d198287612fce565b90508086611d279190614951565b9550600086111561206e57600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d27898b6040518363ffffffff1660e01b8152600401611d92929190614c57565b6000604051808303816000875af1158015611db1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611dda9190614b25565b91509150611e8589606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e8b6040518263ffffffff1660e01b8152600401611e3d9190613ea8565b602060405180830381865afa158015611e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7e9190614924565b60016133fb565b60018251611e9391906148b9565b67ffffffffffffffff811115611eac57611eab614040565b5b604051908082528060200260200182016040528015611eda5781602001602082028036833780820191505090505b50955060018251611eeb91906148b9565b67ffffffffffffffff811115611f0457611f03614040565b5b604051908082528060200260200182016040528015611f325781602001602082028036833780820191505090505b50945060005b8251811015611ff657828181518110611f5457611f53614b9d565b5b6020026020010151878281518110611f6f57611f6e614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818181518110611fbc57611fbb614b9d565b5b6020026020010151868281518110611fd757611fd6614b9d565b5b6020026020010181815250508080611fee90614bcc565b915050611f38565b50888683518151811061200c5761200b614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828583518151811061205b5761205a614b9d565b5b6020026020010181815250505050612177565b600167ffffffffffffffff81111561208957612088614040565b5b6040519080825280602002602001820160405280156120b75781602001602082028036833780820191505090505b509350600167ffffffffffffffff8111156120d5576120d4614040565b5b6040519080825280602002602001820160405280156121035781602001602082028036833780820191505090505b509250868460008151811061211b5761211a614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808360008151811061216a57612169614b9d565b5b6020026020010181815250505b5050612238565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d2785876040518363ffffffff1660e01b81526004016121db929190614c57565b6000604051808303816000875af11580156121fa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122239190614b25565b80925081935050506122378584600161351a565b5b935093915050565b6000607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425836040518263ffffffff1660e01b815260040161229d9190613f71565b602060405180830381865afa1580156122ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122de9190614c2a565b90506000606e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081801561234257506123408360686130d990919063ffffffff16565b155b156123ae57600081141561238d57826040517f9bd3a6600000000000000000000000000000000000000000000000000000000081526004016123849190613f71565b60405180910390fd5b600081905061239c8482613109565b6123a88482600061351a565b5061257b565b6000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181141561243757836040517f9bd3a66000000000000000000000000000000000000000000000000000000000815260040161242e9190613f71565b60405180910390fd5b6000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1fa411a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ca9190614924565b1415612502576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008184846125559190614951565b61255f9190614951565b905061256b8682613609565b6125778682600161351a565b5050505b505050565b61258861295f565b73ffffffffffffffffffffffffffffffffffffffff166125a661186d565b73ffffffffffffffffffffffffffffffffffffffff16146125fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f3906146b4565b60405180910390fd5b612605816138fe565b50565b61261061295f565b73ffffffffffffffffffffffffffffffffffffffff1661262e61186d565b73ffffffffffffffffffffffffffffffffffffffff1614612684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267b906146b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126eb90614cf2565b60405180910390fd5b6126fd81612d8f565b50565b600061270c6066612eca565b905090565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006127436068612eca565b905090565b61275061295f565b73ffffffffffffffffffffffffffffffffffffffff1661276e61186d565b73ffffffffffffffffffffffffffffffffffffffff16146127c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127bb906146b4565b60405180910390fd5b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b815260040161281f9190613f71565b602060405180830381865afa15801561283c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128609190614c2a565b6128a157806040517f10a7bc6b0000000000000000000000000000000000000000000000000000000081526004016128989190613f71565b60405180910390fd5b6128b58160686139ec90919063ffffffff16565b6128f657806040517fe9b829ba0000000000000000000000000000000000000000000000000000000081526004016128ed9190613f71565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167f7fab4241c447cd1e7af48ab4c6bbeab72a3836e47ed68c58b78b399531a5cd6c60405160405180910390a250565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1fa411a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fa9190614924565b1415612a32576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612a468160686130d990919063ffffffff16565b15612a8857806040517fe09c4db2000000000000000000000000000000000000000000000000000000008152600401612a7f9190613f71565b60405180910390fd5b612a9c8160686134ea90919063ffffffff16565b507f65aef4c8071073180f00fde0e2179949872e90b7003d3b2a22d7bc182d2cc88681604051612acc9190613f71565b60405180910390a150565b6000612b057f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613a1c565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612b3661295f565b73ffffffffffffffffffffffffffffffffffffffff16612b5461186d565b73ffffffffffffffffffffffffffffffffffffffff1614612baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ba1906146b4565b60405180910390fd5b50565b6000612bb7612ad7565b9050612bc284613a26565b600083511180612bcf5750815b15612be057612bde8484613adf565b505b6000612c0e7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b613b0c565b90508060000160009054906101000a900460ff16612d775760018160000160006101000a81548160ff021916908315150217905550612cda8583604051602401612c589190613f71565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613adf565b5060008160000160006101000a81548160ff021916908315150217905550612d00612ad7565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6490614d84565b60405180910390fd5b612d7685613b16565b5b5050505050565b6000612d893061293c565b15905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16612ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9b90614e16565b60405180910390fd5b612ead816138fe565b50565b6000612ebf8360000183613b65565b60001c905092915050565b6000612ed882600001613b90565b9050919050565b8015612f595781606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f3491906148b9565b9250508190555081606b6000828254612f4d91906148b9565b92505081905550612fc9565b81606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fa89190614951565b9250508190555081606b6000828254612fc19190614951565b925050819055505b505050565b6000818310612fdd5781612fdf565b825b905092915050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e846040518263ffffffff1660e01b81526004016130449190613ea8565b602060405180830381865afa158015613061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130859190614924565b905060006130938383612fce565b905060008111156130ab576130aa858260006133fb565b5b600081836130b99190614951565b905060008111156130d1576130d08682600061351a565b5b505050505050565b6000613101836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613ba1565b905092915050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f836040518263ffffffff1660e01b81526004016131669190613ea8565b602060405180830381865afa158015613183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a79190614924565b9050600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336691a41846040518263ffffffff1660e01b81526004016132079190613ea8565b6000604051808303816000875af1158015613226573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061324f9190614b25565b915091506000600167ffffffffffffffff8111156132705761326f614040565b5b60405190808252806020026020018201604052801561329e5781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff8111156132be576132bd614040565b5b6040519080825280602002602001820160405280156132ec5781602001602082028036833780820191505090505b509050868260008151811061330457613303614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050848160008151811061335357613352614b9d565b5b602002602001018181525050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c4d4e40858486856040518563ffffffff1660e01b81526004016133c09493929190614e36565b600060405180830381600087803b1580156133da57600080fd5b505af11580156133ee573d6000803e3d6000fd5b5050505050505050505050565b80156134755781606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461345091906148b9565b9250508190555081606d600082825461346991906148b9565b925050819055506134e5565b81606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546134c49190614951565b9250508190555081606d60008282546134dd9190614951565b925050819055505b505050565b6000613512836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613bc4565b905092915050565b80156135945781606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461356f91906148b9565b9250508190555081606f600082825461358891906148b9565b92505081905550613604565b81606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135e39190614951565b9250508190555081606f60008282546135fc9190614951565b925050819055505b505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f836040518263ffffffff1660e01b81526004016136669190613ea8565b602060405180830381865afa158015613683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a79190614924565b90506000600167ffffffffffffffff8111156136c6576136c5614040565b5b6040519080825280602002602001820160405280156136f45781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff81111561371457613713614040565b5b6040519080825280602002602001820160405280156137425781602001602082028036833780820191505090505b509050848260008151811061375a57613759614b9d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816000815181106137a9576137a8614b9d565b5b602002602001018181525050600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d278660006040518363ffffffff1660e01b8152600401613816929190614c57565b6000604051808303816000875af1158015613835573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061385e9190614b25565b91509150606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c4d4e40858486856040518563ffffffff1660e01b81526004016138c39493929190614e36565b600060405180830381600087803b1580156138dd57600080fd5b505af11580156138f1573d6000803e3d6000fd5b5050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613965576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b6000613a14836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613c34565b905092915050565b6000819050919050565b613a2f81613d48565b613a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a6590614f09565b60405180910390fd5b80613a9b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613a1c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060613b0483836040518060600160405280602781526020016150e260279139613d5b565b905092915050565b6000819050919050565b613b1f81613a26565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6000826000018281548110613b7d57613b7c614b9d565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6000613bd08383613ba1565b613c29578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050613c2e565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114613d3c576000600182613c669190614951565b9050600060018660000180549050613c7e9190614951565b9050818114613ced576000866000018281548110613c9f57613c9e614b9d565b5b9060005260206000200154905080876000018481548110613cc357613cc2614b9d565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613d0157613d00614f29565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613d42565b60009150505b92915050565b600080823b905060008111915050919050565b6060613d6684613d48565b613da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d9c90614fca565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051613dcd9190615064565b600060405180830381855af49150503d8060008114613e08576040519150601f19603f3d011682016040523d82523d6000602084013e613e0d565b606091505b5091509150613e1d828286613e28565b925050509392505050565b60608315613e3857829050613e88565b600083511115613e4b5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e7f91906150bf565b60405180910390fd5b9392505050565b6000819050919050565b613ea281613e8f565b82525050565b6000602082019050613ebd6000830184613e99565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613f0282613ed7565b9050919050565b613f1281613ef7565b8114613f1d57600080fd5b50565b600081359050613f2f81613f09565b92915050565b600060208284031215613f4b57613f4a613ecd565b5b6000613f5984828501613f20565b91505092915050565b613f6b81613ef7565b82525050565b6000602082019050613f866000830184613f62565b92915050565b60008060408385031215613fa357613fa2613ecd565b5b6000613fb185828601613f20565b9250506020613fc285828601613f20565b9150509250929050565b613fd581613e8f565b8114613fe057600080fd5b50565b600081359050613ff281613fcc565b92915050565b60006020828403121561400e5761400d613ecd565b5b600061401c84828501613fe3565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6140788261402f565b810181811067ffffffffffffffff8211171561409757614096614040565b5b80604052505050565b60006140aa613ec3565b90506140b6828261406f565b919050565b600067ffffffffffffffff8211156140d6576140d5614040565b5b6140df8261402f565b9050602081019050919050565b82818337600083830152505050565b600061410e614109846140bb565b6140a0565b90508281526020810184848401111561412a5761412961402a565b5b6141358482856140ec565b509392505050565b600082601f83011261415257614151614025565b5b81356141628482602086016140fb565b91505092915050565b6000806040838503121561418257614181613ecd565b5b600061419085828601613f20565b925050602083013567ffffffffffffffff8111156141b1576141b0613ed2565b5b6141bd8582860161413d565b9150509250929050565b60006080820190506141dc6000830187613e99565b6141e96020830186613e99565b6141f66040830185613e99565b6142036060830184613e99565b95945050505050565b60006060820190506142216000830186613e99565b61422e6020830185613e99565b61423b6040830184613e99565b949350505050565b60008115159050919050565b61425881614243565b811461426357600080fd5b50565b6000813590506142758161424f565b92915050565b6000806000806080858703121561429557614294613ecd565b5b60006142a387828801613f20565b94505060206142b487828801613fe3565b93505060406142c587828801613fe3565b92505060606142d687828801614266565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61431781613ef7565b82525050565b6000614329838361430e565b60208301905092915050565b6000602082019050919050565b600061434d826142e2565b61435781856142ed565b9350614362836142fe565b8060005b8381101561439357815161437a888261431d565b975061438583614335565b925050600181019050614366565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6143d581613e8f565b82525050565b60006143e783836143cc565b60208301905092915050565b6000602082019050919050565b600061440b826143a0565b61441581856143ab565b9350614420836143bc565b8060005b8381101561445157815161443888826143db565b9750614443836143f3565b925050600181019050614424565b5085935050505092915050565b600060408201905081810360008301526144788185614342565b9050818103602083015261448c8184614400565b90509392505050565b6000819050919050565b60006144ba6144b56144b084613ed7565b614495565b613ed7565b9050919050565b60006144cc8261449f565b9050919050565b60006144de826144c1565b9050919050565b6144ee816144d3565b82525050565b600060208201905061450960008301846144e5565b92915050565b61451881614243565b82525050565b6000602082019050614533600083018461450f565b92915050565b6000614544826144c1565b9050919050565b61455481614539565b82525050565b600060208201905061456f600083018461454b565b92915050565b60008060006060848603121561458e5761458d613ecd565b5b600061459c86828701613f20565b93505060206145ad86828701613f20565b92505060406145be86828701613f20565b9150509250925092565b6000806000606084860312156145e1576145e0613ecd565b5b60006145ef86828701613f20565b935050602061460086828701613fe3565b925050604061461186828701613fe3565b9150509250925092565b6000614626826144c1565b9050919050565b6146368161461b565b82525050565b6000602082019050614651600083018461462d565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061469e602083614657565b91506146a982614668565b602082019050919050565b600060208201905081810360008301526146cd81614691565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000614730602c83614657565b915061473b826146d4565b604082019050919050565b6000602082019050818103600083015261475f81614723565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006147c2602c83614657565b91506147cd82614766565b604082019050919050565b600060208201905081810360008301526147f1816147b5565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614854602e83614657565b915061485f826147f8565b604082019050919050565b6000602082019050818103600083015261488381614847565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006148c482613e8f565b91506148cf83613e8f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149045761490361488a565b5b828201905092915050565b60008151905061491e81613fcc565b92915050565b60006020828403121561493a57614939613ecd565b5b60006149488482850161490f565b91505092915050565b600061495c82613e8f565b915061496783613e8f565b92508282101561497a5761497961488a565b5b828203905092915050565b600067ffffffffffffffff8211156149a05761499f614040565b5b602082029050602081019050919050565b600080fd5b6000815190506149c581613f09565b92915050565b60006149de6149d984614985565b6140a0565b90508083825260208201905060208402830185811115614a0157614a006149b1565b5b835b81811015614a2a5780614a1688826149b6565b845260208401935050602081019050614a03565b5050509392505050565b600082601f830112614a4957614a48614025565b5b8151614a598482602086016149cb565b91505092915050565b600067ffffffffffffffff821115614a7d57614a7c614040565b5b602082029050602081019050919050565b6000614aa1614a9c84614a62565b6140a0565b90508083825260208201905060208402830185811115614ac457614ac36149b1565b5b835b81811015614aed5780614ad9888261490f565b845260208401935050602081019050614ac6565b5050509392505050565b600082601f830112614b0c57614b0b614025565b5b8151614b1c848260208601614a8e565b91505092915050565b60008060408385031215614b3c57614b3b613ecd565b5b600083015167ffffffffffffffff811115614b5a57614b59613ed2565b5b614b6685828601614a34565b925050602083015167ffffffffffffffff811115614b8757614b86613ed2565b5b614b9385828601614af7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614bd782613e8f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c0a57614c0961488a565b5b600182019050919050565b600081519050614c248161424f565b92915050565b600060208284031215614c4057614c3f613ecd565b5b6000614c4e84828501614c15565b91505092915050565b6000604082019050614c6c6000830185613e99565b614c796020830184613f62565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614cdc602683614657565b9150614ce782614c80565b604082019050919050565b60006020820190508181036000830152614d0b81614ccf565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b6000614d6e602f83614657565b9150614d7982614d12565b604082019050919050565b60006020820190508181036000830152614d9d81614d61565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614e00602b83614657565b9150614e0b82614da4565b604082019050919050565b60006020820190508181036000830152614e2f81614df3565b9050919050565b60006080820190508181036000830152614e508187614342565b90508181036020830152614e648186614342565b90508181036040830152614e788185614400565b90508181036060830152614e8c8184614400565b905095945050505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614ef3602d83614657565b9150614efe82614e97565b604082019050919050565b60006020820190508181036000830152614f2281614ee6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000614fb4602683614657565b9150614fbf82614f58565b604082019050919050565b60006020820190508181036000830152614fe381614fa7565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561501e578082015181840152602081019050615003565b8381111561502d576000848401525b50505050565b600061503e82614fea565b6150488185614ff5565b9350615058818560208601615000565b80840191505092915050565b60006150708284615033565b915081905092915050565b600081519050919050565b60006150918261507b565b61509b8185614657565b93506150ab818560208601615000565b6150b48161402f565b840191505092915050565b600060208201905081810360008301526150d98184615086565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205b6088eae052cddc0dd9f9999adb310ef777ae39b90551147470d12787d3a69464736f6c634300080b0033",
  "devdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "params": {
            "caller": "`msg.sender` that called the function."
          }
        }
      ],
      "CantWithdrawAccordingToStrategy(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "FailedToAddGroup(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "FailedToBlockGroup(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "FailedToUnblockGroup(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupAlreadyBlocked(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupBalanced(address)": [
        {
          "params": {
            "group": "The group address."
          }
        }
      ],
      "GroupNotBalanced(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupNotEligible(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupNotOverflowing(address)": [
        {
          "params": {
            "group": "The group address."
          }
        }
      ],
      "GroupStillOverflowing(address)": [
        {
          "params": {
            "group": "The group address."
          }
        }
      ]
    },
    "events": {
      "GroupBlocked(address)": {
        "params": {
          "group": "The group's address."
        }
      },
      "GroupUnblocked(address)": {
        "params": {
          "group": "The group's address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "blockGroup(address)": {
        "params": {
          "group": "The group address."
        }
      },
      "generateDepositVoteDistribution(address,uint256,uint256)": {
        "params": {
          "celoAmount": "The amount of CELO.",
          "group": "The validator group that we want to deposit to or transfer from.",
          "stCeloAmount": "The amount of stCELO."
        },
        "returns": {
          "finalGroups": "The groups to withdraw from.",
          "finalVotes": "The amount to withdraw from each group."
        }
      },
      "generateWithdrawalVoteDistribution(address,uint256,uint256,bool)": {
        "params": {
          "celoWithdrawalAmount": "The amount of CELO to withdraw.",
          "group": "The validator group that we want to withdraw from.",
          "stCeloWithdrawalAmount": "The amount of stCELO to withdraw."
        },
        "returns": {
          "groups": "The groups to withdraw from.",
          "votes": "The amount to withdraw from each group."
        }
      },
      "getBlockedGroup(uint256)": {
        "returns": {
          "_0": "The blocked group."
        }
      },
      "getNumberOfBlockedGroups()": {
        "returns": {
          "_0": "The length of blocked groups."
        }
      },
      "getNumberOfVotedGroups()": {
        "returns": {
          "_0": "The length of voted groups."
        }
      },
      "getStCeloInGroup(address)": {
        "returns": {
          "overflow": "The stCELO amount that is overflowed to default strategy.",
          "total": "The total stCELO amount.",
          "unhealthy": "The stCELO amount that is moved to default strategy because group is/was unhealthy."
        }
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "Storage version of the contract.",
          "_1": "Major version of the contract.",
          "_2": "Minor version of the contract.",
          "_3": "Patch version of the contract."
        }
      },
      "getVotedGroup(uint256)": {
        "returns": {
          "_0": "The specific group."
        }
      },
      "initialize(address,address)": {
        "params": {
          "_manager": "The address of the Manager contract.",
          "_owner": "The address of the contract owner."
        }
      },
      "isBlockedGroup(address)": {
        "params": {
          "group": "The validator group."
        },
        "returns": {
          "_0": "Whether or not group is blocked."
        }
      },
      "isVotedGroup(address)": {
        "params": {
          "group": "The validator group."
        },
        "returns": {
          "_0": "Whether or not is group is voted."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rebalanceOverflowedGroup(address)": {
        "params": {
          "group": "The group address."
        }
      },
      "rebalanceWhenHealthChanged(address)": {
        "params": {
          "group": "The group address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDependencies(address,address,address)": {
        "params": {
          "_account": "The address of the Account contract.",
          "_defaultStrategy": "The address of the DefaultStrategy contract.",
          "_groupHealth": "The address of the GroupHealth contract."
        }
      },
      "setManager(address)": {
        "params": {
          "_manager": "The new manager address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unblockGroup(address)": {
        "params": {
          "group": "The address of the group to add to the set of specific group strategies."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "totalStCeloLocked": {
        "details": "To get the actual stCelo in specific strategy it is necessary to subtract `totalStCeloOverflow`."
      }
    },
    "title": "SpecificGroupStrategy is responsible for handling any deposit/withdrawal for accounts with specific strategy selected.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressZeroNotAllowed()": [
        {
          "notice": "Used when attempting to pass in address zero where not allowed."
        }
      ],
      "CallerNotManager(address)": [
        {
          "notice": "Used when an `onlyManager` function is called by a non-manager."
        }
      ],
      "CantWithdrawAccordingToStrategy(address)": [
        {
          "notice": "Used when there isn't enough CELO voting for an account's strategy to fulfill a withdrawal."
        }
      ],
      "FailedToAddGroup(address)": [
        {
          "notice": "Used when an attempt to add an specific group to the EnumerableSet fails."
        }
      ],
      "FailedToBlockGroup(address)": [
        {
          "notice": "Used when attempting to block a group failed."
        }
      ],
      "FailedToUnblockGroup(address)": [
        {
          "notice": "Used when attempting to unblock a group that is not blocked."
        }
      ],
      "GroupAlreadyBlocked(address)": [
        {
          "notice": "Used when attempting to block a group that is not allowed."
        }
      ],
      "GroupBalanced(address)": [
        {
          "notice": "Used when trying to `rebalanceWhenHealthChanged` when the group cannot be rebalanced since it is in correct state."
        }
      ],
      "GroupNotBalanced(address)": [
        {
          "notice": "Used when attempting to withdraw from specific group but group does not have enough CELO. It is necessary to rebalance the group."
        }
      ],
      "GroupNotEligible(address)": [
        {
          "notice": "Used when a group does not meet the validator group health requirements."
        }
      ],
      "GroupNotOverflowing(address)": [
        {
          "notice": "Used when trying to `rebalanceOverflowedGroup` when the group is not overflowing."
        }
      ],
      "GroupStillOverflowing(address)": [
        {
          "notice": "Used when trying to `rebalanceOverflowedGroup` when the overflowing group cannot be rebalanced since it has no receivable votes."
        }
      ],
      "NoActiveGroups()": [
        {
          "notice": "Used when attempting to deposit when there are not active groups to vote for."
        }
      ],
      "NoGroups()": [
        {
          "notice": "Used when attempting to withdraw but there are no groups being voted for."
        }
      ],
      "NullAddress()": [
        {
          "notice": "Used when a passed address is address(0)."
        }
      ]
    },
    "events": {
      "GroupBlocked(address)": {
        "notice": "Emmited when group is blocked."
      },
      "GroupUnblocked(address)": {
        "notice": "Emitted when a group was unblocked."
      },
      "ManagerSet(address)": {
        "notice": "Emitted when the manager is initially set or later modified."
      }
    },
    "kind": "user",
    "methods": {
      "account()": {
        "notice": "An instance of the Account contract for the StakedCelo protocol."
      },
      "blockGroup(address)": {
        "notice": "Marks a group as blocked for voting."
      },
      "constructor": {
        "notice": "Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized."
      },
      "defaultStrategy()": {
        "notice": "An instance of the DefaultStrategy contract for the StakedCelo protocol."
      },
      "generateDepositVoteDistribution(address,uint256,uint256)": {
        "notice": "Generates groups and votes to distribute votes to."
      },
      "generateWithdrawalVoteDistribution(address,uint256,uint256,bool)": {
        "notice": "Used to withdraw CELO from a specific group that account voted for previously. It is expected that strategy will be balanced. For balancing use `rebalance` function."
      },
      "getBlockedGroup(uint256)": {
        "notice": "Returns the blocked group at index."
      },
      "getNumberOfBlockedGroups()": {
        "notice": "Returns the number of blocked groups."
      },
      "getNumberOfVotedGroups()": {
        "notice": "Returns the number of voted groups."
      },
      "getStCeloInGroup(address)": {
        "notice": "Returns the specific group total stCELO."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "getVotedGroup(uint256)": {
        "notice": "Returns the specific group at index."
      },
      "groupHealth()": {
        "notice": "An instance of the GroupHealth contract for the StakedCelo protocol."
      },
      "initialize(address,address)": {
        "notice": "Initialize the contract with registry and owner."
      },
      "isBlockedGroup(address)": {
        "notice": "Returns if group is blocked."
      },
      "isVotedGroup(address)": {
        "notice": "Returns if a group is a voted group."
      },
      "rebalanceOverflowedGroup(address)": {
        "notice": "When there is group that is overflowing and in meantime there are votes that freed up. This function makes sure to reschedule votes correctly for overflowing group."
      },
      "rebalanceWhenHealthChanged(address)": {
        "notice": "Used when validator gets unhealthy and we need to move funds to default strategy"
      },
      "setDependencies(address,address,address)": {
        "notice": "Set this contract's dependencies in the StakedCelo system."
      },
      "setManager(address)": {
        "notice": "Sets the manager address."
      },
      "stCeloInGroup(address)": {
        "notice": "stCELO that was cast for specific group strategies, group => stCELO amount"
      },
      "totalStCeloLocked()": {
        "notice": "Total stCELO that was voted with on specific group strategies (including overflows)."
      },
      "totalStCeloOverflow()": {
        "notice": "Total stCelo that was overflowed to default strategy."
      },
      "totalStCeloUnhealthy()": {
        "notice": "Total stCelo that is cast for unhealthy groups and was moved to default strategy."
      },
      "unblockGroup(address)": {
        "notice": "Unblocks previously blocked group."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 584,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6996,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "manager",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 8989,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "votedGroups",
        "offset": 0,
        "slot": "102",
        "type": "t_struct(AddressSet)3257_storage"
      },
      {
        "astId": 8993,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "blockedGroups",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(AddressSet)3257_storage"
      },
      {
        "astId": 8998,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "stCeloInGroup",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9001,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "totalStCeloLocked",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 9006,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "stCeloInGroupOverflowed",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9009,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "totalStCeloOverflow",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 9014,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "stCeloInGroupUnhealthy",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9017,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "totalStCeloUnhealthy",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 9021,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "groupHealth",
        "offset": 0,
        "slot": "112",
        "type": "t_contract(IGroupHealth)16520"
      },
      {
        "astId": 9025,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "defaultStrategy",
        "offset": 0,
        "slot": "113",
        "type": "t_contract(IDefaultStrategy)16025"
      },
      {
        "astId": 9029,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "account",
        "offset": 0,
        "slot": "114",
        "type": "t_contract(IAccount)15746"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccount)15746": {
        "encoding": "inplace",
        "label": "contract IAccount",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultStrategy)16025": {
        "encoding": "inplace",
        "label": "contract IDefaultStrategy",
        "numberOfBytes": "20"
      },
      "t_contract(IGroupHealth)16520": {
        "encoding": "inplace",
        "label": "contract IGroupHealth",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3257_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3256,
            "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2956_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2956_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2951,
            "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2955,
            "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}