{
  "language": "Solidity",
  "sources": {
    "contracts/Account.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./Managed.sol\";\nimport \"./common/UUPSOwnableUpgradeable.sol\";\nimport \"./common/UsingRegistryUpgradeable.sol\";\nimport \"./interfaces/IAccount.sol\";\n\n/**\n * @title A contract that facilitates voting on behalf of StakedCelo.sol.\n * @notice This contract depends on the Manager to decide how to distribute votes and how to\n * keep track of ownership of CELO voted via this contract.\n */\ncontract Account is UUPSOwnableUpgradeable, UsingRegistryUpgradeable, Managed, IAccount {\n    /**\n     * @notice Used to keep track of a pending withdrawal. A similar data structure\n     * exists within LockedGold.sol, but it only keeps track of pending withdrawals\n     * by the msg.sender to the LockedGold contract.\n     * Because this contract facilitates withdrawals for different beneficiaries,\n     * this contract must keep track of which beneficiaries correspond to which\n     * pending withdrawals to prevent someone from finalizing/taking a pending\n     * withdrawal they did not create.\n     * @param value The withdrawal amount.\n     * @param timestamp The timestamp at which the withdrawal amount becomes available.\n     */\n    struct PendingWithdrawal {\n        uint256 value;\n        uint256 timestamp;\n    }\n\n    /**\n     * @notice Used to keep track of CELO that is scheduled to be used for\n     * voting or revoking for a validator group.\n     * @param toVote Amount of CELO held by this contract intended to vote for a group.\n     * @param toWithdraw Amount of CELO that's scheduled for withdrawal.\n     * @param toWithdrawFor Amount of CELO that's scheduled for withdrawal grouped by beneficiary.\n     */\n    struct ScheduledVotes {\n        uint256 toVote;\n        uint256 toWithdraw;\n        mapping(address => uint256) toWithdrawFor;\n    }\n\n    /**\n     * @notice Keyed by beneficiary address, the related array of pending withdrawals.\n     * See `PendingWithdrawal` for more info.\n     */\n    mapping(address => PendingWithdrawal[]) public pendingWithdrawals;\n\n    /**\n     * @notice Keyed by validator group address, the ScheduledVotes struct\n     * which holds the amount of CELO that's scheduled to vote, the amount\n     * of CELO scheduled to be withdrawn, and the amount of CELO to be\n     * withdrawn for each beneficiary.\n     */\n    mapping(address => ScheduledVotes) private scheduledVotes;\n\n    /**\n     * @notice Total amount of CELO scheduled to be withdrawn from all groups\n     * by all beneficiaries.\n     */\n    uint256 public totalScheduledWithdrawals;\n\n    /**\n     * @notice Emitted when CELO is scheduled for voting for a given group.\n     * @param group The validator group the CELO is intended to vote for.\n     * @param amount The amount of CELO scheduled.\n     */\n    event VotesScheduled(address indexed group, uint256 amount);\n\n    /**\n     * @notice Emitted when CELO withdrawal is scheduled for a group.\n     * @param group The validator group the CELO is withdrawn from.\n     * @param withdrawalAmount The amount of CELO requested for withdrawal.\n     * @param beneficiary The user for whom the withdrawal amount is intended for.\n     */\n    event CeloWithdrawalScheduled(\n        address indexed beneficiary,\n        address indexed group,\n        uint256 withdrawalAmount\n    );\n\n    /**\n     * @notice Emitted when CELO withdrawal kicked off for group. Immediate withdrawals\n     * are not included in this event, but can be identified by a GoldToken.sol transfer\n     * from this contract.\n     * @param group The validator group the CELO is withdrawn from.\n     * @param withdrawalAmount The amount of CELO requested for withdrawal.\n     * @param beneficiary The user for whom the withdrawal amount is intended for.\n     */\n    event CeloWithdrawalStarted(\n        address indexed beneficiary,\n        address indexed group,\n        uint256 withdrawalAmount\n    );\n\n    /**\n     * @notice Emitted when a CELO withdrawal completes for `beneficiary`.\n     * @param beneficiary The user for whom the withdrawal amount is intended.\n     * @param amount The amount of CELO requested for withdrawal.\n     * @param timestamp The timestamp of the pending withdrawal.\n     */\n    event CeloWithdrawalFinished(address indexed beneficiary, uint256 amount, uint256 timestamp);\n\n    /// @notice Used when the creation of an account with Accounts.sol fails.\n    error AccountCreationFailed();\n\n    /// @notice Used when arrays passed for scheduling votes don't have matching lengths.\n    error GroupsAndVotesArrayLengthsMismatch();\n\n    /**\n     * @notice Used when the sum of votes per groups during vote scheduling\n     * doesn't match the `msg.value` sent with the call.\n     * @param sentValue The `msg.value` of the call.\n     * @param expectedValue The expected sum of votes for groups.\n     */\n    error TotalVotesMismatch(uint256 sentValue, uint256 expectedValue);\n\n    /// @notice Used when activating of pending votes via Election has failed.\n    error ActivatePendingVotesFailed(address group);\n\n    /// @notice Used when voting via Election has failed.\n    error VoteFailed(address group, uint256 amount);\n\n    /// @notice Used when call to Election.sol's `revokePendingVotes` fails.\n    error RevokePendingFailed(address group, uint256 amount);\n\n    /// @notice Used when call to Election.sol's `revokeActiveVotes` fails.\n    error RevokeActiveFailed(address group, uint256 amount);\n\n    /**\n     * @notice Used when active + pending votes amount is unable to fulfil a\n     * withdrawal request amount.\n     */\n    error InsufficientRevokableVotes(address group, uint256 amount);\n\n    /// @notice Used when unable to transfer CELO.\n    error CeloTransferFailed(address to, uint256 amount);\n\n    /**\n     * @notice Used when `pendingWithdrawalIndex` is too high for the\n     * beneficiary's pending withdrawals array.\n     */\n    error PendingWithdrawalIndexTooHigh(\n        uint256 pendingWithdrawalIndex,\n        uint256 pendingWithdrawalsLength\n    );\n\n    /**\n     * @notice Used when attempting to schedule more withdrawals\n     * than CELO available to the contract.\n     * @param group The offending group.\n     * @param celoAvailable CELO available to the group across scheduled, pending and active votes.\n     * @param celoToWindraw total amount of CELO that would be scheduled to be withdrawn.\n     */\n    error WithdrawalAmountTooHigh(address group, uint256 celoAvailable, uint256 celoToWindraw);\n\n    /**\n     * @notice Used when any of the resolved stakedCeloGroupVoter.pendingWithdrawal\n     * values do not match the equivalent record in lockedGold.pendingWithdrawals.\n     */\n    error InconsistentPendingWithdrawalValues(\n        uint256 localPendingWithdrawalValue,\n        uint256 lockedGoldPendingWithdrawalValue\n    );\n\n    /**\n     * @notice Used when any of the resolved stakedCeloGroupVoter.pendingWithdrawal\n     * timestamps do not match the equivalent record in lockedGold.pendingWithdrawals.\n     */\n    error InconsistentPendingWithdrawalTimestamps(\n        uint256 localPendingWithdrawalTimestamp,\n        uint256 lockedGoldPendingWithdrawalTimestamp\n    );\n\n    /// @notice There's no amount of scheduled withdrawal for the given beneficiary and group.\n    error NoScheduledWithdrawal(address beneficiary, address group);\n\n    /**\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\n     * implementation gets initialized.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    constructor() initializer {}\n\n    /**\n     * @param _registry The address of the Celo registry.\n     * @param _manager The address of the Manager contract.\n     * @param _owner The address of the contract owner.\n     */\n    function initialize(\n        address _registry,\n        address _manager,\n        address _owner\n    ) external initializer {\n        __UsingRegistry_init(_registry);\n        __Managed_init(_manager);\n        _transferOwnership(_owner);\n\n        // Create an account so this contract can vote.\n        if (!getAccounts().createAccount()) {\n            revert AccountCreationFailed();\n        }\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    /**\n     * @notice Deposits CELO sent via msg.value as unlocked CELO intended as\n     * votes for groups.\n     * @dev Only callable by the Staked CELO contract, which must restrict which groups are valid.\n     * @param groups The groups the deposited CELO is intended to vote for.\n     * @param votes The amount of CELO to schedule for each respective group\n     * from `groups`.\n     */\n    function scheduleVotes(address[] calldata groups, uint256[] calldata votes)\n        external\n        payable\n        onlyManager\n    {\n        if (groups.length != votes.length) {\n            revert GroupsAndVotesArrayLengthsMismatch();\n        }\n\n        uint256 totalVotes;\n        for (uint256 i = 0; i < groups.length; i++) {\n            scheduledVotes[groups[i]].toVote += votes[i];\n            totalVotes += votes[i];\n            emit VotesScheduled(groups[i], votes[i]);\n        }\n\n        if (totalVotes != uint256(msg.value)) {\n            revert TotalVotesMismatch(msg.value, totalVotes);\n        }\n    }\n\n    /**\n     * @notice Schedule a list of withdrawals to be refunded to a beneficiary.\n     * @param groups The groups the deposited CELO is intended to be withdrawn from.\n     * @param withdrawals The amount of CELO to withdraw for each respective group.\n     * @param beneficiary The account that will receive the CELO once it's withdrawn.\n     * from `groups`.\n     */\n    function scheduleWithdrawals(\n        address beneficiary,\n        address[] calldata groups,\n        uint256[] calldata withdrawals\n    ) external onlyManager {\n        if (groups.length != withdrawals.length) {\n            revert GroupsAndVotesArrayLengthsMismatch();\n        }\n\n        uint256 totalWithdrawalsDelta;\n\n        for (uint256 i = 0; i < withdrawals.length; i++) {\n            uint256 celoAvailableForGroup = this.getCeloForGroup(groups[i]);\n            if (celoAvailableForGroup < withdrawals[i]) {\n                revert WithdrawalAmountTooHigh(groups[i], celoAvailableForGroup, withdrawals[i]);\n            }\n\n            scheduledVotes[groups[i]].toWithdraw += withdrawals[i];\n            scheduledVotes[groups[i]].toWithdrawFor[beneficiary] += withdrawals[i];\n            totalWithdrawalsDelta += withdrawals[i];\n\n            emit CeloWithdrawalScheduled(beneficiary, groups[i], withdrawals[i]);\n        }\n\n        totalScheduledWithdrawals += totalWithdrawalsDelta;\n    }\n\n    /**\n     * @notice Starts withdrawal of CELO from `group`. If there is any unlocked CELO for the group,\n     * that CELO is used for immediate withdrawal. Otherwise, CELO is taken from pending and active\n     * votes, which are subject to the unlock period of LockedGold.sol.\n     * @dev Only callable by the Staked CELO contract, which must restrict which groups are valid.\n     * @param group The group to withdraw CELO from.\n     * @param beneficiary The recipient of the withdrawn CELO.\n     * @param lesserAfterPendingRevoke Used by Election's `revokePending`. This is the group that\n     * is before `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of pending votes has occurred.\n     * @param greaterAfterPendingRevoke Used by Election's `revokePending`. This is the group that\n     * is after `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of pending votes has occurred.\n     * @param lesserAfterActiveRevoke Used by Election's `revokeActive`. This is the group that\n     * is before `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of active votes has occurred.\n     * @param greaterAfterActiveRevoke Used by Election's `revokeActive`. This is the group that\n     * is after `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of active votes has occurred.\n     * @param index Used by Election's `revokePending` and `revokeActive`. This is the index of\n     * `group` in the this contract's array of groups it is voting for.\n     * @return The amount of immediately withdrawn CELO that is obtained from scheduledVotes\n     * for `group`.\n     */\n    function withdraw(\n        address beneficiary,\n        address group,\n        address lesserAfterPendingRevoke,\n        address greaterAfterPendingRevoke,\n        address lesserAfterActiveRevoke,\n        address greaterAfterActiveRevoke,\n        uint256 index\n    ) external returns (uint256) {\n        uint256 withdrawalAmount = scheduledVotes[group].toWithdrawFor[beneficiary];\n        if (withdrawalAmount == 0) {\n            revert NoScheduledWithdrawal(beneficiary, group);\n        }\n        // Emit early to return without needing to emit in multiple places.\n        emit CeloWithdrawalStarted(beneficiary, group, withdrawalAmount);\n        // Subtract withdrawal amount from all bookkeeping\n        scheduledVotes[group].toWithdrawFor[beneficiary] = 0;\n        scheduledVotes[group].toWithdraw -= withdrawalAmount;\n        totalScheduledWithdrawals -= withdrawalAmount;\n\n        uint256 immediateWithdrawalAmount = scheduledVotes[group].toVote;\n\n        if (immediateWithdrawalAmount > 0) {\n            if (immediateWithdrawalAmount > withdrawalAmount) {\n                immediateWithdrawalAmount = withdrawalAmount;\n            }\n\n            scheduledVotes[group].toVote -= immediateWithdrawalAmount;\n\n            // The benefit of using getGoldToken().transfer() rather than transferring\n            // using a message value is that the recepient's callback is not called, thus\n            // removing concern that a malicious beneficiary would control code at this point.\n            bool success = getGoldToken().transfer(beneficiary, immediateWithdrawalAmount);\n            if (!success) {\n                revert CeloTransferFailed(beneficiary, immediateWithdrawalAmount);\n            }\n            // If we've withdrawn the entire amount, return.\n            if (immediateWithdrawalAmount == withdrawalAmount) {\n                return immediateWithdrawalAmount;\n            }\n        }\n\n        // We know that withdrawalAmount is >= immediateWithdrawalAmount.\n        uint256 revokeAmount = withdrawalAmount - immediateWithdrawalAmount;\n\n        ILockedGold lockedGold = getLockedGold();\n\n        // Save the pending withdrawal for `beneficiary`.\n        pendingWithdrawals[beneficiary].push(\n            PendingWithdrawal(revokeAmount, block.timestamp + lockedGold.unlockingPeriod())\n        );\n\n        revokeVotes(\n            group,\n            revokeAmount,\n            lesserAfterPendingRevoke,\n            greaterAfterPendingRevoke,\n            lesserAfterActiveRevoke,\n            greaterAfterActiveRevoke,\n            index\n        );\n\n        lockedGold.unlock(revokeAmount);\n\n        return immediateWithdrawalAmount;\n    }\n\n    /**\n     * @notice Activates any activatable pending votes for group, and locks & votes any\n     * unlocked CELO for group.\n     * @dev Callable by anyone. In practice, this is expected to be called near the end of each\n     * epoch by an off-chain agent.\n     * @param group The group to activate pending votes for and lock & vote any unlocked CELO for.\n     * @param voteLesser Used by Election's `vote`. This is the group that will recieve fewer\n     * votes than group after the votes are cast, or address(0) if no such group exists.\n     * @param voteGreater Used by Election's `vote`. This is the group that will recieve greater\n     * votes than group after the votes are cast, or address(0) if no such group exists.\n     */\n    function activateAndVote(\n        address group,\n        address voteLesser,\n        address voteGreater\n    ) external {\n        IElection election = getElection();\n\n        // The amount of unlocked CELO for group that we want to lock and vote with.\n        uint256 unlockedCeloForGroup = scheduledVotes[group].toVote;\n\n        // Reset the unlocked CELO amount for group.\n        scheduledVotes[group].toVote = 0;\n\n        // If there are activatable pending votes from this contract for group, activate them.\n        if (election.hasActivatablePendingVotes(address(this), group)) {\n            // Revert if the activation fails.\n            if (!election.activate(group)) {\n                revert ActivatePendingVotesFailed(group);\n            }\n        }\n\n        // If there is no CELO to lock up and vote with, return.\n        if (unlockedCeloForGroup == 0) {\n            return;\n        }\n\n        // Lock up the unlockedCeloForGroup in LockedGold, which increments the\n        // non-voting LockedGold balance for this contract.\n        getLockedGold().lock{value: unlockedCeloForGroup}();\n\n        // Vote for group using the newly locked CELO, reverting if it fails.\n        if (!election.vote(group, unlockedCeloForGroup, voteLesser, voteGreater)) {\n            revert VoteFailed(group, unlockedCeloForGroup);\n        }\n    }\n\n    /**\n     * @notice Finishes a pending withdrawal created as a result of a `withdrawCelo` call,\n     * claiming CELO after the `unlockingPeriod` defined in LockedGold.sol.\n     * @dev Callable by anyone, but ultimatly the withdrawal goes to `beneficiary`.\n     * The pending withdrawal info found in both StakedCeloGroupVoter and LockedGold must match\n     * to ensure that the beneficiary is claiming the appropriate pending withdrawal.\n     * @param beneficiary The account that owns the pending withdrawal being processed.\n     * @param localPendingWithdrawalIndex The index of the pending withdrawal to finish\n     * in pendingWithdrawals[beneficiary] array.\n     * @param lockedGoldPendingWithdrawalIndex The index of the pending withdrawal to finish\n     * in LockedGold.\n     * @return amount The amount of CELO sent to `beneficiary`.\n     */\n    function finishPendingWithdrawal(\n        address beneficiary,\n        uint256 localPendingWithdrawalIndex,\n        uint256 lockedGoldPendingWithdrawalIndex\n    ) external returns (uint256 amount) {\n        (uint256 value, uint256 timestamp) = validatePendingWithdrawalRequest(\n            beneficiary,\n            localPendingWithdrawalIndex,\n            lockedGoldPendingWithdrawalIndex\n        );\n\n        // Remove the pending withdrawal.\n        PendingWithdrawal[] storage localPendingWithdrawals = pendingWithdrawals[beneficiary];\n        localPendingWithdrawals[localPendingWithdrawalIndex] = localPendingWithdrawals[\n            localPendingWithdrawals.length - 1\n        ];\n        localPendingWithdrawals.pop();\n\n        // Process withdrawal.\n        getLockedGold().withdraw(lockedGoldPendingWithdrawalIndex);\n\n        /**\n         * The benefit of using getGoldToken().transfer() is that the recepients callback\n         * is not called thus removing concern that a malicious\n         * caller would control code at this point.\n         */\n        bool success = getGoldToken().transfer(beneficiary, value);\n        if (!success) {\n            revert CeloTransferFailed(beneficiary, value);\n        }\n\n        emit CeloWithdrawalFinished(beneficiary, value, timestamp);\n        return value;\n    }\n\n    /**\n     * @notice Gets the total amount of CELO this contract controls. This is the\n     * unlocked CELO balance of the contract plus the amount of LockedGold for this contract,\n     * which included unvoting and voting LockedGold.\n     * @return The total amount of CELO this contract controls, including LockedGold.\n     */\n    function getTotalCelo() external view returns (uint256) {\n        // LockedGold's getAccountTotalLockedGold returns any non-voting locked gold +\n        // voting locked gold for each group the account is voting for, which is an\n        // O(# of groups voted for) operation.\n        return\n            address(this).balance +\n            getLockedGold().getAccountTotalLockedGold(address(this)) -\n            totalScheduledWithdrawals;\n    }\n\n    /**\n     * @notice Returns the pending withdrawals for a beneficiary.\n     * @param beneficiary The address of the beneficiary who initiated the pending withdrawal.\n     * @return values The values of pending withdrawals.\n     * @return timestamps The timestamps of pending withdrawals.\n     */\n    function getPendingWithdrawals(address beneficiary)\n        external\n        view\n        returns (uint256[] memory values, uint256[] memory timestamps)\n    {\n        uint256 length = pendingWithdrawals[beneficiary].length;\n        values = new uint256[](length);\n        timestamps = new uint256[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            PendingWithdrawal memory p = pendingWithdrawals[beneficiary][i];\n            values[i] = p.value;\n            timestamps[i] = p.timestamp;\n        }\n\n        return (values, timestamps);\n    }\n\n    /**\n     * @notice Returns the number of pending withdrawals for a beneficiary.\n     * @param beneficiary The address of the beneficiary who initiated the pending withdrawal.\n     * @return The numbers of pending withdrawals for `beneficiary`\n     */\n    function getNumberPendingWithdrawals(address beneficiary) external view returns (uint256) {\n        return pendingWithdrawals[beneficiary].length;\n    }\n\n    /**\n     * @notice Returns a pending withdrawals for a beneficiary.\n     * @param beneficiary The address of the beneficiary who initiated the pending withdrawal.\n     * @param index The index in `beneficiary`'s pendingWithdrawals array.\n     * @return value The values of the pending withdrawal.\n     * @return timestamp The timestamp of the pending withdrawal.\n     */\n    function getPendingWithdrawal(address beneficiary, uint256 index)\n        external\n        view\n        returns (uint256 value, uint256 timestamp)\n    {\n        PendingWithdrawal memory withdrawal = pendingWithdrawals[beneficiary][index];\n\n        return (withdrawal.value, withdrawal.timestamp);\n    }\n\n    /**\n     * @notice Returns the total amount of CELO directed towards `group`. This is\n     * the Unlocked CELO balance for `group` plus the combined amount in pending\n     * and active votes made by this contract.\n     * @param group The address of the validator group.\n     * @return The total amount of CELO directed towards `group`.\n     */\n    function getCeloForGroup(address group) external view returns (uint256) {\n        return\n            getElection().getTotalVotesForGroupByAccount(group, address(this)) +\n            scheduledVotes[group].toVote -\n            scheduledVotes[group].toWithdraw;\n    }\n\n    /**\n     * @notice Returns the total amount of CELO that's scheduled to vote for a group.\n     * @param group The address of the validator group.\n     * @return The total amount of CELO directed towards `group`.\n     */\n    function scheduledVotesForGroup(address group) external view returns (uint256) {\n        return scheduledVotes[group].toVote;\n    }\n\n    /**\n     * @notice Returns the total amount of CELO that's scheduled to be withdrawn for a group.\n     * @param group The address of the validator group.\n     * @return The total amount of CELO to be withdrawn for `group`.\n     */\n    function scheduledWithdrawalsForGroup(address group) external view returns (uint256) {\n        return scheduledVotes[group].toWithdraw;\n    }\n\n    /**\n     * @notice Returns the total amount of CELO that's scheduled to be withdrawn for a group\n     * scoped by a beneficiary.\n     * @param group The address of the validator group.\n     * @param beneficiary The beneficiary of the withdrawal.\n     * @return The total amount of CELO to be withdrawn for `group` by `beneficiary`.\n     */\n    function scheduledWithdrawalsForGroupAndBeneficiary(address group, address beneficiary)\n        external\n        view\n        returns (uint256)\n    {\n        return scheduledVotes[group].toWithdrawFor[beneficiary];\n    }\n\n    /**\n     * @notice Revokes votes from a validator group. It first attempts to revoke pending votes,\n     * and then active votes if necessary.\n     * @dev Reverts if `revokeAmount` exceeds the total number of pending and active votes for\n     * the group from this contract.\n     * @param group The group to withdraw CELO from.\n     * @param revokeAmount The amount of votes to revoke.\n     * @param lesserAfterPendingRevoke Used by Election's `revokePending`. This is the group that\n     * is before `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of pending votes has occurred.\n     * @param greaterAfterPendingRevoke Used by Election's `revokePending`. This is the group that\n     * is after `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of pending votes has occurred.\n     * @param lesserAfterActiveRevoke Used by Election's `revokeActive`. This is the group that\n     * is before `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of active votes has occurred.\n     * @param greaterAfterActiveRevoke Used by Election's `revokeActive`. This is the group that\n     * is after `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of active votes has occurred.\n     * @param index Used by Election's `revokePending` and `revokeActive`. This is the index of\n     * `group` in the this contract's array of groups it is voting for.\n     */\n    function revokeVotes(\n        address group,\n        uint256 revokeAmount,\n        address lesserAfterPendingRevoke,\n        address greaterAfterPendingRevoke,\n        address lesserAfterActiveRevoke,\n        address greaterAfterActiveRevoke,\n        uint256 index\n    ) internal {\n        IElection election = getElection();\n        uint256 pendingVotesAmount = election.getPendingVotesForGroupByAccount(\n            group,\n            address(this)\n        );\n\n        uint256 toRevokeFromPending = Math.min(revokeAmount, pendingVotesAmount);\n        if (toRevokeFromPending > 0) {\n            if (\n                !election.revokePending(\n                    group,\n                    toRevokeFromPending,\n                    lesserAfterPendingRevoke,\n                    greaterAfterPendingRevoke,\n                    index\n                )\n            ) {\n                revert RevokePendingFailed(group, revokeAmount);\n            }\n        }\n\n        uint256 toRevokeFromActive = revokeAmount - toRevokeFromPending;\n        if (toRevokeFromActive == 0) {\n            return;\n        }\n\n        uint256 activeVotesAmount = election.getActiveVotesForGroupByAccount(group, address(this));\n\n        if (activeVotesAmount < toRevokeFromActive) {\n            revert InsufficientRevokableVotes(group, revokeAmount);\n        }\n\n        if (\n            !election.revokeActive(\n                group,\n                toRevokeFromActive,\n                lesserAfterActiveRevoke,\n                greaterAfterActiveRevoke,\n                index\n            )\n        ) {\n            revert RevokeActiveFailed(group, revokeAmount);\n        }\n    }\n\n    /**\n     * @notice Validates a local pending withdrawal matches a given beneficiary and LockedGold\n     * pending withdrawal.\n     * @dev See finishPendingWithdrawal.\n     * @param beneficiary The account that owns the pending withdrawal being processed.\n     * @param localPendingWithdrawalIndex The index of the pending withdrawal to finish\n     * in pendingWithdrawals[beneficiary] array.\n     * @param lockedGoldPendingWithdrawalIndex The index of the pending withdrawal to finish\n     * in LockedGold.\n     * @return value The value of the pending withdrawal.\n     * @return timestamp The timestamp of the pending withdrawal.\n     */\n    function validatePendingWithdrawalRequest(\n        address beneficiary,\n        uint256 localPendingWithdrawalIndex,\n        uint256 lockedGoldPendingWithdrawalIndex\n    ) internal view returns (uint256 value, uint256 timestamp) {\n        if (localPendingWithdrawalIndex >= pendingWithdrawals[beneficiary].length) {\n            revert PendingWithdrawalIndexTooHigh(\n                localPendingWithdrawalIndex,\n                pendingWithdrawals[beneficiary].length\n            );\n        }\n\n        (\n            uint256 lockedGoldPendingWithdrawalValue,\n            uint256 lockedGoldPendingWithdrawalTimestamp\n        ) = getLockedGold().getPendingWithdrawal(address(this), lockedGoldPendingWithdrawalIndex);\n\n        PendingWithdrawal memory pendingWithdrawal = pendingWithdrawals[beneficiary][\n            localPendingWithdrawalIndex\n        ];\n\n        if (pendingWithdrawal.value != lockedGoldPendingWithdrawalValue) {\n            revert InconsistentPendingWithdrawalValues(\n                pendingWithdrawal.value,\n                lockedGoldPendingWithdrawalValue\n            );\n        }\n\n        if (pendingWithdrawal.timestamp != lockedGoldPendingWithdrawalTimestamp) {\n            revert InconsistentPendingWithdrawalTimestamps(\n                pendingWithdrawal.timestamp,\n                lockedGoldPendingWithdrawalTimestamp\n            );\n        }\n\n        return (pendingWithdrawal.value, pendingWithdrawal.timestamp);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/Managed.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @title Used via inheritance to grant special access control to the Manager\n * contract.\n */\nabstract contract Managed is Initializable, OwnableUpgradeable {\n    address public manager;\n\n    /**\n     * @notice Emitted when the manager is initially set or later modified.\n     * @param manager The new managing account address.\n     */\n    event ManagerSet(address indexed manager);\n\n    /**\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\n     *  @param caller `msg.sender` that called the function.\n     */\n    error CallerNotManager(address caller);\n\n    /**\n     * @notice Used when a passed address is address(0).\n     */\n    error NullAddress();\n\n    /**\n     * @dev Initializes the contract in an upgradable context.\n     * @param _manager The initial managing address.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __Managed_init(address _manager) internal onlyInitializing {\n        _setManager(_manager);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the manager.\n     */\n    modifier onlyManager() {\n        if (manager != msg.sender) {\n            revert CallerNotManager(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @notice Sets the manager address.\n     * @param _manager The new manager address.\n     */\n    function setManager(address _manager) external onlyOwner {\n        _setManager(_manager);\n    }\n\n    /**\n     * @notice Sets the manager address.\n     * @param _manager The new manager address.\n     */\n    function _setManager(address _manager) internal {\n        if (_manager == address(0)) {\n            revert NullAddress();\n        }\n        manager = _manager;\n        emit ManagerSet(_manager);\n    }\n}\n"
    },
    "contracts/common/UUPSOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/**\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\n */\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\n    /**\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\n     * adds the onlyOwner modifer.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n}\n"
    },
    "contracts/common/UsingRegistryUpgradeable.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/IAccounts.sol\";\nimport \"../interfaces/IElection.sol\";\nimport \"../interfaces/IGoldToken.sol\";\nimport \"../interfaces/ILockedGold.sol\";\nimport \"../interfaces/IRegistry.sol\";\n\n/**\n * @title A helper for getting Celo core contracts from the Registry.\n */\nabstract contract UsingRegistryUpgradeable is Initializable {\n    /**\n     * @notice Initializes the UsingRegistryUpgradable contract in an upgradable scenario\n     * @param _registry The address of the Registry. For convenience, if the zero address is\n     * provided, the registry is set to the canonical Registry address, i.e. 0x0...ce10. This\n     * parameter should only be a non-zero address when testing.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __UsingRegistry_init(address _registry) internal onlyInitializing {\n        if (_registry == address(0)) {\n            registry = IRegistry(CANONICAL_REGISTRY);\n        } else {\n            registry = IRegistry(_registry);\n        }\n    }\n\n    /// @notice The canonical address of the Registry.\n    address internal constant CANONICAL_REGISTRY = 0x000000000000000000000000000000000000ce10;\n\n    /// @notice The registry ID for the Accounts contract.\n    bytes32 private constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\"Accounts\"));\n\n    /// @notice The registry ID for the Election contract.\n    bytes32 private constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\"Election\"));\n\n    /// @notice The registry ID for the GoldToken contract.\n    bytes32 private constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\"GoldToken\"));\n\n    /// @notice The registry ID for the LockedGold contract.\n    bytes32 private constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\"LockedGold\"));\n\n    /// @notice The Registry.\n    IRegistry public registry;\n\n    /**\n     * @notice Gets the Accounts contract from the Registry.\n     * @return The Accounts contract from the Registry.\n     */\n    function getAccounts() internal view returns (IAccounts) {\n        return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the Election contract from the Registry.\n     * @return The Election contract from the Registry.\n     */\n    function getElection() internal view returns (IElection) {\n        return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the GoldToken contract from the Registry.\n     * @return The GoldToken contract from the Registry.\n     */\n    function getGoldToken() internal view returns (IGoldToken) {\n        return IGoldToken(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the LockedGold contract from the Registry.\n     * @return The LockedGold contract from the Registry.\n     */\n    function getLockedGold() internal view returns (ILockedGold) {\n        return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\n    }\n}\n"
    },
    "contracts/interfaces/IAccount.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IAccount {\n    function getTotalCelo() external view returns (uint256);\n\n    function getCeloForGroup(address) external view returns (uint256);\n\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\n\n    function scheduledVotesForGroup(address group) external returns (uint256);\n\n    function scheduleWithdrawals(\n        address beneficiary,\n        address[] calldata group,\n        uint256[] calldata withdrawals\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IAccounts.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IAccounts {\n    function isAccount(address) external view returns (bool);\n\n    function voteSignerToAccount(address) external view returns (address);\n\n    function validatorSignerToAccount(address) external view returns (address);\n\n    function attestationSignerToAccount(address) external view returns (address);\n\n    function signerToAccount(address) external view returns (address);\n\n    function getAttestationSigner(address) external view returns (address);\n\n    function getValidatorSigner(address) external view returns (address);\n\n    function getVoteSigner(address) external view returns (address);\n\n    function hasAuthorizedVoteSigner(address) external view returns (bool);\n\n    function hasAuthorizedValidatorSigner(address) external view returns (bool);\n\n    function hasAuthorizedAttestationSigner(address) external view returns (bool);\n\n    function setAccountDataEncryptionKey(bytes calldata) external;\n\n    function setMetadataURL(string calldata) external;\n\n    function setName(string calldata) external;\n\n    function setWalletAddress(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function setAccount(\n        string calldata,\n        bytes calldata,\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function getDataEncryptionKey(address) external view returns (bytes memory);\n\n    function getWalletAddress(address) external view returns (address);\n\n    function getMetadataURL(address) external view returns (string memory);\n\n    function batchGetMetadataURL(address[] calldata)\n        external\n        view\n        returns (uint256[] memory, bytes memory);\n\n    function getName(address) external view returns (string memory);\n\n    function authorizeVoteSigner(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function authorizeValidatorSigner(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function authorizeValidatorSignerWithPublicKey(\n        address,\n        uint8,\n        bytes32,\n        bytes32,\n        bytes calldata\n    ) external;\n\n    function authorizeValidatorSignerWithKeys(\n        address,\n        uint8,\n        bytes32,\n        bytes32,\n        bytes calldata,\n        bytes calldata,\n        bytes calldata\n    ) external;\n\n    function authorizeAttestationSigner(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function createAccount() external returns (bool);\n}\n"
    },
    "contracts/interfaces/IElection.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IElection {\n    function electValidatorSigners() external view returns (address[] memory);\n\n    function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\n\n    function vote(\n        address,\n        uint256,\n        address,\n        address\n    ) external returns (bool);\n\n    function activate(address) external returns (bool);\n\n    function activateForAccount(address, address) external returns (bool);\n\n    function revokeActive(\n        address,\n        uint256,\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function revokeAllActive(\n        address,\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function revokePending(\n        address,\n        uint256,\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function markGroupIneligible(address) external;\n\n    function markGroupEligible(\n        address,\n        address,\n        address\n    ) external;\n\n    function forceDecrementVotes(\n        address,\n        uint256,\n        address[] calldata,\n        address[] calldata,\n        uint256[] calldata\n    ) external returns (uint256);\n\n    // view functions\n    function getElectableValidators() external view returns (uint256, uint256);\n\n    function getElectabilityThreshold() external view returns (uint256);\n\n    function getNumVotesReceivable(address) external view returns (uint256);\n\n    function getTotalVotes() external view returns (uint256);\n\n    function getActiveVotes() external view returns (uint256);\n\n    function getTotalVotesByAccount(address) external view returns (uint256);\n\n    function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\n\n    function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\n\n    function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\n\n    function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\n\n    function getTotalVotesForGroup(address) external view returns (uint256);\n\n    function getActiveVotesForGroup(address) external view returns (uint256);\n\n    function getPendingVotesForGroup(address) external view returns (uint256);\n\n    function getGroupEligibility(address) external view returns (bool);\n\n    function getGroupEpochRewards(\n        address,\n        uint256,\n        uint256[] calldata\n    ) external view returns (uint256);\n\n    function getGroupsVotedForByAccount(address) external view returns (address[] memory);\n\n    function getEligibleValidatorGroups() external view returns (address[] memory);\n\n    function getTotalVotesForEligibleValidatorGroups()\n        external\n        view\n        returns (address[] memory, uint256[] memory);\n\n    function getCurrentValidatorSigners() external view returns (address[] memory);\n\n    function canReceiveVotes(address, uint256) external view returns (bool);\n\n    function hasActivatablePendingVotes(address, address) external view returns (bool);\n\n    // only owner\n    function setElectableValidators(uint256, uint256) external returns (bool);\n\n    function setMaxNumGroupsVotedFor(uint256) external returns (bool);\n\n    function setElectabilityThreshold(uint256) external returns (bool);\n\n    // only VM\n    function distributeEpochRewards(\n        address,\n        uint256,\n        address,\n        address\n    ) external;\n\n    function maxNumGroupsVotedFor() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGoldToken.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IGoldToken {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferWithComment(\n        address to,\n        uint256 value,\n        string calldata comment\n    ) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\n\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ILockedGold.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface ILockedGold {\n    function unlockingPeriod() external view returns (uint256);\n\n    function incrementNonvotingAccountBalance(address, uint256) external;\n\n    function decrementNonvotingAccountBalance(address, uint256) external;\n\n    function getAccountTotalLockedGold(address) external view returns (uint256);\n\n    function getTotalLockedGold() external view returns (uint256);\n\n    function getPendingWithdrawal(address, uint256) external view returns (uint256, uint256);\n\n    function getPendingWithdrawals(address)\n        external\n        view\n        returns (uint256[] memory, uint256[] memory);\n\n    function getTotalPendingWithdrawals(address) external view returns (uint256);\n\n    function lock() external payable;\n\n    function unlock(uint256) external;\n\n    function relock(uint256, uint256) external;\n\n    function withdraw(uint256) external;\n\n    function slash(\n        address account,\n        uint256 penalty,\n        address reporter,\n        uint256 reward,\n        address[] calldata lessers,\n        address[] calldata greaters,\n        uint256[] calldata indices\n    ) external;\n\n    function isSlasher(address) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IRegistry.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IRegistry {\n    function setAddressFor(string calldata, address) external;\n\n    function getAddressForOrDie(bytes32) external view returns (address);\n\n    function getAddressFor(bytes32) external view returns (address);\n\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address);\n\n    function getAddressForString(string calldata identifier) external view returns (address);\n\n    function isOneOf(bytes32[] calldata, address) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}