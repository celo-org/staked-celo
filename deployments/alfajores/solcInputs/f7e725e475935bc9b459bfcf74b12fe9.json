{
  "language": "Solidity",
  "sources": {
    "contracts/Account.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./Managed.sol\";\nimport \"./common/UUPSOwnableUpgradeable.sol\";\nimport \"./common/UsingRegistryUpgradeable.sol\";\nimport \"./interfaces/IAccount.sol\";\n\n/**\n * @title A contract that facilitates voting on behalf of StakedCelo.sol.\n * @notice This contract depends on the Manager to decide how to distribute votes and how to\n * keep track of ownership of CELO voted via this contract.\n */\ncontract Account is UUPSOwnableUpgradeable, UsingRegistryUpgradeable, Managed, IAccount {\n    /**\n     * @notice Used to keep track of a pending withdrawal. A similar data structure\n     * exists within LockedGold.sol, but it only keeps track of pending withdrawals\n     * by the msg.sender to the LockedGold contract.\n     * Because this contract facilitates withdrawals for different beneficiaries,\n     * this contract must keep track of which beneficiaries correspond to which\n     * pending withdrawals to prevent someone from finalizing/taking a pending\n     * withdrawal they did not create.\n     * @param value The withdrawal amount.\n     * @param timestamp The timestamp at which the withdrawal amount becomes available.\n     */\n    struct PendingWithdrawal {\n        uint256 value;\n        uint256 timestamp;\n    }\n\n    /**\n     * @notice Used to keep track of CELO that is scheduled to be used for\n     * voting or revoking for a validator group.\n     * @param toVote Amount of CELO held by this contract intended to vote for a group.\n     * @param toWithdraw Amount of CELO that's scheduled for withdrawal.\n     * @param toWithdrawFor Amount of CELO that's scheduled for withdrawal grouped by beneficiary.\n     */\n    struct ScheduledVotes {\n        uint256 toVote;\n        uint256 toWithdraw;\n        mapping(address => uint256) toWithdrawFor;\n    }\n\n    /**\n     * @notice Keyed by beneficiary address, the related array of pending withdrawals.\n     * See `PendingWithdrawal` for more info.\n     */\n    mapping(address => PendingWithdrawal[]) public pendingWithdrawals;\n\n    /**\n     * @notice Keyed by validator group address, the ScheduledVotes struct\n     * which holds the amount of CELO that's scheduled to vote, the amount\n     * of CELO scheduled to be withdrawn, and the amount of CELO to be\n     * withdrawn for each beneficiary.\n     */\n    mapping(address => ScheduledVotes) private scheduledVotes;\n\n    /**\n     * @notice Total amount of CELO scheduled to be withdrawn from all groups\n     * by all beneficiaries.\n     */\n    uint256 public totalScheduledWithdrawals;\n\n    /**\n     * @notice Emitted when CELO is scheduled for voting for a given group.\n     * @param group The validator group the CELO is intended to vote for.\n     * @param amount The amount of CELO scheduled.\n     */\n    event VotesScheduled(address indexed group, uint256 amount);\n\n    /**\n     * @notice Emitted when CELO withdrawal is scheduled for a group.\n     * @param group The validator group the CELO is withdrawn from.\n     * @param withdrawalAmount The amount of CELO requested for withdrawal.\n     * @param beneficiary The user for whom the withdrawal amount is intended for.\n     */\n    event CeloWithdrawalScheduled(\n        address indexed beneficiary,\n        address indexed group,\n        uint256 withdrawalAmount\n    );\n\n    /**\n     * @notice Emitted when CELO withdrawal kicked off for group. Immediate withdrawals\n     * are not included in this event, but can be identified by a GoldToken.sol transfer\n     * from this contract.\n     * @param group The validator group the CELO is withdrawn from.\n     * @param withdrawalAmount The amount of CELO requested for withdrawal.\n     * @param beneficiary The user for whom the withdrawal amount is intended for.\n     */\n    event CeloWithdrawalStarted(\n        address indexed beneficiary,\n        address indexed group,\n        uint256 withdrawalAmount\n    );\n\n    /**\n     * @notice Emitted when a CELO withdrawal completes for `beneficiary`.\n     * @param beneficiary The user for whom the withdrawal amount is intended.\n     * @param amount The amount of CELO requested for withdrawal.\n     * @param timestamp The timestamp of the pending withdrawal.\n     */\n    event CeloWithdrawalFinished(address indexed beneficiary, uint256 amount, uint256 timestamp);\n\n    /// @notice Used when the creation of an account with Accounts.sol fails.\n    error AccountCreationFailed();\n\n    /// @notice Used when arrays passed for scheduling votes don't have matching lengths.\n    error GroupsAndVotesArrayLengthsMismatch();\n\n    /**\n     * @notice Used when the sum of votes per groups during vote scheduling\n     * doesn't match the `msg.value` sent with the call.\n     * @param sentValue The `msg.value` of the call.\n     * @param expectedValue The expected sum of votes for groups.\n     */\n    error TotalVotesMismatch(uint256 sentValue, uint256 expectedValue);\n\n    /// @notice Used when activating of pending votes via Election has failed.\n    error ActivatePendingVotesFailed(address group);\n\n    /// @notice Used when voting via Election has failed.\n    error VoteFailed(address group, uint256 amount);\n\n    /// @notice Used when call to Election.sol's `revokePendingVotes` fails.\n    error RevokePendingFailed(address group, uint256 amount);\n\n    /// @notice Used when call to Election.sol's `revokeActiveVotes` fails.\n    error RevokeActiveFailed(address group, uint256 amount);\n\n    /**\n     * @notice Used when active + pending votes amount is unable to fulfil a\n     * withdrawal request amount.\n     */\n    error InsufficientRevokableVotes(address group, uint256 amount);\n\n    /// @notice Used when unable to transfer CELO.\n    error CeloTransferFailed(address to, uint256 amount);\n\n    /**\n     * @notice Used when `pendingWithdrawalIndex` is too high for the\n     * beneficiary's pending withdrawals array.\n     */\n    error PendingWithdrawalIndexTooHigh(\n        uint256 pendingWithdrawalIndex,\n        uint256 pendingWithdrawalsLength\n    );\n\n    /**\n     * @notice Used when attempting to schedule more withdrawals\n     * than CELO available to the contract.\n     * @param group The offending group.\n     * @param celoAvailable CELO available to the group across scheduled, pending and active votes.\n     * @param celoToWindraw total amount of CELO that would be scheduled to be withdrawn.\n     */\n    error WithdrawalAmountTooHigh(address group, uint256 celoAvailable, uint256 celoToWindraw);\n\n    /**\n     * @notice Used when any of the resolved stakedCeloGroupVoter.pendingWithdrawal\n     * values do not match the equivalent record in lockedGold.pendingWithdrawals.\n     */\n    error InconsistentPendingWithdrawalValues(\n        uint256 localPendingWithdrawalValue,\n        uint256 lockedGoldPendingWithdrawalValue\n    );\n\n    /**\n     * @notice Used when any of the resolved stakedCeloGroupVoter.pendingWithdrawal\n     * timestamps do not match the equivalent record in lockedGold.pendingWithdrawals.\n     */\n    error InconsistentPendingWithdrawalTimestamps(\n        uint256 localPendingWithdrawalTimestamp,\n        uint256 lockedGoldPendingWithdrawalTimestamp\n    );\n\n    /// @notice There's no amount of scheduled withdrawal for the given beneficiary and group.\n    error NoScheduledWithdrawal(address beneficiary, address group);\n\n    /// @notice Voting for proposal was not successfull.\n    error VotingNotSuccessful(uint256 proposalId);\n\n    /**\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\n     * implementation gets initialized.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    constructor() initializer {}\n\n    /**\n     * @param _registry The address of the Celo registry.\n     * @param _manager The address of the Manager contract.\n     * @param _owner The address of the contract owner.\n     */\n    function initialize(\n        address _registry,\n        address _manager,\n        address _owner\n    ) external initializer {\n        __UsingRegistry_init(_registry);\n        __Managed_init(_manager);\n        _transferOwnership(_owner);\n\n        // Create an account so this contract can vote.\n        if (!getAccounts().createAccount()) {\n            revert AccountCreationFailed();\n        }\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    /**\n     * @notice Deposits CELO sent via msg.value as unlocked CELO intended as\n     * votes for groups.\n     * @dev Only callable by the Staked CELO contract, which must restrict which groups are valid.\n     * @param groups The groups the deposited CELO is intended to vote for.\n     * @param votes The amount of CELO to schedule for each respective group\n     * from `groups`.\n     */\n    function scheduleVotes(address[] calldata groups, uint256[] calldata votes)\n        external\n        payable\n        onlyManager\n    {\n        if (groups.length != votes.length) {\n            revert GroupsAndVotesArrayLengthsMismatch();\n        }\n\n        uint256 totalVotes;\n        for (uint256 i = 0; i < groups.length; i++) {\n            scheduledVotes[groups[i]].toVote += votes[i];\n            totalVotes += votes[i];\n            emit VotesScheduled(groups[i], votes[i]);\n        }\n\n        if (totalVotes != uint256(msg.value)) {\n            revert TotalVotesMismatch(msg.value, totalVotes);\n        }\n    }\n\n    /**\n     * @notice Schedule a list of withdrawals to be refunded to a beneficiary.\n     * @param groups The groups the deposited CELO is intended to be withdrawn from.\n     * @param withdrawals The amount of CELO to withdraw for each respective group.\n     * @param beneficiary The account that will receive the CELO once it's withdrawn.\n     * from `groups`.\n     */\n    function scheduleWithdrawals(\n        address beneficiary,\n        address[] calldata groups,\n        uint256[] calldata withdrawals\n    ) external onlyManager {\n        if (groups.length != withdrawals.length) {\n            revert GroupsAndVotesArrayLengthsMismatch();\n        }\n\n        uint256 totalWithdrawalsDelta;\n\n        for (uint256 i = 0; i < withdrawals.length; i++) {\n            uint256 celoAvailableForGroup = this.getCeloForGroup(groups[i]);\n            if (celoAvailableForGroup < withdrawals[i]) {\n                revert WithdrawalAmountTooHigh(groups[i], celoAvailableForGroup, withdrawals[i]);\n            }\n\n            scheduledVotes[groups[i]].toWithdraw += withdrawals[i];\n            scheduledVotes[groups[i]].toWithdrawFor[beneficiary] += withdrawals[i];\n            totalWithdrawalsDelta += withdrawals[i];\n\n            emit CeloWithdrawalScheduled(beneficiary, groups[i], withdrawals[i]);\n        }\n\n        totalScheduledWithdrawals += totalWithdrawalsDelta;\n    }\n\n    /**\n     * @notice Starts withdrawal of CELO from `group`. If there is any unlocked CELO for the group,\n     * that CELO is used for immediate withdrawal. Otherwise, CELO is taken from pending and active\n     * votes, which are subject to the unlock period of LockedGold.sol.\n     * @dev Only callable by the Staked CELO contract, which must restrict which groups are valid.\n     * @param group The group to withdraw CELO from.\n     * @param beneficiary The recipient of the withdrawn CELO.\n     * @param lesserAfterPendingRevoke Used by Election's `revokePending`. This is the group that\n     * is before `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of pending votes has occurred.\n     * @param greaterAfterPendingRevoke Used by Election's `revokePending`. This is the group that\n     * is after `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of pending votes has occurred.\n     * @param lesserAfterActiveRevoke Used by Election's `revokeActive`. This is the group that\n     * is before `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of active votes has occurred.\n     * @param greaterAfterActiveRevoke Used by Election's `revokeActive`. This is the group that\n     * is after `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of active votes has occurred.\n     * @param index Used by Election's `revokePending` and `revokeActive`. This is the index of\n     * `group` in the this contract's array of groups it is voting for.\n     * @return The amount of immediately withdrawn CELO that is obtained from scheduledVotes\n     * for `group`.\n     */\n    function withdraw(\n        address beneficiary,\n        address group,\n        address lesserAfterPendingRevoke,\n        address greaterAfterPendingRevoke,\n        address lesserAfterActiveRevoke,\n        address greaterAfterActiveRevoke,\n        uint256 index\n    ) external returns (uint256) {\n        uint256 withdrawalAmount = scheduledVotes[group].toWithdrawFor[beneficiary];\n        if (withdrawalAmount == 0) {\n            revert NoScheduledWithdrawal(beneficiary, group);\n        }\n        // Emit early to return without needing to emit in multiple places.\n        emit CeloWithdrawalStarted(beneficiary, group, withdrawalAmount);\n        // Subtract withdrawal amount from all bookkeeping\n        scheduledVotes[group].toWithdrawFor[beneficiary] = 0;\n        scheduledVotes[group].toWithdraw -= withdrawalAmount;\n        totalScheduledWithdrawals -= withdrawalAmount;\n\n        uint256 immediateWithdrawalAmount = scheduledVotes[group].toVote;\n\n        if (immediateWithdrawalAmount > 0) {\n            if (immediateWithdrawalAmount > withdrawalAmount) {\n                immediateWithdrawalAmount = withdrawalAmount;\n            }\n\n            scheduledVotes[group].toVote -= immediateWithdrawalAmount;\n\n            // The benefit of using getGoldToken().transfer() rather than transferring\n            // using a message value is that the recepient's callback is not called, thus\n            // removing concern that a malicious beneficiary would control code at this point.\n            bool success = getGoldToken().transfer(beneficiary, immediateWithdrawalAmount);\n            if (!success) {\n                revert CeloTransferFailed(beneficiary, immediateWithdrawalAmount);\n            }\n            // If we've withdrawn the entire amount, return.\n            if (immediateWithdrawalAmount == withdrawalAmount) {\n                return immediateWithdrawalAmount;\n            }\n        }\n\n        // We know that withdrawalAmount is >= immediateWithdrawalAmount.\n        uint256 revokeAmount = withdrawalAmount - immediateWithdrawalAmount;\n\n        ILockedGold lockedGold = getLockedGold();\n\n        // Save the pending withdrawal for `beneficiary`.\n        pendingWithdrawals[beneficiary].push(\n            PendingWithdrawal(revokeAmount, block.timestamp + lockedGold.unlockingPeriod())\n        );\n\n        revokeVotes(\n            group,\n            revokeAmount,\n            lesserAfterPendingRevoke,\n            greaterAfterPendingRevoke,\n            lesserAfterActiveRevoke,\n            greaterAfterActiveRevoke,\n            index\n        );\n\n        lockedGold.unlock(revokeAmount);\n\n        return immediateWithdrawalAmount;\n    }\n\n    /**\n     * @notice Activates any activatable pending votes for group, and locks & votes any\n     * unlocked CELO for group.\n     * @dev Callable by anyone. In practice, this is expected to be called near the end of each\n     * epoch by an off-chain agent.\n     * @param group The group to activate pending votes for and lock & vote any unlocked CELO for.\n     * @param voteLesser Used by Election's `vote`. This is the group that will recieve fewer\n     * votes than group after the votes are cast, or address(0) if no such group exists.\n     * @param voteGreater Used by Election's `vote`. This is the group that will recieve greater\n     * votes than group after the votes are cast, or address(0) if no such group exists.\n     */\n    function activateAndVote(\n        address group,\n        address voteLesser,\n        address voteGreater\n    ) external {\n        IElection election = getElection();\n\n        // The amount of unlocked CELO for group that we want to lock and vote with.\n        uint256 unlockedCeloForGroup = scheduledVotes[group].toVote;\n\n        // Reset the unlocked CELO amount for group.\n        scheduledVotes[group].toVote = 0;\n\n        // If there are activatable pending votes from this contract for group, activate them.\n        if (election.hasActivatablePendingVotes(address(this), group)) {\n            // Revert if the activation fails.\n            if (!election.activate(group)) {\n                revert ActivatePendingVotesFailed(group);\n            }\n        }\n\n        // If there is no CELO to lock up and vote with, return.\n        if (unlockedCeloForGroup == 0) {\n            return;\n        }\n\n        // Lock up the unlockedCeloForGroup in LockedGold, which increments the\n        // non-voting LockedGold balance for this contract.\n        getLockedGold().lock{value: unlockedCeloForGroup}();\n\n        // Vote for group using the newly locked CELO, reverting if it fails.\n        if (!election.vote(group, unlockedCeloForGroup, voteLesser, voteGreater)) {\n            revert VoteFailed(group, unlockedCeloForGroup);\n        }\n    }\n\n    /**\n     * @notice Finishes a pending withdrawal created as a result of a `withdrawCelo` call,\n     * claiming CELO after the `unlockingPeriod` defined in LockedGold.sol.\n     * @dev Callable by anyone, but ultimatly the withdrawal goes to `beneficiary`.\n     * The pending withdrawal info found in both StakedCeloGroupVoter and LockedGold must match\n     * to ensure that the beneficiary is claiming the appropriate pending withdrawal.\n     * @param beneficiary The account that owns the pending withdrawal being processed.\n     * @param localPendingWithdrawalIndex The index of the pending withdrawal to finish\n     * in pendingWithdrawals[beneficiary] array.\n     * @param lockedGoldPendingWithdrawalIndex The index of the pending withdrawal to finish\n     * in LockedGold.\n     * @return amount The amount of CELO sent to `beneficiary`.\n     */\n    function finishPendingWithdrawal(\n        address beneficiary,\n        uint256 localPendingWithdrawalIndex,\n        uint256 lockedGoldPendingWithdrawalIndex\n    ) external returns (uint256 amount) {\n        (uint256 value, uint256 timestamp) = validatePendingWithdrawalRequest(\n            beneficiary,\n            localPendingWithdrawalIndex,\n            lockedGoldPendingWithdrawalIndex\n        );\n\n        // Remove the pending withdrawal.\n        PendingWithdrawal[] storage localPendingWithdrawals = pendingWithdrawals[beneficiary];\n        localPendingWithdrawals[localPendingWithdrawalIndex] = localPendingWithdrawals[\n            localPendingWithdrawals.length - 1\n        ];\n        localPendingWithdrawals.pop();\n\n        // Process withdrawal.\n        getLockedGold().withdraw(lockedGoldPendingWithdrawalIndex);\n\n        /**\n         * The benefit of using getGoldToken().transfer() is that the recepients callback\n         * is not called thus removing concern that a malicious\n         * caller would control code at this point.\n         */\n        bool success = getGoldToken().transfer(beneficiary, value);\n        if (!success) {\n            revert CeloTransferFailed(beneficiary, value);\n        }\n\n        emit CeloWithdrawalFinished(beneficiary, value, timestamp);\n        return value;\n    }\n\n    /**\n     * @notice Gets the total amount of CELO this contract controls. This is the\n     * unlocked CELO balance of the contract plus the amount of LockedGold for this contract,\n     * which included unvoting and voting LockedGold.\n     * @return The total amount of CELO this contract controls, including LockedGold.\n     */\n    function getTotalCelo() external view returns (uint256) {\n        // LockedGold's getAccountTotalLockedGold returns any non-voting locked gold +\n        // voting locked gold for each group the account is voting for, which is an\n        // O(# of groups voted for) operation.\n        return\n            address(this).balance +\n            getLockedGold().getAccountTotalLockedGold(address(this)) -\n            totalScheduledWithdrawals;\n    }\n\n    /**\n     * @notice Returns the pending withdrawals for a beneficiary.\n     * @param beneficiary The address of the beneficiary who initiated the pending withdrawal.\n     * @return values The values of pending withdrawals.\n     * @return timestamps The timestamps of pending withdrawals.\n     */\n    function getPendingWithdrawals(address beneficiary)\n        external\n        view\n        returns (uint256[] memory values, uint256[] memory timestamps)\n    {\n        uint256 length = pendingWithdrawals[beneficiary].length;\n        values = new uint256[](length);\n        timestamps = new uint256[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            PendingWithdrawal memory p = pendingWithdrawals[beneficiary][i];\n            values[i] = p.value;\n            timestamps[i] = p.timestamp;\n        }\n\n        return (values, timestamps);\n    }\n\n    /**\n     * @notice Returns the number of pending withdrawals for a beneficiary.\n     * @param beneficiary The address of the beneficiary who initiated the pending withdrawal.\n     * @return The numbers of pending withdrawals for `beneficiary`\n     */\n    function getNumberPendingWithdrawals(address beneficiary) external view returns (uint256) {\n        return pendingWithdrawals[beneficiary].length;\n    }\n\n    /**\n     * @notice Returns a pending withdrawals for a beneficiary.\n     * @param beneficiary The address of the beneficiary who initiated the pending withdrawal.\n     * @param index The index in `beneficiary`'s pendingWithdrawals array.\n     * @return value The values of the pending withdrawal.\n     * @return timestamp The timestamp of the pending withdrawal.\n     */\n    function getPendingWithdrawal(address beneficiary, uint256 index)\n        external\n        view\n        returns (uint256 value, uint256 timestamp)\n    {\n        PendingWithdrawal memory withdrawal = pendingWithdrawals[beneficiary][index];\n\n        return (withdrawal.value, withdrawal.timestamp);\n    }\n\n    /**\n     * @notice Returns the total amount of CELO directed towards `group`. This is\n     * the Unlocked CELO balance for `group` plus the combined amount in pending\n     * and active votes made by this contract.\n     * @param group The address of the validator group.\n     * @return The total amount of CELO directed towards `group`.\n     */\n    function getCeloForGroup(address group) external view returns (uint256) {\n        return\n            getElection().getTotalVotesForGroupByAccount(group, address(this)) +\n            scheduledVotes[group].toVote -\n            scheduledVotes[group].toWithdraw;\n    }\n\n    /**\n     * @notice Returns the total amount of CELO that's scheduled to vote for a group.\n     * @param group The address of the validator group.\n     * @return The total amount of CELO directed towards `group`.\n     */\n    function scheduledVotesForGroup(address group) external view returns (uint256) {\n        return scheduledVotes[group].toVote;\n    }\n\n    /**\n     * @notice Returns the total amount of CELO that's scheduled to be withdrawn for a group.\n     * @param group The address of the validator group.\n     * @return The total amount of CELO to be withdrawn for `group`.\n     */\n    function scheduledWithdrawalsForGroup(address group) external view returns (uint256) {\n        return scheduledVotes[group].toWithdraw;\n    }\n\n    /**\n     * @notice Returns the total amount of CELO that's scheduled to be withdrawn for a group\n     * scoped by a beneficiary.\n     * @param group The address of the validator group.\n     * @param beneficiary The beneficiary of the withdrawal.\n     * @return The total amount of CELO to be withdrawn for `group` by `beneficiary`.\n     */\n    function scheduledWithdrawalsForGroupAndBeneficiary(address group, address beneficiary)\n        external\n        view\n        returns (uint256)\n    {\n        return scheduledVotes[group].toWithdrawFor[beneficiary];\n    }\n\n    /**\n     * @notice Revokes votes from a validator group. It first attempts to revoke pending votes,\n     * and then active votes if necessary.\n     * @dev Reverts if `revokeAmount` exceeds the total number of pending and active votes for\n     * the group from this contract.\n     * @param group The group to withdraw CELO from.\n     * @param revokeAmount The amount of votes to revoke.\n     * @param lesserAfterPendingRevoke Used by Election's `revokePending`. This is the group that\n     * is before `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of pending votes has occurred.\n     * @param greaterAfterPendingRevoke Used by Election's `revokePending`. This is the group that\n     * is after `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of pending votes has occurred.\n     * @param lesserAfterActiveRevoke Used by Election's `revokeActive`. This is the group that\n     * is before `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of active votes has occurred.\n     * @param greaterAfterActiveRevoke Used by Election's `revokeActive`. This is the group that\n     * is after `group` within the validators sorted LinkedList, or address(0) if there isn't one,\n     * after the revoke of active votes has occurred.\n     * @param index Used by Election's `revokePending` and `revokeActive`. This is the index of\n     * `group` in the this contract's array of groups it is voting for.\n     */\n    function revokeVotes(\n        address group,\n        uint256 revokeAmount,\n        address lesserAfterPendingRevoke,\n        address greaterAfterPendingRevoke,\n        address lesserAfterActiveRevoke,\n        address greaterAfterActiveRevoke,\n        uint256 index\n    ) internal {\n        IElection election = getElection();\n        uint256 pendingVotesAmount = election.getPendingVotesForGroupByAccount(\n            group,\n            address(this)\n        );\n\n        uint256 toRevokeFromPending = Math.min(revokeAmount, pendingVotesAmount);\n        if (toRevokeFromPending > 0) {\n            if (\n                !election.revokePending(\n                    group,\n                    toRevokeFromPending,\n                    lesserAfterPendingRevoke,\n                    greaterAfterPendingRevoke,\n                    index\n                )\n            ) {\n                revert RevokePendingFailed(group, revokeAmount);\n            }\n        }\n\n        uint256 toRevokeFromActive = revokeAmount - toRevokeFromPending;\n        if (toRevokeFromActive == 0) {\n            return;\n        }\n\n        uint256 activeVotesAmount = election.getActiveVotesForGroupByAccount(group, address(this));\n\n        if (activeVotesAmount < toRevokeFromActive) {\n            revert InsufficientRevokableVotes(group, revokeAmount);\n        }\n\n        if (\n            !election.revokeActive(\n                group,\n                toRevokeFromActive,\n                lesserAfterActiveRevoke,\n                greaterAfterActiveRevoke,\n                index\n            )\n        ) {\n            revert RevokeActiveFailed(group, revokeAmount);\n        }\n    }\n\n    /**\n     * @notice Validates a local pending withdrawal matches a given beneficiary and LockedGold\n     * pending withdrawal.\n     * @dev See finishPendingWithdrawal.\n     * @param beneficiary The account that owns the pending withdrawal being processed.\n     * @param localPendingWithdrawalIndex The index of the pending withdrawal to finish\n     * in pendingWithdrawals[beneficiary] array.\n     * @param lockedGoldPendingWithdrawalIndex The index of the pending withdrawal to finish\n     * in LockedGold.\n     * @return value The value of the pending withdrawal.\n     * @return timestamp The timestamp of the pending withdrawal.\n     */\n    function validatePendingWithdrawalRequest(\n        address beneficiary,\n        uint256 localPendingWithdrawalIndex,\n        uint256 lockedGoldPendingWithdrawalIndex\n    ) internal view returns (uint256 value, uint256 timestamp) {\n        if (localPendingWithdrawalIndex >= pendingWithdrawals[beneficiary].length) {\n            revert PendingWithdrawalIndexTooHigh(\n                localPendingWithdrawalIndex,\n                pendingWithdrawals[beneficiary].length\n            );\n        }\n\n        (\n            uint256 lockedGoldPendingWithdrawalValue,\n            uint256 lockedGoldPendingWithdrawalTimestamp\n        ) = getLockedGold().getPendingWithdrawal(address(this), lockedGoldPendingWithdrawalIndex);\n\n        PendingWithdrawal memory pendingWithdrawal = pendingWithdrawals[beneficiary][\n            localPendingWithdrawalIndex\n        ];\n\n        if (pendingWithdrawal.value != lockedGoldPendingWithdrawalValue) {\n            revert InconsistentPendingWithdrawalValues(\n                pendingWithdrawal.value,\n                lockedGoldPendingWithdrawalValue\n            );\n        }\n\n        if (pendingWithdrawal.timestamp != lockedGoldPendingWithdrawalTimestamp) {\n            revert InconsistentPendingWithdrawalTimestamps(\n                pendingWithdrawal.timestamp,\n                lockedGoldPendingWithdrawalTimestamp\n            );\n        }\n\n        return (pendingWithdrawal.value, pendingWithdrawal.timestamp);\n    }\n\n    /**\n     * @notice Turns on/off voting for more then max number of groups.\n     * @param flag The on/off flag.\n     */\n    function setAllowedToVoteOverMaxNumberOfGroups(bool flag) public onlyOwner {\n        getElection().setAllowedToVoteOverMaxNumberOfGroups(flag);\n    }\n\n    /**\n     * @notice Votes on a proposal in the referendum stage.\n     * @param proposalId The ID of the proposal to vote on.\n     * @param index The index of the proposal ID in `dequeued`.\n     * @param yesVotes The yes votes weight.\n     * @param noVotes The no votes weight.\n     * @param abstainVotes The abstain votes weight.\n     */\n    function votePartially(\n        uint256 proposalId,\n        uint256 index,\n        uint256 yesVotes,\n        uint256 noVotes,\n        uint256 abstainVotes\n    ) public onlyManager {\n        bool voteResult = getGovernance().votePartially(\n            proposalId,\n            index,\n            yesVotes,\n            noVotes,\n            abstainVotes\n        );\n        if (!voteResult) {\n            revert VotingNotSuccessful(proposalId);\n        }\n    }\n\n    /**\n     * @notice Returns the storage, major, minor, and patch version of the contract.\n     * @return Storage version of the contract.\n     * @return Major version of the contract.\n     * @return Minor version of the contract.\n     * @return Patch version of the contract.\n     */\n    function getVersionNumber()\n        external\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (1, 1, 3, 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/Managed.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @title Used via inheritance to grant special access control to the Manager\n * contract.\n */\nabstract contract Managed is Initializable, OwnableUpgradeable {\n    address public manager;\n\n    /**\n     * @notice Emitted when the manager is initially set or later modified.\n     * @param manager The new managing account address.\n     */\n    event ManagerSet(address indexed manager);\n\n    /**\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\n     *  @param caller `msg.sender` that called the function.\n     */\n    error CallerNotManager(address caller);\n\n    /**\n     * @notice Used when a passed address is address(0).\n     */\n    error NullAddress();\n\n    /**\n     * @dev Initializes the contract in an upgradable context.\n     * @param _manager The initial managing address.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __Managed_init(address _manager) internal onlyInitializing {\n        _setManager(_manager);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the manager.\n     */\n    modifier onlyManager() {\n        if (manager != msg.sender) {\n            revert CallerNotManager(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @notice Sets the manager address.\n     * @param _manager The new manager address.\n     */\n    function setManager(address _manager) external onlyOwner {\n        _setManager(_manager);\n    }\n\n    /**\n     * @notice Sets the manager address.\n     * @param _manager The new manager address.\n     */\n    function _setManager(address _manager) internal {\n        if (_manager == address(0)) {\n            revert NullAddress();\n        }\n        manager = _manager;\n        emit ManagerSet(_manager);\n    }\n}\n"
    },
    "contracts/common/UUPSOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/**\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\n */\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\n    /**\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\n     * adds the onlyOwner modifer.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n}\n"
    },
    "contracts/common/UsingRegistryUpgradeable.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/IAccounts.sol\";\nimport \"../interfaces/IElection.sol\";\nimport \"../interfaces/IGoldToken.sol\";\nimport \"../interfaces/ILockedGold.sol\";\nimport \"../interfaces/IRegistry.sol\";\nimport \"../interfaces/IGovernance.sol\";\nimport \"../interfaces/IValidators.sol\";\n\n/**\n * @title A helper for getting Celo core contracts from the Registry.\n */\nabstract contract UsingRegistryUpgradeable is Initializable {\n    /**\n     * @notice Initializes the UsingRegistryUpgradable contract in an upgradable scenario\n     * @param _registry The address of the Registry. For convenience, if the zero address is\n     * provided, the registry is set to the canonical Registry address, i.e. 0x0...ce10. This\n     * parameter should only be a non-zero address when testing.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __UsingRegistry_init(address _registry) internal onlyInitializing {\n        if (_registry == address(0)) {\n            registry = IRegistry(CANONICAL_REGISTRY);\n        } else {\n            registry = IRegistry(_registry);\n        }\n    }\n\n    /// @notice The canonical address of the Registry.\n    address internal constant CANONICAL_REGISTRY = 0x000000000000000000000000000000000000ce10;\n\n    /// @notice The registry ID for the Accounts contract.\n    bytes32 private constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\"Accounts\"));\n\n    /// @notice The registry ID for the Election contract.\n    bytes32 private constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\"Election\"));\n\n    /// @notice The registry ID for the GoldToken contract.\n    bytes32 private constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\"GoldToken\"));\n\n    /// @notice The registry ID for the LockedGold contract.\n    bytes32 private constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\"LockedGold\"));\n\n    /// @notice The registry ID for the Governance contract.\n    bytes32 private constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\"Governance\"));\n\n    /// @notice The registry ID for the Validator contract.\n    bytes32 private constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\"Validators\"));\n\n    /// @notice The Registry.\n    IRegistry public registry;\n\n    /**\n     * @notice Gets the Accounts contract from the Registry.\n     * @return The Accounts contract from the Registry.\n     */\n    function getAccounts() internal view returns (IAccounts) {\n        return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the Election contract from the Registry.\n     * @return The Election contract from the Registry.\n     */\n    function getElection() internal view returns (IElection) {\n        return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the GoldToken contract from the Registry.\n     * @return The GoldToken contract from the Registry.\n     */\n    function getGoldToken() internal view returns (IGoldToken) {\n        return IGoldToken(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the LockedGold contract from the Registry.\n     * @return The LockedGold contract from the Registry.\n     */\n    function getLockedGold() internal view returns (ILockedGold) {\n        return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the Governance contract from the Registry.\n     * @return The Governance contract from the Registry.\n     */\n    function getGovernance() internal view returns (IGovernance) {\n        return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the validators contract from the Registry.\n     * @return The validators contract from the Registry.\n     */\n    function getValidators() internal view returns (IValidators) {\n        return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\n    }\n}\n"
    },
    "contracts/interfaces/IAccount.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IAccount {\n    function getTotalCelo() external view returns (uint256);\n\n    function getCeloForGroup(address) external view returns (uint256);\n\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\n\n    function scheduledVotesForGroup(address group) external returns (uint256);\n\n    function scheduleWithdrawals(\n        address beneficiary,\n        address[] calldata group,\n        uint256[] calldata withdrawals\n    ) external;\n\n    function votePartially(\n        uint256 proposalId,\n        uint256 index,\n        uint256 yesVotes,\n        uint256 noVotes,\n        uint256 abstainVotes\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IAccounts.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IAccounts {\n    function isAccount(address) external view returns (bool);\n\n    function voteSignerToAccount(address) external view returns (address);\n\n    function validatorSignerToAccount(address) external view returns (address);\n\n    function attestationSignerToAccount(address) external view returns (address);\n\n    function signerToAccount(address) external view returns (address);\n\n    function getAttestationSigner(address) external view returns (address);\n\n    function getValidatorSigner(address) external view returns (address);\n\n    function getVoteSigner(address) external view returns (address);\n\n    function hasAuthorizedVoteSigner(address) external view returns (bool);\n\n    function hasAuthorizedValidatorSigner(address) external view returns (bool);\n\n    function hasAuthorizedAttestationSigner(address) external view returns (bool);\n\n    function setAccountDataEncryptionKey(bytes calldata) external;\n\n    function setMetadataURL(string calldata) external;\n\n    function setName(string calldata) external;\n\n    function setWalletAddress(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function setAccount(\n        string calldata,\n        bytes calldata,\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function getDataEncryptionKey(address) external view returns (bytes memory);\n\n    function getWalletAddress(address) external view returns (address);\n\n    function getMetadataURL(address) external view returns (string memory);\n\n    function batchGetMetadataURL(address[] calldata)\n        external\n        view\n        returns (uint256[] memory, bytes memory);\n\n    function getName(address) external view returns (string memory);\n\n    function authorizeVoteSigner(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function authorizeValidatorSigner(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function authorizeValidatorSignerWithPublicKey(\n        address,\n        uint8,\n        bytes32,\n        bytes32,\n        bytes calldata\n    ) external;\n\n    function authorizeValidatorSignerWithKeys(\n        address,\n        uint8,\n        bytes32,\n        bytes32,\n        bytes calldata,\n        bytes calldata,\n        bytes calldata\n    ) external;\n\n    function authorizeAttestationSigner(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function createAccount() external returns (bool);\n}\n"
    },
    "contracts/interfaces/IElection.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IElection {\n    function electValidatorSigners() external view returns (address[] memory);\n\n    function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\n\n    function vote(\n        address,\n        uint256,\n        address,\n        address\n    ) external returns (bool);\n\n    function activate(address) external returns (bool);\n\n    function activateForAccount(address, address) external returns (bool);\n\n    function revokeActive(\n        address,\n        uint256,\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function revokeAllActive(\n        address,\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function revokePending(\n        address,\n        uint256,\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function markGroupIneligible(address) external;\n\n    function markGroupEligible(\n        address,\n        address,\n        address\n    ) external;\n\n    function forceDecrementVotes(\n        address,\n        uint256,\n        address[] calldata,\n        address[] calldata,\n        uint256[] calldata\n    ) external returns (uint256);\n\n    // view functions\n    function getElectableValidators() external view returns (uint256, uint256);\n\n    function getElectabilityThreshold() external view returns (uint256);\n\n    function getNumVotesReceivable(address) external view returns (uint256);\n\n    function getTotalVotes() external view returns (uint256);\n\n    function getActiveVotes() external view returns (uint256);\n\n    function getTotalVotesByAccount(address) external view returns (uint256);\n\n    function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\n\n    function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\n\n    function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\n\n    function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\n\n    function getTotalVotesForGroup(address) external view returns (uint256);\n\n    function getActiveVotesForGroup(address) external view returns (uint256);\n\n    function getPendingVotesForGroup(address) external view returns (uint256);\n\n    function getGroupEligibility(address) external view returns (bool);\n\n    function getGroupEpochRewards(\n        address,\n        uint256,\n        uint256[] calldata\n    ) external view returns (uint256);\n\n    function getGroupsVotedForByAccount(address) external view returns (address[] memory);\n\n    function getEligibleValidatorGroups() external view returns (address[] memory);\n\n    function getTotalVotesForEligibleValidatorGroups()\n        external\n        view\n        returns (address[] memory, uint256[] memory);\n\n    function getCurrentValidatorSigners() external view returns (address[] memory);\n\n    function canReceiveVotes(address, uint256) external view returns (bool);\n\n    function hasActivatablePendingVotes(address, address) external view returns (bool);\n\n    // only owner\n    function setElectableValidators(uint256, uint256) external returns (bool);\n\n    function setMaxNumGroupsVotedFor(uint256) external returns (bool);\n\n    function setElectabilityThreshold(uint256) external returns (bool);\n\n    // only VM\n    function distributeEpochRewards(\n        address,\n        uint256,\n        address,\n        address\n    ) external;\n\n    function maxNumGroupsVotedFor() external view returns (uint256);\n\n    function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\n\n    function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\n}\n"
    },
    "contracts/interfaces/IGoldToken.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IGoldToken {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferWithComment(\n        address to,\n        uint256 value,\n        string calldata comment\n    ) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\n\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ILockedGold.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface ILockedGold {\n    function unlockingPeriod() external view returns (uint256);\n\n    function incrementNonvotingAccountBalance(address, uint256) external;\n\n    function decrementNonvotingAccountBalance(address, uint256) external;\n\n    function getAccountTotalLockedGold(address) external view returns (uint256);\n\n    function getTotalLockedGold() external view returns (uint256);\n\n    function getPendingWithdrawal(address, uint256) external view returns (uint256, uint256);\n\n    function getSlashingWhitelist() external view returns (bytes32[] memory);\n\n    function getPendingWithdrawals(address)\n        external\n        view\n        returns (uint256[] memory, uint256[] memory);\n\n    function getTotalPendingWithdrawals(address) external view returns (uint256);\n\n    function lock() external payable;\n\n    function unlock(uint256) external;\n\n    function relock(uint256, uint256) external;\n\n    function withdraw(uint256) external;\n\n    function slash(\n        address account,\n        uint256 penalty,\n        address reporter,\n        uint256 reward,\n        address[] calldata lessers,\n        address[] calldata greaters,\n        uint256[] calldata indices\n    ) external;\n\n    function isSlasher(address) external view returns (bool);\n\n    function owner() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IRegistry.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IRegistry {\n    function setAddressFor(string calldata, address) external;\n\n    function getAddressForOrDie(bytes32) external view returns (address);\n\n    function getAddressFor(bytes32) external view returns (address);\n\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address);\n\n    function getAddressForString(string calldata identifier) external view returns (address);\n\n    function isOneOf(bytes32[] calldata, address) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IGovernance.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IGovernance {\n    function votePartially(\n        uint256 proposalId,\n        uint256 index,\n        uint256 yesVotes,\n        uint256 noVotes,\n        uint256 abstainVotes\n    ) external returns (bool);\n\n    function getProposal(uint256 proposalId)\n        external\n        view\n        returns (\n            address,\n            uint256,\n            uint256,\n            uint256,\n            string memory\n        );\n\n    function getReferendumStageDuration() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IValidators.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.11;\n\ninterface IValidators {\n    function registerValidator(\n        bytes calldata,\n        bytes calldata,\n        bytes calldata\n    ) external returns (bool);\n\n    function deregisterValidator(uint256) external returns (bool);\n\n    function affiliate(address) external returns (bool);\n\n    function deaffiliate() external returns (bool);\n\n    function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\n\n    function registerValidatorGroup(uint256) external returns (bool);\n\n    function deregisterValidatorGroup(uint256) external returns (bool);\n\n    function addMember(address) external returns (bool);\n\n    function addFirstMember(\n        address,\n        address,\n        address\n    ) external returns (bool);\n\n    function removeMember(address) external returns (bool);\n\n    function reorderMember(\n        address,\n        address,\n        address\n    ) external returns (bool);\n\n    function updateCommission() external;\n\n    function setNextCommissionUpdate(uint256) external;\n\n    function resetSlashingMultiplier() external;\n\n    // only owner\n    function setCommissionUpdateDelay(uint256) external;\n\n    function setMaxGroupSize(uint256) external returns (bool);\n\n    function setMembershipHistoryLength(uint256) external returns (bool);\n\n    function setValidatorScoreParameters(uint256, uint256) external returns (bool);\n\n    function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\n\n    function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\n\n    function setSlashingMultiplierResetPeriod(uint256) external;\n\n    // view functions\n    function getMaxGroupSize() external view returns (uint256);\n\n    function getCommissionUpdateDelay() external view returns (uint256);\n\n    function getValidatorScoreParameters() external view returns (uint256, uint256);\n\n    function getMembershipHistory(address)\n        external\n        view\n        returns (\n            uint256[] memory,\n            address[] memory,\n            uint256,\n            uint256\n        );\n\n    function calculateEpochScore(uint256) external view returns (uint256);\n\n    function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\n\n    function getAccountLockedGoldRequirement(address) external view returns (uint256);\n\n    function meetsAccountLockedGoldRequirements(address) external view returns (bool);\n\n    function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\n\n    function getValidator(address account)\n        external\n        view\n        returns (\n            bytes memory,\n            bytes memory,\n            address,\n            uint256,\n            address\n        );\n\n    function getValidatorGroup(address)\n        external\n        view\n        returns (\n            address[] memory,\n            uint256,\n            uint256,\n            uint256,\n            uint256[] memory,\n            uint256,\n            uint256\n        );\n\n    function getGroupNumMembers(address) external view returns (uint256);\n\n    function getTopGroupValidators(address, uint256) external view returns (address[] memory);\n\n    function getGroupsNumMembers(address[] calldata accounts)\n        external\n        view\n        returns (uint256[] memory);\n\n    function getNumRegisteredValidators() external view returns (uint256);\n\n    function groupMembershipInEpoch(\n        address,\n        uint256,\n        uint256\n    ) external view returns (address);\n\n    // only registered contract\n    function updateEcdsaPublicKey(\n        address,\n        address,\n        bytes calldata\n    ) external returns (bool);\n\n    function updatePublicKeys(\n        address,\n        address,\n        bytes calldata,\n        bytes calldata,\n        bytes calldata\n    ) external returns (bool);\n\n    function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\n\n    function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\n\n    function getRegisteredValidators() external view returns (address[] memory);\n\n    function getRegisteredValidatorSigners() external view returns (address[] memory);\n\n    function getRegisteredValidatorGroups() external view returns (address[] memory);\n\n    function isValidatorGroup(address) external view returns (bool);\n\n    function isValidator(address) external view returns (bool);\n\n    function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\n\n    function getMembershipInLastEpoch(address) external view returns (address);\n\n    function getMembershipInLastEpochFromSigner(address) external view returns (address);\n\n    // only VM\n    function updateValidatorScoreFromSigner(address, uint256) external;\n\n    function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\n\n    // only slasher\n    function forceDeaffiliateIfValidator(address) external;\n\n    function halveSlashingMultiplier(address) external;\n}\n"
    },
    "contracts/Vote.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./common/UsingRegistryUpgradeable.sol\";\nimport \"./common/UUPSOwnableUpgradeable.sol\";\nimport \"./Managed.sol\";\n\nimport \"./interfaces/IAccount.sol\";\nimport \"./interfaces/IStakedCelo.sol\";\n\ncontract Vote is UUPSOwnableUpgradeable, UsingRegistryUpgradeable, Managed {\n    /**\n     * @notice Keeps track of total votes for proposal (votes of Account contract).\n     * @param proposalId The proposal UUID.\n     * @param yesVotes The yes votes weight.\n     * @param noVotes The no votes weight.\n     * @param abstainVotes The abstain votes weight.\n     */\n    struct ProposalVoteRecord {\n        uint256 proposalId;\n        uint256 yesVotes;\n        uint256 noVotes;\n        uint256 abstainVotes;\n    }\n\n    /**\n     * @notice Votes of account.\n     * @param proposalVotes Votes per proposal UUID.\n     * @param votedProposalIds History of voted proposals that are still active.\n     */\n    struct Voter {\n        // Key of proposalId\n        mapping(uint256 => VoterRecord) proposalVotes;\n        uint256[] votedProposalIds;\n    }\n\n    /**\n     * @notice Voter's votes for particular proposal.\n     * @param proposalId The proposal UIID.\n     * @param yesVotes The yes votes.\n     * @param noVotes The no votes.\n     * @param abstainVotes The abstain votes.\n     */\n    struct VoterRecord {\n        uint256 proposalId;\n        uint256 yesVotes;\n        uint256 noVotes;\n        uint256 abstainVotes;\n    }\n\n    /**\n     * @notice An instance of the StakedCelo contract this Manager manages.\n     */\n    IStakedCelo internal stakedCelo;\n\n    /**\n     * @notice An instance of the Account contract this Manager manages.\n     */\n    IAccount internal account;\n\n    /**\n     * @notice Votes of Account's contract per proposal.\n     */\n    mapping(uint256 => ProposalVoteRecord) private voteRecords;\n\n    /**\n     * @notice History of all voters.\n     */\n    mapping(address => Voter) private voters;\n\n    /**\n     * @notice Timestamps of every voted proposal.\n     */\n    mapping(uint256 => uint256) public proposalTimestamps;\n\n    /**\n     * @notice Emitted when an account votes for governance proposal.\n     * @param voter The voter's address.\n     * @param proposalId The proposal UIID.\n     * @param yesVotes The yes votes.\n     * @param noVotes The no votes.\n     * @param abstainVotes The abstain votes.\n     */\n    event ProposalVoted(\n        address voter,\n        uint256 proposalId,\n        uint256 yesVotes,\n        uint256 noVotes,\n        uint256 abstainVotes\n    );\n\n    /**\n     * @notice Emitted when unlock of stCELO is requested.\n     * @param account The account's address.\n     * @param lockedCelo The stCELO that is still being locked.\n     */\n    event LockedStCeloInVoting(address account, uint256 lockedCelo);\n\n    /**\n     * @notice Used when attempting to vote when there is no stCelo.\n     * @param account The account's address.\n     */\n    error NoStakedCelo(address account);\n\n    /**\n     * @notice Used when attempting to vote when there is not enough of stCelo.\n     * @param account The account's address.\n     */\n    error NotEnoughStakedCelo(address account);\n\n    /**\n     * @notice Used when attempting to pass in address zero where not allowed.\n     */\n    error AddressZeroNotAllowed();\n\n    /**\n     * @notice Used when attempting to delete voter's proposal id with incorrect index.\n     */\n    error IncorrectIndex();\n\n    /**\n     * @notice Used when attempting to delete voter's proposal id when proposal is not expired yet.\n     */\n    error ProposalNotExpired();\n\n    /**\n     * @notice Initialize the contract with registry and owner.\n     * @param _registry The address of the Celo registry.\n     * @param _owner The address of the contract owner.\n     * @param _manager The address of the contract manager.\n     */\n    function initialize(\n        address _registry,\n        address _owner,\n        address _manager\n    ) external initializer {\n        __UsingRegistry_init(_registry);\n        __Managed_init(_manager);\n        _transferOwnership(_owner);\n    }\n\n    /**\n     * @notice Set this contract's dependencies in the StakedCelo system.\n     * @dev Manager, Account and StakedCelo all reference each other\n     * so we need a way of setting these after all contracts are\n     * deployed and initialized.\n     * @param _stakedCelo the address of the StakedCelo contract.\n     * @param _account The address of the Account contract.\n     */\n    function setDependencies(address _stakedCelo, address _account) external onlyOwner {\n        if (_stakedCelo == address(0) || _account == address(0)) {\n            revert AddressZeroNotAllowed();\n        }\n        stakedCelo = IStakedCelo(_stakedCelo);\n        account = IAccount(_account);\n    }\n\n    /**\n     * @notice Returns the storage, major, minor, and patch version of the contract.\n     * @return Storage version of the contract.\n     * @return Major version of the contract.\n     * @return Minor version of the contract.\n     * @return Patch version of the contract.\n     */\n    function getVersionNumber()\n        external\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (1, 1, 1, 0);\n    }\n\n    /**\n     * @notice Votes on a proposal in the referendum stage.\n     * @param accountVoter The account that is voting.\n     * @param proposalId The ID of the proposal to vote on.\n     * @param yesVotes The yes votes weight.\n     * @param noVotes The no votes weight.\n     * @param abstainVotes The abstain votes weight.\n     * @return totalWeights Account's staked celo balance.\n     * @return totalYesVotes SUM of all AccountContract yes votes for proposal.\n     * @return totalNoVotes SUM of all AccountContract no votes for proposal.\n     * @return totalAbstainVotes SUM of all AccountContract abstain votes for proposal.\n     */\n    function voteProposal(\n        address accountVoter,\n        uint256 proposalId,\n        uint256 yesVotes,\n        uint256 noVotes,\n        uint256 abstainVotes\n    )\n        public\n        onlyManager\n        returns (\n            uint256,\n            uint256 totalYesVotes,\n            uint256 totalNoVotes,\n            uint256 totalAbstainVotes\n        )\n    {\n        uint256 stakedCeloBalance = stakedCelo.balanceOf(accountVoter) +\n            stakedCelo.lockedVoteBalanceOf(accountVoter);\n        if (stakedCeloBalance == 0) {\n            revert NoStakedCelo(accountVoter);\n        }\n        uint256 totalWeights = yesVotes + noVotes + abstainVotes;\n        if (totalWeights > toCelo(stakedCeloBalance)) {\n            revert NotEnoughStakedCelo(accountVoter);\n        }\n\n        Voter storage voter = voters[accountVoter];\n\n        VoterRecord storage previousVoterRecord = voter.proposalVotes[proposalId];\n        ProposalVoteRecord memory proposalVoteRecord = voteRecords[proposalId];\n\n        // Subtract previous vote.\n        proposalVoteRecord.yesVotes -= previousVoterRecord.yesVotes;\n        proposalVoteRecord.noVotes -= previousVoterRecord.noVotes;\n        proposalVoteRecord.abstainVotes -= previousVoterRecord.abstainVotes;\n\n        // Add new vote.\n        proposalVoteRecord.yesVotes += yesVotes;\n        proposalVoteRecord.noVotes += noVotes;\n        proposalVoteRecord.abstainVotes += abstainVotes;\n\n        voteRecords[proposalId] = ProposalVoteRecord(\n            proposalId,\n            proposalVoteRecord.yesVotes,\n            proposalVoteRecord.noVotes,\n            proposalVoteRecord.abstainVotes\n        );\n\n        if (previousVoterRecord.proposalId == 0) {\n            voter.votedProposalIds.push(proposalId);\n        }\n\n        voter.proposalVotes[proposalId] = VoterRecord(proposalId, yesVotes, noVotes, abstainVotes);\n\n        emit ProposalVoted(accountVoter, proposalId, yesVotes, noVotes, abstainVotes);\n\n        if (proposalTimestamps[proposalId] == 0) {\n            proposalTimestamps[proposalId] = getProposalTimestamp(proposalId);\n        }\n\n        return (\n            toStakedCelo(totalWeights),\n            proposalVoteRecord.yesVotes,\n            proposalVoteRecord.noVotes,\n            proposalVoteRecord.abstainVotes\n        );\n    }\n\n    /**\n     * @notice Revokes votes on already voted proposal.\n     * @param accountVoter The account that is voting.\n     * @param proposalId The ID of the proposal to vote on.\n     * @return totalYesVotes SUM of all AccountContract yes votes for proposal.\n     * @return totalNoVotes SUM of all AccountContract no votes for proposal.\n     * @return totalAbstainVotes SUM of all AccountContract abstain votes for proposal.\n     */\n    function revokeVotes(address accountVoter, uint256 proposalId)\n        public\n        onlyManager\n        returns (\n            uint256 totalYesVotes,\n            uint256 totalNoVotes,\n            uint256 totalAbstainVotes\n        )\n    {\n        (, totalYesVotes, totalNoVotes, totalAbstainVotes) = voteProposal(\n            accountVoter,\n            proposalId,\n            0,\n            0,\n            0\n        );\n        return (totalYesVotes, totalNoVotes, totalAbstainVotes);\n    }\n\n    /**\n     * @notice Returns save timestamp of proposal.\n     * @param proposalId The proposal UUID.\n     * @return The timestamp of proposal.\n     */\n    function getProposalTimestamp(uint256 proposalId) public view returns (uint256) {\n        (, , uint256 timestamp, , ) = getGovernance().getProposal(proposalId);\n        return timestamp;\n    }\n\n    /**\n     * @notice Updates the beneficiaries voting history and returns locked stCELO in voting.\n     * (This stCELO cannot be unlocked.)\n     * And it will remove voted proposals from account history if appropriate.\n     * @param beneficiary The beneficiary.\n     * @return Currently locked stCELO in voting.\n     */\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\n        public\n        returns (uint256)\n    {\n        Voter storage voter = voters[beneficiary];\n        uint256 lockedAmount;\n\n        uint256 i = voter.votedProposalIds.length;\n        while (i > 0) {\n            uint256 proposalId = voter.votedProposalIds[--i];\n            uint256 proposalTimestamp = proposalTimestamps[proposalId];\n\n            if (proposalTimestamp == 0) {\n                voter.votedProposalIds[i] = voter.votedProposalIds[\n                    voter.votedProposalIds.length - 1\n                ];\n                voter.votedProposalIds.pop();\n                continue;\n            }\n\n            if (\n                block.timestamp < proposalTimestamp + getGovernance().getReferendumStageDuration()\n            ) {\n                VoterRecord storage voterRecord = voter.proposalVotes[proposalId];\n                lockedAmount = Math.max(\n                    lockedAmount,\n                    voterRecord.yesVotes + voterRecord.noVotes + voterRecord.abstainVotes\n                );\n            } else {\n                voter.votedProposalIds[i] = voter.votedProposalIds[\n                    voter.votedProposalIds.length - 1\n                ];\n                voter.votedProposalIds.pop();\n                delete proposalTimestamps[proposalId];\n            }\n        }\n\n        uint256 stCelo = toStakedCelo(lockedAmount);\n        emit LockedStCeloInVoting(beneficiary, stCelo);\n        return stCelo;\n    }\n\n    /**\n     * Deletes timestamp of expired proposal from storage.\n     * @param proposalId The proposal Id.\n     */\n    function deleteExpiredProposalTimestamp(uint256 proposalId) external {\n        uint256 proposalTimestamp = proposalTimestamps[proposalId];\n        if (block.timestamp > proposalTimestamp + getGovernance().getReferendumStageDuration()) {\n            delete proposalTimestamps[proposalId];\n        }\n    }\n\n    /**\n     * Deletes proposalId from voter's history if proposal expired.\n     * @param voter The voter address.\n     * @param proposalId The peoposal id.\n     * @param index Index of voter's proposal id.\n     */\n    function deleteExpiredVoterProposalId(\n        address voter,\n        uint256 proposalId,\n        uint256 index\n    ) external {\n        Voter storage voterStruct = voters[voter];\n\n        uint256 proposalIdOnChain = voterStruct.votedProposalIds[index];\n        if (proposalIdOnChain == 0 || proposalIdOnChain != proposalId) {\n            revert IncorrectIndex();\n        }\n\n        uint256 proposalTimestamp = proposalTimestamps[proposalId];\n        if (proposalTimestamp != 0) {\n            revert ProposalNotExpired();\n        }\n\n        voterStruct.votedProposalIds[index] = voterStruct.votedProposalIds[\n            voterStruct.votedProposalIds.length - 1\n        ];\n        voterStruct.votedProposalIds.pop();\n    }\n\n    /**\n     * @notice Returns proposals still in referendum stage that voter voted on.\n     * @param voter The voter.\n     * @return Proposals in referendum stage.\n     * @dev For up to date result call updateHistoryAndReturnLockedStCeloInVoting first.\n     */\n    function getVotedStillRelevantProposals(address voter) public view returns (uint256[] memory) {\n        return voters[voter].votedProposalIds;\n    }\n\n    /**\n     * @notice Returns currently locked stCELO in voting. (This stCELO cannot be unlocked.)\n     * @param beneficiary The account.\n     */\n    function getLockedStCeloInVoting(address beneficiary) public view returns (uint256) {\n        Voter storage voter = voters[beneficiary];\n        uint256 lockedAmount;\n\n        uint256 i = voter.votedProposalIds.length;\n        while (i > 0) {\n            uint256 proposalId = voter.votedProposalIds[--i];\n            uint256 proposalTimestamp = proposalTimestamps[proposalId];\n\n            if (proposalTimestamp == 0) {\n                continue;\n            }\n\n            if (\n                block.timestamp < proposalTimestamp + getGovernance().getReferendumStageDuration()\n            ) {\n                VoterRecord storage voterRecord = voter.proposalVotes[proposalId];\n                lockedAmount = Math.max(\n                    lockedAmount,\n                    voterRecord.yesVotes + voterRecord.noVotes + voterRecord.abstainVotes\n                );\n            }\n        }\n\n        return toStakedCelo(lockedAmount);\n    }\n\n    /**\n     * @return Governance referendum duration.\n     */\n    function getReferendumDuration() public view returns (uint256) {\n        return getGovernance().getReferendumStageDuration();\n    }\n\n    /**\n     * @notice Returns vote weight of account owning stCelo.\n     * @param beneficiary The account.\n     */\n    function getVoteWeight(address beneficiary) public view returns (uint256) {\n        uint256 stakedCeloBalance = stakedCelo.balanceOf(beneficiary);\n        return toCelo(stakedCeloBalance);\n    }\n\n    /**\n     * @notice Gets vote record of proposal.\n     * @param proposalId The proposal UUID.\n     */\n    function getVoteRecord(uint256 proposalId) public view returns (ProposalVoteRecord memory) {\n        return voteRecords[proposalId];\n    }\n\n    /**\n     * @notice Computes the amount of stCELO that should be minted for a given\n     * amount of CELO deposited.\n     * @param celoAmount The amount of CELO deposited.\n     * @return The amount of stCELO that should be minted.\n     */\n    function toStakedCelo(uint256 celoAmount) public view returns (uint256) {\n        uint256 stCeloSupply = stakedCelo.totalSupply();\n        uint256 celoBalance = account.getTotalCelo();\n\n        if (stCeloSupply == 0 || celoBalance == 0) {\n            return celoAmount;\n        }\n\n        return (celoAmount * stCeloSupply) / celoBalance;\n    }\n\n    /**\n     * @notice Computes the amount of CELO that should be withdrawn for a given\n     * amount of stCELO burned.\n     * @param stCeloAmount The amount of stCELO burned.\n     * @return The amount of CELO that should be withdrawn.\n     */\n    function toCelo(uint256 stCeloAmount) public view returns (uint256) {\n        uint256 stCeloSupply = stakedCelo.totalSupply();\n        uint256 celoBalance = account.getTotalCelo();\n\n        if (stCeloSupply == 0 || celoBalance == 0) {\n            return stCeloAmount;\n        }\n\n        return (stCeloAmount * celoBalance) / stCeloSupply;\n    }\n\n    /**\n     * @notice Returns sum of input weights.\n     * @param weights The weights to sum up.\n     * @return The sum of input weights.\n     */\n    function getTotalWeightRequested(uint256[] memory weights) private pure returns (uint256) {\n        uint256 totalVotesRequested = 0;\n        for (uint256 i = 0; i < weights.length; i++) {\n            totalVotesRequested += weights[i];\n        }\n\n        return totalVotesRequested;\n    }\n}\n"
    },
    "contracts/interfaces/IStakedCelo.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IStakedCelo {\n    function totalSupply() external view returns (uint256);\n\n    function mint(address, uint256) external;\n\n    function burn(address, uint256) external;\n\n    function transfer(address, uint256) external returns (bool);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function lockVoteBalance(address account, uint256 amount) external;\n\n    function unlockVoteBalance(address account) external;\n\n    function lockedVoteBalanceOf(address account) external view returns (uint256);\n}\n"
    },
    "contracts/RebasedStakedCelo.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"./common/ERC20Upgradeable.sol\";\nimport \"./common/UUPSOwnableUpgradeable.sol\";\nimport \"./Managed.sol\";\nimport \"./interfaces/IAccount.sol\";\nimport \"./interfaces/IStakedCelo.sol\";\n\n/**\n * @title An ERC-20 wrapper contract that receives stCELO\n * and represents the underlying voted LockedGold in the StakedCelo system.\n * @dev This contract depends on the Account and StakedCelo contracts\n * to calculate the amount of rstCELO held by depositors.\n */\ncontract RebasedStakedCelo is ERC20Upgradeable, UUPSOwnableUpgradeable {\n    /**\n     * @notice Total amount of stCELO deposited in this contract.\n     */\n    uint256 public totalDeposit;\n\n    /**\n     * @notice Keyed by depositor address, the amount of stCELO deposited.\n     */\n    mapping(address => uint256) public stakedCeloBalance;\n\n    /**\n     * @notice An instance of the StakedCelo contract.\n     */\n    IStakedCelo internal stakedCelo;\n\n    /**\n     * @notice An instance of the Account contract.\n     */\n    IAccount internal account;\n\n    /**\n     * @notice Used when a deposit is successfuly completed.\n     * @param depositor The address of the depositor.\n     * @param amount The amount of stCELO deposited.\n     */\n    event StakedCeloDeposited(address depositor, uint256 amount);\n\n    /**\n     * @notice Used when a withdrawal is successfully completed.\n     * @param withdrawer The address of the withdrawer.\n     * @param amount The amount of stCELO withdrawn.\n     */\n    event StakedCeloWithdrawn(address withdrawer, uint256 amount);\n\n    /**\n     * @notice Used when the deposit amount is zero.\n     */\n    error ZeroAmount();\n\n    /**\n     * @notice Used when a balance is too low.\n     * @param amount The amount of stCELO that is insufficient.\n     */\n    error InsufficientBalance(uint256 amount);\n\n    /**\n     * @notice Used when an null address is used.\n     */\n    error NullAddress();\n\n    /**\n     * @notice Used when deposit fails.\n     * @param depositor The address of the depositor.\n     * @param amount The amount of stCELO the depositor attempted to deposit.\n     */\n    error FailedDeposit(address depositor, uint256 amount);\n\n    /**\n     * @notice Used when withdrawal fails.\n     * @param withdrawer The address of the withdrawer.\n     * @param amount The amount of stCELO the withdrawer attempted to withdraw.\n     */\n    error FailedWithdrawal(address withdrawer, uint256 amount);\n\n    /**\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\n     * implementation gets initialized.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    constructor() initializer {}\n\n    /**\n     * @notice Replaces the constructor for proxy implementation.\n     * @param _stakedCelo The address of the StakedCelo contract.\n     * @param _account The address of the Account contract.\n     * @param _owner The address of the contract owner.\n     */\n    function initialize(\n        address _stakedCelo,\n        address _account,\n        address _owner\n    ) external initializer {\n        __ERC20_init(\"Rebased Staked CELO\", \"rstCELO\");\n        _transferOwnership(_owner);\n        stakedCelo = IStakedCelo(_stakedCelo);\n        account = IAccount(_account);\n    }\n\n    /**\n     * @notice Deposit stCELO in return for rstCELO.\n     * @dev Although rstCELO is never minted to any account, the rstCELO balance\n     * is calculated based on the account's deposited stCELO. See `balanceOf()` function below.\n     * @param stCeloAmount The Amount of stCELO to be deposited.\n     */\n    function deposit(uint256 stCeloAmount) external {\n        if (stCeloAmount == 0) {\n            revert ZeroAmount();\n        }\n\n        totalDeposit += stCeloAmount;\n\n        stakedCeloBalance[msg.sender] += stCeloAmount;\n\n        emit StakedCeloDeposited(msg.sender, stCeloAmount);\n\n        if (!stakedCelo.transferFrom(msg.sender, address(this), stCeloAmount)) {\n            revert FailedDeposit(msg.sender, stCeloAmount);\n        }\n    }\n\n    /**\n     * @notice Withdraws stCELO. This function transfers back some or all of sender's\n     * previously deposited stCELO amount.\n     * @param stCeloAmount The amount of stCELO to withdraw.\n     */\n    function withdraw(uint256 stCeloAmount) external {\n        if (stCeloAmount > stakedCeloBalance[msg.sender]) {\n            revert InsufficientBalance(stCeloAmount);\n        }\n\n        totalDeposit -= stCeloAmount;\n\n        unchecked {\n            stakedCeloBalance[msg.sender] -= stCeloAmount;\n        }\n        emit StakedCeloWithdrawn(msg.sender, stCeloAmount);\n\n        if (!stakedCelo.transfer(msg.sender, stCeloAmount)) {\n            revert FailedWithdrawal(msg.sender, stCeloAmount);\n        }\n    }\n\n    /**\n     * @notice Used to query the total supply of rstCELO.\n     * @return The calculated total supply of rstCELO.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return toRebasedStakedCelo(totalDeposit);\n    }\n\n    /**\n     * @notice Used to query the rstCELO balance of an address.\n     * @param _account The address of interest.\n     * @return The amount of rstCELO owned by the address.\n     */\n    function balanceOf(address _account) public view override returns (uint256) {\n        return toRebasedStakedCelo(stakedCeloBalance[_account]);\n    }\n\n    /**\n     * @notice Computes the amount of stCELO that is represented by an amount of rstCELO.\n     * @param rstCeloAmount The amount of rstCELO.\n     * @return The amount of stCELO represented by rstCELO.\n     */\n    function toStakedCelo(uint256 rstCeloAmount) public view returns (uint256) {\n        uint256 stCeloSupply = stakedCelo.totalSupply();\n        uint256 celoBalance = account.getTotalCelo();\n\n        if (stCeloSupply == 0 || celoBalance == 0) {\n            return rstCeloAmount;\n        }\n\n        return (rstCeloAmount * stCeloSupply) / celoBalance;\n    }\n\n    /**\n     * @notice Computes the amount of rstCELO that is represented by an amount of stCELO.\n     * @param stCeloAmount The amount of stCELO.\n     * @return The amount of rstCELO represented by stCELO.\n     */\n    function toRebasedStakedCelo(uint256 stCeloAmount) public view returns (uint256) {\n        uint256 stCeloSupply = stakedCelo.totalSupply();\n        uint256 celoBalance = account.getTotalCelo();\n\n        if (stCeloSupply == 0 || celoBalance == 0) {\n            return stCeloAmount;\n        }\n\n        return (stCeloAmount * celoBalance) / stCeloSupply;\n    }\n\n    /**\n     * @notice Moves `amount` of rstCELO from `sender` to `recipient`.\n     * @param from The address of the sender.\n     * @param to The address of the receiver.\n     * @param amount The amount of rstCELO to transfer.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        if (from == address(0)) {\n            revert NullAddress();\n        }\n        if (to == address(0)) {\n            revert NullAddress();\n        }\n\n        uint256 fromBalance = stakedCeloBalance[from];\n        uint256 equivalentStakedCeloAmount = toStakedCelo(amount);\n        if (fromBalance < equivalentStakedCeloAmount) {\n            revert InsufficientBalance(amount);\n        }\n\n        unchecked {\n            stakedCeloBalance[from] = fromBalance - equivalentStakedCeloAmount;\n        }\n        stakedCeloBalance[to] += equivalentStakedCeloAmount;\n\n        emit Transfer(from, to, amount);\n    }\n\n    /**\n     * @notice Returns the storage, major, minor, and patch version of the contract.\n     * @return Storage version of the contract.\n     * @return Major version of the contract.\n     * @return Minor version of the contract.\n     * @return Patch version of the contract.\n     */\n    function getVersionNumber()\n        external\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (1, 1, 1, 0);\n    }\n}\n"
    },
    "contracts/common/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n// Only change is in that _balances have internal modifier instead of private modifier\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is\n    Initializable,\n    ContextUpgradeable,\n    IERC20Upgradeable,\n    IERC20MetadataUpgradeable\n{\n    mapping(address => uint256) internal _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\n        internal\n        onlyInitializing\n    {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        // solhint-disable-next-line reason-string\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        // solhint-disable-next-line reason-string\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        // solhint-disable-next-line reason-string\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        // solhint-disable-next-line reason-string\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        // solhint-disable-next-line reason-string\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        // solhint-disable-next-line reason-string\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        // solhint-disable-next-line reason-string\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        // solhint-disable-next-line reason-string\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to\n     * xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount // solhint-disable-next-line no-empty-blocks\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to\n     * xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount // solhint-disable-next-line no-empty-blocks\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/StakedCelo.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./common/ERC20Upgradeable.sol\";\nimport \"./common/UsingRegistryUpgradeable.sol\";\nimport \"./common/UUPSOwnableUpgradeable.sol\";\nimport \"./Managed.sol\";\nimport \"./interfaces/IManager.sol\";\n\n/**\n * @title An ERC-20 token that is a fungible and transferrable representation\n * of reward-earning voted LockedGold (i.e. locked CELO).\n */\ncontract StakedCelo is ERC20Upgradeable, UUPSOwnableUpgradeable, Managed {\n    mapping(address => uint256) private _lockedBalances;\n\n    /**\n     * @notice Emitted when stCelo is locked.\n     * @param account The owner of locked stCelo.\n     * @param amount The amount of locked stCelo.\n     */\n    event LockedStCelo(address account, uint256 amount);\n\n    /**\n     * @notice Emitted when stCelo is inlocked.\n     * @param account The owner of unlocked stCelo.\n     * @param amount The amount of unlocked stCelo.\n     */\n    event UnlockedStCelo(address account, uint256 amount);\n\n    /**\n     * @notice Used when attempting to unlock stCelo when there is no locked stCelo.\n     * @param account The account's address.\n     */\n    error NoLockedStakedCelo(address account);\n\n    /**\n     * @notice Used when attempting to lock stCelo when there is not enough stCelo.\n     * @param account The account's address.\n     */\n    error NotEnoughStCeloToLock(address account);\n\n    /**\n     * @notice Used when attempting to unlock stCelo when there is no stCelo to unlock.\n     * @param account The account's address.\n     */\n    error NothingToUnlock(address account);\n\n    /**\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\n     * implementation gets initialized.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    constructor() initializer {}\n\n    /**\n     * @notice Initializes the contract.\n     * @param _manager The address of the Manager contract.\n     * @param _owner The address to set as the owner.\n     */\n    function initialize(address _manager, address _owner) external initializer {\n        __ERC20_init(\"Staked CELO\", \"stCELO\");\n        __Managed_init(_manager);\n        _transferOwnership(_owner);\n    }\n\n    /**\n     * @notice Mints new stCELO to an address.\n     * @param to The address that will receive the new stCELO.\n     * @param amount The amount of stCELO to mint.\n     */\n    function mint(address to, uint256 amount) external onlyManager {\n        _mint(to, amount);\n    }\n\n    /**\n     * @notice Burns stCELO from an address.\n     * @param from The address that will have its stCELO burned.\n     * @param amount The amount of stCELO to burn.\n     */\n    function burn(address from, uint256 amount) external onlyManager {\n        _burn(from, amount);\n    }\n\n    /**\n     * @notice Locks vote stCELO from an address.\n     * @param account The address that will have its stCELO balance locked.\n     * @param amount The amount of stCELO to lock.\n     */\n    function lockVoteBalance(address account, uint256 amount) external onlyManager {\n        uint256 lockedBalance = _lockedBalances[account];\n        if (lockedBalance < amount) {\n            _lockedBalances[account] = amount;\n            uint256 amountToSubtract = amount - lockedBalance;\n            uint256 accountBalance = balanceOf(account);\n            if (accountBalance < amountToSubtract) {\n                revert NotEnoughStCeloToLock(account);\n            }\n            unchecked {\n                _balances[account] = accountBalance - amountToSubtract;\n            }\n            emit LockedStCelo(account, amount);\n        }\n    }\n\n    /**\n     * @notice Returns vote stCELO locked balance.\n     * @param account The address of locked stCELO balance.\n     * @return The amount of locked stCELO.\n     */\n    function lockedVoteBalanceOf(address account) public view returns (uint256) {\n        return _lockedBalances[account];\n    }\n\n    /**\n     * @notice Unlocks vote stCELO from an address.\n     * @param beneficiary The address that will have its stCELO balance unlocked.\n     */\n    function unlockVoteBalance(address beneficiary) public {\n        uint256 previouslyLocked = _lockedBalances[beneficiary];\n        if (previouslyLocked == 0) {\n            revert NoLockedStakedCelo(beneficiary);\n        }\n        uint256 currentlyLocked = IManager(manager).updateHistoryAndReturnLockedStCeloInVoting(\n            beneficiary\n        );\n        if (previouslyLocked <= currentlyLocked) {\n            revert NothingToUnlock(beneficiary);\n        }\n\n        _lockedBalances[beneficiary] = currentlyLocked;\n        uint256 amountToAdd = previouslyLocked - currentlyLocked;\n        _balances[beneficiary] += amountToAdd;\n        emit UnlockedStCelo(beneficiary, previouslyLocked - _lockedBalances[beneficiary]);\n    }\n\n    /**\n     * @notice Returns the storage, major, minor, and patch version of the contract.\n     * @return Storage version of the contract.\n     * @return Major version of the contract.\n     * @return Minor version of the contract.\n     * @return Patch version of the contract.\n     */\n    function getVersionNumber()\n        external\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (1, 1, 2, 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/interfaces/IManager.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IManager {\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\n        external\n        returns (uint256);\n}\n"
    },
    "contracts/mock/MockManager.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"../interfaces/IManager.sol\";\n\n/**\n * @notice This is a simple mock exposing the StCelo-facing Manager API as\n * simple functions that\n * 1. Return currently locked stCelo.\n */\ncontract MockManager is IManager {\n    uint256 private lockedStCelo = 0;\n\n    function setLockedStCelo(uint256 _lockedStCelo) public {\n        lockedStCelo = _lockedStCelo;\n    }\n\n    function updateHistoryAndReturnLockedStCeloInVoting(address)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return lockedStCelo;\n    }\n\n    receive() external payable {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n"
    },
    "contracts/Manager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./common/UsingRegistryUpgradeable.sol\";\nimport \"./common/UUPSOwnableUpgradeable.sol\";\nimport \"./interfaces/IAccount.sol\";\nimport \"./interfaces/IStakedCelo.sol\";\nimport \"./interfaces/IVote.sol\";\n\n/**\n * @title Manages the StakedCelo system, by controlling the minting and burning\n * of stCELO and implementing strategies for voting and unvoting of deposited or\n * withdrawn CELO.\n */\ncontract Manager is UUPSOwnableUpgradeable, UsingRegistryUpgradeable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /**\n     * @notice Holds a group's address and votes.\n     * @param group The address of the group.\n     * @param votes The votes assigned to the group.\n     */\n    struct GroupWithVotes {\n        address group;\n        uint256 votes;\n    }\n\n    /**\n     * @notice An instance of the StakedCelo contract this Manager manages.\n     */\n    IStakedCelo internal stakedCelo;\n\n    /**\n     * @notice An instance of the Account contract this Manager manages.\n     */\n    IAccount internal account;\n\n    /**\n     * @notice The set of currently active groups that will be voted for with\n     * new deposits.\n     */\n    EnumerableSet.AddressSet private activeGroups;\n\n    /**\n     * @notice The set of deprecated groups. These are groups that should no\n     * longer receive new votes from deposits, but still need to be kept track\n     * of because the Account contract is still voting for them.\n     */\n    EnumerableSet.AddressSet private deprecatedGroups;\n\n    /**\n     * @notice Contract used during Governance voting.\n     */\n    address public voteContract;\n\n    /**\n     * @notice Emitted when the vote contract is initially set or later modified.\n     * @param voteContract The new vote contract address.\n     */\n    event VoteContractSet(address indexed voteContract);\n\n    /**\n     * @notice Emitted when a new group is activated for voting.\n     * @param group The group's address.\n     */\n    event GroupActivated(address indexed group);\n    /**\n     * @notice Emitted when a group is deprecated.\n     * @param group The group's address.\n     */\n    event GroupDeprecated(address indexed group);\n    /**\n     * @notice Emitted when a deprecated group is no longer being voted for and\n     * the contract forgets about it entirely.\n     * @param group The group's address.\n     */\n    event GroupRemoved(address indexed group);\n\n    /**\n     * @notice Used when attempting to activate a group that is already active.\n     * @param group The group's address.\n     */\n    error GroupAlreadyAdded(address group);\n\n    /**\n     * @notice Used when attempting to deprecate a group that is not active.\n     * @param group The group's address.\n     */\n    error GroupNotActive(address group);\n\n    /**\n     * @notice Used when an attempt to add an active group to the EnumerableSet\n     * fails.\n     * @param group The group's address.\n     */\n    error FailedToAddActiveGroup(address group);\n\n    /**\n     * @notice Used when an attempt to add a deprecated group to the\n     * EnumerableSet fails.\n     * @param group The group's address.\n     */\n    error FailedToAddDeprecatedGroup(address group);\n\n    /**\n     * @notice Used when an attempt to remove a deprecated group from the\n     * EnumerableSet fails.\n     * @param group The group's address.\n     */\n    error FailedToRemoveDeprecatedGroup(address group);\n\n    /**\n     * @notice Used when attempting to activate a group when the maximum number\n     * of groups voted (as allowed by the Election contract) is already being\n     * voted for.\n     */\n    error MaxGroupsVotedForReached();\n\n    /**\n     * @notice Used when attempting to deposit when there are not active groups\n     * to vote for.\n     */\n    error NoActiveGroups();\n\n    /**\n     * @notice Used when attempting to deposit when the total deposit amount\n     * would tip each active group over the voting limit as defined in\n     * Election.sol.\n     */\n    error NoVotableGroups();\n\n    /**\n     * @notice Used when attempting to withdraw but there are no groups being\n     * voted for.\n     */\n    error NoGroups();\n\n    /**\n     * @notice Used when attempting to withdraw 0 value.\n     */\n    error ZeroWithdrawal();\n\n    /**\n     * @notice Used when a group does not meet the validator group health requirements.\n     * @param group The group's address.\n     */\n    error GroupNotEligible(address group);\n\n    /**\n     * @notice Used when attempting to deprecated a healthy group using deprecateUnhealthyGroup().\n     * @param group The group's address.\n     */\n    error HealthyGroup(address group);\n\n    /**\n     * @notice Used when attempting to pass in address zero where not allowed.\n     */\n    error AddressZeroNotAllowed();\n\n    /**\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\n     * implementation gets initialized.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    constructor() initializer {}\n\n    /**\n     * @notice Initialize the contract with registry and owner.\n     * @param _registry The address of the Celo registry.\n     * @param _owner The address of the contract owner.\n     */\n    function initialize(address _registry, address _owner) external initializer {\n        _transferOwnership(_owner);\n        __UsingRegistry_init(_registry);\n    }\n\n    /**\n     * @notice Set this contract's dependencies in the StakedCelo system.\n     * @dev Manager, Account and StakedCelo all reference each other\n     * so we need a way of setting these after all contracts are\n     * deployed and initialized.\n     * @param _stakedCelo the address of the StakedCelo contract.\n     * @param _account The address of the Account contract.\n     * @param _vote The address of the Vote contract.\n     */\n    function setDependencies(\n        address _stakedCelo,\n        address _account,\n        address _vote\n    ) external onlyOwner {\n        if (_stakedCelo == address(0) || _account == address(0) || _vote == address(0)) {\n            revert AddressZeroNotAllowed();\n        }\n\n        stakedCelo = IStakedCelo(_stakedCelo);\n        account = IAccount(_account);\n        voteContract = _vote;\n        emit VoteContractSet(_vote);\n    }\n\n    /**\n     * @notice Marks a group as votable.\n     * @param group The address of the group to add to the set of votable\n     * groups.\n     * @dev Fails if the maximum number of groups are already being voted for by\n     * the Account smart contract (as per the `maxNumGroupsVotedFor` in the\n     * Election contract).\n     */\n    function activateGroup(address group) external onlyOwner {\n        if (!isValidGroup(group)) {\n            revert GroupNotEligible(group);\n        }\n\n        if (activeGroups.contains(group)) {\n            revert GroupAlreadyAdded(group);\n        }\n\n        if (deprecatedGroups.contains(group)) {\n            if (!deprecatedGroups.remove(group)) {\n                revert FailedToRemoveDeprecatedGroup(group);\n            }\n        }\n\n        if (\n            activeGroups.length() + deprecatedGroups.length() >=\n            getElection().maxNumGroupsVotedFor() &&\n            !getElection().allowedToVoteOverMaxNumberOfGroups(address(account))\n        ) {\n            revert MaxGroupsVotedForReached();\n        }\n\n        if (!activeGroups.add(group)) {\n            revert FailedToAddActiveGroup(group);\n        }\n        emit GroupActivated(group);\n    }\n\n    /**\n     * @notice Returns the array of active groups.\n     * @return The array of active groups.\n     */\n    function getGroups() external view returns (address[] memory) {\n        return activeGroups.values();\n    }\n\n    /**\n     * @notice Marks a group as deprecated.\n     * @param group The group to deprecate.\n     * @dev A deprecated group will remain in the `deprecatedGroups` array as\n     * long as it is still being voted for by the Account contract. Deprecated\n     * groups will be the first to have their votes withdrawn.\n     */\n    function deprecateGroup(address group) external onlyOwner {\n        _deprecateGroup(group);\n    }\n\n    /**\n     * @notice Checks if a group meets the validator group health requirements.\n     * @param group The group to check for.\n     * @return Whether or not the group is valid.\n     */\n    function isValidGroup(address group) public view returns (bool) {\n        IValidators validators = getValidators();\n\n        // add check if group is !registered\n        if (!validators.isValidatorGroup(group)) {\n            return false;\n        }\n\n        (address[] memory members, , , , , uint256 slashMultiplier, ) = validators\n            .getValidatorGroup(group);\n\n        // check if group has no members\n        if (members.length == 0) {\n            return false;\n        }\n        // check for recent slash\n        if (slashMultiplier < 10**24) {\n            return false;\n        }\n        // check that at least one member is elected.\n        for (uint256 i = 0; i < members.length; i++) {\n            if (isGroupMemberElected(members[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @notice Marks an unhealthy group as deprecated.\n     * @param group The group to deprecate if unhealthy.\n     * @dev A deprecated group will remain in the `deprecatedGroups` array as\n     * long as it is still being voted for by the Account contract. Deprecated\n     * groups will be the first to have their votes withdrawn.\n     */\n    function deprecateUnhealthyGroup(address group) external {\n        if (isValidGroup(group)) {\n            revert HealthyGroup(group);\n        }\n        _deprecateGroup((group));\n    }\n\n    /**\n     * @notice Returns the list of deprecated groups.\n     * @return The list of deprecated groups.\n     */\n    function getDeprecatedGroups() external view returns (address[] memory) {\n        return deprecatedGroups.values();\n    }\n\n    /**\n     * @notice Used to deposit CELO into the StakedCelo system. The user will\n     * receive an amount of stCELO proportional to their contribution. The CELO\n     * will be scheduled to be voted for with the Account contract.\n     */\n    function deposit() external payable {\n        if (activeGroups.length() == 0) {\n            revert NoActiveGroups();\n        }\n\n        stakedCelo.mint(msg.sender, toStakedCelo(msg.value));\n\n        distributeVotes(msg.value);\n    }\n\n    /**\n     * @notice Used to withdraw CELO from the system, in exchange for burning\n     * stCELO.\n     * @param stakedCeloAmount The amount of stCELO to burn.\n     * @dev Calculates the CELO amount based on the ratio of outstanding stCELO\n     * and the total amount of CELO owned and used for voting by Account. See\n     * `toCelo`.\n     * @dev The funds need to be withdrawn using calls to `Account.withdraw` and\n     * `Account.finishPendingWithdrawal`.\n     */\n    function withdraw(uint256 stakedCeloAmount) external {\n        if (activeGroups.length() + deprecatedGroups.length() == 0) {\n            revert NoGroups();\n        }\n\n        distributeWithdrawals(toCelo(stakedCeloAmount), msg.sender);\n\n        stakedCelo.burn(msg.sender, stakedCeloAmount);\n    }\n\n    /**\n     * @notice Computes the amount of stCELO that should be minted for a given\n     * amount of CELO deposited.\n     * @param celoAmount The amount of CELO deposited.\n     * @return The amount of stCELO that should be minted.\n     */\n    function toStakedCelo(uint256 celoAmount) public view returns (uint256) {\n        uint256 stCeloSupply = stakedCelo.totalSupply();\n        uint256 celoBalance = account.getTotalCelo();\n\n        if (stCeloSupply == 0 || celoBalance == 0) {\n            return celoAmount;\n        }\n\n        return (celoAmount * stCeloSupply) / celoBalance;\n    }\n\n    /**\n     * @notice Computes the amount of CELO that should be withdrawn for a given\n     * amount of stCELO burned.\n     * @param stCeloAmount The amount of stCELO burned.\n     * @return The amount of CELO that should be withdrawn.\n     */\n    function toCelo(uint256 stCeloAmount) public view returns (uint256) {\n        uint256 stCeloSupply = stakedCelo.totalSupply();\n        uint256 celoBalance = account.getTotalCelo();\n\n        if (stCeloSupply == 0 || celoBalance == 0) {\n            return stCeloAmount;\n        }\n\n        return (stCeloAmount * celoBalance) / stCeloSupply;\n    }\n\n    /**\n     * @notice Distributes votes by computing the number of votes each active\n     * group should receive, then calling out to `Account.scheduleVotes`.\n     * @param votes The amount of votes to distribute.\n     * @dev The vote distribution strategy is to try and have each validator\n     * group to be receiving the same amount of votes from the system. If a\n     * group already has more votes than the average of the total available\n     * votes it will not be voted for, and instead we'll try to evenly\n     * distribute between the remaining groups.\n     * @dev Election.sol sets a dynamic limit on the number of votes receivable\n     * by a group, based on the group's size, the total amount of Locked\n     * CELO, and the total number of electable validators. We don't want to\n     * schedule votes for a group when the amount would exceed this threshold.\n     * `getVotableGroups` below selects those groups that could receive the\n     * entire `votes` amount, and filters out the rest. This is a heuristic:\n     * when distributing votes evenly, the group might receive less than\n     * `votes`, and the total amount could end up being under the limit.\n     * However, doing an exact computation would be both complex and cost a lot\n     * of additional gas, hence the heuristic. If indeed all groups are close to\n     * their voting limit, causing a larger deposit to revert with\n     * NoVotableGroups, despite there still being some room for deposits, this\n     * can be worked around by sending a few smaller deposits.\n     */\n    function distributeVotes(uint256 votes) internal {\n        /*\n         * \"Votable\" groups are those that will currently fit under the voting\n         * limit in Election.sol even if voted for with the entire `votes`\n         * amount. Note that some might still not end up getting voted for given\n         * the distribution logic below.\n         */\n        address[] memory votableGroups = getVotableGroups(votes);\n        if (votableGroups.length == 0) {\n            revert NoVotableGroups();\n        }\n\n        GroupWithVotes[] memory sortedGroups;\n        uint256 availableVotes;\n        (sortedGroups, availableVotes) = getSortedGroupsWithVotes(votableGroups);\n        availableVotes += votes;\n\n        uint256[] memory votesPerGroup = new uint256[](votableGroups.length);\n        uint256 groupsVoted = votableGroups.length;\n        uint256 targetVotes = availableVotes / groupsVoted;\n\n        /*\n         * This would normally be (i = votableGroups.length - 1; i >=0; i--),\n         * but we can't i-- on the last iteration when i=0, since i is an\n         * unsigned integer. So we iterate with the loop variable 1 greater than\n         * expected, set index = i-1, and use index inside the loop.\n         */\n        for (uint256 i = votableGroups.length; i > 0; i--) {\n            uint256 index = i - 1;\n            if (sortedGroups[index].votes >= targetVotes) {\n                groupsVoted--;\n                availableVotes -= sortedGroups[index].votes;\n                targetVotes = availableVotes / groupsVoted;\n                votesPerGroup[index] = 0;\n            } else {\n                votesPerGroup[index] = targetVotes - sortedGroups[index].votes;\n\n                if (availableVotes % groupsVoted > index) {\n                    votesPerGroup[index]++;\n                }\n            }\n        }\n\n        address[] memory finalGroups = new address[](groupsVoted);\n        uint256[] memory finalVotes = new uint256[](groupsVoted);\n\n        for (uint256 i = 0; i < groupsVoted; i++) {\n            finalGroups[i] = sortedGroups[i].group;\n            finalVotes[i] = votesPerGroup[i];\n        }\n\n        account.scheduleVotes{value: votes}(finalGroups, finalVotes);\n    }\n\n    /**\n     * @notice Distributes withdrawals by computing the number of votes that\n     * should be withdrawn from each group, then calling out to\n     * `Account.scheduleVotes`.\n     * @param withdrawal The amount of votes to withdraw.\n     * @param beneficiary The address that should end up receiving the withdrawn\n     * CELO.\n     * @dev The withdrawal distribution strategy is to:\n     * 1. Withdraw as much as possible from any deprecated groups.\n     * 2. If more votes still need to be withdrawn, try and have each validator\n     * group end up receiving the same amount of votes from the system. If a\n     * group already has less votes than the average of the total remaining\n     * votes, it will not be withdrawn from, and instead we'll try to evenly\n     * distribute between the remaining groups.\n     */\n    function distributeWithdrawals(uint256 withdrawal, address beneficiary) internal {\n        if (withdrawal == 0) {\n            revert ZeroWithdrawal();\n        }\n\n        address[] memory deprecatedGroupsWithdrawn;\n        uint256[] memory deprecatedWithdrawalsPerGroup;\n        uint256 numberDeprecatedGroupsWithdrawn;\n\n        (\n            deprecatedGroupsWithdrawn,\n            deprecatedWithdrawalsPerGroup,\n            numberDeprecatedGroupsWithdrawn,\n            withdrawal\n        ) = getDeprecatedGroupsWithdrawalDistribution(withdrawal);\n\n        address[] memory groupsWithdrawn;\n        uint256[] memory withdrawalsPerGroup;\n\n        (groupsWithdrawn, withdrawalsPerGroup) = getActiveGroupWithdrawalDistribution(withdrawal);\n\n        address[] memory finalGroups = new address[](\n            groupsWithdrawn.length + numberDeprecatedGroupsWithdrawn\n        );\n        uint256[] memory finalVotes = new uint256[](\n            groupsWithdrawn.length + numberDeprecatedGroupsWithdrawn\n        );\n\n        for (uint256 i = 0; i < numberDeprecatedGroupsWithdrawn; i++) {\n            finalGroups[i] = deprecatedGroupsWithdrawn[i];\n            finalVotes[i] = deprecatedWithdrawalsPerGroup[i];\n        }\n\n        for (uint256 i = 0; i < groupsWithdrawn.length; i++) {\n            finalGroups[i + numberDeprecatedGroupsWithdrawn] = groupsWithdrawn[i];\n            finalVotes[i + numberDeprecatedGroupsWithdrawn] = withdrawalsPerGroup[i];\n        }\n\n        account.scheduleWithdrawals(beneficiary, finalGroups, finalVotes);\n    }\n\n    /**\n     * @notice Calculates how many votes should be withdrawn from each\n     * deprecated group.\n     * @param withdrawal The total amount of votes that needs to be withdrawn.\n     * @return deprecatedGroupsWithdrawn The array of deprecated groups to be\n     * withdrawn from.\n     * @return deprecatedWithdrawalsPerGroup The amount of votes to withdraw\n     * from the respective deprecated group in `deprecatedGroupsWithdrawn`.\n     * @return numberDeprecatedGroupsWithdrawn The number of groups in\n     * `deprecatedGroupsWithdrawn` that have a non zero withdrawal.\n     * @return remainingWithdrawal The number of votes that still need to be\n     * withdrawn after withdrawing from deprecated groups.\n     * @dev Non zero entries of `deprecatedWithdrawalsPerGroup` will be exactly\n     * a prefix of length `numberDeprecatedGroupsWithdrawn`.\n     */\n    function getDeprecatedGroupsWithdrawalDistribution(uint256 withdrawal)\n        internal\n        returns (\n            address[] memory deprecatedGroupsWithdrawn,\n            uint256[] memory deprecatedWithdrawalsPerGroup,\n            uint256 numberDeprecatedGroupsWithdrawn,\n            uint256 remainingWithdrawal\n        )\n    {\n        remainingWithdrawal = withdrawal;\n        uint256 numberDeprecatedGroups = deprecatedGroups.length();\n        deprecatedGroupsWithdrawn = new address[](numberDeprecatedGroups);\n        deprecatedWithdrawalsPerGroup = new uint256[](numberDeprecatedGroups);\n        numberDeprecatedGroupsWithdrawn = 0;\n\n        for (uint256 i = 0; i < numberDeprecatedGroups; i++) {\n            numberDeprecatedGroupsWithdrawn++;\n            deprecatedGroupsWithdrawn[i] = deprecatedGroups.at(i);\n            uint256 currentVotes = account.getCeloForGroup(deprecatedGroupsWithdrawn[i]);\n            deprecatedWithdrawalsPerGroup[i] = Math.min(remainingWithdrawal, currentVotes);\n            remainingWithdrawal -= deprecatedWithdrawalsPerGroup[i];\n\n            if (currentVotes == deprecatedWithdrawalsPerGroup[i]) {\n                if (!deprecatedGroups.remove(deprecatedGroupsWithdrawn[i])) {\n                    revert FailedToRemoveDeprecatedGroup(deprecatedGroupsWithdrawn[i]);\n                }\n                emit GroupRemoved(deprecatedGroupsWithdrawn[i]);\n            }\n\n            if (remainingWithdrawal == 0) {\n                break;\n            }\n        }\n\n        return (\n            deprecatedGroupsWithdrawn,\n            deprecatedWithdrawalsPerGroup,\n            numberDeprecatedGroupsWithdrawn,\n            remainingWithdrawal\n        );\n    }\n\n    /**\n     * @notice Calculates how votes should be withdrawn from each active group.\n     * @param withdrawal The number of votes that need to be withdrawn.\n     * @return The array of group addresses that should be withdrawn from.\n     * @return The amount of votes to withdraw from the respective group in the\n     * array of groups withdrawn from.\n     */\n    function getActiveGroupWithdrawalDistribution(uint256 withdrawal)\n        internal\n        view\n        returns (address[] memory, uint256[] memory)\n    {\n        if (withdrawal == 0) {\n            address[] memory noGroups = new address[](0);\n            uint256[] memory noWithdrawals = new uint256[](0);\n            return (noGroups, noWithdrawals);\n        }\n\n        uint256 numberGroups = activeGroups.length();\n        GroupWithVotes[] memory sortedGroups;\n        uint256 availableVotes;\n        (sortedGroups, availableVotes) = getSortedGroupsWithVotes(activeGroups.values());\n        availableVotes -= withdrawal;\n\n        uint256 numberGroupsWithdrawn = numberGroups;\n        uint256 targetVotes = availableVotes / numberGroupsWithdrawn;\n\n        for (uint256 i = 0; i < numberGroups; i++) {\n            if (sortedGroups[i].votes <= targetVotes) {\n                numberGroupsWithdrawn--;\n                availableVotes -= sortedGroups[i].votes;\n                targetVotes = availableVotes / numberGroupsWithdrawn;\n            } else {\n                break;\n            }\n        }\n\n        uint256[] memory withdrawalsPerGroup = new uint256[](numberGroupsWithdrawn);\n        address[] memory groupsWithdrawn = new address[](numberGroupsWithdrawn);\n        uint256 offset = numberGroups - numberGroupsWithdrawn;\n\n        for (uint256 i = 0; i < numberGroupsWithdrawn; i++) {\n            groupsWithdrawn[i] = sortedGroups[i + offset].group;\n            withdrawalsPerGroup[i] = sortedGroups[i + offset].votes - targetVotes;\n            if (availableVotes % numberGroupsWithdrawn > i) {\n                withdrawalsPerGroup[i]--;\n            }\n        }\n\n        return (groupsWithdrawn, withdrawalsPerGroup);\n    }\n\n    /**\n     * @notice Returns a list of group addresses with their corresponding\n     * current total votes, sorted by the number of votes, and the total number\n     * of votes in the system.\n     * @param groups The array of addresses of the groups to sort.\n     * @return The array of GroupWithVotes structs, sorted by number of votes.\n     * @return The total number of votes assigned to active groups.\n     */\n    function getSortedGroupsWithVotes(address[] memory groups)\n        internal\n        view\n        returns (GroupWithVotes[] memory, uint256)\n    {\n        GroupWithVotes[] memory groupsWithVotes = new GroupWithVotes[](groups.length);\n        uint256 totalVotes = 0;\n        for (uint256 i = 0; i < groups.length; i++) {\n            uint256 votes = account.getCeloForGroup(groups[i]);\n            totalVotes += votes;\n            groupsWithVotes[i] = GroupWithVotes(groups[i], votes);\n        }\n\n        sortGroupsWithVotes(groupsWithVotes);\n        return (groupsWithVotes, totalVotes);\n    }\n\n    /**\n     * @notice Returns the active groups that can receive the entire `votes`\n     * amount based on their current receivable votes limit in Election.sol.\n     * @param votes The number of votes that would potentially be added.\n     * @return The list of votable active groups.\n     */\n    function getVotableGroups(uint256 votes) internal returns (address[] memory) {\n        uint256 numberGroups = activeGroups.length();\n        uint256 numberVotableGroups = 0;\n        address[] memory votableGroups = new address[](numberGroups);\n\n        for (uint256 i = 0; i < numberGroups; i++) {\n            address group = activeGroups.at(i);\n            uint256 scheduledVotes = account.scheduledVotesForGroup(group);\n            if (getElection().canReceiveVotes(group, votes + scheduledVotes)) {\n                votableGroups[numberVotableGroups] = group;\n                numberVotableGroups++;\n            }\n        }\n\n        address[] memory votableGroupsFinal = new address[](numberVotableGroups);\n        for (uint256 i = 0; i < numberVotableGroups; i++) {\n            votableGroupsFinal[i] = votableGroups[i];\n        }\n\n        return votableGroupsFinal;\n    }\n\n    /**\n     * @notice Sorts an array of GroupWithVotes structs based on increasing\n     * `votes` values.\n     * @param groupsWithVotes The array to sort.\n     * @dev This is an in-place insertion sort. In general in Solidity we should\n     * be careful of algorithms on arrays, especially O(n^2) ones, but here\n     * we're guaranteed to be working with a small array, its length is bounded\n     * by the maximum number of groups that can be voted for in Elections.sol.\n     */\n    function sortGroupsWithVotes(GroupWithVotes[] memory groupsWithVotes) internal pure {\n        for (uint256 i = 1; i < groupsWithVotes.length; i++) {\n            uint256 j = i;\n            while (j > 0 && groupsWithVotes[j].votes < groupsWithVotes[j - 1].votes) {\n                (groupsWithVotes[j], groupsWithVotes[j - 1]) = (\n                    groupsWithVotes[j - 1],\n                    groupsWithVotes[j]\n                );\n                j--;\n            }\n        }\n    }\n\n    /**\n     * @notice Votes on a proposal in the referendum stage.\n     * @param proposalId The ID of the proposal to vote on.\n     * @param index The index of the proposal ID in `dequeued`.\n     * @param yesVotes The yes votes weight.\n     * @param noVotes The no votes weight.\n     * @param abstainVotes The abstain votes weight.\n     */\n    function voteProposal(\n        uint256 proposalId,\n        uint256 index,\n        uint256 yesVotes,\n        uint256 noVotes,\n        uint256 abstainVotes\n    ) public {\n        IVote vote = IVote(voteContract);\n\n        (\n            uint256 stCeloUsedForVoting,\n            uint256 totalYesVotes,\n            uint256 totalNoVotes,\n            uint256 totalAbstainVotes\n        ) = vote.voteProposal(msg.sender, proposalId, yesVotes, noVotes, abstainVotes);\n\n        stakedCelo.lockVoteBalance(msg.sender, stCeloUsedForVoting);\n        account.votePartially(proposalId, index, totalYesVotes, totalNoVotes, totalAbstainVotes);\n    }\n\n    /**\n     * @notice Revokes votes on already voted proposal.\n     * @param proposalId The ID of the proposal to vote on.\n     * @param index The index of the proposal ID in `dequeued`.\n     */\n    function revokeVotes(uint256 proposalId, uint256 index) external {\n        IVote vote = IVote(voteContract);\n\n        (uint256 totalYesVotes, uint256 totalNoVotes, uint256 totalAbstainVotes) = vote.revokeVotes(\n            msg.sender,\n            proposalId\n        );\n\n        account.votePartially(proposalId, index, totalYesVotes, totalNoVotes, totalAbstainVotes);\n    }\n\n    /**\n     * @notice Unlock balance of vote stCelo and update beneficiary vote history.\n     * @param beneficiary The account to be unlocked.\n     */\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\n        external\n        returns (uint256)\n    {\n        IVote vote = IVote(voteContract);\n        return vote.updateHistoryAndReturnLockedStCeloInVoting(beneficiary);\n    }\n\n    /**\n     * @notice Unlock vote balance of stCelo.\n     * @param accountAddress The account to be unlocked.\n     */\n    function unlockBalance(address accountAddress) public {\n        stakedCelo.unlockVoteBalance(accountAddress);\n    }\n\n    /**\n     * @notice Marks a group as deprecated.\n     * @param group The group to deprecate.\n     */\n    function _deprecateGroup(address group) private {\n        if (!activeGroups.remove(group)) {\n            revert GroupNotActive(group);\n        }\n\n        emit GroupDeprecated(group);\n\n        if (account.getCeloForGroup(group) > 0) {\n            if (!deprecatedGroups.add(group)) {\n                revert FailedToAddDeprecatedGroup(group);\n            }\n        } else {\n            emit GroupRemoved(group);\n        }\n    }\n\n    /**\n     * @notice Checks if a group member is elected.\n     * @param groupMember The member of the group to check election status for.\n     * @return Whether or not the group member is elected.\n     */\n    function isGroupMemberElected(address groupMember) private view returns (bool) {\n        IElection election = getElection();\n\n        address[] memory electedValidatorSigners = election.electValidatorSigners();\n\n        for (uint256 i = 0; i < electedValidatorSigners.length; i++) {\n            if (electedValidatorSigners[i] == groupMember) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @notice Returns the storage, major, minor, and patch version of the contract.\n     * @return Storage version of the contract.\n     * @return Major version of the contract.\n     * @return Minor version of the contract.\n     * @return Patch version of the contract.\n     */\n    function getVersionNumber()\n        external\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (1, 2, 0, 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/IVote.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IVote {\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\n        external\n        returns (uint256);\n\n    function voteProposal(\n        address accountVoter,\n        uint256 proposalId,\n        uint256 yesVotes,\n        uint256 noVotes,\n        uint256 abstainVotes\n    )\n        external\n        returns (\n            uint256 stCeloUsedForVoting,\n            uint256 totalYesVotes,\n            uint256 totalNoVotes,\n            uint256 totalAbstainVotes\n        );\n\n    function revokeVotes(address accountVoter, uint256 proposalId)\n        external\n        returns (\n            uint256 totalYesVotes,\n            uint256 totalNoVotes,\n            uint256 totalAbstainVotes\n        );\n}\n"
    },
    "contracts/mock/MockVote.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"../interfaces/IVote.sol\";\n\n/**\n * @notice This is a simple mock exposing the Manager-facing Vote API as\n * simple functions that\n * 1. Return currently locked stCelo.\n */\ncontract MockVote is IVote {\n    address public accountVoter;\n    uint256 public proposalId;\n    uint256 public totalYesVotes;\n    uint256 public totalNoVotes;\n    uint256 public totalAbstainVotes;\n\n    address public revokeAccountVoter;\n    uint256 public revokeProposalId;\n\n    address public updatedHistoryFor;\n\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\n        external\n        override\n        returns (uint256)\n    {\n        updatedHistoryFor = beneficiary;\n        return 111;\n    }\n\n    function voteProposal(\n        address _accountVoter,\n        uint256 _proposalId,\n        uint256 _yesVotes,\n        uint256 _noVotes,\n        uint256 _abstainVotes\n    )\n        external\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        accountVoter = _accountVoter;\n        proposalId = _proposalId;\n        totalYesVotes = _yesVotes;\n        totalNoVotes = _noVotes;\n        totalAbstainVotes = _abstainVotes;\n\n        return (\n            _yesVotes + _noVotes + _abstainVotes,\n            totalYesVotes,\n            totalNoVotes,\n            totalAbstainVotes\n        );\n    }\n\n    function setVotes(\n        uint256 yes,\n        uint256 no,\n        uint256 abstain\n    ) public {\n        totalYesVotes = yes;\n        totalNoVotes = no;\n        totalAbstainVotes = abstain;\n    }\n\n    function revokeVotes(address _accountVoter, uint256 _proposalId)\n        external\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        revokeAccountVoter = _accountVoter;\n        revokeProposalId = _proposalId;\n        return (totalYesVotes, totalNoVotes, totalAbstainVotes);\n    }\n}\n"
    },
    "contracts/mock/MockGovernance.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"../interfaces/IGovernance.sol\";\n\n/**\n * @notice This is a simple mock exposing the Account-facing Governance API as\n * simple functions that\n */\ncontract MockGovernance is IGovernance {\n    uint256 public proposalId;\n    uint256 public index;\n    uint256 public yesVotes;\n    uint256 public noVotes;\n    uint256 public abstainVotes;\n\n    function votePartially(\n        uint256 _proposalId,\n        uint256 _index,\n        uint256 _yesVotes,\n        uint256 _noVotes,\n        uint256 _abstainVotes\n    ) external override returns (bool) {\n        proposalId = _proposalId;\n        index = _index;\n        yesVotes = _yesVotes;\n        noVotes = _noVotes;\n        abstainVotes = _abstainVotes;\n\n        return true;\n    }\n\n    function getProposal(uint256 _proposalId)\n        external\n        view\n        override\n        returns (\n            address,\n            uint256,\n            uint256,\n            uint256,\n            string memory\n        )\n    {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function getReferendumStageDuration() external pure returns (uint256) {\n        return 11;\n    }\n}\n"
    },
    "contracts/mock/MockRegistry.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/IRegistry.sol\";\n\n/**\n * @title Routes identifiers to addresses.\n */\ncontract MockRegistry is IRegistry, Ownable, Initializable {\n    using SafeMath for uint256;\n\n    mapping(bytes32 => address) public registry;\n\n    event RegistryUpdated(string identifier, bytes32 indexed identifierHash, address indexed addr);\n\n    /**\n     * @notice Used when identifier has no entry in the registry contract.\n     */\n    error IdentifierHasNoRegistryEntry();\n\n    /**\n     * @notice Associates the given address with the given identifier.\n     * @param identifier Identifier of contract whose address we want to set.\n     * @param addr Address of contract.\n     */\n    function setAddressFor(string calldata identifier, address addr) external onlyOwner {\n        bytes32 identifierHash = keccak256(abi.encodePacked(identifier));\n        registry[identifierHash] = addr;\n    }\n\n    /**\n     * @notice Gets address associated with the given identifierHash.\n     * @param identifierHash Identifier hash of contract whose address we want to look up.\n     * @dev Throws if address not set.\n     */\n    function getAddressForOrDie(bytes32 identifierHash) external view returns (address) {\n        if (registry[identifierHash] == address(0)) {\n            revert IdentifierHasNoRegistryEntry();\n        }\n        return registry[identifierHash];\n    }\n\n    /**\n     * @notice Gets address associated with the given identifierHash.\n     * @param identifierHash Identifier hash of contract whose address we want to look up.\n     */\n    function getAddressFor(bytes32 identifierHash) external view returns (address) {\n        return registry[identifierHash];\n    }\n\n    /**\n     * @notice Gets address associated with the given identifier.\n     * @param identifier Identifier of contract whose address we want to look up.\n     * @dev Throws if address not set.\n     */\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address) {\n        bytes32 identifierHash = keccak256(abi.encodePacked(identifier));\n        if (registry[identifierHash] == address(0)) {\n            revert IdentifierHasNoRegistryEntry();\n        }\n        return registry[identifierHash];\n    }\n\n    /**\n     * @notice Gets address associated with the given identifier.\n     * @param identifier Identifier of contract whose address we want to look up.\n     */\n    function getAddressForString(string calldata identifier) external view returns (address) {\n        bytes32 identifierHash = keccak256(abi.encodePacked(identifier));\n        return registry[identifierHash];\n    }\n\n    /**\n     * @notice Iterates over provided array of identifiers, getting the address for each.\n     *         Returns true if `sender` matches the address of one of the provided identifiers.\n     * @param identifierHashes Array of hashes of approved identifiers.\n     * @param sender Address in question to verify membership.\n     * @return True if `sender` corresponds to the address of any of `identifiers`\n     *         registry entries.\n     */\n    function isOneOf(bytes32[] calldata identifierHashes, address sender)\n        external\n        view\n        returns (bool)\n    {\n        for (uint256 i = 0; i < identifierHashes.length; i = i.add(1)) {\n            if (registry[identifierHashes[i]] == sender) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/libraries/ExternalCall.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nlibrary ExternalCall {\n    /**\n     * @notice Used when destination is not a contract.\n     * @param destination The invalid destination address.\n     */\n    error InvalidContractAddress(address destination);\n\n    /**\n     * @notice Used when an execution fails.\n     */\n    error ExecutionFailed();\n\n    /**\n     * @notice Executes external call.\n     * @param destination The address to call.\n     * @param value The CELO value to be sent.\n     * @param data The data to be sent.\n     * @return The call return value.\n     */\n    function execute(\n        address destination,\n        uint256 value,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        if (data.length > 0) {\n            if (!Address.isContract(destination)) {\n                revert InvalidContractAddress(destination);\n            }\n        }\n\n        bool success;\n        bytes memory returnData;\n        // solhint-disable-next-line avoid-low-level-calls\n        (success, returnData) = destination.call{value: value}(data);\n        if (!success) {\n            revert ExecutionFailed();\n        }\n\n        return returnData;\n    }\n}\n"
    },
    "contracts/common/MultiSig.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../libraries/ExternalCall.sol\";\n\n/**\n * @title Multisignature wallet - Allows multiple parties to agree on proposals before\n * execution.\n * @author Stefan George - <stefan.george@consensys.net>\n * @dev NOTE: This contract has its limitations and is not viable for every\n * multi-signature setup. On a case by case basis, evaluate whether this is the\n * correct contract for your use case.\n * In particular, this contract doesn't have an atomic \"add owners and increase\n * requirement\" operation.\n * This can be tricky, for example, in a situation where a MultiSig starts out\n * owned by a single owner. Safely increasing the owner set and requirement at\n * the same time is not trivial. One way to work around this situation is to\n * first add a second address controlled by the original owner, increase the\n * requirement, and then replace the auxillary address with the intended second\n * owner.\n * Again, this is just one example, in general make sure to verify this contract\n * will support your intended usage. The goal of this contract is to offer a\n * simple, minimal multi-signature API that's easy to understand even for novice\n * Solidity users.\n * Forked from\n * github.com/celo-org/celo-monorepo/blob/master/packages/protocol/contracts/common/MultiSig.sol\n */\ncontract MultiSig is Initializable, UUPSUpgradeable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /**\n     * @notice The maximum number of multisig owners.\n     */\n    uint256 public constant MAX_OWNER_COUNT = 50;\n\n    /**\n     * @notice The minimum time in seconds that must elapse before a proposal is executable.\n     */\n    uint256 public immutable minDelay;\n\n    /**\n     * @notice The value used to mark a proposal as executed.\n     */\n    uint256 internal constant DONE_TIMESTAMP = uint256(1);\n\n    /**\n     * @notice Used to keep track of a proposal.\n     * @param destinations The addresses at which the proposal is directed to.\n     * @param values The amounts of CELO involved.\n     * @param payloads The payloads of the proposal.\n     * @param timestampExecutable The timestamp at which a proposal becomes executable.\n     * @dev timestampExecutable is 0 if proposal is not yet scheduled or 1 if the proposal\n     * is executed.\n     * @param confirmations The list of confirmations. Keyed by the address that\n     * confirmed the proposal, whether or not the proposal is confirmed.\n     */\n    struct Proposal {\n        address[] destinations;\n        uint256[] values;\n        bytes[] payloads;\n        uint256 timestampExecutable;\n        mapping(address => bool) confirmations;\n    }\n\n    /**\n     * @notice The delay that must elapse to be able to execute a proposal.\n     */\n    uint256 public delay;\n\n    /**\n     * @notice Keyed by proposal ID, the Proposal record.\n     */\n    mapping(uint256 => Proposal) public proposals;\n\n    /**\n     * @notice The set of addresses which are owners of the multisig.\n     */\n    EnumerableSet.AddressSet private owners;\n\n    /**\n     * @notice The amount of confirmations required\n     * for a proposal to be fully confirmed.\n     */\n    uint256 public required;\n\n    /**\n     * @notice The total count of proposals.\n     */\n    uint256 public proposalCount;\n\n    /**\n     * @notice Used when a proposal is successfully confirmed.\n     * @param sender The address of the sender.\n     * @param proposalId The ID of the proposal.\n     */\n    event ProposalConfirmed(address indexed sender, uint256 indexed proposalId);\n\n    /**\n     * @notice Used when a confirmation is successfully revoked.\n     * @param sender The address of the sender.\n     * @param proposalId The ID of the proposal.\n     */\n    event ConfirmationRevoked(address indexed sender, uint256 indexed proposalId);\n\n    /**\n     * @notice Used when a proposal is successfully added.\n     * @param proposalId The ID of the proposal that was added.\n     */\n    event ProposalAdded(uint256 indexed proposalId);\n\n    /**\n     * @notice Emitted when a confirmed proposal is successfully executed.\n     * @param proposalId The ID of the proposal that was executed.\n     * @param returnData The response that was recieved from the external call.\n     */\n    event ProposalExecuted(uint256 indexed proposalId, bytes returnData);\n\n    /**\n     * @notice Emitted when one of the transactions that make up a proposal is successfully\n     * executed.\n     * @param index The index of the transaction within the proposal.\n     * @param proposalId The ID of the proposal.\n     * @param returnData The response that was recieved from the external call.\n     */\n    event TransactionExecuted(uint256 index, uint256 indexed proposalId, bytes returnData);\n\n    /**\n     * @notice Emitted when CELO is sent to this contract.\n     * @param sender The account which sent the CELO.\n     * @param value The amount of CELO sent.\n     */\n    event CeloDeposited(address indexed sender, uint256 value);\n\n    /**\n     * @notice Emitted when an Owner is successfully added as part of the multisig.\n     * @param owner The added owner.\n     */\n    event OwnerAdded(address indexed owner);\n\n    /**\n     * @notice Emitted when an Owner is successfully removed from the multisig.\n     * @param owner The removed owner.\n     */\n    event OwnerRemoved(address indexed owner);\n\n    /**\n     * @notice Emitted when the minimum amount of required confirmations is\n     * successfully changed.\n     * @param required The new required amount.\n     */\n    event RequirementChanged(uint256 required);\n\n    /**\n     * @notice Emitted when a proposal is scheduled.\n     * @param proposalId The ID of the proposal that is scheduled.\n     */\n    event ProposalScheduled(uint256 indexed proposalId);\n\n    /**\n     * @notice Used when `delay` is changed.\n     * @param delay The current delay value.\n     * @param newDelay The new delay value.\n     */\n    event DelayChanged(uint256 delay, uint256 newDelay);\n\n    /**\n     * @notice Used when sender is not this contract in an `onlyWallet` function.\n     * @param account The sender which triggered the function.\n     */\n    error SenderMustBeMultisigWallet(address account);\n\n    /**\n     * @notice Used when attempting to add an already existing owner.\n     * @param owner The address of the owner.\n     */\n    error OwnerAlreadyExists(address owner);\n\n    /**\n     * @notice Used when an owner does not exist.\n     * @param owner The address of the owner.\n     */\n    error OwnerDoesNotExist(address owner);\n\n    /**\n     * @notice Used when a proposal does not exist.\n     * @param proposalId The ID of the non-existent proposal.\n     */\n    error ProposalDoesNotExist(uint256 proposalId);\n\n    /**\n     * @notice Used when a proposal is not confirmed by a given owner.\n     * @param proposalId The ID of the proposal that is not confirmed.\n     * @param owner The address of the owner which did not confirm the proposal.\n     */\n    error ProposalNotConfirmed(uint256 proposalId, address owner);\n\n    /**\n     * @notice Used when a proposal is not fully confirmed.\n     * @dev A proposal is fully confirmed when the `required` threshold\n     * of confirmations has been met.\n     * @param proposalId The ID of the proposal that is not fully confirmed.\n     */\n    error ProposalNotFullyConfirmed(uint256 proposalId);\n\n    /**\n     * @notice Used when a proposal is already confirmed by an owner.\n     * @param proposalId The ID of the proposal that is already confirmed.\n     * @param owner The address of the owner which confirmed the proposal.\n     */\n    error ProposalAlreadyConfirmed(uint256 proposalId, address owner);\n\n    /**\n     * @notice Used when a proposal has been executed.\n     * @param proposalId The ID of the proposal that is already executed.\n     */\n    error ProposalAlreadyExecuted(uint256 proposalId);\n\n    /**\n     * @notice Used when a passed address is address(0).\n     */\n    error NullAddress();\n\n    /**\n     * @notice Used when the set threshold values for owner and minimum\n     * required confirmations are not met.\n     * @param ownerCount The count of owners.\n     * @param required The number of required confirmations.\n     */\n    error InvalidRequirement(uint256 ownerCount, uint256 required);\n\n    /**\n     * @notice Used when attempting to remove the last owner.\n     * @param owner The last owner.\n     */\n    error CannotRemoveLastOwner(address owner);\n\n    /**\n     * @notice Used when attempting to schedule an already scheduled proposal.\n     * @param proposalId The ID of the proposal which is already scheduled.\n     */\n    error ProposalAlreadyScheduled(uint256 proposalId);\n\n    /**\n     * @notice Used when a proposal is not scheduled.\n     * @param proposalId The ID of the proposal which is not scheduled.\n     */\n    error ProposalNotScheduled(uint256 proposalId);\n\n    /**\n     * @notice Used when a time lock delay is not reached.\n     * @param proposalId The ID of the proposal whose time lock has not been reached yet.\n     */\n    error ProposalTimelockNotReached(uint256 proposalId);\n\n    /**\n     * @notice Used when a provided value is less than the minimum time lock delay.\n     * @param delay The insufficient delay.\n     */\n    error InsufficientDelay(uint256 delay);\n\n    /**\n     * @notice Used when the sizes of the provided arrays params do not match\n     * when submitting a proposal.\n     */\n    error ParamLengthsMismatch();\n\n    /**\n     * @notice Checks that only the multisig contract can execute a function.\n     */\n    modifier onlyWallet() {\n        if (msg.sender != address(this)) {\n            revert SenderMustBeMultisigWallet(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that an address is not a multisig owner.\n     * @param owner The address to check.\n     */\n    modifier ownerDoesNotExist(address owner) {\n        if (owners.contains(owner)) {\n            revert OwnerAlreadyExists(owner);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that an address is a multisig owner.\n     * @param owner The address to check.\n     */\n    modifier ownerExists(address owner) {\n        if (!owners.contains(owner)) {\n            revert OwnerDoesNotExist(owner);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that a proposal exists.\n     * @param proposalId The proposal ID to check.\n     */\n    modifier proposalExists(uint256 proposalId) {\n        if (proposals[proposalId].destinations.length == 0) {\n            revert ProposalDoesNotExist(proposalId);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that a proposal has been confirmed by a multisig owner.\n     * @param proposalId The proposal ID to check.\n     * @param owner The owner to check.\n     */\n    modifier confirmed(uint256 proposalId, address owner) {\n        if (!proposals[proposalId].confirmations[owner]) {\n            revert ProposalNotConfirmed(proposalId, owner);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that a proposal has not been confirmed by a multisig owner.\n     * @param proposalId The proposal ID to check.\n     * @param owner The owner to check.\n     */\n    modifier notConfirmed(uint256 proposalId, address owner) {\n        if (proposals[proposalId].confirmations[owner]) {\n            revert ProposalAlreadyConfirmed(proposalId, owner);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that a proposal has not been executed.\n     * @dev A proposal can only be executed after it is fully confirmed.\n     * @param proposalId The proposal ID to check.\n     */\n    modifier notExecuted(uint256 proposalId) {\n        if (proposals[proposalId].timestampExecutable == DONE_TIMESTAMP) {\n            revert ProposalAlreadyExecuted(proposalId);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that an address is not address(0).\n     * @param addr The address to check.\n     */\n    modifier notNull(address addr) {\n        if (addr == address(0)) {\n            revert NullAddress();\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that each address in a batch of addresses are not address(0).\n     * @param _addresses The addresses to check.\n     */\n    modifier notNullBatch(address[] memory _addresses) {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            if (_addresses[i] == address(0)) {\n                revert NullAddress();\n            }\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that the values passed for number of multisig owners and required\n     * confirmation are valid in comparison with the configured thresholds.\n     * @param ownerCount The owners count to check.\n     * @param requiredConfirmations The minimum number of confirmations required to consider\n     * a proposal as fully confirmed.\n     */\n    modifier validRequirement(uint256 ownerCount, uint256 requiredConfirmations) {\n        if (\n            ownerCount > MAX_OWNER_COUNT ||\n            requiredConfirmations > ownerCount ||\n            requiredConfirmations == 0 ||\n            ownerCount == 0\n        ) {\n            revert InvalidRequirement(ownerCount, requiredConfirmations);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that a proposal is scheduled.\n     * @param proposalId The ID of the proposal to check.\n     */\n    modifier scheduled(uint256 proposalId) {\n        if (!isScheduled(proposalId)) {\n            revert ProposalNotScheduled(proposalId);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that a proposal is not scheduled.\n     * @param proposalId The ID of the proposal to check.\n     */\n    modifier notScheduled(uint256 proposalId) {\n        if (isScheduled(proposalId)) {\n            revert ProposalAlreadyScheduled(proposalId);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that a proposal's time lock has elapsed.\n     * @param proposalId The ID of the proposal to check.\n     */\n    modifier timeLockReached(uint256 proposalId) {\n        if (!isProposalTimelockReached(proposalId)) {\n            revert ProposalTimelockNotReached(proposalId);\n        }\n        _;\n    }\n\n    /**\n     * @notice Checks that a proposal is fully confirmed.\n     * @param proposalId The ID of the proposal to check.\n     */\n    modifier fullyConfirmed(uint256 proposalId) {\n        if (!isFullyConfirmed(proposalId)) {\n            revert ProposalNotFullyConfirmed(proposalId);\n        }\n        _;\n    }\n\n    /**\n     * @notice Sets `initialized` to  true on implementation contracts.\n     * @param _minDelay The minimum time in seconds that must elapse before a\n     * proposal is executable.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    constructor(uint256 _minDelay) initializer {\n        minDelay = _minDelay;\n    }\n\n    receive() external payable {\n        if (msg.value > 0) {\n            emit CeloDeposited(msg.sender, msg.value);\n        }\n    }\n\n    /**\n     * @notice Bootstraps this contract with initial data.\n     * @dev This plays the role of a typical contract constructor. Sets initial owners and\n     * required number of confirmations. The initializer modifier ensures that this function\n     * is ONLY callable once.\n     * @param initialOwners The list of initial owners.\n     * @param requiredConfirmations The number of required confirmations for a proposal\n     * to be fully confirmed.\n     * @param _delay The delay that must elapse to be able to execute a proposal.\n     */\n    function initialize(\n        address[] calldata initialOwners,\n        uint256 requiredConfirmations,\n        uint256 _delay\n    ) external initializer validRequirement(initialOwners.length, requiredConfirmations) {\n        for (uint256 i = 0; i < initialOwners.length; i++) {\n            if (owners.contains(initialOwners[i])) {\n                revert OwnerAlreadyExists(initialOwners[i]);\n            }\n\n            if (initialOwners[i] == address(0)) {\n                revert NullAddress();\n            }\n\n            owners.add(initialOwners[i]);\n            emit OwnerAdded(initialOwners[i]);\n        }\n        _changeRequirement(requiredConfirmations);\n        _changeDelay(_delay);\n    }\n\n    /**\n     * @notice Adds a new multisig owner.\n     * @dev This call can only be made by this contract.\n     * @param owner The owner to add.\n     */\n    function addOwner(address owner)\n        external\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length() + 1, required)\n    {\n        owners.add(owner);\n        emit OwnerAdded(owner);\n    }\n\n    /**\n     * @notice Removes an existing owner.\n     * @dev This call can only be made by this contract.\n     * @param owner The owner to remove.\n     */\n    function removeOwner(address owner) external onlyWallet ownerExists(owner) {\n        if (owners.length() == 1) {\n            revert CannotRemoveLastOwner(owner);\n        }\n\n        owners.remove(owner);\n\n        if (required > owners.length()) {\n            // Readjust the required amount, since the list of total owners has reduced.\n            changeRequirement(owners.length());\n        }\n        emit OwnerRemoved(owner);\n    }\n\n    /**\n     * @notice Replaces an existing owner with a new owner.\n     * @dev This call can only be made by this contract.\n     * @param owner The owner to be replaced.\n     */\n    function replaceOwner(address owner, address newOwner)\n        external\n        onlyWallet\n        ownerExists(owner)\n        notNull(newOwner)\n        ownerDoesNotExist(newOwner)\n    {\n        owners.remove(owner);\n        owners.add(newOwner);\n        emit OwnerRemoved(owner);\n        emit OwnerAdded(newOwner);\n    }\n\n    /**\n     * @notice Void a confirmation for a previously confirmed proposal.\n     * @param proposalId The ID of the proposal to be revoked.\n     */\n    function revokeConfirmation(uint256 proposalId)\n        external\n        ownerExists(msg.sender)\n        confirmed(proposalId, msg.sender)\n        notExecuted(proposalId)\n    {\n        proposals[proposalId].confirmations[msg.sender] = false;\n        emit ConfirmationRevoked(msg.sender, proposalId);\n    }\n\n    /**\n     * @notice Creates a proposal and triggers the first confirmation on behalf of the\n     * proposal creator.\n     * @param destinations The addresses at which the proposal is target at.\n     * @param values The CELO values involved in the proposal if any.\n     * @param payloads The payloads of the proposal.\n     * @return proposalId Returns the ID of the proposal that gets generated.\n     */\n    function submitProposal(\n        address[] calldata destinations,\n        uint256[] calldata values,\n        bytes[] calldata payloads\n    ) external returns (uint256 proposalId) {\n        if (destinations.length != values.length) {\n            revert ParamLengthsMismatch();\n        }\n\n        if (destinations.length != payloads.length) {\n            revert ParamLengthsMismatch();\n        }\n        proposalId = addProposal(destinations, values, payloads);\n        confirmProposal(proposalId);\n    }\n\n    /**\n     * @notice Get the list of multisig owners.\n     * @return The list of owner addresses.\n     */\n    function getOwners() external view returns (address[] memory) {\n        return owners.values();\n    }\n\n    /**\n     * @notice Gets the list of owners' addresses which have confirmed a given proposal.\n     * @param proposalId The ID of the proposal.\n     * @return The list of owner addresses.\n     */\n    function getConfirmations(uint256 proposalId) external view returns (address[] memory) {\n        address[] memory confirmationsTemp = new address[](owners.length());\n        uint256 count = 0;\n        for (uint256 i = 0; i < owners.length(); i++) {\n            if (proposals[proposalId].confirmations[owners.at(i)]) {\n                confirmationsTemp[count] = owners.at(i);\n                count++;\n            }\n        }\n        address[] memory confirmingOwners = new address[](count);\n        for (uint256 i = 0; i < count; i++) {\n            confirmingOwners[i] = confirmationsTemp[i];\n        }\n        return confirmingOwners;\n    }\n\n    /**\n     * @notice Gets the destinations, values and payloads of a proposal.\n     * @param proposalId The ID of the proposal.\n     * @param destinations The addresses at which the proposal is target at.\n     * @param values The CELO values involved in the proposal if any.\n     * @param payloads The payloads of the proposal.\n     */\n    function getProposal(uint256 proposalId)\n        external\n        view\n        returns (\n            address[] memory destinations,\n            uint256[] memory values,\n            bytes[] memory payloads\n        )\n    {\n        Proposal storage proposal = proposals[proposalId];\n        return (proposal.destinations, proposal.values, proposal.payloads);\n    }\n\n    /**\n     * @notice Changes the number of confirmations required to consider a proposal\n     * fully confirmed.\n     * @dev Proposal has to be sent by wallet.\n     * @param newRequired The new number of confirmations required.\n     */\n    function changeRequirement(uint256 newRequired)\n        public\n        onlyWallet\n        validRequirement(owners.length(), newRequired)\n    {\n        _changeRequirement(newRequired);\n    }\n\n    /**\n     * @notice Changes the value of the delay that must\n     * elapse before a proposal can become executable.\n     * @dev Proposal has to be sent by wallet.\n     * @param newDelay The new delay value.\n     */\n    function changeDelay(uint256 newDelay) public onlyWallet {\n        _changeDelay(newDelay);\n    }\n\n    /**\n     * @notice Confirms a proposal. A proposal is executed if this confirmation\n     * makes it fully confirmed.\n     * @param proposalId The ID of the proposal to confirm.\n     */\n    function confirmProposal(uint256 proposalId)\n        public\n        ownerExists(msg.sender)\n        proposalExists(proposalId)\n        notConfirmed(proposalId, msg.sender)\n    {\n        proposals[proposalId].confirmations[msg.sender] = true;\n        emit ProposalConfirmed(msg.sender, proposalId);\n        if (isFullyConfirmed(proposalId)) {\n            scheduleProposal(proposalId);\n        }\n    }\n\n    /**\n     * @notice Schedules a proposal with a time lock.\n     * @param proposalId The ID of the proposal to confirm.\n     */\n    function scheduleProposal(uint256 proposalId)\n        public\n        ownerExists(msg.sender)\n        notExecuted(proposalId)\n    {\n        schedule(proposalId);\n        emit ProposalScheduled(proposalId);\n    }\n\n    /**\n     * @notice Executes a proposal. A proposal is only executetable if it is fully confirmed,\n     * scheduled and the set delay has elapsed.\n     * @dev Any of the multisig owners can execute a given proposal, even though they may\n     * not have participated in its confirmation process.\n     */\n    function executeProposal(uint256 proposalId)\n        public\n        scheduled(proposalId)\n        notExecuted(proposalId)\n        timeLockReached(proposalId)\n    {\n        Proposal storage proposal = proposals[proposalId];\n        proposal.timestampExecutable = DONE_TIMESTAMP;\n\n        for (uint256 i = 0; i < proposals[proposalId].destinations.length; i++) {\n            bytes memory returnData = ExternalCall.execute(\n                proposal.destinations[i],\n                proposal.values[i],\n                proposal.payloads[i]\n            );\n            emit TransactionExecuted(i, proposalId, returnData);\n        }\n    }\n\n    /**\n     * @notice Returns the timestamp at which a proposal becomes executable.\n     * @param proposalId The ID of the proposal.\n     * @return The timestamp at which the proposal becomes executable.\n     */\n    function getTimestamp(uint256 proposalId) public view returns (uint256) {\n        return proposals[proposalId].timestampExecutable;\n    }\n\n    /**\n     * @notice Returns whether a proposal is scheduled.\n     * @param proposalId The ID of the proposal to check.\n     * @return Whether or not the proposal is scheduled.\n     */\n    function isScheduled(uint256 proposalId) public view returns (bool) {\n        return getTimestamp(proposalId) > DONE_TIMESTAMP;\n    }\n\n    /**\n     * @notice Returns whether a proposal is executable or not.\n     * A proposal is executable if it is scheduled, the delay has elapsed\n     * and it is not yet executed.\n     * @param proposalId The ID of the proposal to check.\n     * @return Whether or not the time lock is reached.\n     */\n    function isProposalTimelockReached(uint256 proposalId) public view returns (bool) {\n        uint256 timestamp = getTimestamp(proposalId);\n        return\n            timestamp <= block.timestamp &&\n            proposals[proposalId].timestampExecutable > DONE_TIMESTAMP;\n    }\n\n    /**\n     * @notice Checks that a proposal has been confirmed by at least the `required`\n     * number of owners.\n     * @param proposalId The ID of the proposal to check.\n     * @return Whether or not the proposal is confirmed by the minimum set of owners.\n     */\n    function isFullyConfirmed(uint256 proposalId) public view returns (bool) {\n        uint256 count = 0;\n        for (uint256 i = 0; i < owners.length(); i++) {\n            if (proposals[proposalId].confirmations[owners.at(i)]) {\n                count++;\n            }\n            if (count == required) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @notice Checks that a proposal is confirmed by an owner.\n     * @param proposalId The ID of the proposal to check.\n     * @param owner The address to check.\n     * @return Whether or not the proposal is confirmed by the given owner.\n     */\n    function isConfirmedBy(uint256 proposalId, address owner) public view returns (bool) {\n        return proposals[proposalId].confirmations[owner];\n    }\n\n    /**\n     * @notice Checks that an address is a multisig owner.\n     * @param owner The address to check.\n     * @return Whether or not the address is a multisig owner.\n     */\n    function isOwner(address owner) public view returns (bool) {\n        return owners.contains(owner);\n    }\n\n    /**\n     * @notice Adds a new proposal to the proposals list.\n     * @param destinations The addresses at which the proposal is directed to.\n     * @param values The CELO valuse involved in the proposal if any.\n     * @param payloads The payloads of the proposal.\n     * @return proposalId Returns the ID of the proposal that gets generated.\n     */\n    function addProposal(\n        address[] memory destinations,\n        uint256[] memory values,\n        bytes[] memory payloads\n    ) internal notNullBatch(destinations) returns (uint256 proposalId) {\n        proposalId = proposalCount;\n        Proposal storage proposal = proposals[proposalId];\n\n        proposal.destinations = destinations;\n        proposal.values = values;\n        proposal.payloads = payloads;\n\n        proposalCount++;\n        emit ProposalAdded(proposalId);\n    }\n\n    /**\n     * @notice Schedules a proposal with a time lock.\n     * @param proposalId The ID of the proposal to schedule.\n     */\n    function schedule(uint256 proposalId)\n        internal\n        notScheduled(proposalId)\n        fullyConfirmed(proposalId)\n    {\n        proposals[proposalId].timestampExecutable = block.timestamp + delay;\n    }\n\n    /**\n     * @notice Changes the value of the delay that must\n     * elapse before a proposal can become executable.\n     * @param newDelay The new delay value.\n     */\n    function _changeDelay(uint256 newDelay) internal {\n        if (newDelay < minDelay) {\n            revert InsufficientDelay(newDelay);\n        }\n\n        delay = newDelay;\n        emit DelayChanged(delay, newDelay);\n    }\n\n    /**\n     * @notice Changes the number of confirmations required to consider a proposal\n     * fully confirmed.\n     * @dev This method does not do any validation, see `changeRequirement`\n     * for how it is used with the requirement validation modifier.\n     * @param newRequired The new number of confirmations required.\n     */\n    function _changeRequirement(uint256 newRequired) internal {\n        required = newRequired;\n        emit RequirementChanged(newRequired);\n    }\n\n    /**\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\n     * adds the onlyWallet modifer.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function _authorizeUpgrade(address) internal override onlyWallet {}\n\n    /**\n     * @notice Returns the storage, major, minor, and patch version of the contract.\n     * @return Storage version of the contract.\n     * @return Major version of the contract.\n     * @return Minor version of the contract.\n     * @return Patch version of the contract.\n     */\n    function getVersionNumber()\n        external\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (1, 1, 1, 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/common/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.11;\n\n/**\n * Hardhat only compiles contracts referenced from the contracts folder.\n * We need this Proxy's arttifacts in the deployment scripts.\n * There two ways of achieving this: the empty import (what's happening in\n * this file), or a plugin. The plugin feels a bit overkill.\n */\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/mock/MockStakedCelo.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @notice This is a simple ERC20 token that can stand in for StakedCelo in\n * testing. For testing purposes it:\n *           1. Allows any address to mint/burn.\n *           2. Records the last minting/burning.\n */\ncontract MockStakedCelo is ERC20(\"Staked CELO\", \"stCELO\") {\n    address public lastMintTarget;\n    uint256 public lastMintAmount;\n    address public lastBurnTarget;\n    uint256 public lastBurnAmount;\n    uint256 public lockedBalance;\n    address public unlockedBalanceFor;\n    address public overrideFor;\n    uint256 public overrideBalance;\n\n    function mint(address to, uint256 amount) external {\n        lastMintTarget = to;\n        lastMintAmount = amount;\n        _mint(to, amount);\n    }\n\n    function getLastMinting() external view returns (address, uint256) {\n        return (lastMintTarget, lastMintAmount);\n    }\n\n    function burn(address from, uint256 amount) external {\n        lastBurnTarget = from;\n        lastBurnAmount = amount;\n        _burn(from, amount);\n    }\n\n    function lockVoteBalance(address, uint256 amount) external {\n        lockedBalance = amount;\n    }\n\n    function unlockVoteBalance(address beneficiary) public {\n        unlockedBalanceFor = beneficiary;\n    }\n}\n"
    },
    "contracts/mock/MockValidators.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @title Holds a list of addresses of validators\n */\ncontract MockValidators {\n    using SafeMath for uint256;\n\n    uint256 private constant FIXED1_UINT = 1000000000000000000000000;\n\n    mapping(address => bool) public isValidator;\n    mapping(address => bool) public isValidatorGroup;\n    mapping(address => uint256) private numGroupMembers;\n    mapping(address => uint256) private lockedGoldRequirements;\n    mapping(address => bool) private doesNotMeetAccountLockedGoldRequirements;\n    mapping(address => address[]) private members;\n    mapping(address => address) private affiliations;\n    uint256 private numRegisteredValidators;\n\n    function updateEcdsaPublicKey(\n        address,\n        address,\n        bytes calldata\n    ) external returns (bool) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function updatePublicKeys(\n        address,\n        address,\n        bytes calldata,\n        bytes calldata,\n        bytes calldata\n    ) external returns (bool) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function setValidator(address account) external {\n        isValidator[account] = true;\n    }\n\n    function setValidatorGroup(address group) external {\n        isValidatorGroup[group] = true;\n    }\n\n    function deregisterValidator(uint256 index) external returns (bool) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function affiliate(address group) external returns (bool) {\n        affiliations[msg.sender] = group;\n        return true;\n    }\n\n    function deregisterValidatorGroup(uint256 index) external returns (bool) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function setDoesNotMeetAccountLockedGoldRequirements(address account) external {\n        doesNotMeetAccountLockedGoldRequirements[account] = true;\n    }\n\n    function meetsAccountLockedGoldRequirements(address account) external view returns (bool) {\n        return !doesNotMeetAccountLockedGoldRequirements[account];\n    }\n\n    function getGroupNumMembers(address group) public view returns (uint256) {\n        return members[group].length;\n    }\n\n    function setNumRegisteredValidators(uint256 value) external {\n        numRegisteredValidators = value;\n    }\n\n    function getNumRegisteredValidators() external view returns (uint256) {\n        return numRegisteredValidators;\n    }\n\n    function setMembers(address group, address[] calldata _members) external {\n        members[group] = _members;\n    }\n\n    function setAccountLockedGoldRequirement(address account, uint256 value) external {\n        lockedGoldRequirements[account] = value;\n    }\n\n    function getAccountLockedGoldRequirement(address account) external view returns (uint256) {\n        return lockedGoldRequirements[account];\n    }\n\n    function calculateGroupEpochScore(uint256[] calldata uptimes) external view returns (uint256) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function getTopGroupValidators(address group, uint256 n)\n        external\n        view\n        returns (address[] memory)\n    {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function getGroupsNumMembers(address[] calldata groups)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory numMembers = new uint256[](groups.length);\n        for (uint256 i = 0; i < groups.length; i = i.add(1)) {\n            numMembers[i] = getGroupNumMembers(groups[i]);\n        }\n        return numMembers;\n    }\n\n    function groupMembershipInEpoch(\n        address addr,\n        uint256,\n        uint256\n    ) external view returns (address) {\n        return affiliations[addr];\n    }\n\n    function halveSlashingMultiplier(address account) external {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function forceDeaffiliateIfValidator(address validator) external {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function getValidatorGroupSlashingMultiplier(address) external view returns (uint256) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n"
    },
    "contracts/mock/MockLockedGold.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../interfaces/ILockedGold.sol\";\n\n/**\n * @title A mock LockedGold for testing.\n */\ncontract MockLockedGold is ILockedGold {\n    using SafeMath for uint256;\n\n    struct Authorizations {\n        address validator;\n        address voter;\n    }\n\n    mapping(address => uint256) public accountTotalLockedGold;\n    mapping(address => uint256) public nonvotingAccountBalance;\n    mapping(address => address) public authorizedValidators;\n    mapping(address => address) public authorizedBy;\n    uint256 private totalLockedGold;\n    mapping(address => bool) public slashingWhitelist;\n    // bool private returnVal;\n    uint256 public unlockingPeriod;\n\n    function incrementNonvotingAccountBalance(address account, uint256 value) external {\n        nonvotingAccountBalance[account] = nonvotingAccountBalance[account].add(value);\n    }\n\n    function decrementNonvotingAccountBalance(address account, uint256 value) public {\n        nonvotingAccountBalance[account] = nonvotingAccountBalance[account].sub(value);\n    }\n\n    function setAccountTotalLockedGold(address account, uint256 value) external {\n        accountTotalLockedGold[account] = value;\n    }\n\n    function getAccountTotalLockedGold(address account) external view returns (uint256) {\n        return accountTotalLockedGold[account];\n    }\n\n    function setTotalLockedGold(uint256 value) external {\n        totalLockedGold = value;\n    }\n\n    function getTotalLockedGold() external view returns (uint256) {\n        return totalLockedGold;\n    }\n\n    function lock() external payable {\n        accountTotalLockedGold[msg.sender] = accountTotalLockedGold[msg.sender].add(msg.value);\n    }\n\n    function unlock(uint256 value) external {\n        accountTotalLockedGold[msg.sender] = accountTotalLockedGold[msg.sender].sub(value);\n    }\n\n    function relock(uint256 index, uint256 value) external {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function withdraw(uint256 index) external {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function slash(\n        address account,\n        uint256 penalty,\n        address,\n        uint256,\n        address[] calldata,\n        address[] calldata,\n        uint256[] calldata\n    ) external {\n        accountTotalLockedGold[account] = accountTotalLockedGold[account].sub(penalty);\n    }\n\n    function owner() public view virtual returns (address) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function addSlasher(string calldata slasherIdentifier) external {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function removeSlasher(string calldata slasherIdentifier) external {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function isSlasher(address slasher) external view returns (bool) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function getPendingWithdrawals(address)\n        external\n        view\n        returns (uint256[] memory, uint256[] memory)\n    {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function getPendingWithdrawal(address, uint256) external view returns (uint256, uint256) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function getTotalPendingWithdrawals(address) external view returns (uint256) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function getSlashingWhitelist() external view returns (bytes32[] memory) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n"
    },
    "contracts/mock/MockElection.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"../interfaces/IElection.sol\";\n\n/**\n * @notice A mock Election contract that abides by the IElection interface.\n * This is purely intended for tests and allows the return values of some functions\n * to be set for testing purposes.\n */\ncontract MockElection is IElection {\n    // ---- settable return values for interface functions ----\n    bool private activateReturnValue;\n    bool private voteReturnValue;\n    bool private hasActivatablePendingVotesReturnValue;\n\n    uint256 public maxNumGroupsVotedFor;\n    mapping(address => bool) public allowedToVoteOverMaxNumberOfGroupsMapping;\n\n    constructor() {\n        // Set the return values to a benign default value\n        activateReturnValue = true;\n        voteReturnValue = true;\n        hasActivatablePendingVotesReturnValue = false;\n    }\n\n    // ---- setters for return values ----\n\n    function setActivateReturnValue(bool value) external {\n        activateReturnValue = value;\n    }\n\n    function setVoteReturnValue(bool value) external {\n        voteReturnValue = value;\n    }\n\n    function setHasActivatablePendingVotesReturnValue(bool value) external {\n        hasActivatablePendingVotesReturnValue = value;\n    }\n\n    // ---- interface functions ----\n\n    function electValidatorSigners() external view returns (address[] memory) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        address[] memory arr;\n        return arr;\n    }\n\n    function electNValidatorSigners(uint256, uint256) external view returns (address[] memory) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        address[] memory arr;\n        return arr;\n    }\n\n    function vote(\n        address,\n        uint256,\n        address,\n        address\n    ) external returns (bool) {\n        // silence complier error that this function can be view\n        voteReturnValue = voteReturnValue;\n\n        return voteReturnValue;\n    }\n\n    function activate(address) external returns (bool) {\n        // silence complier error that this function can be view\n        activateReturnValue = activateReturnValue;\n\n        return activateReturnValue;\n    }\n\n    function activateForAccount(address, address) external returns (bool) {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n\n        return true;\n    }\n\n    function revokeActive(\n        address,\n        uint256,\n        address,\n        address,\n        uint256\n    ) external returns (bool) {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n\n        return true;\n    }\n\n    function revokeAllActive(\n        address,\n        address,\n        address,\n        uint256\n    ) external returns (bool) {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n\n        return true;\n    }\n\n    function revokePending(\n        address,\n        uint256,\n        address,\n        address,\n        uint256\n    ) external returns (bool) {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n\n        return true;\n    }\n\n    function markGroupIneligible(address) external {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n    }\n\n    function markGroupEligible(\n        address,\n        address,\n        address\n    ) external {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n    }\n\n    function forceDecrementVotes(\n        address,\n        uint256,\n        address[] calldata,\n        address[] calldata,\n        uint256[] calldata\n    ) external returns (uint256) {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n\n        return 0;\n    }\n\n    // view functions\n    function getElectableValidators() external view returns (uint256, uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return (0, 0);\n    }\n\n    function getElectabilityThreshold() external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getNumVotesReceivable(address) external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getTotalVotes() external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getActiveVotes() external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getTotalVotesByAccount(address) external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getPendingVotesForGroupByAccount(address, address) external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getActiveVotesForGroupByAccount(address, address) external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getTotalVotesForGroupByAccount(address, address) external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getTotalVotesForGroup(address) external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getActiveVotesForGroup(address) external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getPendingVotesForGroup(address) external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getGroupEligibility(address) external view returns (bool) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return true;\n    }\n\n    function getGroupEpochRewards(\n        address,\n        uint256,\n        uint256[] calldata\n    ) external view returns (uint256) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return 0;\n    }\n\n    function getGroupsVotedForByAccount(address) external view returns (address[] memory) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        address[] memory arr;\n        return arr;\n    }\n\n    function getEligibleValidatorGroups() external view returns (address[] memory) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        address[] memory arr;\n        return arr;\n    }\n\n    function getTotalVotesForEligibleValidatorGroups()\n        external\n        view\n        returns (address[] memory, uint256[] memory)\n    {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        address[] memory addressArr;\n        uint256[] memory uint256Arr;\n        return (addressArr, uint256Arr);\n    }\n\n    function getCurrentValidatorSigners() external view returns (address[] memory) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        address[] memory arr;\n        return arr;\n    }\n\n    function canReceiveVotes(address, uint256) external view returns (bool) {\n        // silence complier error that this function can be pure\n        activateReturnValue;\n\n        return true;\n    }\n\n    function hasActivatablePendingVotes(address, address) external view returns (bool) {\n        return hasActivatablePendingVotesReturnValue;\n    }\n\n    // only owner\n    function setElectableValidators(uint256, uint256) external returns (bool) {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n\n        return true;\n    }\n\n    function setMaxNumGroupsVotedFor(uint256) external returns (bool) {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n\n        return true;\n    }\n\n    function setElectabilityThreshold(uint256) external returns (bool) {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n\n        return true;\n    }\n\n    // only VM\n    function distributeEpochRewards(\n        address,\n        uint256,\n        address,\n        address\n    ) external {\n        // silence complier error that this function can be view / pure\n        activateReturnValue = activateReturnValue;\n    }\n\n    function allowedToVoteOverMaxNumberOfGroups(address) external view returns (bool) {\n        return allowedToVoteOverMaxNumberOfGroupsMapping[msg.sender];\n    }\n\n    function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external {\n        allowedToVoteOverMaxNumberOfGroupsMapping[msg.sender] = flag;\n    }\n}\n"
    },
    "contracts/mock/MockAccount.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\n/**\n * @notice This is a simple mock exposing the Manager-facing Account API as\n * simple functions that\n * 1. Record their arguments for functions called by Manager.\n * 2. Can have their output mocked for functions read by Manager.\n */\ncontract MockAccount {\n    address[] public lastVotedGroups;\n    uint256[] public lastVotes;\n\n    address[] public lastWithdrawnGroups;\n    uint256[] public lastWithdrawals;\n    address public lastWithdrawalBeneficiary;\n\n    mapping(address => uint256) public getCeloForGroup;\n    uint256 public getTotalCelo;\n\n    mapping(address => uint256) public scheduledVotesForGroup;\n\n    uint256 public proposalIdVoted;\n    uint256 public indexVoted;\n    uint256 public yesVotesVoted;\n    uint256 public noVotesVoted;\n    uint256 public abstainVoteVoted;\n\n    function scheduleVotes(address[] calldata groups, uint256[] calldata votes) external payable {\n        lastVotedGroups = groups;\n        lastVotes = votes;\n    }\n\n    function getLastScheduledVotes() external view returns (address[] memory, uint256[] memory) {\n        return (lastVotedGroups, lastVotes);\n    }\n\n    function scheduleWithdrawals(\n        address beneficiary,\n        address[] calldata groups,\n        uint256[] calldata withdrawals\n    ) external {\n        lastWithdrawnGroups = groups;\n        lastWithdrawals = withdrawals;\n        lastWithdrawalBeneficiary = beneficiary;\n    }\n\n    function getLastScheduledWithdrawals()\n        external\n        view\n        returns (\n            address[] memory,\n            uint256[] memory,\n            address\n        )\n    {\n        return (lastWithdrawnGroups, lastWithdrawals, lastWithdrawalBeneficiary);\n    }\n\n    function setCeloForGroup(address group, uint256 amount) external {\n        getCeloForGroup[group] = amount;\n    }\n\n    function setTotalCelo(uint256 amount) external {\n        getTotalCelo = amount;\n    }\n\n    function setScheduledVotes(address group, uint256 amount) external {\n        scheduledVotesForGroup[group] = amount;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    function votePartially(\n        uint256 proposalId,\n        uint256 index,\n        uint256 yesVotes,\n        uint256 noVotes,\n        uint256 abstainVotes\n    ) public {\n        proposalIdVoted = proposalId;\n        indexVoted = index;\n        yesVotesVoted = yesVotes;\n        noVotesVoted = noVotes;\n        abstainVoteVoted = abstainVotes;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}