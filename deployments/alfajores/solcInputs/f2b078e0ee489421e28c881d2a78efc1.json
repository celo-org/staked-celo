{
  "language": "Solidity",
  "sources": {
    "contracts/Manager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./common/UsingRegistryUpgradeable.sol\";\nimport \"./common/UUPSOwnableUpgradeable.sol\";\nimport \"./interfaces/IAccount.sol\";\nimport \"./interfaces/IStakedCelo.sol\";\n\n/**\n * @title Manages the StakedCelo system, by controlling the minting and burning\n * of stCELO and implementing strategies for voting and unvoting of deposited or\n * withdrawn CELO.\n */\ncontract Manager is UUPSOwnableUpgradeable, UsingRegistryUpgradeable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /**\n     * @notice Holds a group's address and votes.\n     * @param group The address of the group.\n     * @param votes The votes assigned to the group.\n     */\n    struct GroupWithVotes {\n        address group;\n        uint256 votes;\n    }\n\n    /**\n     * @notice An instance of the StakedCelo contract this Manager manages.\n     */\n    IStakedCelo internal stakedCelo;\n\n    /**\n     * @notice An instance of the Account contract this Manager manages.\n     */\n    IAccount internal account;\n\n    /**\n     * @notice The set of currently active groups that will be voted for with\n     * new deposits.\n     */\n    EnumerableSet.AddressSet private activeGroups;\n\n    /**\n     * @notice The set of deprecated groups. These are groups that should no\n     * longer receive new votes from deposits, but still need to be kept track\n     * of because the Account contract is still voting for them.\n     */\n    EnumerableSet.AddressSet private deprecatedGroups;\n\n    /**\n     * @notice Emitted when a new group is activated for voting.\n     * @param group The group's address.\n     */\n    event GroupActivated(address indexed group);\n    /**\n     * @notice Emitted when a group is deprecated.\n     * @param group The group's address.\n     */\n    event GroupDeprecated(address indexed group);\n    /**\n     * @notice Emitted when a deprecated group is no longer being voted for and\n     * the contract forgets about it entirely.\n     * @param group The group's address.\n     */\n    event GroupRemoved(address indexed group);\n\n    /**\n     * @notice Used when attempting to activate a group that is already active.\n     * @param group The group's address.\n     */\n    error GroupAlreadyAdded(address group);\n\n    /**\n     * @notice Used when attempting to deprecate a group that is not active.\n     * @param group The group's address.\n     */\n    error GroupNotActive(address group);\n\n    /**\n     * @notice Used when an attempt to add an active group to the EnumerableSet\n     * fails.\n     * @param group The group's address.\n     */\n    error FailedToAddActiveGroup(address group);\n\n    /**\n     * @notice Used when an attempt to add a deprecated group to the\n     * EnumerableSet fails.\n     * @param group The group's address.\n     */\n    error FailedToAddDeprecatedGroup(address group);\n\n    /**\n     * @notice Used when an attempt to remove a deprecated group from the\n     * EnumerableSet fails.\n     * @param group The group's address.\n     */\n    error FailedToRemoveDeprecatedGroup(address group);\n\n    /**\n     * @notice Used when attempting to activate a group when the maximum number\n     * of groups voted (as allowed by the Election contract) is already being\n     * voted for.\n     */\n    error MaxGroupsVotedForReached();\n\n    /**\n     * @notice Used when attempting to deposit when there are not active groups\n     * to vote for.\n     */\n    error NoActiveGroups();\n\n    /**\n     * @notice Used when attempting to deposit when the total deposit amount\n     * would tip each active group over the voting limit as defined in\n     * Election.sol.\n     */\n    error NoVotableGroups();\n\n    /**\n     * @notice Used when attempting to withdraw but there are no groups being\n     * voted for.\n     */\n    error NoGroups();\n\n    /**\n     * @notice Used when attempting to withdraw 0 value.\n     */\n    error ZeroWithdrawal();\n\n    /**\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\n     * implementation gets initialized.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    constructor() initializer {}\n\n    /**\n     * @notice Initialize the contract with registry and owner.\n     * @param _registry The address of the Celo registry.\n     * @param _owner The address of the contract owner.\n     */\n    function initialize(address _registry, address _owner) external initializer {\n        _transferOwnership(_owner);\n        __UsingRegistry_init(_registry);\n    }\n\n    /**\n     * @notice Set this contract's dependencies in the StakedCelo system.\n     * @dev Manager, Account and StakedCelo all reference each other\n     * so we need a way of setting these after all contracts are\n     * deployed and initialized.\n     * @param _stakedCelo the address of the StakedCelo contract.\n     * @param _account The address of the Account contract.\n     */\n    function setDependencies(address _stakedCelo, address _account) external onlyOwner {\n        stakedCelo = IStakedCelo(_stakedCelo);\n        account = IAccount(_account);\n    }\n\n    /**\n     * @notice Marks a group as votable.\n     * @param group The address of the group to add to the set of votable\n     * groups.\n     * @dev Fails if the maximum number of groups are already being voted for by\n     * the Account smart contract (as per the `maxNumGroupsVotedFor` in the\n     * Election contract).\n     */\n    function activateGroup(address group) external onlyOwner {\n        if (activeGroups.contains(group)) {\n            revert GroupAlreadyAdded(group);\n        }\n\n        if (deprecatedGroups.contains(group)) {\n            if (!deprecatedGroups.remove(group)) {\n                revert FailedToRemoveDeprecatedGroup(group);\n            }\n        }\n\n        if (\n            activeGroups.length() + deprecatedGroups.length() >=\n            getElection().maxNumGroupsVotedFor()\n        ) {\n            revert MaxGroupsVotedForReached();\n        }\n\n        if (!activeGroups.add(group)) {\n            revert FailedToAddActiveGroup(group);\n        }\n        emit GroupActivated(group);\n    }\n\n    /**\n     * @notice Returns the array of active groups.\n     * @return The array of active groups.\n     */\n    function getGroups() external view returns (address[] memory) {\n        return activeGroups.values();\n    }\n\n    /**\n     * @notice Marks a group as deprecated.\n     * @param group The group to deprecate.\n     * @dev A deprecated group will remain in the `deprecatedGroups` array as\n     * long as it is still being voted for by the Account contract. Deprecated\n     * groups will be the first to have their votes withdrawn.\n     */\n    function deprecateGroup(address group) external onlyOwner {\n        if (!activeGroups.remove(group)) {\n            revert GroupNotActive(group);\n        }\n\n        emit GroupDeprecated(group);\n\n        if (account.getCeloForGroup(group) > 0) {\n            if (!deprecatedGroups.add(group)) {\n                revert FailedToAddDeprecatedGroup(group);\n            }\n        } else {\n            emit GroupRemoved(group);\n        }\n    }\n\n    /**\n     * @notice Returns the list of deprecated groups.\n     * @return The list of deprecated groups.\n     */\n    function getDeprecatedGroups() external view returns (address[] memory) {\n        return deprecatedGroups.values();\n    }\n\n    /**\n     * @notice Used to deposit CELO into the StakedCelo system. The user will\n     * receive an amount of stCELO proportional to their contribution. The CELO\n     * will be scheduled to be voted for with the Account contract.\n     */\n    function deposit() external payable {\n        if (activeGroups.length() == 0) {\n            revert NoActiveGroups();\n        }\n\n        stakedCelo.mint(msg.sender, toStakedCelo(msg.value));\n\n        distributeVotes(msg.value);\n    }\n\n    /**\n     * @notice Used to withdraw CELO from the system, in exchange for burning\n     * stCELO.\n     * @param stakedCeloAmount The amount of stCELO to burn.\n     * @dev Calculates the CELO amount based on the ratio of outstanding stCELO\n     * and the total amount of CELO owned and used for voting by Account. See\n     * `toCelo`.\n     * @dev The funds need to be withdrawn using calls to `Account.withdraw` and\n     * `Account.finishPendingWithdrawal`.\n     */\n    function withdraw(uint256 stakedCeloAmount) external {\n        if (activeGroups.length() + deprecatedGroups.length() == 0) {\n            revert NoGroups();\n        }\n\n        distributeWithdrawals(toCelo(stakedCeloAmount), msg.sender);\n\n        stakedCelo.burn(msg.sender, stakedCeloAmount);\n    }\n\n    /**\n     * @notice Computes the amount of stCELO that should be minted for a given\n     * amount of CELO deposited.\n     * @param celoAmount The amount of CELO deposited.\n     * @return The amount of stCELO that should be minted.\n     */\n    function toStakedCelo(uint256 celoAmount) public view returns (uint256) {\n        uint256 stCeloSupply = stakedCelo.totalSupply();\n        uint256 celoBalance = account.getTotalCelo();\n\n        if (stCeloSupply == 0 || celoBalance == 0) {\n            return celoAmount;\n        }\n\n        return (celoAmount * stCeloSupply) / celoBalance;\n    }\n\n    /**\n     * @notice Computes the amount of CELO that should be withdrawn for a given\n     * amount of stCELO burned.\n     * @param stCeloAmount The amount of stCELO burned.\n     * @return The amount of CELO that should be withdrawn.\n     */\n    function toCelo(uint256 stCeloAmount) public view returns (uint256) {\n        uint256 stCeloSupply = stakedCelo.totalSupply();\n        uint256 celoBalance = account.getTotalCelo();\n\n        if (stCeloSupply == 0 || celoBalance == 0) {\n            return stCeloAmount;\n        }\n\n        return (stCeloAmount * celoBalance) / stCeloSupply;\n    }\n\n    /**\n     * @notice Distributes votes by computing the number of votes each active\n     * group should receive, then calling out to `Account.scheduleVotes`.\n     * @param votes The amount of votes to distribute.\n     * @dev The vote distribution strategy is to try and have each validator\n     * group to be receiving the same amount of votes from the system. If a\n     * group already has more votes than the average of the total available\n     * votes it will not be voted for, and instead we'll try to evenly\n     * distribute between the remaining groups.\n     * @dev Election.sol sets a dynamic limit on the number of votes receivable\n     * by a group, based on the group's size, the total amount of Locked\n     * CELO, and the total number of electable validators. We don't want to\n     * schedule votes for a group when the amount would exceed this threshold.\n     * `getVotableGroups` below selects those groups that could receive the\n     * entire `votes` amount, and filters out the rest. This is a heuristic:\n     * when distributing votes evenly, the group might receive less than\n     * `votes`, and the total amount could end up being under the limit.\n     * However, doing an exact computation would be both complex and cost a lot\n     * of additional gas, hence the heuristic. If indeed all groups are close to\n     * their voting limit, causing a larger deposit to revert with\n     * NoVotableGroups, despite there still being some room for deposits, this\n     * can be worked around by sending a few smaller deposits.\n     */\n    function distributeVotes(uint256 votes) internal {\n        /*\n         * \"Votable\" groups are those that will currently fit under the voting\n         * limit in Election.sol even if voted for with the entire `votes`\n         * amount. Note that some might still not end up getting voted for given\n         * the distribution logic below.\n         */\n        address[] memory votableGroups = getVotableGroups(votes);\n        if (votableGroups.length == 0) {\n            revert NoVotableGroups();\n        }\n\n        GroupWithVotes[] memory sortedGroups;\n        uint256 availableVotes;\n        (sortedGroups, availableVotes) = getSortedGroupsWithVotes(votableGroups);\n        availableVotes += votes;\n\n        uint256[] memory votesPerGroup = new uint256[](votableGroups.length);\n        uint256 groupsVoted = votableGroups.length;\n        uint256 targetVotes = availableVotes / groupsVoted;\n\n        /*\n         * This would normally be (i = votableGroups.length - 1; i >=0; i--),\n         * but we can't i-- on the last iteration when i=0, since i is an\n         * unsigned integer. So we iterate with the loop variable 1 greater than\n         * expected, set index = i-1, and use index inside the loop.\n         */\n        for (uint256 i = votableGroups.length; i > 0; i--) {\n            uint256 index = i - 1;\n            if (sortedGroups[index].votes >= targetVotes) {\n                groupsVoted--;\n                availableVotes -= sortedGroups[index].votes;\n                targetVotes = availableVotes / groupsVoted;\n                votesPerGroup[index] = 0;\n            } else {\n                votesPerGroup[index] = targetVotes - sortedGroups[index].votes;\n\n                if (availableVotes % groupsVoted > index) {\n                    votesPerGroup[index]++;\n                }\n            }\n        }\n\n        address[] memory finalGroups = new address[](groupsVoted);\n        uint256[] memory finalVotes = new uint256[](groupsVoted);\n\n        for (uint256 i = 0; i < groupsVoted; i++) {\n            finalGroups[i] = sortedGroups[i].group;\n            finalVotes[i] = votesPerGroup[i];\n        }\n\n        account.scheduleVotes{value: votes}(finalGroups, finalVotes);\n    }\n\n    /**\n     * @notice Distributes withdrawals by computing the number of votes that\n     * should be withdrawn from each group, then calling out to\n     * `Account.scheduleVotes`.\n     * @param withdrawal The amount of votes to withdraw.\n     * @param beneficiary The address that should end up receiving the withdrawn\n     * CELO.\n     * @dev The withdrawal distribution strategy is to:\n     * 1. Withdraw as much as possible from any deprecated groups.\n     * 2. If more votes still need to be withdrawn, try and have each validator\n     * group end up receiving the same amount of votes from the system. If a\n     * group already has less votes than the average of the total remaining\n     * votes, it will not be withdrawn from, and instead we'll try to evenly\n     * distribute between the remaining groups.\n     */\n    function distributeWithdrawals(uint256 withdrawal, address beneficiary) internal {\n        if (withdrawal == 0) {\n            revert ZeroWithdrawal();\n        }\n\n        address[] memory deprecatedGroupsWithdrawn;\n        uint256[] memory deprecatedWithdrawalsPerGroup;\n        uint256 numberDeprecatedGroupsWithdrawn;\n\n        (\n            deprecatedGroupsWithdrawn,\n            deprecatedWithdrawalsPerGroup,\n            numberDeprecatedGroupsWithdrawn,\n            withdrawal\n        ) = getDeprecatedGroupsWithdrawalDistribution(withdrawal);\n\n        address[] memory groupsWithdrawn;\n        uint256[] memory withdrawalsPerGroup;\n\n        (groupsWithdrawn, withdrawalsPerGroup) = getActiveGroupWithdrawalDistribution(withdrawal);\n\n        address[] memory finalGroups = new address[](\n            groupsWithdrawn.length + numberDeprecatedGroupsWithdrawn\n        );\n        uint256[] memory finalVotes = new uint256[](\n            groupsWithdrawn.length + numberDeprecatedGroupsWithdrawn\n        );\n\n        for (uint256 i = 0; i < numberDeprecatedGroupsWithdrawn; i++) {\n            finalGroups[i] = deprecatedGroupsWithdrawn[i];\n            finalVotes[i] = deprecatedWithdrawalsPerGroup[i];\n        }\n\n        for (uint256 i = 0; i < groupsWithdrawn.length; i++) {\n            finalGroups[i + numberDeprecatedGroupsWithdrawn] = groupsWithdrawn[i];\n            finalVotes[i + numberDeprecatedGroupsWithdrawn] = withdrawalsPerGroup[i];\n        }\n\n        account.scheduleWithdrawals(beneficiary, finalGroups, finalVotes);\n    }\n\n    /**\n     * @notice Calculates how many votes should be withdrawn from each\n     * deprecated group.\n     * @param withdrawal The total amount of votes that needs to be withdrawn.\n     * @return deprecatedGroupsWithdrawn The array of deprecated groups to be\n     * withdrawn from.\n     * @return deprecatedWithdrawalsPerGroup The amount of votes to withdraw\n     * from the respective deprecated group in `deprecatedGroupsWithdrawn`.\n     * @return numberDeprecatedGroupsWithdrawn The number of groups in\n     * `deprecatedGroupsWithdrawn` that have a non zero withdrawal.\n     * @return remainingWithdrawal The number of votes that still need to be\n     * withdrawn after withdrawing from deprecated groups.\n     * @dev Non zero entries of `deprecatedWithdrawalsPerGroup` will be exactly\n     * a prefix of length `numberDeprecatedGroupsWithdrawn`.\n     */\n    function getDeprecatedGroupsWithdrawalDistribution(uint256 withdrawal)\n        internal\n        returns (\n            address[] memory deprecatedGroupsWithdrawn,\n            uint256[] memory deprecatedWithdrawalsPerGroup,\n            uint256 numberDeprecatedGroupsWithdrawn,\n            uint256 remainingWithdrawal\n        )\n    {\n        remainingWithdrawal = withdrawal;\n        uint256 numberDeprecatedGroups = deprecatedGroups.length();\n        deprecatedGroupsWithdrawn = new address[](numberDeprecatedGroups);\n        deprecatedWithdrawalsPerGroup = new uint256[](numberDeprecatedGroups);\n        numberDeprecatedGroupsWithdrawn = 0;\n\n        for (uint256 i = 0; i < numberDeprecatedGroups; i++) {\n            numberDeprecatedGroupsWithdrawn++;\n            deprecatedGroupsWithdrawn[i] = deprecatedGroups.at(i);\n            uint256 currentVotes = account.getCeloForGroup(deprecatedGroupsWithdrawn[i]);\n            deprecatedWithdrawalsPerGroup[i] = Math.min(remainingWithdrawal, currentVotes);\n            remainingWithdrawal -= deprecatedWithdrawalsPerGroup[i];\n\n            if (currentVotes == deprecatedWithdrawalsPerGroup[i]) {\n                if (!deprecatedGroups.remove(deprecatedGroupsWithdrawn[i])) {\n                    revert FailedToRemoveDeprecatedGroup(deprecatedGroupsWithdrawn[i]);\n                }\n                emit GroupRemoved(deprecatedGroupsWithdrawn[i]);\n            }\n\n            if (remainingWithdrawal == 0) {\n                break;\n            }\n        }\n\n        return (\n            deprecatedGroupsWithdrawn,\n            deprecatedWithdrawalsPerGroup,\n            numberDeprecatedGroupsWithdrawn,\n            remainingWithdrawal\n        );\n    }\n\n    /**\n     * @notice Calculates how votes should be withdrawn from each active group.\n     * @param withdrawal The number of votes that need to be withdrawn.\n     * @return The array of group addresses that should be withdrawn from.\n     * @return The amount of votes to withdraw from the respective group in the\n     * array of groups withdrawn from.\n     */\n    function getActiveGroupWithdrawalDistribution(uint256 withdrawal)\n        internal\n        view\n        returns (address[] memory, uint256[] memory)\n    {\n        if (withdrawal == 0) {\n            address[] memory noGroups = new address[](0);\n            uint256[] memory noWithdrawals = new uint256[](0);\n            return (noGroups, noWithdrawals);\n        }\n\n        uint256 numberGroups = activeGroups.length();\n        GroupWithVotes[] memory sortedGroups;\n        uint256 availableVotes;\n        (sortedGroups, availableVotes) = getSortedGroupsWithVotes(activeGroups.values());\n        availableVotes -= withdrawal;\n\n        uint256 numberGroupsWithdrawn = numberGroups;\n        uint256 targetVotes = availableVotes / numberGroupsWithdrawn;\n\n        for (uint256 i = 0; i < numberGroups; i++) {\n            if (sortedGroups[i].votes <= targetVotes) {\n                numberGroupsWithdrawn--;\n                availableVotes -= sortedGroups[i].votes;\n                targetVotes = availableVotes / numberGroupsWithdrawn;\n            } else {\n                break;\n            }\n        }\n\n        uint256[] memory withdrawalsPerGroup = new uint256[](numberGroupsWithdrawn);\n        address[] memory groupsWithdrawn = new address[](numberGroupsWithdrawn);\n        uint256 offset = numberGroups - numberGroupsWithdrawn;\n\n        for (uint256 i = 0; i < numberGroupsWithdrawn; i++) {\n            groupsWithdrawn[i] = sortedGroups[i + offset].group;\n            withdrawalsPerGroup[i] = sortedGroups[i + offset].votes - targetVotes;\n            if (availableVotes % numberGroupsWithdrawn > i) {\n                withdrawalsPerGroup[i]--;\n            }\n        }\n\n        return (groupsWithdrawn, withdrawalsPerGroup);\n    }\n\n    /**\n     * @notice Returns a list of group addresses with their corresponding\n     * current total votes, sorted by the number of votes, and the total number\n     * of votes in the system.\n     * @param groups The array of addresses of the groups to sort.\n     * @return The array of GroupWithVotes structs, sorted by number of votes.\n     * @return The total number of votes assigned to active groups.\n     */\n    function getSortedGroupsWithVotes(address[] memory groups)\n        internal\n        view\n        returns (GroupWithVotes[] memory, uint256)\n    {\n        GroupWithVotes[] memory groupsWithVotes = new GroupWithVotes[](groups.length);\n        uint256 totalVotes = 0;\n        for (uint256 i = 0; i < groups.length; i++) {\n            uint256 votes = account.getCeloForGroup(groups[i]);\n            totalVotes += votes;\n            groupsWithVotes[i] = GroupWithVotes(groups[i], votes);\n        }\n\n        sortGroupsWithVotes(groupsWithVotes);\n        return (groupsWithVotes, totalVotes);\n    }\n\n    /**\n     * @notice Returns the active groups that can receive the entire `votes`\n     * amount based on their current receivable votes limit in Election.sol.\n     * @param votes The number of votes that would potentially be added.\n     * @return The list of votable active groups.\n     */\n    function getVotableGroups(uint256 votes) internal returns (address[] memory) {\n        uint256 numberGroups = activeGroups.length();\n        uint256 numberVotableGroups = 0;\n        address[] memory votableGroups = new address[](numberGroups);\n\n        for (uint256 i = 0; i < numberGroups; i++) {\n            address group = activeGroups.at(i);\n            uint256 scheduledVotes = account.scheduledVotesForGroup(group);\n            if (getElection().canReceiveVotes(group, votes + scheduledVotes)) {\n                votableGroups[numberVotableGroups] = group;\n                numberVotableGroups++;\n            }\n        }\n\n        address[] memory votableGroupsFinal = new address[](numberVotableGroups);\n        for (uint256 i = 0; i < numberVotableGroups; i++) {\n            votableGroupsFinal[i] = votableGroups[i];\n        }\n\n        return votableGroupsFinal;\n    }\n\n    /**\n     * @notice Sorts an array of GroupWithVotes structs based on increasing\n     * `votes` values.\n     * @param groupsWithVotes The array to sort.\n     * @dev This is an in-place insertion sort. In general in Solidity we should\n     * be careful of algorithms on arrays, especially O(n^2) ones, but here\n     * we're guaranteed to be working with a small array, its length is bounded\n     * by the maximum number of groups that can be voted for in Elections.sol.\n     */\n    function sortGroupsWithVotes(GroupWithVotes[] memory groupsWithVotes) internal pure {\n        for (uint256 i = 1; i < groupsWithVotes.length; i++) {\n            uint256 j = i;\n            while (j > 0 && groupsWithVotes[j].votes < groupsWithVotes[j - 1].votes) {\n                (groupsWithVotes[j], groupsWithVotes[j - 1]) = (\n                    groupsWithVotes[j - 1],\n                    groupsWithVotes[j]\n                );\n                j--;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/common/UsingRegistryUpgradeable.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/IAccounts.sol\";\nimport \"../interfaces/IElection.sol\";\nimport \"../interfaces/IGoldToken.sol\";\nimport \"../interfaces/ILockedGold.sol\";\nimport \"../interfaces/IRegistry.sol\";\n\n/**\n * @title A helper for getting Celo core contracts from the Registry.\n */\nabstract contract UsingRegistryUpgradeable is Initializable {\n    /**\n     * @notice Initializes the UsingRegistryUpgradable contract in an upgradable scenario\n     * @param _registry The address of the Registry. For convenience, if the zero address is\n     * provided, the registry is set to the canonical Registry address, i.e. 0x0...ce10. This\n     * parameter should only be a non-zero address when testing.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __UsingRegistry_init(address _registry) internal onlyInitializing {\n        if (_registry == address(0)) {\n            registry = IRegistry(CANONICAL_REGISTRY);\n        } else {\n            registry = IRegistry(_registry);\n        }\n    }\n\n    /// @notice The canonical address of the Registry.\n    address internal constant CANONICAL_REGISTRY = 0x000000000000000000000000000000000000ce10;\n\n    /// @notice The registry ID for the Accounts contract.\n    bytes32 private constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\"Accounts\"));\n\n    /// @notice The registry ID for the Election contract.\n    bytes32 private constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\"Election\"));\n\n    /// @notice The registry ID for the GoldToken contract.\n    bytes32 private constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\"GoldToken\"));\n\n    /// @notice The registry ID for the LockedGold contract.\n    bytes32 private constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\"LockedGold\"));\n\n    /// @notice The Registry.\n    IRegistry public registry;\n\n    /**\n     * @notice Gets the Accounts contract from the Registry.\n     * @return The Accounts contract from the Registry.\n     */\n    function getAccounts() internal view returns (IAccounts) {\n        return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the Election contract from the Registry.\n     * @return The Election contract from the Registry.\n     */\n    function getElection() internal view returns (IElection) {\n        return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the GoldToken contract from the Registry.\n     * @return The GoldToken contract from the Registry.\n     */\n    function getGoldToken() internal view returns (IGoldToken) {\n        return IGoldToken(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\n    }\n\n    /**\n     * @notice Gets the LockedGold contract from the Registry.\n     * @return The LockedGold contract from the Registry.\n     */\n    function getLockedGold() internal view returns (ILockedGold) {\n        return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\n    }\n}\n"
    },
    "contracts/common/UUPSOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/**\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\n */\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\n    /**\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\n     * adds the onlyOwner modifer.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n}\n"
    },
    "contracts/interfaces/IAccount.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IAccount {\n    function getTotalCelo() external view returns (uint256);\n\n    function getCeloForGroup(address) external view returns (uint256);\n\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\n\n    function scheduledVotesForGroup(address group) external returns (uint256);\n\n    function scheduleWithdrawals(\n        address beneficiary,\n        address[] calldata group,\n        uint256[] calldata withdrawals\n    ) external;\n}\n"
    },
    "contracts/interfaces/IStakedCelo.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IStakedCelo {\n    function totalSupply() external view returns (uint256);\n\n    function mint(address, uint256) external;\n\n    function burn(address, uint256) external;\n\n    function transfer(address, uint256) external returns (bool);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "contracts/interfaces/IAccounts.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IAccounts {\n    function isAccount(address) external view returns (bool);\n\n    function voteSignerToAccount(address) external view returns (address);\n\n    function validatorSignerToAccount(address) external view returns (address);\n\n    function attestationSignerToAccount(address) external view returns (address);\n\n    function signerToAccount(address) external view returns (address);\n\n    function getAttestationSigner(address) external view returns (address);\n\n    function getValidatorSigner(address) external view returns (address);\n\n    function getVoteSigner(address) external view returns (address);\n\n    function hasAuthorizedVoteSigner(address) external view returns (bool);\n\n    function hasAuthorizedValidatorSigner(address) external view returns (bool);\n\n    function hasAuthorizedAttestationSigner(address) external view returns (bool);\n\n    function setAccountDataEncryptionKey(bytes calldata) external;\n\n    function setMetadataURL(string calldata) external;\n\n    function setName(string calldata) external;\n\n    function setWalletAddress(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function setAccount(\n        string calldata,\n        bytes calldata,\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function getDataEncryptionKey(address) external view returns (bytes memory);\n\n    function getWalletAddress(address) external view returns (address);\n\n    function getMetadataURL(address) external view returns (string memory);\n\n    function batchGetMetadataURL(address[] calldata)\n        external\n        view\n        returns (uint256[] memory, bytes memory);\n\n    function getName(address) external view returns (string memory);\n\n    function authorizeVoteSigner(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function authorizeValidatorSigner(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function authorizeValidatorSignerWithPublicKey(\n        address,\n        uint8,\n        bytes32,\n        bytes32,\n        bytes calldata\n    ) external;\n\n    function authorizeValidatorSignerWithKeys(\n        address,\n        uint8,\n        bytes32,\n        bytes32,\n        bytes calldata,\n        bytes calldata,\n        bytes calldata\n    ) external;\n\n    function authorizeAttestationSigner(\n        address,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function createAccount() external returns (bool);\n}\n"
    },
    "contracts/interfaces/IElection.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IElection {\n    function electValidatorSigners() external view returns (address[] memory);\n\n    function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\n\n    function vote(\n        address,\n        uint256,\n        address,\n        address\n    ) external returns (bool);\n\n    function activate(address) external returns (bool);\n\n    function activateForAccount(address, address) external returns (bool);\n\n    function revokeActive(\n        address,\n        uint256,\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function revokeAllActive(\n        address,\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function revokePending(\n        address,\n        uint256,\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function markGroupIneligible(address) external;\n\n    function markGroupEligible(\n        address,\n        address,\n        address\n    ) external;\n\n    function forceDecrementVotes(\n        address,\n        uint256,\n        address[] calldata,\n        address[] calldata,\n        uint256[] calldata\n    ) external returns (uint256);\n\n    // view functions\n    function getElectableValidators() external view returns (uint256, uint256);\n\n    function getElectabilityThreshold() external view returns (uint256);\n\n    function getNumVotesReceivable(address) external view returns (uint256);\n\n    function getTotalVotes() external view returns (uint256);\n\n    function getActiveVotes() external view returns (uint256);\n\n    function getTotalVotesByAccount(address) external view returns (uint256);\n\n    function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\n\n    function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\n\n    function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\n\n    function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\n\n    function getTotalVotesForGroup(address) external view returns (uint256);\n\n    function getActiveVotesForGroup(address) external view returns (uint256);\n\n    function getPendingVotesForGroup(address) external view returns (uint256);\n\n    function getGroupEligibility(address) external view returns (bool);\n\n    function getGroupEpochRewards(\n        address,\n        uint256,\n        uint256[] calldata\n    ) external view returns (uint256);\n\n    function getGroupsVotedForByAccount(address) external view returns (address[] memory);\n\n    function getEligibleValidatorGroups() external view returns (address[] memory);\n\n    function getTotalVotesForEligibleValidatorGroups()\n        external\n        view\n        returns (address[] memory, uint256[] memory);\n\n    function getCurrentValidatorSigners() external view returns (address[] memory);\n\n    function canReceiveVotes(address, uint256) external view returns (bool);\n\n    function hasActivatablePendingVotes(address, address) external view returns (bool);\n\n    // only owner\n    function setElectableValidators(uint256, uint256) external returns (bool);\n\n    function setMaxNumGroupsVotedFor(uint256) external returns (bool);\n\n    function setElectabilityThreshold(uint256) external returns (bool);\n\n    // only VM\n    function distributeEpochRewards(\n        address,\n        uint256,\n        address,\n        address\n    ) external;\n\n    function maxNumGroupsVotedFor() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGoldToken.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IGoldToken {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferWithComment(\n        address to,\n        uint256 value,\n        string calldata comment\n    ) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\n\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ILockedGold.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface ILockedGold {\n    function unlockingPeriod() external view returns (uint256);\n\n    function incrementNonvotingAccountBalance(address, uint256) external;\n\n    function decrementNonvotingAccountBalance(address, uint256) external;\n\n    function getAccountTotalLockedGold(address) external view returns (uint256);\n\n    function getTotalLockedGold() external view returns (uint256);\n\n    function getPendingWithdrawal(address, uint256) external view returns (uint256, uint256);\n\n    function getPendingWithdrawals(address)\n        external\n        view\n        returns (uint256[] memory, uint256[] memory);\n\n    function getTotalPendingWithdrawals(address) external view returns (uint256);\n\n    function lock() external payable;\n\n    function unlock(uint256) external;\n\n    function relock(uint256, uint256) external;\n\n    function withdraw(uint256) external;\n\n    function slash(\n        address account,\n        uint256 penalty,\n        address reporter,\n        uint256 reward,\n        address[] calldata lessers,\n        address[] calldata greaters,\n        uint256[] calldata indices\n    ) external;\n\n    function isSlasher(address) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IRegistry.sol": {
      "content": "//SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\ninterface IRegistry {\n    function setAddressFor(string calldata, address) external;\n\n    function getAddressForOrDie(bytes32) external view returns (address);\n\n    function getAddressFor(bytes32) external view returns (address);\n\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address);\n\n    function getAddressForString(string calldata identifier) external view returns (address);\n\n    function isOneOf(bytes32[] calldata, address) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}