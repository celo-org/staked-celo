{
  "address": "0x443Bd340667256fBd193D9614C330d34BCe75591",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotManager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NoStakedCelo",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotEnoughStakedCelo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCelo",
          "type": "uint256"
        }
      ],
      "name": "LockedStCeloInVoting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getLockedStCeloInVoting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getVoteRecord",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yesVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "noVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "abstainVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vote.ProposalVoteRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getVoteWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getVotedStillRelevantProposals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referendumDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountVoter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "revokeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalYesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalNoVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAbstainVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakedCelo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "setDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setReferendumDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stCeloAmount",
          "type": "uint256"
        }
      ],
      "name": "toCelo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "celoAmount",
          "type": "uint256"
        }
      ],
      "name": "toStakedCelo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "updateHistoryAndReturnLockedStCeloInVoting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountVoter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "name": "voteProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalNoVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAbstainVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7fcff18f66c8d51ca324e9df633b341eeb05c1564eb216be926a2291c5fe393",
  "receipt": {
    "to": null,
    "from": "0x5bC1C4C1D67C5E4384189302BC653A611568a788",
    "contractAddress": "0x443Bd340667256fBd193D9614C330d34BCe75591",
    "transactionIndex": 0,
    "gasUsed": "3287661",
    "logsBloom": "0x
    "blockHash": "0x318358a8aa964912404d0591cac109457eb66f47eaf3b77f316d4e6780e24ee0",
    "transactionHash": "0xd7fcff18f66c8d51ca324e9df633b341eeb05c1564eb216be926a2291c5fe393",
    "logs": [],
    "blockNumber": 15086028,
    "cumulativeGasUsed": "3287661",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0d26545ee0477243a864c9acbc608396",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NoStakedCelo\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotEnoughStakedCelo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCelo\",\"type\":\"uint256\"}],\"name\":\"LockedStCeloInVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getLockedStCeloInVoting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getVoteRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct Vote.ProposalVoteRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVotedStillRelevantProposals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referendumDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"revokeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalYesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNoVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAbstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedCelo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setReferendumDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stCeloAmount\",\"type\":\"uint256\"}],\"name\":\"toCelo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"celoAmount\",\"type\":\"uint256\"}],\"name\":\"toStakedCelo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"updateHistoryAndReturnLockedStCeloInVoting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"name\":\"voteProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNoVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAbstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"params\":{\"caller\":\"`msg.sender` that called the function.\"}}],\"NoStakedCelo(address)\":[{\"params\":{\"account\":\"The account's address.\"}}],\"NotEnoughStakedCelo(address)\":[{\"params\":{\"account\":\"The account's address.\"}}]},\"events\":{\"LockedStCeloInVoting(address,uint256)\":{\"params\":{\"account\":\"The account's address.\",\"lockedCelo\":\"The stCELO that is still being locked.\"}},\"ProposalVoted(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"abstainVotes\":\"The abstain votes.\",\"noVotes\":\"The no votes.\",\"proposalId\":\"The proposal UIID.\",\"voter\":\"The voter's address.\",\"yesVotes\":\"The yes votes.\"}}},\"kind\":\"dev\",\"methods\":{\"getLockedStCeloInVoting(address)\":{\"params\":{\"beneficiary\":\"The account.\"}},\"getProposalTimestamp(uint256)\":{\"params\":{\"proposalId\":\"The proposal UUID.\"},\"returns\":{\"_0\":\"The timestamp of proposal.\"}},\"getVoteRecord(uint256)\":{\"params\":{\"proposalId\":\"The proposal UUID.\"}},\"getVoteWeight(address)\":{\"params\":{\"beneficiary\":\"The account.\"}},\"getVotedStillRelevantProposals(address)\":{\"params\":{\"voter\":\"The voter.\"},\"returns\":{\"_0\":\"Proposals in referendum stage. (For up to date result call updateHistoryAndReturnLockedStCeloInVoting first)\"}},\"initialize(address,address,address)\":{\"params\":{\"_manager\":\"The address of the contract manager.\",\"_owner\":\"The address of the contract owner.\",\"_registry\":\"The address of the Celo registry.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeVotes(address,uint256)\":{\"params\":{\"accountVoter\":\"The account that is voting.\",\"proposalId\":\"The ID of the proposal to vote on.\"},\"returns\":{\"totalAbstainVotes\":\"SUM of all AccountContract abstain votes for proposal.\",\"totalNoVotes\":\"SUM of all AccountContract no votes for proposal.\",\"totalYesVotes\":\"SUM of all AccountContract yes votes for proposal.\"}},\"setDependencies(address,address)\":{\"details\":\"Manager, Account and StakedCelo all reference each other so we need a way of setting these after all contracts are deployed and initialized.\",\"params\":{\"_account\":\"The address of the Account contract.\",\"_stakedCelo\":\"the address of the StakedCelo contract.\"}},\"setManager(address)\":{\"params\":{\"_manager\":\"The new manager address.\"}},\"toCelo(uint256)\":{\"params\":{\"stCeloAmount\":\"The amount of stCELO burned.\"},\"returns\":{\"_0\":\"The amount of CELO that should be withdrawn.\"}},\"toStakedCelo(uint256)\":{\"params\":{\"celoAmount\":\"The amount of CELO deposited.\"},\"returns\":{\"_0\":\"The amount of stCELO that should be minted.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateHistoryAndReturnLockedStCeloInVoting(address)\":{\"params\":{\"beneficiary\":\"The beneficiary.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"voteProposal(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"abstainVotes\":\"The abstain votes weight.\",\"accountVoter\":\"The account that is voting.\",\"noVotes\":\"The no votes weight.\",\"proposalId\":\"The ID of the proposal to vote on.\",\"yesVotes\":\"The yes votes weight.\"},\"returns\":{\"_0\":\"totalWeights Account's staked celo balance.\",\"totalAbstainVotes\":\"SUM of all AccountContract abstain votes for proposal.\",\"totalNoVotes\":\"SUM of all AccountContract no votes for proposal.\",\"totalYesVotes\":\"SUM of all AccountContract yes votes for proposal.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"notice\":\"Used when an `onlyManager` function is called by a non-manager.\"}],\"NoStakedCelo(address)\":[{\"notice\":\"Used when attempting to vote when there is no stCelo.\"}],\"NotEnoughStakedCelo(address)\":[{\"notice\":\"Used when attempting to vote when there is not enough of stCelo.\"}],\"NullAddress()\":[{\"notice\":\"Used when a passed address is address(0).\"}]},\"events\":{\"LockedStCeloInVoting(address,uint256)\":{\"notice\":\"Emitted when unlock of stCELO is requested.\"},\"ManagerSet(address)\":{\"notice\":\"Emitted when the manager is initially set or later modified.\"},\"ProposalVoted(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when an account votes for governance proposal.\"}},\"kind\":\"user\",\"methods\":{\"getLockedStCeloInVoting(address)\":{\"notice\":\"Retuns currently locked celo in voting. (This celo cannot be unlocked.)\"},\"getProposalTimestamp(uint256)\":{\"notice\":\"Returns save timestamp of proposal.\"},\"getVoteRecord(uint256)\":{\"notice\":\"Gets vote record of proposal.\"},\"getVoteWeight(address)\":{\"notice\":\"Returns vote weight of account owning stCelo.\"},\"getVotedStillRelevantProposals(address)\":{\"notice\":\"Retuns proposals still in referendum stage that voter voted on.\"},\"initialize(address,address,address)\":{\"notice\":\"Initialize the contract with registry and owner.\"},\"proposalTimestamps(uint256)\":{\"notice\":\"Timestamps of every voted proposal.\"},\"referendumDuration()\":{\"notice\":\"Duration of proposal in referendum stage (It has to be same as in Governance contrtact).\"},\"registry()\":{\"notice\":\"The Registry.\"},\"revokeVotes(address,uint256)\":{\"notice\":\"Revokes votes on already voted proposal.\"},\"setDependencies(address,address)\":{\"notice\":\"Set this contract's dependencies in the StakedCelo system.\"},\"setManager(address)\":{\"notice\":\"Sets the manager address.\"},\"setReferendumDuration()\":{\"notice\":\"Sets referendum duration. It should always be the same as in Governance.\"},\"toCelo(uint256)\":{\"notice\":\"Computes the amount of CELO that should be withdrawn for a given amount of stCELO burned.\"},\"toStakedCelo(uint256)\":{\"notice\":\"Computes the amount of stCELO that should be minted for a given amount of CELO deposited.\"},\"updateHistoryAndReturnLockedStCeloInVoting(address)\":{\"notice\":\"Retuns currently locked celo in voting. (This celo cannot be unlocked.) And it will remove voted proposals from account history if appropriate.\"},\"voteProposal(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Votes on a proposal in the referendum stage.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vote.sol\":\"Vote\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"contracts/Managed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Used via inheritance to grant special access control to the Manager\\n * contract.\\n */\\nabstract contract Managed is Initializable, OwnableUpgradeable {\\n    address public manager;\\n\\n    /**\\n     * @notice Emitted when the manager is initially set or later modified.\\n     * @param manager The new managing account address.\\n     */\\n    event ManagerSet(address indexed manager);\\n\\n    /**\\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManager(address caller);\\n\\n    /**\\n     * @notice Used when a passed address is address(0).\\n     */\\n    error NullAddress();\\n\\n    /**\\n     * @dev Initializes the contract in an upgradable context.\\n     * @param _manager The initial managing address.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Managed_init(address _manager) internal onlyInitializing {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        if (manager != msg.sender) {\\n            revert CallerNotManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function setManager(address _manager) external onlyOwner {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function _setManager(address _manager) internal {\\n        if (_manager == address(0)) {\\n            revert NullAddress();\\n        }\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0x39157bfd6fc0fb68803ffcd3b03ee4c1f28bff3179428bf0209c0828b3c178bd\",\"license\":\"LGPL-3.0-only\"},\"contracts/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./common/UsingRegistryUpgradeable.sol\\\";\\nimport \\\"./common/UUPSOwnableUpgradeable.sol\\\";\\nimport \\\"./Managed.sol\\\";\\n\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/IStakedCelo.sol\\\";\\n\\ncontract Vote is UUPSOwnableUpgradeable, UsingRegistryUpgradeable, Managed {\\n    /**\\n     * @notice Keeps track of total votes for proposal (votes of Account contract).\\n     * @param proposalId The proposal UUID.\\n     * @param yesVotes The yes votes weight.\\n     * @param noVotes The no votes weight.\\n     * @param abstainVotes The abstain votes weight.\\n     */\\n    struct ProposalVoteRecord {\\n        uint256 proposalId;\\n        uint256 yesVotes;\\n        uint256 noVotes;\\n        uint256 abstainVotes;\\n    }\\n\\n    /**\\n     * @notice Votes of account.\\n     * @param proposalVotes Votes per proposal UUID.\\n     * @param votedProposalIds History of voted proposals that are still active.\\n     */\\n    struct Voter {\\n        // Key of proposalId\\n        mapping(uint256 => VoterRecord) proposalVotes;\\n        uint256[] votedProposalIds;\\n    }\\n\\n    /**\\n     * @notice Voter's votes for particular proposal.\\n     * @param proposalId The proposal UIID.\\n     * @param yesVotes The yes votes.\\n     * @param noVotes The no votes.\\n     * @param abstainVotes The abstain votes.\\n     */\\n    struct VoterRecord {\\n        uint256 proposalId;\\n        uint256 yesVotes;\\n        uint256 noVotes;\\n        uint256 abstainVotes;\\n    }\\n\\n    /**\\n     * @notice Emitted when an account votes for governance proposal.\\n     * @param voter The voter's address.\\n     * @param proposalId The proposal UIID.\\n     * @param yesVotes The yes votes.\\n     * @param noVotes The no votes.\\n     * @param abstainVotes The abstain votes.\\n     */\\n    event ProposalVoted(\\n        address voter,\\n        uint256 proposalId,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    );\\n\\n    /**\\n     * @notice Emitted when unlock of stCELO is requested.\\n     * @param account The account's address.\\n     * @param lockedCelo The stCELO that is still being locked.\\n     */\\n    event LockedStCeloInVoting(address account, uint256 lockedCelo);\\n\\n    /**\\n     * @notice Used when attempting to vote when there is no stCelo.\\n     * @param account The account's address.\\n     */\\n    error NoStakedCelo(address account);\\n\\n    /**\\n     * @notice Used when attempting to vote when there is not enough of stCelo.\\n     * @param account The account's address.\\n     */\\n    error NotEnoughStakedCelo(address account);\\n\\n    /**\\n     * @notice An instance of the StakedCelo contract this Manager manages.\\n     */\\n    IStakedCelo internal stakedCelo;\\n\\n    /**\\n     * @notice An instance of the Account contract this Manager manages.\\n     */\\n    IAccount internal account;\\n\\n    /**\\n     * @notice Votes of Account's contract per proposal.\\n     */\\n    mapping(uint256 => ProposalVoteRecord) private voteRecords;\\n\\n    /**\\n     * @notice History of all voters.\\n     */\\n    mapping(address => Voter) private voters;\\n\\n    /**\\n     * @notice Timestamps of every voted proposal.\\n     */\\n    mapping(uint256 => uint256) public proposalTimestamps;\\n\\n    /**\\n     * @notice Duration of proposal in referendum stage\\n     * (It has to be same as in Governance contrtact).\\n     */\\n    uint256 public referendumDuration;\\n\\n    /**\\n     * @notice Initialize the contract with registry and owner.\\n     * @param _registry The address of the Celo registry.\\n     * @param _owner The address of the contract owner.\\n     * @param _manager The address of the contract manager.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _owner,\\n        address _manager\\n    ) external initializer {\\n        __UsingRegistry_init(_registry);\\n        __Managed_init(_manager);\\n        _transferOwnership(_owner);\\n        setReferendumDuration();\\n    }\\n\\n    /**\\n     * @notice Set this contract's dependencies in the StakedCelo system.\\n     * @dev Manager, Account and StakedCelo all reference each other\\n     * so we need a way of setting these after all contracts are\\n     * deployed and initialized.\\n     * @param _stakedCelo the address of the StakedCelo contract.\\n     * @param _account The address of the Account contract.\\n     */\\n    function setDependencies(address _stakedCelo, address _account) external onlyOwner {\\n        require(_stakedCelo != address(0), \\\"stakedCelo null address\\\");\\n        require(_account != address(0), \\\"account null address\\\");\\n        stakedCelo = IStakedCelo(_stakedCelo);\\n        account = IAccount(_account);\\n    }\\n\\n    /**\\n     * @notice Votes on a proposal in the referendum stage.\\n     * @param accountVoter The account that is voting.\\n     * @param proposalId The ID of the proposal to vote on.\\n     * @param yesVotes The yes votes weight.\\n     * @param noVotes The no votes weight.\\n     * @param abstainVotes The abstain votes weight.\\n     * @return totalWeights Account's staked celo balance.\\n     * @return totalYesVotes SUM of all AccountContract yes votes for proposal.\\n     * @return totalNoVotes SUM of all AccountContract no votes for proposal.\\n     * @return totalAbstainVotes SUM of all AccountContract abstain votes for proposal.\\n     */\\n    function voteProposal(\\n        address accountVoter,\\n        uint256 proposalId,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    )\\n        public\\n        onlyManager\\n        returns (\\n            uint256,\\n            uint256 totalYesVotes,\\n            uint256 totalNoVotes,\\n            uint256 totalAbstainVotes\\n        )\\n    {\\n        uint256 stakedCeloBalance = stakedCelo.balanceOf(accountVoter) +\\n            stakedCelo.lockedVoteBalanceOf(accountVoter);\\n        if (stakedCeloBalance == 0) {\\n            revert NoStakedCelo(accountVoter);\\n        }\\n        uint256 totalWeights = yesVotes + noVotes + abstainVotes;\\n        if (totalWeights > toCelo(stakedCeloBalance)) {\\n            revert NotEnoughStakedCelo(accountVoter);\\n        }\\n\\n        Voter storage voter = voters[accountVoter];\\n\\n        VoterRecord storage previousVoterRecord = voter.proposalVotes[proposalId];\\n        ProposalVoteRecord memory proposalVoteRecord = voteRecords[proposalId];\\n\\n        // Subtract previous vote.\\n        proposalVoteRecord.yesVotes -= previousVoterRecord.yesVotes;\\n        proposalVoteRecord.noVotes -= previousVoterRecord.noVotes;\\n        proposalVoteRecord.abstainVotes -= previousVoterRecord.abstainVotes;\\n\\n        // Add new vote.\\n        proposalVoteRecord.yesVotes += yesVotes;\\n        proposalVoteRecord.noVotes += noVotes;\\n        proposalVoteRecord.abstainVotes += abstainVotes;\\n\\n        voteRecords[proposalId] = ProposalVoteRecord(\\n            proposalId,\\n            proposalVoteRecord.yesVotes,\\n            proposalVoteRecord.noVotes,\\n            proposalVoteRecord.abstainVotes\\n        );\\n\\n        if (previousVoterRecord.proposalId == 0) {\\n            voter.votedProposalIds.push(proposalId);\\n        }\\n\\n        voter.proposalVotes[proposalId] = VoterRecord(proposalId, yesVotes, noVotes, abstainVotes);\\n\\n        emit ProposalVoted(accountVoter, proposalId, yesVotes, noVotes, abstainVotes);\\n\\n        if (proposalTimestamps[proposalId] == 0) {\\n            proposalTimestamps[proposalId] = getProposalTimestamp(proposalId);\\n        }\\n\\n        return (\\n            toStakedCelo(totalWeights),\\n            proposalVoteRecord.yesVotes,\\n            proposalVoteRecord.noVotes,\\n            proposalVoteRecord.abstainVotes\\n        );\\n    }\\n\\n    /**\\n     * @notice Revokes votes on already voted proposal.\\n     * @param accountVoter The account that is voting.\\n     * @param proposalId The ID of the proposal to vote on.\\n     * @return totalYesVotes SUM of all AccountContract yes votes for proposal.\\n     * @return totalNoVotes SUM of all AccountContract no votes for proposal.\\n     * @return totalAbstainVotes SUM of all AccountContract abstain votes for proposal.\\n     */\\n    function revokeVotes(address accountVoter, uint256 proposalId)\\n        public\\n        onlyManager\\n        returns (\\n            uint256 totalYesVotes,\\n            uint256 totalNoVotes,\\n            uint256 totalAbstainVotes\\n        )\\n    {\\n        (, totalYesVotes, totalNoVotes, totalAbstainVotes) = voteProposal(\\n            accountVoter,\\n            proposalId,\\n            0,\\n            0,\\n            0\\n        );\\n        return (totalYesVotes, totalNoVotes, totalAbstainVotes);\\n    }\\n\\n    /**\\n     * @notice Returns save timestamp of proposal.\\n     * @param proposalId The proposal UUID.\\n     * @return The timestamp of proposal.\\n     */\\n    function getProposalTimestamp(uint256 proposalId) public view returns (uint256) {\\n        (, , uint256 timestamp, , ) = getGovernance().getProposal(proposalId);\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Retuns currently locked celo in voting. (This celo cannot be unlocked.)\\n     * And it will remove voted proposals from account history if appropriate.\\n     * @param beneficiary The beneficiary.\\n     */\\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\\n        public\\n        onlyManager\\n        returns (uint256 lockedAmount)\\n    {\\n        Voter storage voter = voters[beneficiary];\\n\\n        uint256 i = voter.votedProposalIds.length;\\n        while (i > 0) {\\n            uint256 proposalId = voter.votedProposalIds[--i];\\n            uint256 proposalTimestamp = proposalTimestamps[proposalId];\\n\\n            if (proposalTimestamp == 0) {\\n                voter.votedProposalIds[i] = voter.votedProposalIds[\\n                    voter.votedProposalIds.length - 1\\n                ];\\n                voter.votedProposalIds.pop();\\n                continue;\\n            }\\n\\n            if (block.timestamp < proposalTimestamp + referendumDuration) {\\n                VoterRecord storage voterRecord = voter.proposalVotes[proposalId];\\n                lockedAmount = Math.max(\\n                    lockedAmount,\\n                    voterRecord.yesVotes + voterRecord.noVotes + voterRecord.abstainVotes\\n                );\\n            } else {\\n                voter.votedProposalIds[i] = voter.votedProposalIds[\\n                    voter.votedProposalIds.length - 1\\n                ];\\n                voter.votedProposalIds.pop();\\n                delete proposalTimestamps[proposalId];\\n            }\\n        }\\n\\n        uint256 stCelo = toStakedCelo(lockedAmount);\\n        emit LockedStCeloInVoting(beneficiary, stCelo);\\n        return stCelo;\\n    }\\n\\n    /**\\n     * @notice Retuns proposals still in referendum stage that voter voted on.\\n     * @param voter The voter.\\n     * @return Proposals in referendum stage.\\n     * (For up to date result call updateHistoryAndReturnLockedStCeloInVoting first)\\n     */\\n    function getVotedStillRelevantProposals(address voter) public view returns (uint256[] memory) {\\n        return voters[voter].votedProposalIds;\\n    }\\n\\n    /**\\n     * @notice Retuns currently locked celo in voting. (This celo cannot be unlocked.)\\n     * @param beneficiary The account.\\n     */\\n    function getLockedStCeloInVoting(address beneficiary)\\n        public\\n        view\\n        returns (uint256 lockedAmount)\\n    {\\n        Voter storage voter = voters[beneficiary];\\n\\n        uint256 i = voter.votedProposalIds.length;\\n        while (i > 0) {\\n            uint256 proposalId = voter.votedProposalIds[--i];\\n            uint256 proposalTimestamp = proposalTimestamps[proposalId];\\n\\n            if (proposalTimestamp == 0) {\\n                continue;\\n            }\\n\\n            if (block.timestamp < proposalTimestamp + referendumDuration) {\\n                VoterRecord storage voterRecord = voter.proposalVotes[proposalId];\\n                lockedAmount = Math.max(\\n                    lockedAmount,\\n                    voterRecord.yesVotes + voterRecord.noVotes + voterRecord.abstainVotes\\n                );\\n            }\\n        }\\n\\n        return toStakedCelo(lockedAmount);\\n    }\\n\\n    /**\\n     * @notice Sets referendum duration. It should always be the same as in Governance.\\n     */\\n    function setReferendumDuration() public onlyOwner {\\n        uint256 newReferendumDuration = getGovernance().getReferendumStageDuration();\\n        referendumDuration = newReferendumDuration;\\n    }\\n\\n    /**\\n     * @notice Returns vote weight of account owning stCelo.\\n     * @param beneficiary The account.\\n     */\\n    function getVoteWeight(address beneficiary) public view returns (uint256) {\\n        uint256 stakedCeloBalance = stakedCelo.balanceOf(beneficiary);\\n        return toCelo(stakedCeloBalance);\\n    }\\n\\n    /**\\n     * @notice Gets vote record of proposal.\\n     * @param proposalId The proposal UUID.\\n     */\\n    function getVoteRecord(uint256 proposalId) public view returns (ProposalVoteRecord memory) {\\n        return voteRecords[proposalId];\\n    }\\n\\n    /**\\n     * @notice Computes the amount of stCELO that should be minted for a given\\n     * amount of CELO deposited.\\n     * @param celoAmount The amount of CELO deposited.\\n     * @return The amount of stCELO that should be minted.\\n     */\\n    function toStakedCelo(uint256 celoAmount) public view returns (uint256) {\\n        uint256 stCeloSupply = stakedCelo.totalSupply();\\n        uint256 celoBalance = account.getTotalCelo();\\n\\n        if (stCeloSupply == 0 || celoBalance == 0) {\\n            return celoAmount;\\n        }\\n\\n        return (celoAmount * stCeloSupply) / celoBalance;\\n    }\\n\\n    /**\\n     * @notice Computes the amount of CELO that should be withdrawn for a given\\n     * amount of stCELO burned.\\n     * @param stCeloAmount The amount of stCELO burned.\\n     * @return The amount of CELO that should be withdrawn.\\n     */\\n    function toCelo(uint256 stCeloAmount) public view returns (uint256) {\\n        uint256 stCeloSupply = stakedCelo.totalSupply();\\n        uint256 celoBalance = account.getTotalCelo();\\n\\n        if (stCeloSupply == 0 || celoBalance == 0) {\\n            return stCeloAmount;\\n        }\\n\\n        return (stCeloAmount * celoBalance) / stCeloSupply;\\n    }\\n\\n    /**\\n     * @notice Returns sum of input weights.\\n     * @param weights The weights to sum up.\\n     * @return The sum of input weights.\\n     */\\n    function getTotalWeightRequested(uint256[] memory weights) private pure returns (uint256) {\\n        uint256 totalVotesRequested = 0;\\n        for (uint256 i = 0; i < weights.length; i++) {\\n            totalVotesRequested += weights[i];\\n        }\\n\\n        return totalVotesRequested;\\n    }\\n}\\n\",\"keccak256\":\"0xaaba8b9e0dc5fa5c15223904a83aaf939aa283a6538b02590a0f0f9bbec8fae2\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UUPSOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\\n */\\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\\n    /**\\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\\n     * adds the onlyOwner modifer.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x5dbad350c6ae75b9d15c2080b1de6f02d8b7f32a71a6bcf775c9731820d115ec\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UsingRegistryUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccounts.sol\\\";\\nimport \\\"../interfaces/IElection.sol\\\";\\nimport \\\"../interfaces/IGoldToken.sol\\\";\\nimport \\\"../interfaces/ILockedGold.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IGovernance.sol\\\";\\nimport \\\"../interfaces/IValidators.sol\\\";\\n\\n/**\\n * @title A helper for getting Celo core contracts from the Registry.\\n */\\nabstract contract UsingRegistryUpgradeable is Initializable {\\n    /**\\n     * @notice Initializes the UsingRegistryUpgradable contract in an upgradable scenario\\n     * @param _registry The address of the Registry. For convenience, if the zero address is\\n     * provided, the registry is set to the canonical Registry address, i.e. 0x0...ce10. This\\n     * parameter should only be a non-zero address when testing.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __UsingRegistry_init(address _registry) internal onlyInitializing {\\n        if (_registry == address(0)) {\\n            registry = IRegistry(CANONICAL_REGISTRY);\\n        } else {\\n            registry = IRegistry(_registry);\\n        }\\n    }\\n\\n    /// @notice The canonical address of the Registry.\\n    address internal constant CANONICAL_REGISTRY = 0x000000000000000000000000000000000000ce10;\\n\\n    /// @notice The registry ID for the Accounts contract.\\n    bytes32 private constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n\\n    /// @notice The registry ID for the Election contract.\\n    bytes32 private constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n\\n    /// @notice The registry ID for the GoldToken contract.\\n    bytes32 private constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n\\n    /// @notice The registry ID for the LockedGold contract.\\n    bytes32 private constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n\\n    /// @notice The registry ID for the Governance contract.\\n    bytes32 private constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n\\n    /// @notice The registry ID for the Validator contract.\\n    bytes32 private constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n\\n    /// @notice The Registry.\\n    IRegistry public registry;\\n\\n    /**\\n     * @notice Gets the Accounts contract from the Registry.\\n     * @return The Accounts contract from the Registry.\\n     */\\n    function getAccounts() internal view returns (IAccounts) {\\n        return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the Election contract from the Registry.\\n     * @return The Election contract from the Registry.\\n     */\\n    function getElection() internal view returns (IElection) {\\n        return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the GoldToken contract from the Registry.\\n     * @return The GoldToken contract from the Registry.\\n     */\\n    function getGoldToken() internal view returns (IGoldToken) {\\n        return IGoldToken(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the LockedGold contract from the Registry.\\n     * @return The LockedGold contract from the Registry.\\n     */\\n    function getLockedGold() internal view returns (ILockedGold) {\\n        return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the Governance contract from the Registry.\\n     * @return The Governance contract from the Registry.\\n     */\\n    function getGovernance() internal view returns (IGovernance) {\\n        return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the validators contract from the Registry.\\n     * @return The validators contract from the Registry.\\n     */\\n    function getValidators() internal view returns (IValidators) {\\n        return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n    }\\n}\\n\",\"keccak256\":\"0xa1957dc081714713affad5272b9ff0becb05fce626b35b05cbeaf2c9ebbe6667\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccount {\\n    function getTotalCelo() external view returns (uint256);\\n\\n    function getCeloForGroup(address) external view returns (uint256);\\n\\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\\n\\n    function scheduledVotesForGroup(address group) external returns (uint256);\\n\\n    function scheduleWithdrawals(\\n        address beneficiary,\\n        address[] calldata group,\\n        uint256[] calldata withdrawals\\n    ) external;\\n\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external;\\n}\\n\",\"keccak256\":\"0x67f070c12d3e516e5be3c8eaa9034000c3151189a4b8e30b910ad3c12b6f39bd\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccounts.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccounts {\\n    function isAccount(address) external view returns (bool);\\n\\n    function voteSignerToAccount(address) external view returns (address);\\n\\n    function validatorSignerToAccount(address) external view returns (address);\\n\\n    function attestationSignerToAccount(address) external view returns (address);\\n\\n    function signerToAccount(address) external view returns (address);\\n\\n    function getAttestationSigner(address) external view returns (address);\\n\\n    function getValidatorSigner(address) external view returns (address);\\n\\n    function getVoteSigner(address) external view returns (address);\\n\\n    function hasAuthorizedVoteSigner(address) external view returns (bool);\\n\\n    function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n\\n    function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n    function setAccountDataEncryptionKey(bytes calldata) external;\\n\\n    function setMetadataURL(string calldata) external;\\n\\n    function setName(string calldata) external;\\n\\n    function setWalletAddress(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function setAccount(\\n        string calldata,\\n        bytes calldata,\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function getDataEncryptionKey(address) external view returns (bytes memory);\\n\\n    function getWalletAddress(address) external view returns (address);\\n\\n    function getMetadataURL(address) external view returns (string memory);\\n\\n    function batchGetMetadataURL(address[] calldata)\\n        external\\n        view\\n        returns (uint256[] memory, bytes memory);\\n\\n    function getName(address) external view returns (string memory);\\n\\n    function authorizeVoteSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function authorizeValidatorSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function authorizeValidatorSignerWithPublicKey(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32,\\n        bytes calldata\\n    ) external;\\n\\n    function authorizeValidatorSignerWithKeys(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32,\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external;\\n\\n    function authorizeAttestationSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function createAccount() external returns (bool);\\n}\\n\",\"keccak256\":\"0x661b5c89e143c166a8667ea927d787939c27a59bd52e12c94d67d7377003e734\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IElection.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IElection {\\n    function electValidatorSigners() external view returns (address[] memory);\\n\\n    function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n\\n    function vote(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function activate(address) external returns (bool);\\n\\n    function activateForAccount(address, address) external returns (bool);\\n\\n    function revokeActive(\\n        address,\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function revokeAllActive(\\n        address,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function revokePending(\\n        address,\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function markGroupIneligible(address) external;\\n\\n    function markGroupEligible(\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function forceDecrementVotes(\\n        address,\\n        uint256,\\n        address[] calldata,\\n        address[] calldata,\\n        uint256[] calldata\\n    ) external returns (uint256);\\n\\n    // view functions\\n    function getElectableValidators() external view returns (uint256, uint256);\\n\\n    function getElectabilityThreshold() external view returns (uint256);\\n\\n    function getNumVotesReceivable(address) external view returns (uint256);\\n\\n    function getTotalVotes() external view returns (uint256);\\n\\n    function getActiveVotes() external view returns (uint256);\\n\\n    function getTotalVotesByAccount(address) external view returns (uint256);\\n\\n    function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getTotalVotesForGroup(address) external view returns (uint256);\\n\\n    function getActiveVotesForGroup(address) external view returns (uint256);\\n\\n    function getPendingVotesForGroup(address) external view returns (uint256);\\n\\n    function getGroupEligibility(address) external view returns (bool);\\n\\n    function getGroupEpochRewards(\\n        address,\\n        uint256,\\n        uint256[] calldata\\n    ) external view returns (uint256);\\n\\n    function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n\\n    function getEligibleValidatorGroups() external view returns (address[] memory);\\n\\n    function getTotalVotesForEligibleValidatorGroups()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    function getCurrentValidatorSigners() external view returns (address[] memory);\\n\\n    function canReceiveVotes(address, uint256) external view returns (bool);\\n\\n    function hasActivatablePendingVotes(address, address) external view returns (bool);\\n\\n    // only owner\\n    function setElectableValidators(uint256, uint256) external returns (bool);\\n\\n    function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n\\n    function setElectabilityThreshold(uint256) external returns (bool);\\n\\n    // only VM\\n    function distributeEpochRewards(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external;\\n\\n    function maxNumGroupsVotedFor() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccaac94aca5eb3116ca9a56d6b1496621be0e61c0f8d8ae8be1c62059acef220\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGoldToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGoldToken {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferWithComment(\\n        address to,\\n        uint256 value,\\n        string calldata comment\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\\n\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x230bde369f53b4c36033c7b5465637d706873bf684f732afa7e083636d7c9d68\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGovernance {\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external returns (bool);\\n\\n    function getProposal(uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            string memory\\n        );\\n\\n    function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x21958f1d6595964dd706b5dc17455e59d7f1fc21a8f5c76b47b528e17f7f7d96\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ILockedGold.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface ILockedGold {\\n    function unlockingPeriod() external view returns (uint256);\\n\\n    function incrementNonvotingAccountBalance(address, uint256) external;\\n\\n    function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n    function getAccountTotalLockedGold(address) external view returns (uint256);\\n\\n    function getTotalLockedGold() external view returns (uint256);\\n\\n    function getPendingWithdrawal(address, uint256) external view returns (uint256, uint256);\\n\\n    function getSlashingWhitelist() external view returns (bytes32[] memory);\\n\\n    function getPendingWithdrawals(address)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getTotalPendingWithdrawals(address) external view returns (uint256);\\n\\n    function lock() external payable;\\n\\n    function unlock(uint256) external;\\n\\n    function relock(uint256, uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function slash(\\n        address account,\\n        uint256 penalty,\\n        address reporter,\\n        uint256 reward,\\n        address[] calldata lessers,\\n        address[] calldata greaters,\\n        uint256[] calldata indices\\n    ) external;\\n\\n    function isSlasher(address) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x61a461cc817dcbab491e594bb28479498056e0fda256c6ed05cc7a12da4fce71\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IRegistry {\\n    function setAddressFor(string calldata, address) external;\\n\\n    function getAddressForOrDie(bytes32) external view returns (address);\\n\\n    function getAddressFor(bytes32) external view returns (address);\\n\\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n\\n    function getAddressForString(string calldata identifier) external view returns (address);\\n\\n    function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x15c870de545b84dea2aa846e91f15ab50f6e5090cec02bbf3b7cc085d23fc2eb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IStakedCelo.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IStakedCelo {\\n    function totalSupply() external view returns (uint256);\\n\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function lockVoteBalance(address account, uint256 amount) external;\\n\\n    function unlockVoteBalance(address account) external;\\n\\n    function lockedVoteBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3df273715b94f5dd3db16f1439d4ab8f53e9ee6cd52eaf4dcd3fdfd8ba679518\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IValidators.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.11;\\n\\ninterface IValidators {\\n    function registerValidator(\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function deregisterValidator(uint256) external returns (bool);\\n\\n    function affiliate(address) external returns (bool);\\n\\n    function deaffiliate() external returns (bool);\\n\\n    function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n\\n    function registerValidatorGroup(uint256) external returns (bool);\\n\\n    function deregisterValidatorGroup(uint256) external returns (bool);\\n\\n    function addMember(address) external returns (bool);\\n\\n    function addFirstMember(\\n        address,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function removeMember(address) external returns (bool);\\n\\n    function reorderMember(\\n        address,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function updateCommission() external;\\n\\n    function setNextCommissionUpdate(uint256) external;\\n\\n    function resetSlashingMultiplier() external;\\n\\n    // only owner\\n    function setCommissionUpdateDelay(uint256) external;\\n\\n    function setMaxGroupSize(uint256) external returns (bool);\\n\\n    function setMembershipHistoryLength(uint256) external returns (bool);\\n\\n    function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n\\n    function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n\\n    function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n\\n    function setSlashingMultiplierResetPeriod(uint256) external;\\n\\n    // view functions\\n    function getMaxGroupSize() external view returns (uint256);\\n\\n    function getCommissionUpdateDelay() external view returns (uint256);\\n\\n    function getValidatorScoreParameters() external view returns (uint256, uint256);\\n\\n    function getMembershipHistory(address)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            address[] memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function calculateEpochScore(uint256) external view returns (uint256);\\n\\n    function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n\\n    function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n\\n    function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n\\n    function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n\\n    function getValidator(address account)\\n        external\\n        view\\n        returns (\\n            bytes memory,\\n            bytes memory,\\n            address,\\n            uint256,\\n            address\\n        );\\n\\n    function getValidatorGroup(address)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getGroupNumMembers(address) external view returns (uint256);\\n\\n    function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n\\n    function getGroupsNumMembers(address[] calldata accounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getNumRegisteredValidators() external view returns (uint256);\\n\\n    function groupMembershipInEpoch(\\n        address,\\n        uint256,\\n        uint256\\n    ) external view returns (address);\\n\\n    // only registered contract\\n    function updateEcdsaPublicKey(\\n        address,\\n        address,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function updatePublicKeys(\\n        address,\\n        address,\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n\\n    function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n\\n    function getRegisteredValidators() external view returns (address[] memory);\\n\\n    function getRegisteredValidatorSigners() external view returns (address[] memory);\\n\\n    function getRegisteredValidatorGroups() external view returns (address[] memory);\\n\\n    function isValidatorGroup(address) external view returns (bool);\\n\\n    function isValidator(address) external view returns (bool);\\n\\n    function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n\\n    function getMembershipInLastEpoch(address) external view returns (address);\\n\\n    function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n\\n    // only VM\\n    function updateValidatorScoreFromSigner(address, uint256) external;\\n\\n    function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n    // only slasher\\n    function forceDeaffiliateIfValidator(address) external;\\n\\n    function halveSlashingMultiplier(address) external;\\n}\\n\",\"keccak256\":\"0x8aa4b70dab85380f94c0d7d2538268988d7153060660e48afece5a9c2f92fa6e\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b50608051613ac4610074600039600081816109c901528181610a580152818161142001526114af0152613ac46000f3fe6080604052600436106101405760003560e01c8063715018a6116100b6578063c40da15c1161006f578063c40da15c1461049e578063c494ec1e146104dd578063cd12e5931461051a578063d0ebdbe714610531578063e87c28a71461055a578063f2fde38b1461058357610140565b8063715018a61461038e5780637b103999146103a55780638da5cb5b146103d0578063a730117e146103fb578063abaaecf914610438578063c0c53b8b1461047557610140565b80633659cfe6116101085780633659cfe614610276578063414327311461029f578063481c6a75146102ca57806348fd6ea6146102f55780634c23f22e146103325780634f1ef2861461037257610140565b80630567847f146101455780630d526b9614610182578063121634e8146101bf5780632488d909146101fc5780633127ce3214610239575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190612876565b6105ac565b60405161017991906128b2565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190612876565b610716565b6040516101b691906128b2565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e1919061292b565b6107ae565b6040516101f391906128b2565b60405180910390f35b34801561020857600080fd5b50610223600480360381019061021e9190612876565b6108d8565b60405161023091906129bc565b60405180910390f35b34801561024557600080fd5b50610260600480360381019061025b919061292b565b61092d565b60405161026d9190612a86565b60405180910390f35b34801561028257600080fd5b5061029d6004803603810190610298919061292b565b6109c7565b005b3480156102ab57600080fd5b506102b4610b50565b6040516102c191906128b2565b60405180910390f35b3480156102d657600080fd5b506102df610b56565b6040516102ec9190612ab7565b60405180910390f35b34801561030157600080fd5b5061031c6004803603810190610317919061292b565b610b7c565b60405161032991906128b2565b60405180910390f35b34801561033e57600080fd5b5061035960048036038101906103549190612ad2565b610e98565b6040516103699493929190612b4d565b60405180910390f35b61038c60048036038101906103879190612cd8565b61141e565b005b34801561039a57600080fd5b506103a361155b565b005b3480156103b157600080fd5b506103ba6115e3565b6040516103c79190612d93565b60405180910390f35b3480156103dc57600080fd5b506103e5611609565b6040516103f29190612ab7565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d919061292b565b611633565b60405161042f91906128b2565b60405180910390f35b34801561044457600080fd5b5061045f600480360381019061045a9190612876565b6116e5565b60405161046c91906128b2565b60405180910390f35b34801561048157600080fd5b5061049c60048036038101906104979190612dae565b6116fd565b005b3480156104aa57600080fd5b506104c560048036038101906104c09190612e01565b611807565b6040516104d493929190612e41565b60405180910390f35b3480156104e957600080fd5b5061050460048036038101906104ff9190612876565b6118c4565b60405161051191906128b2565b60405180910390f35b34801561052657600080fd5b5061052f611a2e565b005b34801561053d57600080fd5b506105586004803603810190610553919061292b565b611b2e565b005b34801561056657600080fd5b50610581600480360381019061057c9190612e78565b611bb6565b005b34801561058f57600080fd5b506105aa60048036038101906105a5919061292b565b611d98565b005b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190612ecd565b90506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d59190612ecd565b905060008214806106e65750600081145b156106f5578392505050610711565b8181856107029190612f29565b61070c9190612fb2565b925050505b919050565b600080610721611e90565b73ffffffffffffffffffffffffffffffffffffffff1663c7f758a8846040518263ffffffff1660e01b815260040161075991906128b2565b600060405180830381865afa158015610776573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061079f91906130cc565b50509250505080915050919050565b600080606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001018054905090505b60008111156108c6576000826001018261081890613163565b9250828154811061082c5761082b61318d565b5b906000526020600020015490506000606b600083815260200190815260200160002054905060008114156108615750506107ff565b606c548161086f91906131bc565b4210156108bf57600084600001600084815260200190815260200160002090506108bb868260030154836002015484600101546108ac91906131bc565b6108b691906131bc565b611f57565b9550505b50506107ff565b6108cf836118c4565b92505050919050565b6108e0612804565b606960008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b6060606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054806020026020016040519081016040528092919081815260200182805480156109bb57602002820191906000526020600020905b8154815260200190600101908083116109a7575b50505050509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d90613295565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a95611f71565b73ffffffffffffffffffffffffffffffffffffffff1614610aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae290613327565b60405180910390fd5b610af481611fc8565b610b4d81600067ffffffffffffffff811115610b1357610b12612bad565b5b6040519080825280601f01601f191660200182016040528015610b455781602001600182028036833780820191505090505b506000612047565b50565b606c5481565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c1057336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401610c079190612ab7565b60405180910390fd5b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001018054905090505b6000811115610e475760008260010182610c7990613163565b92508281548110610c8d57610c8c61318d565b5b906000526020600020015490506000606b60008381526020019081526020016000205490506000811415610d44578360010160018560010180549050610cd39190613347565b81548110610ce457610ce361318d565b5b9060005260206000200154846001018481548110610d0557610d0461318d565b5b906000526020600020018190555083600101805480610d2757610d2661337b565b5b600190038181906000526020600020016000905590555050610c60565b606c5481610d5291906131bc565b421015610da65760008460000160008481526020019081526020016000209050610d9e86826003015483600201548460010154610d8f91906131bc565b610d9991906131bc565b611f57565b955050610e40565b8360010160018560010180549050610dbe9190613347565b81548110610dcf57610dce61318d565b5b9060005260206000200154846001018481548110610df057610def61318d565b5b906000526020600020018190555083600101805480610e1257610e1161337b565b5b60019003818190600052602060002001600090559055606b6000838152602001908152602001600020600090555b5050610c60565b6000610e52846118c4565b90507f7c6f785c69c2af01e80f58e72c654a146308c1a70e15028f45ac1d98b08303888582604051610e859291906133aa565b60405180910390a1809350505050919050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f3057336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401610f279190612ab7565b60405180910390fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663536a5f278b6040518263ffffffff1660e01b8152600401610f8d9190612ab7565b602060405180830381865afa158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce9190612ecd565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b81526004016110299190612ab7565b602060405180830381865afa158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a9190612ecd565b61107491906131bc565b905060008114156110bc57896040517f09835c4f0000000000000000000000000000000000000000000000000000000081526004016110b39190612ab7565b60405180910390fd5b600086888a6110cb91906131bc565b6110d591906131bc565b90506110e0826105ac565b811115611124578a6040517f25becec400000000000000000000000000000000000000000000000000000000815260040161111b9190612ab7565b60405180910390fd5b6000606a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160008d815260200190815260200160002090506000606960008e815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508160010154816020018181516111e09190613347565b915081815250508160020154816040018181516111fd9190613347565b9150818152505081600301548160600181815161121a9190613347565b915081815250508b8160200181815161123391906131bc565b915081815250508a8160400181815161124c91906131bc565b91508181525050898160600181815161126591906131bc565b9150818152505060405180608001604052808e815260200182602001518152602001826040015181526020018260600151815250606960008f81526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505060008260000154141561131057826001018d90806001815401808255809150506001900390600052602060002001600090919091909150555b60405180608001604052808e81526020018d81526020018c81526020018b8152508360000160008f8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050507fccddc503efe2d90a6cc16414e99fd2826fd7d72313194d217e36278c0905f9438e8e8e8e8e6040516113a89594939291906133d3565b60405180910390a16000606b60008f81526020019081526020016000205414156113ed576113d58d610716565b606b60008f8152602001908152602001600020819055505b6113f6846118c4565b8160200151826040015183606001519850985098509850505050505095509550955095915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156114ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a490613295565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166114ec611f71565b73ffffffffffffffffffffffffffffffffffffffff1614611542576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153990613327565b60405180910390fd5b61154b82611fc8565b61155782826001612047565b5050565b611563612218565b73ffffffffffffffffffffffffffffffffffffffff16611581611609565b73ffffffffffffffffffffffffffffffffffffffff16146115d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ce90613472565b60405180910390fd5b6115e16000612220565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016116919190612ab7565b602060405180830381865afa1580156116ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d29190612ecd565b90506116dd816105ac565b915050919050565b606b6020528060005260406000206000915090505481565b600060019054906101000a900460ff166117255760008054906101000a900460ff161561172e565b61172d6122e6565b5b61176d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176490613504565b60405180910390fd5b60008060019054906101000a900460ff1615905080156117bd576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6117c6846122f7565b6117cf82612408565b6117d883612220565b6117e0611a2e565b80156118015760008060016101000a81548160ff0219169083151502179055505b50505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461189e57336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016118959190612ab7565b60405180910390fd5b6118ad85856000806000610e98565b909192508093508194508295505050509250925092565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119589190612ecd565b90506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ed9190612ecd565b905060008214806119fe5750600081145b15611a0d578392505050611a29565b808285611a1a9190612f29565b611a249190612fb2565b925050505b919050565b611a36612218565b73ffffffffffffffffffffffffffffffffffffffff16611a54611609565b73ffffffffffffffffffffffffffffffffffffffff1614611aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa190613472565b60405180910390fd5b6000611ab4611e90565b73ffffffffffffffffffffffffffffffffffffffff1663ad78c1096040518163ffffffff1660e01b8152600401602060405180830381865afa158015611afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b229190612ecd565b905080606c8190555050565b611b36612218565b73ffffffffffffffffffffffffffffffffffffffff16611b54611609565b73ffffffffffffffffffffffffffffffffffffffff1614611baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba190613472565b60405180910390fd5b611bb381612463565b50565b611bbe612218565b73ffffffffffffffffffffffffffffffffffffffff16611bdc611609565b73ffffffffffffffffffffffffffffffffffffffff1614611c32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2990613472565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9990613570565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d09906135dc565b60405180910390fd5b81606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b611da0612218565b73ffffffffffffffffffffffffffffffffffffffff16611dbe611609565b73ffffffffffffffffffffffffffffffffffffffff1614611e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0b90613472565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7b9061366e565b60405180910390fd5b611e8d81612220565b50565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed604051602001611edf906136e5565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611f119190613713565b602060405180830381865afa158015611f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f52919061372e565b905090565b600081831015611f675781611f69565b825b905092915050565b6000611f9f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612551565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611fd0612218565b73ffffffffffffffffffffffffffffffffffffffff16611fee611609565b73ffffffffffffffffffffffffffffffffffffffff1614612044576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203b90613472565b60405180910390fd5b50565b6000612051611f71565b905061205c8461255b565b6000835111806120695750815b1561207a576120788484612614565b505b60006120a87f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612641565b90508060000160009054906101000a900460ff166122115760018160000160006101000a81548160ff02191690831515021790555061217485836040516024016120f29190612ab7565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612614565b5060008160000160006101000a81548160ff02191690831515021790555061219a611f71565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612207576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fe906137cd565b60405180910390fd5b6122108561264b565b5b5050505050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006122f13061269a565b15905090565b600060019054906101000a900460ff16612346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233d9061385f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156123c35761ce10606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612405565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600060019054906101000a900460ff16612457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244e9061385f565b60405180910390fd5b61246081612463565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124ca576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b6000819050919050565b612564816126bd565b6125a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259a906138f1565b60405180910390fd5b806125d07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612551565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606126398383604051806060016040528060278152602001613a68602791396126d0565b905092915050565b6000819050919050565b6126548161255b565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080823b905060008111915050919050565b60606126db846126bd565b61271a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271190613983565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161274291906139ea565b600060405180830381855af49150503d806000811461277d576040519150601f19603f3d011682016040523d82523d6000602084013e612782565b606091505b509150915061279282828661279d565b925050509392505050565b606083156127ad578290506127fd565b6000835111156127c05782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f49190613a45565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61285381612840565b811461285e57600080fd5b50565b6000813590506128708161284a565b92915050565b60006020828403121561288c5761288b612836565b5b600061289a84828501612861565b91505092915050565b6128ac81612840565b82525050565b60006020820190506128c760008301846128a3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128f8826128cd565b9050919050565b612908816128ed565b811461291357600080fd5b50565b600081359050612925816128ff565b92915050565b60006020828403121561294157612940612836565b5b600061294f84828501612916565b91505092915050565b61296181612840565b82525050565b60808201600082015161297d6000850182612958565b5060208201516129906020850182612958565b5060408201516129a36040850182612958565b5060608201516129b66060850182612958565b50505050565b60006080820190506129d16000830184612967565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612a0f8383612958565b60208301905092915050565b6000602082019050919050565b6000612a33826129d7565b612a3d81856129e2565b9350612a48836129f3565b8060005b83811015612a79578151612a608882612a03565b9750612a6b83612a1b565b925050600181019050612a4c565b5085935050505092915050565b60006020820190508181036000830152612aa08184612a28565b905092915050565b612ab1816128ed565b82525050565b6000602082019050612acc6000830184612aa8565b92915050565b600080600080600060a08688031215612aee57612aed612836565b5b6000612afc88828901612916565b9550506020612b0d88828901612861565b9450506040612b1e88828901612861565b9350506060612b2f88828901612861565b9250506080612b4088828901612861565b9150509295509295909350565b6000608082019050612b6260008301876128a3565b612b6f60208301866128a3565b612b7c60408301856128a3565b612b8960608301846128a3565b95945050505050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612be582612b9c565b810181811067ffffffffffffffff82111715612c0457612c03612bad565b5b80604052505050565b6000612c1761282c565b9050612c238282612bdc565b919050565b600067ffffffffffffffff821115612c4357612c42612bad565b5b612c4c82612b9c565b9050602081019050919050565b82818337600083830152505050565b6000612c7b612c7684612c28565b612c0d565b905082815260208101848484011115612c9757612c96612b97565b5b612ca2848285612c59565b509392505050565b600082601f830112612cbf57612cbe612b92565b5b8135612ccf848260208601612c68565b91505092915050565b60008060408385031215612cef57612cee612836565b5b6000612cfd85828601612916565b925050602083013567ffffffffffffffff811115612d1e57612d1d61283b565b5b612d2a85828601612caa565b9150509250929050565b6000819050919050565b6000612d59612d54612d4f846128cd565b612d34565b6128cd565b9050919050565b6000612d6b82612d3e565b9050919050565b6000612d7d82612d60565b9050919050565b612d8d81612d72565b82525050565b6000602082019050612da86000830184612d84565b92915050565b600080600060608486031215612dc757612dc6612836565b5b6000612dd586828701612916565b9350506020612de686828701612916565b9250506040612df786828701612916565b9150509250925092565b60008060408385031215612e1857612e17612836565b5b6000612e2685828601612916565b9250506020612e3785828601612861565b9150509250929050565b6000606082019050612e5660008301866128a3565b612e6360208301856128a3565b612e7060408301846128a3565b949350505050565b60008060408385031215612e8f57612e8e612836565b5b6000612e9d85828601612916565b9250506020612eae85828601612916565b9150509250929050565b600081519050612ec78161284a565b92915050565b600060208284031215612ee357612ee2612836565b5b6000612ef184828501612eb8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f3482612840565b9150612f3f83612840565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612f7857612f77612efa565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612fbd82612840565b9150612fc883612840565b925082612fd857612fd7612f83565b5b828204905092915050565b600081519050612ff2816128ff565b92915050565b600067ffffffffffffffff82111561301357613012612bad565b5b61301c82612b9c565b9050602081019050919050565b60005b8381101561304757808201518184015260208101905061302c565b83811115613056576000848401525b50505050565b600061306f61306a84612ff8565b612c0d565b90508281526020810184848401111561308b5761308a612b97565b5b613096848285613029565b509392505050565b600082601f8301126130b3576130b2612b92565b5b81516130c384826020860161305c565b91505092915050565b600080600080600060a086880312156130e8576130e7612836565b5b60006130f688828901612fe3565b955050602061310788828901612eb8565b945050604061311888828901612eb8565b935050606061312988828901612eb8565b925050608086015167ffffffffffffffff81111561314a5761314961283b565b5b6131568882890161309e565b9150509295509295909350565b600061316e82612840565b9150600082141561318257613181612efa565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006131c782612840565b91506131d283612840565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561320757613206612efa565b5b828201905092915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b600061327f602c83613212565b915061328a82613223565b604082019050919050565b600060208201905081810360008301526132ae81613272565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613311602c83613212565b915061331c826132b5565b604082019050919050565b6000602082019050818103600083015261334081613304565b9050919050565b600061335282612840565b915061335d83612840565b9250828210156133705761336f612efa565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006040820190506133bf6000830185612aa8565b6133cc60208301846128a3565b9392505050565b600060a0820190506133e86000830188612aa8565b6133f560208301876128a3565b61340260408301866128a3565b61340f60608301856128a3565b61341c60808301846128a3565b9695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061345c602083613212565b915061346782613426565b602082019050919050565b6000602082019050818103600083015261348b8161344f565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006134ee602e83613212565b91506134f982613492565b604082019050919050565b6000602082019050818103600083015261351d816134e1565b9050919050565b7f7374616b656443656c6f206e756c6c2061646472657373000000000000000000600082015250565b600061355a601783613212565b915061356582613524565b602082019050919050565b600060208201905081810360008301526135898161354d565b9050919050565b7f6163636f756e74206e756c6c2061646472657373000000000000000000000000600082015250565b60006135c6601483613212565b91506135d182613590565b602082019050919050565b600060208201905081810360008301526135f5816135b9565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613658602683613212565b9150613663826135fc565b604082019050919050565b600060208201905081810360008301526136878161364b565b9050919050565b600081905092915050565b7f476f7665726e616e636500000000000000000000000000000000000000000000600082015250565b60006136cf600a8361368e565b91506136da82613699565b600a82019050919050565b60006136f0826136c2565b9150819050919050565b6000819050919050565b61370d816136fa565b82525050565b60006020820190506137286000830184613704565b92915050565b60006020828403121561374457613743612836565b5b600061375284828501612fe3565b91505092915050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b60006137b7602f83613212565b91506137c28261375b565b604082019050919050565b600060208201905081810360008301526137e6816137aa565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613849602b83613212565b9150613854826137ed565b604082019050919050565b600060208201905081810360008301526138788161383c565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006138db602d83613212565b91506138e68261387f565b604082019050919050565b6000602082019050818103600083015261390a816138ce565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061396d602683613212565b915061397882613911565b604082019050919050565b6000602082019050818103600083015261399c81613960565b9050919050565b600081519050919050565b600081905092915050565b60006139c4826139a3565b6139ce81856139ae565b93506139de818560208601613029565b80840191505092915050565b60006139f682846139b9565b915081905092915050565b600081519050919050565b6000613a1782613a01565b613a218185613212565b9350613a31818560208601613029565b613a3a81612b9c565b840191505092915050565b60006020820190508181036000830152613a5f8184613a0c565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d00213211ac8a13cb7a4ca5a14e70f180b512a8c5864c07cb9564aacc8d3ca8364736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c8063715018a6116100b6578063c40da15c1161006f578063c40da15c1461049e578063c494ec1e146104dd578063cd12e5931461051a578063d0ebdbe714610531578063e87c28a71461055a578063f2fde38b1461058357610140565b8063715018a61461038e5780637b103999146103a55780638da5cb5b146103d0578063a730117e146103fb578063abaaecf914610438578063c0c53b8b1461047557610140565b80633659cfe6116101085780633659cfe614610276578063414327311461029f578063481c6a75146102ca57806348fd6ea6146102f55780634c23f22e146103325780634f1ef2861461037257610140565b80630567847f146101455780630d526b9614610182578063121634e8146101bf5780632488d909146101fc5780633127ce3214610239575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190612876565b6105ac565b60405161017991906128b2565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190612876565b610716565b6040516101b691906128b2565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e1919061292b565b6107ae565b6040516101f391906128b2565b60405180910390f35b34801561020857600080fd5b50610223600480360381019061021e9190612876565b6108d8565b60405161023091906129bc565b60405180910390f35b34801561024557600080fd5b50610260600480360381019061025b919061292b565b61092d565b60405161026d9190612a86565b60405180910390f35b34801561028257600080fd5b5061029d6004803603810190610298919061292b565b6109c7565b005b3480156102ab57600080fd5b506102b4610b50565b6040516102c191906128b2565b60405180910390f35b3480156102d657600080fd5b506102df610b56565b6040516102ec9190612ab7565b60405180910390f35b34801561030157600080fd5b5061031c6004803603810190610317919061292b565b610b7c565b60405161032991906128b2565b60405180910390f35b34801561033e57600080fd5b5061035960048036038101906103549190612ad2565b610e98565b6040516103699493929190612b4d565b60405180910390f35b61038c60048036038101906103879190612cd8565b61141e565b005b34801561039a57600080fd5b506103a361155b565b005b3480156103b157600080fd5b506103ba6115e3565b6040516103c79190612d93565b60405180910390f35b3480156103dc57600080fd5b506103e5611609565b6040516103f29190612ab7565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d919061292b565b611633565b60405161042f91906128b2565b60405180910390f35b34801561044457600080fd5b5061045f600480360381019061045a9190612876565b6116e5565b60405161046c91906128b2565b60405180910390f35b34801561048157600080fd5b5061049c60048036038101906104979190612dae565b6116fd565b005b3480156104aa57600080fd5b506104c560048036038101906104c09190612e01565b611807565b6040516104d493929190612e41565b60405180910390f35b3480156104e957600080fd5b5061050460048036038101906104ff9190612876565b6118c4565b60405161051191906128b2565b60405180910390f35b34801561052657600080fd5b5061052f611a2e565b005b34801561053d57600080fd5b506105586004803603810190610553919061292b565b611b2e565b005b34801561056657600080fd5b50610581600480360381019061057c9190612e78565b611bb6565b005b34801561058f57600080fd5b506105aa60048036038101906105a5919061292b565b611d98565b005b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190612ecd565b90506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d59190612ecd565b905060008214806106e65750600081145b156106f5578392505050610711565b8181856107029190612f29565b61070c9190612fb2565b925050505b919050565b600080610721611e90565b73ffffffffffffffffffffffffffffffffffffffff1663c7f758a8846040518263ffffffff1660e01b815260040161075991906128b2565b600060405180830381865afa158015610776573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061079f91906130cc565b50509250505080915050919050565b600080606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001018054905090505b60008111156108c6576000826001018261081890613163565b9250828154811061082c5761082b61318d565b5b906000526020600020015490506000606b600083815260200190815260200160002054905060008114156108615750506107ff565b606c548161086f91906131bc565b4210156108bf57600084600001600084815260200190815260200160002090506108bb868260030154836002015484600101546108ac91906131bc565b6108b691906131bc565b611f57565b9550505b50506107ff565b6108cf836118c4565b92505050919050565b6108e0612804565b606960008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b6060606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054806020026020016040519081016040528092919081815260200182805480156109bb57602002820191906000526020600020905b8154815260200190600101908083116109a7575b50505050509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d90613295565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a95611f71565b73ffffffffffffffffffffffffffffffffffffffff1614610aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae290613327565b60405180910390fd5b610af481611fc8565b610b4d81600067ffffffffffffffff811115610b1357610b12612bad565b5b6040519080825280601f01601f191660200182016040528015610b455781602001600182028036833780820191505090505b506000612047565b50565b606c5481565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c1057336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401610c079190612ab7565b60405180910390fd5b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001018054905090505b6000811115610e475760008260010182610c7990613163565b92508281548110610c8d57610c8c61318d565b5b906000526020600020015490506000606b60008381526020019081526020016000205490506000811415610d44578360010160018560010180549050610cd39190613347565b81548110610ce457610ce361318d565b5b9060005260206000200154846001018481548110610d0557610d0461318d565b5b906000526020600020018190555083600101805480610d2757610d2661337b565b5b600190038181906000526020600020016000905590555050610c60565b606c5481610d5291906131bc565b421015610da65760008460000160008481526020019081526020016000209050610d9e86826003015483600201548460010154610d8f91906131bc565b610d9991906131bc565b611f57565b955050610e40565b8360010160018560010180549050610dbe9190613347565b81548110610dcf57610dce61318d565b5b9060005260206000200154846001018481548110610df057610def61318d565b5b906000526020600020018190555083600101805480610e1257610e1161337b565b5b60019003818190600052602060002001600090559055606b6000838152602001908152602001600020600090555b5050610c60565b6000610e52846118c4565b90507f7c6f785c69c2af01e80f58e72c654a146308c1a70e15028f45ac1d98b08303888582604051610e859291906133aa565b60405180910390a1809350505050919050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f3057336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401610f279190612ab7565b60405180910390fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663536a5f278b6040518263ffffffff1660e01b8152600401610f8d9190612ab7565b602060405180830381865afa158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce9190612ecd565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b81526004016110299190612ab7565b602060405180830381865afa158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a9190612ecd565b61107491906131bc565b905060008114156110bc57896040517f09835c4f0000000000000000000000000000000000000000000000000000000081526004016110b39190612ab7565b60405180910390fd5b600086888a6110cb91906131bc565b6110d591906131bc565b90506110e0826105ac565b811115611124578a6040517f25becec400000000000000000000000000000000000000000000000000000000815260040161111b9190612ab7565b60405180910390fd5b6000606a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160008d815260200190815260200160002090506000606960008e815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508160010154816020018181516111e09190613347565b915081815250508160020154816040018181516111fd9190613347565b9150818152505081600301548160600181815161121a9190613347565b915081815250508b8160200181815161123391906131bc565b915081815250508a8160400181815161124c91906131bc565b91508181525050898160600181815161126591906131bc565b9150818152505060405180608001604052808e815260200182602001518152602001826040015181526020018260600151815250606960008f81526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505060008260000154141561131057826001018d90806001815401808255809150506001900390600052602060002001600090919091909150555b60405180608001604052808e81526020018d81526020018c81526020018b8152508360000160008f8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050507fccddc503efe2d90a6cc16414e99fd2826fd7d72313194d217e36278c0905f9438e8e8e8e8e6040516113a89594939291906133d3565b60405180910390a16000606b60008f81526020019081526020016000205414156113ed576113d58d610716565b606b60008f8152602001908152602001600020819055505b6113f6846118c4565b8160200151826040015183606001519850985098509850505050505095509550955095915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156114ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a490613295565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166114ec611f71565b73ffffffffffffffffffffffffffffffffffffffff1614611542576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153990613327565b60405180910390fd5b61154b82611fc8565b61155782826001612047565b5050565b611563612218565b73ffffffffffffffffffffffffffffffffffffffff16611581611609565b73ffffffffffffffffffffffffffffffffffffffff16146115d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ce90613472565b60405180910390fd5b6115e16000612220565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016116919190612ab7565b602060405180830381865afa1580156116ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d29190612ecd565b90506116dd816105ac565b915050919050565b606b6020528060005260406000206000915090505481565b600060019054906101000a900460ff166117255760008054906101000a900460ff161561172e565b61172d6122e6565b5b61176d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176490613504565b60405180910390fd5b60008060019054906101000a900460ff1615905080156117bd576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6117c6846122f7565b6117cf82612408565b6117d883612220565b6117e0611a2e565b80156118015760008060016101000a81548160ff0219169083151502179055505b50505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461189e57336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016118959190612ab7565b60405180910390fd5b6118ad85856000806000610e98565b909192508093508194508295505050509250925092565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119589190612ecd565b90506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ed9190612ecd565b905060008214806119fe5750600081145b15611a0d578392505050611a29565b808285611a1a9190612f29565b611a249190612fb2565b925050505b919050565b611a36612218565b73ffffffffffffffffffffffffffffffffffffffff16611a54611609565b73ffffffffffffffffffffffffffffffffffffffff1614611aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa190613472565b60405180910390fd5b6000611ab4611e90565b73ffffffffffffffffffffffffffffffffffffffff1663ad78c1096040518163ffffffff1660e01b8152600401602060405180830381865afa158015611afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b229190612ecd565b905080606c8190555050565b611b36612218565b73ffffffffffffffffffffffffffffffffffffffff16611b54611609565b73ffffffffffffffffffffffffffffffffffffffff1614611baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba190613472565b60405180910390fd5b611bb381612463565b50565b611bbe612218565b73ffffffffffffffffffffffffffffffffffffffff16611bdc611609565b73ffffffffffffffffffffffffffffffffffffffff1614611c32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2990613472565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9990613570565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d09906135dc565b60405180910390fd5b81606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b611da0612218565b73ffffffffffffffffffffffffffffffffffffffff16611dbe611609565b73ffffffffffffffffffffffffffffffffffffffff1614611e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0b90613472565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7b9061366e565b60405180910390fd5b611e8d81612220565b50565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed604051602001611edf906136e5565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611f119190613713565b602060405180830381865afa158015611f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f52919061372e565b905090565b600081831015611f675781611f69565b825b905092915050565b6000611f9f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612551565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611fd0612218565b73ffffffffffffffffffffffffffffffffffffffff16611fee611609565b73ffffffffffffffffffffffffffffffffffffffff1614612044576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203b90613472565b60405180910390fd5b50565b6000612051611f71565b905061205c8461255b565b6000835111806120695750815b1561207a576120788484612614565b505b60006120a87f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612641565b90508060000160009054906101000a900460ff166122115760018160000160006101000a81548160ff02191690831515021790555061217485836040516024016120f29190612ab7565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612614565b5060008160000160006101000a81548160ff02191690831515021790555061219a611f71565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612207576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fe906137cd565b60405180910390fd5b6122108561264b565b5b5050505050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006122f13061269a565b15905090565b600060019054906101000a900460ff16612346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233d9061385f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156123c35761ce10606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612405565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600060019054906101000a900460ff16612457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244e9061385f565b60405180910390fd5b61246081612463565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124ca576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b6000819050919050565b612564816126bd565b6125a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259a906138f1565b60405180910390fd5b806125d07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612551565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606126398383604051806060016040528060278152602001613a68602791396126d0565b905092915050565b6000819050919050565b6126548161255b565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080823b905060008111915050919050565b60606126db846126bd565b61271a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271190613983565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161274291906139ea565b600060405180830381855af49150503d806000811461277d576040519150601f19603f3d011682016040523d82523d6000602084013e612782565b606091505b509150915061279282828661279d565b925050509392505050565b606083156127ad578290506127fd565b6000835111156127c05782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f49190613a45565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61285381612840565b811461285e57600080fd5b50565b6000813590506128708161284a565b92915050565b60006020828403121561288c5761288b612836565b5b600061289a84828501612861565b91505092915050565b6128ac81612840565b82525050565b60006020820190506128c760008301846128a3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128f8826128cd565b9050919050565b612908816128ed565b811461291357600080fd5b50565b600081359050612925816128ff565b92915050565b60006020828403121561294157612940612836565b5b600061294f84828501612916565b91505092915050565b61296181612840565b82525050565b60808201600082015161297d6000850182612958565b5060208201516129906020850182612958565b5060408201516129a36040850182612958565b5060608201516129b66060850182612958565b50505050565b60006080820190506129d16000830184612967565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612a0f8383612958565b60208301905092915050565b6000602082019050919050565b6000612a33826129d7565b612a3d81856129e2565b9350612a48836129f3565b8060005b83811015612a79578151612a608882612a03565b9750612a6b83612a1b565b925050600181019050612a4c565b5085935050505092915050565b60006020820190508181036000830152612aa08184612a28565b905092915050565b612ab1816128ed565b82525050565b6000602082019050612acc6000830184612aa8565b92915050565b600080600080600060a08688031215612aee57612aed612836565b5b6000612afc88828901612916565b9550506020612b0d88828901612861565b9450506040612b1e88828901612861565b9350506060612b2f88828901612861565b9250506080612b4088828901612861565b9150509295509295909350565b6000608082019050612b6260008301876128a3565b612b6f60208301866128a3565b612b7c60408301856128a3565b612b8960608301846128a3565b95945050505050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612be582612b9c565b810181811067ffffffffffffffff82111715612c0457612c03612bad565b5b80604052505050565b6000612c1761282c565b9050612c238282612bdc565b919050565b600067ffffffffffffffff821115612c4357612c42612bad565b5b612c4c82612b9c565b9050602081019050919050565b82818337600083830152505050565b6000612c7b612c7684612c28565b612c0d565b905082815260208101848484011115612c9757612c96612b97565b5b612ca2848285612c59565b509392505050565b600082601f830112612cbf57612cbe612b92565b5b8135612ccf848260208601612c68565b91505092915050565b60008060408385031215612cef57612cee612836565b5b6000612cfd85828601612916565b925050602083013567ffffffffffffffff811115612d1e57612d1d61283b565b5b612d2a85828601612caa565b9150509250929050565b6000819050919050565b6000612d59612d54612d4f846128cd565b612d34565b6128cd565b9050919050565b6000612d6b82612d3e565b9050919050565b6000612d7d82612d60565b9050919050565b612d8d81612d72565b82525050565b6000602082019050612da86000830184612d84565b92915050565b600080600060608486031215612dc757612dc6612836565b5b6000612dd586828701612916565b9350506020612de686828701612916565b9250506040612df786828701612916565b9150509250925092565b60008060408385031215612e1857612e17612836565b5b6000612e2685828601612916565b9250506020612e3785828601612861565b9150509250929050565b6000606082019050612e5660008301866128a3565b612e6360208301856128a3565b612e7060408301846128a3565b949350505050565b60008060408385031215612e8f57612e8e612836565b5b6000612e9d85828601612916565b9250506020612eae85828601612916565b9150509250929050565b600081519050612ec78161284a565b92915050565b600060208284031215612ee357612ee2612836565b5b6000612ef184828501612eb8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f3482612840565b9150612f3f83612840565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612f7857612f77612efa565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612fbd82612840565b9150612fc883612840565b925082612fd857612fd7612f83565b5b828204905092915050565b600081519050612ff2816128ff565b92915050565b600067ffffffffffffffff82111561301357613012612bad565b5b61301c82612b9c565b9050602081019050919050565b60005b8381101561304757808201518184015260208101905061302c565b83811115613056576000848401525b50505050565b600061306f61306a84612ff8565b612c0d565b90508281526020810184848401111561308b5761308a612b97565b5b613096848285613029565b509392505050565b600082601f8301126130b3576130b2612b92565b5b81516130c384826020860161305c565b91505092915050565b600080600080600060a086880312156130e8576130e7612836565b5b60006130f688828901612fe3565b955050602061310788828901612eb8565b945050604061311888828901612eb8565b935050606061312988828901612eb8565b925050608086015167ffffffffffffffff81111561314a5761314961283b565b5b6131568882890161309e565b9150509295509295909350565b600061316e82612840565b9150600082141561318257613181612efa565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006131c782612840565b91506131d283612840565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561320757613206612efa565b5b828201905092915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b600061327f602c83613212565b915061328a82613223565b604082019050919050565b600060208201905081810360008301526132ae81613272565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613311602c83613212565b915061331c826132b5565b604082019050919050565b6000602082019050818103600083015261334081613304565b9050919050565b600061335282612840565b915061335d83612840565b9250828210156133705761336f612efa565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006040820190506133bf6000830185612aa8565b6133cc60208301846128a3565b9392505050565b600060a0820190506133e86000830188612aa8565b6133f560208301876128a3565b61340260408301866128a3565b61340f60608301856128a3565b61341c60808301846128a3565b9695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061345c602083613212565b915061346782613426565b602082019050919050565b6000602082019050818103600083015261348b8161344f565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006134ee602e83613212565b91506134f982613492565b604082019050919050565b6000602082019050818103600083015261351d816134e1565b9050919050565b7f7374616b656443656c6f206e756c6c2061646472657373000000000000000000600082015250565b600061355a601783613212565b915061356582613524565b602082019050919050565b600060208201905081810360008301526135898161354d565b9050919050565b7f6163636f756e74206e756c6c2061646472657373000000000000000000000000600082015250565b60006135c6601483613212565b91506135d182613590565b602082019050919050565b600060208201905081810360008301526135f5816135b9565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613658602683613212565b9150613663826135fc565b604082019050919050565b600060208201905081810360008301526136878161364b565b9050919050565b600081905092915050565b7f476f7665726e616e636500000000000000000000000000000000000000000000600082015250565b60006136cf600a8361368e565b91506136da82613699565b600a82019050919050565b60006136f0826136c2565b9150819050919050565b6000819050919050565b61370d816136fa565b82525050565b60006020820190506137286000830184613704565b92915050565b60006020828403121561374457613743612836565b5b600061375284828501612fe3565b91505092915050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b60006137b7602f83613212565b91506137c28261375b565b604082019050919050565b600060208201905081810360008301526137e6816137aa565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613849602b83613212565b9150613854826137ed565b604082019050919050565b600060208201905081810360008301526138788161383c565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006138db602d83613212565b91506138e68261387f565b604082019050919050565b6000602082019050818103600083015261390a816138ce565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061396d602683613212565b915061397882613911565b604082019050919050565b6000602082019050818103600083015261399c81613960565b9050919050565b600081519050919050565b600081905092915050565b60006139c4826139a3565b6139ce81856139ae565b93506139de818560208601613029565b80840191505092915050565b60006139f682846139b9565b915081905092915050565b600081519050919050565b6000613a1782613a01565b613a218185613212565b9350613a31818560208601613029565b613a3a81612b9c565b840191505092915050565b60006020820190508181036000830152613a5f8184613a0c565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d00213211ac8a13cb7a4ca5a14e70f180b512a8c5864c07cb9564aacc8d3ca8364736f6c634300080b0033",
  "devdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "params": {
            "caller": "`msg.sender` that called the function."
          }
        }
      ],
      "NoStakedCelo(address)": [
        {
          "params": {
            "account": "The account's address."
          }
        }
      ],
      "NotEnoughStakedCelo(address)": [
        {
          "params": {
            "account": "The account's address."
          }
        }
      ]
    },
    "events": {
      "LockedStCeloInVoting(address,uint256)": {
        "params": {
          "account": "The account's address.",
          "lockedCelo": "The stCELO that is still being locked."
        }
      },
      "ProposalVoted(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "abstainVotes": "The abstain votes.",
          "noVotes": "The no votes.",
          "proposalId": "The proposal UIID.",
          "voter": "The voter's address.",
          "yesVotes": "The yes votes."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getLockedStCeloInVoting(address)": {
        "params": {
          "beneficiary": "The account."
        }
      },
      "getProposalTimestamp(uint256)": {
        "params": {
          "proposalId": "The proposal UUID."
        },
        "returns": {
          "_0": "The timestamp of proposal."
        }
      },
      "getVoteRecord(uint256)": {
        "params": {
          "proposalId": "The proposal UUID."
        }
      },
      "getVoteWeight(address)": {
        "params": {
          "beneficiary": "The account."
        }
      },
      "getVotedStillRelevantProposals(address)": {
        "params": {
          "voter": "The voter."
        },
        "returns": {
          "_0": "Proposals in referendum stage. (For up to date result call updateHistoryAndReturnLockedStCeloInVoting first)"
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "_manager": "The address of the contract manager.",
          "_owner": "The address of the contract owner.",
          "_registry": "The address of the Celo registry."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeVotes(address,uint256)": {
        "params": {
          "accountVoter": "The account that is voting.",
          "proposalId": "The ID of the proposal to vote on."
        },
        "returns": {
          "totalAbstainVotes": "SUM of all AccountContract abstain votes for proposal.",
          "totalNoVotes": "SUM of all AccountContract no votes for proposal.",
          "totalYesVotes": "SUM of all AccountContract yes votes for proposal."
        }
      },
      "setDependencies(address,address)": {
        "details": "Manager, Account and StakedCelo all reference each other so we need a way of setting these after all contracts are deployed and initialized.",
        "params": {
          "_account": "The address of the Account contract.",
          "_stakedCelo": "the address of the StakedCelo contract."
        }
      },
      "setManager(address)": {
        "params": {
          "_manager": "The new manager address."
        }
      },
      "toCelo(uint256)": {
        "params": {
          "stCeloAmount": "The amount of stCELO burned."
        },
        "returns": {
          "_0": "The amount of CELO that should be withdrawn."
        }
      },
      "toStakedCelo(uint256)": {
        "params": {
          "celoAmount": "The amount of CELO deposited."
        },
        "returns": {
          "_0": "The amount of stCELO that should be minted."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateHistoryAndReturnLockedStCeloInVoting(address)": {
        "params": {
          "beneficiary": "The beneficiary."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "voteProposal(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "abstainVotes": "The abstain votes weight.",
          "accountVoter": "The account that is voting.",
          "noVotes": "The no votes weight.",
          "proposalId": "The ID of the proposal to vote on.",
          "yesVotes": "The yes votes weight."
        },
        "returns": {
          "_0": "totalWeights Account's staked celo balance.",
          "totalAbstainVotes": "SUM of all AccountContract abstain votes for proposal.",
          "totalNoVotes": "SUM of all AccountContract no votes for proposal.",
          "totalYesVotes": "SUM of all AccountContract yes votes for proposal."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "notice": "Used when an `onlyManager` function is called by a non-manager."
        }
      ],
      "NoStakedCelo(address)": [
        {
          "notice": "Used when attempting to vote when there is no stCelo."
        }
      ],
      "NotEnoughStakedCelo(address)": [
        {
          "notice": "Used when attempting to vote when there is not enough of stCelo."
        }
      ],
      "NullAddress()": [
        {
          "notice": "Used when a passed address is address(0)."
        }
      ]
    },
    "events": {
      "LockedStCeloInVoting(address,uint256)": {
        "notice": "Emitted when unlock of stCELO is requested."
      },
      "ManagerSet(address)": {
        "notice": "Emitted when the manager is initially set or later modified."
      },
      "ProposalVoted(address,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when an account votes for governance proposal."
      }
    },
    "kind": "user",
    "methods": {
      "getLockedStCeloInVoting(address)": {
        "notice": "Retuns currently locked celo in voting. (This celo cannot be unlocked.)"
      },
      "getProposalTimestamp(uint256)": {
        "notice": "Returns save timestamp of proposal."
      },
      "getVoteRecord(uint256)": {
        "notice": "Gets vote record of proposal."
      },
      "getVoteWeight(address)": {
        "notice": "Returns vote weight of account owning stCelo."
      },
      "getVotedStillRelevantProposals(address)": {
        "notice": "Retuns proposals still in referendum stage that voter voted on."
      },
      "initialize(address,address,address)": {
        "notice": "Initialize the contract with registry and owner."
      },
      "proposalTimestamps(uint256)": {
        "notice": "Timestamps of every voted proposal."
      },
      "referendumDuration()": {
        "notice": "Duration of proposal in referendum stage (It has to be same as in Governance contrtact)."
      },
      "registry()": {
        "notice": "The Registry."
      },
      "revokeVotes(address,uint256)": {
        "notice": "Revokes votes on already voted proposal."
      },
      "setDependencies(address,address)": {
        "notice": "Set this contract's dependencies in the StakedCelo system."
      },
      "setManager(address)": {
        "notice": "Sets the manager address."
      },
      "setReferendumDuration()": {
        "notice": "Sets referendum duration. It should always be the same as in Governance."
      },
      "toCelo(uint256)": {
        "notice": "Computes the amount of CELO that should be withdrawn for a given amount of stCELO burned."
      },
      "toStakedCelo(uint256)": {
        "notice": "Computes the amount of stCELO that should be minted for a given amount of CELO deposited."
      },
      "updateHistoryAndReturnLockedStCeloInVoting(address)": {
        "notice": "Retuns currently locked celo in voting. (This celo cannot be unlocked.) And it will remove voted proposals from account history if appropriate."
      },
      "voteProposal(address,uint256,uint256,uint256,uint256)": {
        "notice": "Votes on a proposal in the referendum stage."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Vote.sol:Vote",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Vote.sol:Vote",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1197,
        "contract": "contracts/Vote.sol:Vote",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Vote.sol:Vote",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Vote.sol:Vote",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10777,
        "contract": "contracts/Vote.sol:Vote",
        "label": "registry",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRegistry)11786"
      },
      {
        "astId": 5271,
        "contract": "contracts/Vote.sol:Vote",
        "label": "manager",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 7870,
        "contract": "contracts/Vote.sol:Vote",
        "label": "stakedCelo",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IStakedCelo)11854"
      },
      {
        "astId": 7874,
        "contract": "contracts/Vote.sol:Vote",
        "label": "account",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IAccount)10923"
      },
      {
        "astId": 7880,
        "contract": "contracts/Vote.sol:Vote",
        "label": "voteRecords",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_struct(ProposalVoteRecord)7818_storage)"
      },
      {
        "astId": 7886,
        "contract": "contracts/Vote.sol:Vote",
        "label": "voters",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(Voter)7827_storage)"
      },
      {
        "astId": 7891,
        "contract": "contracts/Vote.sol:Vote",
        "label": "proposalTimestamps",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7894,
        "contract": "contracts/Vote.sol:Vote",
        "label": "referendumDuration",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccount)10923": {
        "encoding": "inplace",
        "label": "contract IAccount",
        "numberOfBytes": "20"
      },
      "t_contract(IRegistry)11786": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IStakedCelo)11854": {
        "encoding": "inplace",
        "label": "contract IStakedCelo",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Voter)7827_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vote.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)7827_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVoteRecord)7818_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vote.ProposalVoteRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVoteRecord)7818_storage"
      },
      "t_mapping(t_uint256,t_struct(VoterRecord)7836_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vote.VoterRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(VoterRecord)7836_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ProposalVoteRecord)7818_storage": {
        "encoding": "inplace",
        "label": "struct Vote.ProposalVoteRecord",
        "members": [
          {
            "astId": 7811,
            "contract": "contracts/Vote.sol:Vote",
            "label": "proposalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7813,
            "contract": "contracts/Vote.sol:Vote",
            "label": "yesVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7815,
            "contract": "contracts/Vote.sol:Vote",
            "label": "noVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7817,
            "contract": "contracts/Vote.sol:Vote",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Voter)7827_storage": {
        "encoding": "inplace",
        "label": "struct Vote.Voter",
        "members": [
          {
            "astId": 7823,
            "contract": "contracts/Vote.sol:Vote",
            "label": "proposalVotes",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(VoterRecord)7836_storage)"
          },
          {
            "astId": 7826,
            "contract": "contracts/Vote.sol:Vote",
            "label": "votedProposalIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VoterRecord)7836_storage": {
        "encoding": "inplace",
        "label": "struct Vote.VoterRecord",
        "members": [
          {
            "astId": 7829,
            "contract": "contracts/Vote.sol:Vote",
            "label": "proposalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7831,
            "contract": "contracts/Vote.sol:Vote",
            "label": "yesVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7833,
            "contract": "contracts/Vote.sol:Vote",
            "label": "noVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7835,
            "contract": "contracts/Vote.sol:Vote",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}