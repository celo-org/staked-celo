{
  "address": "0x9bf9d7985c0753855Fe4862e3fdb87FEec90A875",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZeroNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NoStakedCelo",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotEnoughStakedCelo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposalNotExpired",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCelo",
          "type": "uint256"
        }
      ],
      "name": "LockedStCeloInVoting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        }
      ],
      "name": "PauserSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAUSED_POSITION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_POSITION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "deleteExpiredProposalTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "deleteExpiredVoterProposalId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getLockedStCeloInVoting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReferendumDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getVoteRecord",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yesVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "noVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "abstainVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vote.ProposalVoteRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getVoteWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getVotedStillRelevantProposals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountVoter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "revokeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalYesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalNoVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAbstainVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakedCelo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "setDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stCeloAmount",
          "type": "uint256"
        }
      ],
      "name": "toCelo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "celoAmount",
          "type": "uint256"
        }
      ],
      "name": "toStakedCelo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "updateHistoryAndReturnLockedStCeloInVoting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountVoter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "name": "voteProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalNoVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAbstainVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x554637c5b3a0a8a175eea1c3aa98af66e28ac8a757e1c7373aac02aa700ffab5",
  "receipt": {
    "to": null,
    "from": "0x5bC1C4C1D67C5E4384189302BC653A611568a788",
    "contractAddress": "0x9bf9d7985c0753855Fe4862e3fdb87FEec90A875",
    "transactionIndex": 0,
    "gasUsed": "3757981",
    "logsBloom": "0x
    "blockHash": "0x53c66c991c1aa8100e88980e8a5c9d0fcf3237ffd27952b3610a5f01c5eec480",
    "transactionHash": "0x554637c5b3a0a8a175eea1c3aa98af66e28ac8a757e1c7373aac02aa700ffab5",
    "logs": [],
    "blockNumber": 23564463,
    "cumulativeGasUsed": "3757981",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "4e72b277d948a49a90e2a93328ecbb49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZeroNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NoStakedCelo\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotEnoughStakedCelo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalNotExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCelo\",\"type\":\"uint256\"}],\"name\":\"LockedStCeloInVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"PauserSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAUSED_POSITION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_POSITION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"deleteExpiredProposalTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteExpiredVoterProposalId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getLockedStCeloInVoting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferendumDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getVoteRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct Vote.ProposalVoteRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVotedStillRelevantProposals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"revokeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalYesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNoVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAbstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedCelo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stCeloAmount\",\"type\":\"uint256\"}],\"name\":\"toCelo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"celoAmount\",\"type\":\"uint256\"}],\"name\":\"toStakedCelo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"updateHistoryAndReturnLockedStCeloInVoting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"name\":\"voteProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNoVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAbstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"params\":{\"caller\":\"`msg.sender` that called the function.\"}}],\"NoStakedCelo(address)\":[{\"params\":{\"account\":\"The account's address.\"}}],\"NotEnoughStakedCelo(address)\":[{\"params\":{\"account\":\"The account's address.\"}}]},\"events\":{\"LockedStCeloInVoting(address,uint256)\":{\"params\":{\"account\":\"The account's address.\",\"lockedCelo\":\"The stCELO that is still being locked.\"}},\"ProposalVoted(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"abstainVotes\":\"The abstain votes.\",\"noVotes\":\"The no votes.\",\"proposalId\":\"The proposal UIID.\",\"voter\":\"The voter's address.\",\"yesVotes\":\"The yes votes.\"}}},\"kind\":\"dev\",\"methods\":{\"deleteExpiredProposalTimestamp(uint256)\":{\"params\":{\"proposalId\":\"The proposal Id.\"}},\"deleteExpiredVoterProposalId(address,uint256,uint256)\":{\"params\":{\"index\":\"Index of voter's proposal id.\",\"proposalId\":\"The proposal id.\",\"voter\":\"The voter address.\"}},\"getLockedStCeloInVoting(address)\":{\"params\":{\"beneficiary\":\"The account.\"}},\"getProposalTimestamp(uint256)\":{\"params\":{\"proposalId\":\"The proposal UUID.\"},\"returns\":{\"_0\":\"The timestamp of proposal.\"}},\"getReferendumDuration()\":{\"returns\":{\"_0\":\"Governance referendum duration.\"}},\"getVersionNumber()\":{\"returns\":{\"_0\":\"Storage version of the contract.\",\"_1\":\"Major version of the contract.\",\"_2\":\"Minor version of the contract.\",\"_3\":\"Patch version of the contract.\"}},\"getVoteRecord(uint256)\":{\"params\":{\"proposalId\":\"The proposal UUID.\"}},\"getVoteWeight(address)\":{\"params\":{\"beneficiary\":\"The account.\"}},\"getVotedStillRelevantProposals(address)\":{\"details\":\"For up to date result call updateHistoryAndReturnLockedStCeloInVoting first.\",\"params\":{\"voter\":\"The voter.\"},\"returns\":{\"_0\":\"Proposals in referendum stage.\"}},\"initialize(address,address,address)\":{\"params\":{\"_manager\":\"The address of the contract manager.\",\"_owner\":\"The address of the contract owner.\",\"_registry\":\"The address of the Celo Registry.\"}},\"isPaused()\":{\"returns\":{\"_0\":\"`true` if the contract is paused, `false` otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeVotes(address,uint256)\":{\"params\":{\"accountVoter\":\"The account that is voting.\",\"proposalId\":\"The ID of the proposal to vote on.\"},\"returns\":{\"totalAbstainVotes\":\"SUM of all AccountContract abstain votes for proposal.\",\"totalNoVotes\":\"SUM of all AccountContract no votes for proposal.\",\"totalYesVotes\":\"SUM of all AccountContract yes votes for proposal.\"}},\"setDependencies(address,address)\":{\"details\":\"The StakedCelo contracts all reference each other so we need a way of setting these after all contracts are deployed and initialized.\",\"params\":{\"_account\":\"The address of the Account contract.\",\"_stakedCelo\":\"the address of the StakedCelo contract.\"}},\"setManager(address)\":{\"params\":{\"_manager\":\"The new manager address.\"}},\"toCelo(uint256)\":{\"params\":{\"stCeloAmount\":\"The amount of stCELO burned.\"},\"returns\":{\"_0\":\"The amount of CELO that should be withdrawn.\"}},\"toStakedCelo(uint256)\":{\"params\":{\"celoAmount\":\"The amount of CELO deposited.\"},\"returns\":{\"_0\":\"The amount of stCELO that should be minted.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateHistoryAndReturnLockedStCeloInVoting(address)\":{\"params\":{\"beneficiary\":\"The beneficiary.\"},\"returns\":{\"_0\":\"Currently locked stCELO in voting.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"voteProposal(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"abstainVotes\":\"The abstain votes weight.\",\"accountVoter\":\"The account that is voting.\",\"noVotes\":\"The no votes weight.\",\"proposalId\":\"The ID of the proposal to vote on.\",\"yesVotes\":\"The yes votes weight.\"},\"returns\":{\"_0\":\"totalWeights Account's staked celo balance.\",\"totalAbstainVotes\":\"SUM of all AccountContract abstain votes for proposal.\",\"totalNoVotes\":\"SUM of all AccountContract no votes for proposal.\",\"totalYesVotes\":\"SUM of all AccountContract yes votes for proposal.\"}}},\"title\":\"Handles governance voting for CELO in protocol.\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressZeroNotAllowed()\":[{\"notice\":\"Used when attempting to pass in address zero where not allowed.\"}],\"CallerNotManager(address)\":[{\"notice\":\"Used when an `onlyManager` function is called by a non-manager.\"}],\"IncorrectIndex()\":[{\"notice\":\"Used when attempting to delete voter's proposal id with incorrect index.\"}],\"NoStakedCelo(address)\":[{\"notice\":\"Used when attempting to vote when there is no stCELO.\"}],\"NotEnoughStakedCelo(address)\":[{\"notice\":\"Used when attempting to vote when there is not enough of stCELO.\"}],\"OnlyPauser()\":[{\"notice\":\"Used when an `onlyPauser` function is called with a different address.\"}],\"Paused()\":[{\"notice\":\"Used when an `onlyWhenNotPaused` function is called while the contract is paused.\"}],\"ProposalNotExpired()\":[{\"notice\":\"Used when attempting to delete voter's proposal id when proposal is not expired.\"}]},\"events\":{\"ContractPaused()\":{\"notice\":\"Emitted when this contract is paused.\"},\"ContractUnpaused()\":{\"notice\":\"Emitted when this contract is unpaused.\"},\"LockedStCeloInVoting(address,uint256)\":{\"notice\":\"Emitted when unlock of stCELO is requested.\"},\"ManagerSet(address)\":{\"notice\":\"Emitted when the manager is initially set or later modified.\"},\"PauserSet(address)\":{\"notice\":\"Emitted when the address authorized to pause/unpause the contract is changed.\"},\"ProposalVoted(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when an account votes for governance proposal.\"}},\"kind\":\"user\",\"methods\":{\"PAUSED_POSITION()\":{\"notice\":\"The storage slot under which we store a boolean representing whether or not the contract is currently paused.\"},\"PAUSER_POSITION()\":{\"notice\":\"The storage slot under which we store an address representing the address permissioned to pause/unpause this contract.\"},\"constructor\":{\"notice\":\"Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized.\"},\"deleteExpiredProposalTimestamp(uint256)\":{\"notice\":\"Deletes timestamp of expired proposal from storage.\"},\"deleteExpiredVoterProposalId(address,uint256,uint256)\":{\"notice\":\"Deletes proposalId from voter's history if proposal expired.\"},\"getLockedStCeloInVoting(address)\":{\"notice\":\"Returns currently locked stCELO in voting. (This stCELO cannot be unlocked.)\"},\"getProposalTimestamp(uint256)\":{\"notice\":\"Returns save timestamp of proposal.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"getVoteRecord(uint256)\":{\"notice\":\"Gets vote record of proposal.\"},\"getVoteWeight(address)\":{\"notice\":\"Returns vote weight of account owning stCELO.\"},\"getVotedStillRelevantProposals(address)\":{\"notice\":\"Returns proposals still in referendum stage that voter voted on.\"},\"initialize(address,address,address)\":{\"notice\":\"Initialize the contract with registry and owner.\"},\"isPaused()\":{\"notice\":\"Returns whether or not the contract is paused.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"pauser()\":{\"notice\":\"Returns the address permissioned to pause/unpause this contract.\"},\"proposalTimestamps(uint256)\":{\"notice\":\"Timestamps of every voted proposal.\"},\"registry()\":{\"notice\":\"The Registry.\"},\"revokeVotes(address,uint256)\":{\"notice\":\"Revokes votes on already voted proposal.\"},\"setDependencies(address,address)\":{\"notice\":\"Set this contract's dependencies in the StakedCelo system.\"},\"setManager(address)\":{\"notice\":\"Sets the manager address.\"},\"setPauser()\":{\"notice\":\"Sets that address permissioned to pause/unpause this contract to the owner of this contract.\"},\"toCelo(uint256)\":{\"notice\":\"Computes the amount of CELO that should be withdrawn for a given amount of stCELO burned.\"},\"toStakedCelo(uint256)\":{\"notice\":\"Computes the amount of stCELO that should be minted for a given amount of CELO deposited.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"},\"updateHistoryAndReturnLockedStCeloInVoting(address)\":{\"notice\":\"Updates the beneficiaries voting history and returns locked stCELO in voting. (This stCELO cannot be unlocked.) And it will remove voted proposals from account history if appropriate.\"},\"voteProposal(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Votes on a proposal in the referendum stage.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vote.sol\":\"Vote\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"contracts/Managed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title Used via inheritance to grant special access control to the Manager\\n * contract.\\n */\\nabstract contract Managed is Errors, Initializable, OwnableUpgradeable {\\n    address public manager;\\n\\n    /**\\n     * @notice Emitted when the manager is initially set or later modified.\\n     * @param manager The new managing account address.\\n     */\\n    event ManagerSet(address indexed manager);\\n\\n    /**\\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManager(address caller);\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        if (manager != msg.sender) {\\n            revert CallerNotManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function setManager(address _manager) external onlyOwner {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract in an upgradable context.\\n     * @param _manager The initial managing address.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Managed_init(address _manager) internal onlyInitializing {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function _setManager(address _manager) internal {\\n        if (_manager == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xdc8295fafa6b34f9ee48868045a6c01c4844bb3a596e3b25b8d6bb29dce15617\",\"license\":\"LGPL-3.0-only\"},\"contracts/Pausable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IPausable.sol\\\";\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title A helper contract to add pasuing functionality to a contract.\\n * @notice Used to prevent/mitigate damage in case an exploit is found in the\\n * extending contract.\\n */\\nabstract contract Pausable is Errors, IPausable {\\n    /**\\n     * @notice The storage slot under which we store a boolean representing\\n     * whether or not the contract is currently paused.\\n     */\\n    bytes32 public constant PAUSED_POSITION =\\n        bytes32(uint256(keccak256(\\\"staked-celo.pausable.paused\\\")) - 1);\\n    /**\\n     * @notice The storage slot under which we store an address representing the\\n     * address permissioned to pause/unpause this contract.\\n     */\\n    bytes32 public constant PAUSER_POSITION =\\n        bytes32(uint256(keccak256(\\\"staked-celo.pausable.pauser\\\")) - 1);\\n\\n    /**\\n     * Emitted when this contract is paused.\\n     */\\n    event ContractPaused();\\n\\n    /**\\n     * Emitted when this contract is unpaused.\\n     */\\n    event ContractUnpaused();\\n\\n    /**\\n     * @notice Emitted when the address authorized to pause/unpause the contract is\\n     * changed.\\n     * @param pauser THe new pauser.\\n     */\\n    event PauserSet(address pauser);\\n\\n    /**\\n     * @notice Used when an `onlyWhenNotPaused` function is called while the\\n     * contract is paused.\\n     */\\n    error Paused();\\n\\n    /**\\n     * @notice Used when an `onlyPauser` function is called with a different\\n     * address.\\n     */\\n    error OnlyPauser();\\n\\n    /**\\n     * @notice Reverts if the contract is paused.\\n     */\\n    modifier onlyWhenNotPaused() {\\n        if (isPaused()) {\\n            revert Paused();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the caller is not the pauser.\\n     */\\n    modifier onlyPauser() {\\n        if (msg.sender != pauser()) {\\n            revert OnlyPauser();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Pauses the contract.\\n     */\\n    function pause() public onlyPauser {\\n        _setPaused(true);\\n        emit ContractPaused();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract.\\n     */\\n    function unpause() public onlyPauser {\\n        _setPaused(false);\\n        emit ContractUnpaused();\\n    }\\n\\n    /**\\n     * @notice Returns whether or not the contract is paused.\\n     * @return `true` if the contract is paused, `false` otherwise.\\n     */\\n    function isPaused() public view returns (bool) {\\n        bool paused;\\n        bytes32 pausedPosition = PAUSED_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            paused := sload(pausedPosition)\\n        }\\n        return paused;\\n    }\\n\\n    /**\\n     * @notice Returns the address permissioned to pause/unpause this contract.\\n     */\\n    function pauser() public view returns (address) {\\n        address pauserAddress;\\n        bytes32 pauserPosition = PAUSER_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pauserAddress := sload(pauserPosition)\\n        }\\n        return pauserAddress;\\n    }\\n\\n    /**\\n     * @notice Sets the contract's paused state.\\n     * @param paused `true` for paused, `false` for unpaused.\\n     */\\n    function _setPaused(bool paused) internal {\\n        bytes32 pausedPosition = PAUSED_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(pausedPosition, paused)\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the address permissioned to pause this contract.\\n     * @param _pauser The new pauser.\\n     * @dev This should be wrapped by the inheriting contract, likely in a\\n     * permissioned function like `onlyOwner`.\\n     */\\n    function _setPauser(address _pauser) internal {\\n        if (_pauser == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n        bytes32 pauserPosition = PAUSER_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(pauserPosition, _pauser)\\n        }\\n        emit PauserSet(_pauser);\\n    }\\n}\\n\",\"keccak256\":\"0x86570b00c8fb2b23bf310237c81029a64b89b5b060b89e49c5085182d4b00d9e\",\"license\":\"LGPL-3.0-only\"},\"contracts/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./common/UsingRegistryUpgradeable.sol\\\";\\nimport \\\"./common/UUPSOwnableUpgradeable.sol\\\";\\nimport \\\"./Managed.sol\\\";\\n\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/IStakedCelo.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title Handles governance voting for CELO in protocol.\\n */\\ncontract Vote is Errors, UUPSOwnableUpgradeable, UsingRegistryUpgradeable, Managed, Pausable {\\n    /**\\n     * @notice Keeps track of total votes for proposal (votes of Account contract).\\n     * @param proposalId The proposal UUID.\\n     * @param yesVotes The yes votes weight.\\n     * @param noVotes The no votes weight.\\n     * @param abstainVotes The abstain votes weight.\\n     */\\n    struct ProposalVoteRecord {\\n        uint256 proposalId;\\n        uint256 yesVotes;\\n        uint256 noVotes;\\n        uint256 abstainVotes;\\n    }\\n\\n    /**\\n     * @notice Votes of account.\\n     * @param proposalVotes Votes per proposal UUID.\\n     * @param votedProposalIds History of voted proposals that are still active.\\n     */\\n    struct Voter {\\n        // Key of proposalId\\n        mapping(uint256 => VoterRecord) proposalVotes;\\n        uint256[] votedProposalIds;\\n    }\\n\\n    /**\\n     * @notice Voter's votes for particular proposal.\\n     * @param proposalId The proposal UIID.\\n     * @param yesVotes The yes votes.\\n     * @param noVotes The no votes.\\n     * @param abstainVotes The abstain votes.\\n     */\\n    struct VoterRecord {\\n        uint256 proposalId;\\n        uint256 yesVotes;\\n        uint256 noVotes;\\n        uint256 abstainVotes;\\n    }\\n\\n    /**\\n     * @notice An instance of the StakedCelo contract this Manager manages.\\n     */\\n    IStakedCelo internal stakedCelo;\\n\\n    /**\\n     * @notice An instance of the Account contract this Manager manages.\\n     */\\n    IAccount internal account;\\n\\n    /**\\n     * @notice Votes of Account's contract per proposal.\\n     */\\n    mapping(uint256 => ProposalVoteRecord) private voteRecords;\\n\\n    /**\\n     * @notice History of all voters.\\n     */\\n    mapping(address => Voter) private voters;\\n\\n    /**\\n     * @notice Timestamps of every voted proposal.\\n     */\\n    mapping(uint256 => uint256) public proposalTimestamps;\\n\\n    /**\\n     * @notice Emitted when an account votes for governance proposal.\\n     * @param voter The voter's address.\\n     * @param proposalId The proposal UIID.\\n     * @param yesVotes The yes votes.\\n     * @param noVotes The no votes.\\n     * @param abstainVotes The abstain votes.\\n     */\\n    event ProposalVoted(\\n        address indexed voter,\\n        uint256 indexed proposalId,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    );\\n\\n    /**\\n     * @notice Emitted when unlock of stCELO is requested.\\n     * @param account The account's address.\\n     * @param lockedCelo The stCELO that is still being locked.\\n     */\\n    event LockedStCeloInVoting(address account, uint256 lockedCelo);\\n\\n    /**\\n     * @notice Used when attempting to vote when there is no stCELO.\\n     * @param account The account's address.\\n     */\\n    error NoStakedCelo(address account);\\n\\n    /**\\n     * @notice Used when attempting to vote when there is not enough of stCELO.\\n     * @param account The account's address.\\n     */\\n    error NotEnoughStakedCelo(address account);\\n\\n    /**\\n     * @notice Used when attempting to delete voter's proposal id with incorrect index.\\n     */\\n    error IncorrectIndex();\\n\\n    /**\\n     * @notice Used when attempting to delete voter's proposal id when proposal is not expired.\\n     */\\n    error ProposalNotExpired();\\n\\n    /**\\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\\n     * implementation gets initialized.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() initializer {}\\n\\n    /**\\n     * @notice Initialize the contract with registry and owner.\\n     * @param _registry The address of the Celo Registry.\\n     * @param _owner The address of the contract owner.\\n     * @param _manager The address of the contract manager.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _owner,\\n        address _manager\\n    ) external initializer {\\n        __UsingRegistry_init(_registry);\\n        __Managed_init(_manager);\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Set this contract's dependencies in the StakedCelo system.\\n     * @dev The StakedCelo contracts all reference each other\\n     * so we need a way of setting these after all contracts are\\n     * deployed and initialized.\\n     * @param _stakedCelo the address of the StakedCelo contract.\\n     * @param _account The address of the Account contract.\\n     */\\n    function setDependencies(address _stakedCelo, address _account) external onlyOwner {\\n        if (_stakedCelo == address(0) || _account == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n        stakedCelo = IStakedCelo(_stakedCelo);\\n        account = IAccount(_account);\\n    }\\n\\n    /**\\n     * @notice Sets that address permissioned to pause/unpause this contract to\\n     * the owner of this contract.\\n     */\\n    function setPauser() external onlyOwner {\\n        _setPauser(owner());\\n    }\\n\\n    /**\\n     * Deletes proposalId from voter's history if proposal expired.\\n     * @param voter The voter address.\\n     * @param proposalId The proposal id.\\n     * @param index Index of voter's proposal id.\\n     */\\n    function deleteExpiredVoterProposalId(\\n        address voter,\\n        uint256 proposalId,\\n        uint256 index\\n    ) external onlyWhenNotPaused {\\n        Voter storage voterStruct = voters[voter];\\n\\n        uint256 proposalIdOnChain = voterStruct.votedProposalIds[index];\\n        if (proposalIdOnChain == 0 || proposalIdOnChain != proposalId) {\\n            revert IncorrectIndex();\\n        }\\n\\n        uint256 proposalTimestamp = proposalTimestamps[proposalId];\\n        if (proposalTimestamp != 0) {\\n            deleteExpiredProposalTimestamp(proposalId);\\n        }\\n\\n        voterStruct.votedProposalIds[index] = voterStruct.votedProposalIds[\\n            voterStruct.votedProposalIds.length - 1\\n        ];\\n        voterStruct.votedProposalIds.pop();\\n    }\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 1, 3, 0);\\n    }\\n\\n    /**\\n     * @notice Votes on a proposal in the referendum stage.\\n     * @param accountVoter The account that is voting.\\n     * @param proposalId The ID of the proposal to vote on.\\n     * @param yesVotes The yes votes weight.\\n     * @param noVotes The no votes weight.\\n     * @param abstainVotes The abstain votes weight.\\n     * @return totalWeights Account's staked celo balance.\\n     * @return totalYesVotes SUM of all AccountContract yes votes for proposal.\\n     * @return totalNoVotes SUM of all AccountContract no votes for proposal.\\n     * @return totalAbstainVotes SUM of all AccountContract abstain votes for proposal.\\n     */\\n    function voteProposal(\\n        address accountVoter,\\n        uint256 proposalId,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    )\\n        public\\n        onlyManager\\n        returns (\\n            uint256,\\n            uint256 totalYesVotes,\\n            uint256 totalNoVotes,\\n            uint256 totalAbstainVotes\\n        )\\n    {\\n        uint256 stakedCeloBalance = stakedCelo.balanceOf(accountVoter) +\\n            stakedCelo.lockedVoteBalanceOf(accountVoter);\\n        if (stakedCeloBalance == 0) {\\n            revert NoStakedCelo(accountVoter);\\n        }\\n        uint256 totalWeights = yesVotes + noVotes + abstainVotes;\\n        if (totalWeights > toCelo(stakedCeloBalance)) {\\n            revert NotEnoughStakedCelo(accountVoter);\\n        }\\n\\n        Voter storage voter = voters[accountVoter];\\n\\n        VoterRecord storage previousVoterRecord = voter.proposalVotes[proposalId];\\n        ProposalVoteRecord memory proposalVoteRecord = voteRecords[proposalId];\\n\\n        // Subtract previous vote.\\n        proposalVoteRecord.yesVotes -= previousVoterRecord.yesVotes;\\n        proposalVoteRecord.noVotes -= previousVoterRecord.noVotes;\\n        proposalVoteRecord.abstainVotes -= previousVoterRecord.abstainVotes;\\n\\n        // Add new vote.\\n        proposalVoteRecord.yesVotes += yesVotes;\\n        proposalVoteRecord.noVotes += noVotes;\\n        proposalVoteRecord.abstainVotes += abstainVotes;\\n\\n        voteRecords[proposalId] = ProposalVoteRecord(\\n            proposalId,\\n            proposalVoteRecord.yesVotes,\\n            proposalVoteRecord.noVotes,\\n            proposalVoteRecord.abstainVotes\\n        );\\n\\n        if (previousVoterRecord.proposalId == 0) {\\n            voter.votedProposalIds.push(proposalId);\\n        }\\n\\n        voter.proposalVotes[proposalId] = VoterRecord(proposalId, yesVotes, noVotes, abstainVotes);\\n\\n        emit ProposalVoted(accountVoter, proposalId, yesVotes, noVotes, abstainVotes);\\n\\n        if (proposalTimestamps[proposalId] == 0) {\\n            proposalTimestamps[proposalId] = getProposalTimestamp(proposalId);\\n        }\\n\\n        return (\\n            toStakedCelo(totalWeights),\\n            proposalVoteRecord.yesVotes,\\n            proposalVoteRecord.noVotes,\\n            proposalVoteRecord.abstainVotes\\n        );\\n    }\\n\\n    /**\\n     * @notice Revokes votes on already voted proposal.\\n     * @param accountVoter The account that is voting.\\n     * @param proposalId The ID of the proposal to vote on.\\n     * @return totalYesVotes SUM of all AccountContract yes votes for proposal.\\n     * @return totalNoVotes SUM of all AccountContract no votes for proposal.\\n     * @return totalAbstainVotes SUM of all AccountContract abstain votes for proposal.\\n     */\\n    function revokeVotes(address accountVoter, uint256 proposalId)\\n        public\\n        onlyManager\\n        returns (\\n            uint256 totalYesVotes,\\n            uint256 totalNoVotes,\\n            uint256 totalAbstainVotes\\n        )\\n    {\\n        (, totalYesVotes, totalNoVotes, totalAbstainVotes) = voteProposal(\\n            accountVoter,\\n            proposalId,\\n            0,\\n            0,\\n            0\\n        );\\n        return (totalYesVotes, totalNoVotes, totalAbstainVotes);\\n    }\\n\\n    /**\\n     * @notice Updates the beneficiaries voting history and returns locked stCELO in voting.\\n     * (This stCELO cannot be unlocked.)\\n     * And it will remove voted proposals from account history if appropriate.\\n     * @param beneficiary The beneficiary.\\n     * @return Currently locked stCELO in voting.\\n     */\\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\\n        public\\n        onlyWhenNotPaused\\n        returns (uint256)\\n    {\\n        Voter storage voter = voters[beneficiary];\\n        uint256 lockedAmount;\\n\\n        uint256 i = voter.votedProposalIds.length;\\n        while (i > 0) {\\n            uint256 proposalId = voter.votedProposalIds[--i];\\n            uint256 proposalTimestamp = proposalTimestamps[proposalId];\\n\\n            if (proposalTimestamp == 0) {\\n                voter.votedProposalIds[i] = voter.votedProposalIds[\\n                    voter.votedProposalIds.length - 1\\n                ];\\n                voter.votedProposalIds.pop();\\n                continue;\\n            }\\n\\n            if (\\n                block.timestamp <= proposalTimestamp + getGovernance().getReferendumStageDuration()\\n            ) {\\n                VoterRecord storage voterRecord = voter.proposalVotes[proposalId];\\n                lockedAmount = Math.max(\\n                    lockedAmount,\\n                    voterRecord.yesVotes + voterRecord.noVotes + voterRecord.abstainVotes\\n                );\\n            } else {\\n                voter.votedProposalIds[i] = voter.votedProposalIds[\\n                    voter.votedProposalIds.length - 1\\n                ];\\n                voter.votedProposalIds.pop();\\n                delete proposalTimestamps[proposalId];\\n            }\\n        }\\n\\n        uint256 stCELO = toStakedCelo(lockedAmount);\\n        emit LockedStCeloInVoting(beneficiary, stCELO);\\n        return stCELO;\\n    }\\n\\n    /**\\n     * Deletes timestamp of expired proposal from storage.\\n     * @param proposalId The proposal Id.\\n     */\\n    function deleteExpiredProposalTimestamp(uint256 proposalId) public onlyWhenNotPaused {\\n        uint256 proposalTimestamp = proposalTimestamps[proposalId];\\n        if (block.timestamp <= proposalTimestamp + getGovernance().getReferendumStageDuration()) {\\n            revert ProposalNotExpired();\\n        }\\n\\n        delete proposalTimestamps[proposalId];\\n    }\\n\\n    /**\\n     * @notice Returns save timestamp of proposal.\\n     * @param proposalId The proposal UUID.\\n     * @return The timestamp of proposal.\\n     */\\n    function getProposalTimestamp(uint256 proposalId) public view returns (uint256) {\\n        (, , uint256 timestamp, , ) = getGovernance().getProposal(proposalId);\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns proposals still in referendum stage that voter voted on.\\n     * @param voter The voter.\\n     * @return Proposals in referendum stage.\\n     * @dev For up to date result call updateHistoryAndReturnLockedStCeloInVoting first.\\n     */\\n    function getVotedStillRelevantProposals(address voter) public view returns (uint256[] memory) {\\n        return voters[voter].votedProposalIds;\\n    }\\n\\n    /**\\n     * @notice Returns currently locked stCELO in voting. (This stCELO cannot be unlocked.)\\n     * @param beneficiary The account.\\n     */\\n    function getLockedStCeloInVoting(address beneficiary) public view returns (uint256) {\\n        Voter storage voter = voters[beneficiary];\\n        uint256 lockedAmount;\\n\\n        uint256 i = voter.votedProposalIds.length;\\n        while (i > 0) {\\n            uint256 proposalId = voter.votedProposalIds[--i];\\n            uint256 proposalTimestamp = proposalTimestamps[proposalId];\\n\\n            if (proposalTimestamp == 0) {\\n                continue;\\n            }\\n\\n            if (\\n                block.timestamp <= proposalTimestamp + getGovernance().getReferendumStageDuration()\\n            ) {\\n                VoterRecord storage voterRecord = voter.proposalVotes[proposalId];\\n                lockedAmount = Math.max(\\n                    lockedAmount,\\n                    voterRecord.yesVotes + voterRecord.noVotes + voterRecord.abstainVotes\\n                );\\n            }\\n        }\\n\\n        return toStakedCelo(lockedAmount);\\n    }\\n\\n    /**\\n     * @return Governance referendum duration.\\n     */\\n    function getReferendumDuration() public view returns (uint256) {\\n        return getGovernance().getReferendumStageDuration();\\n    }\\n\\n    /**\\n     * @notice Returns vote weight of account owning stCELO.\\n     * @param beneficiary The account.\\n     */\\n    function getVoteWeight(address beneficiary) public view returns (uint256) {\\n        uint256 stakedCeloBalance = stakedCelo.balanceOf(beneficiary);\\n        return toCelo(stakedCeloBalance);\\n    }\\n\\n    /**\\n     * @notice Gets vote record of proposal.\\n     * @param proposalId The proposal UUID.\\n     */\\n    function getVoteRecord(uint256 proposalId) public view returns (ProposalVoteRecord memory) {\\n        return voteRecords[proposalId];\\n    }\\n\\n    /**\\n     * @notice Computes the amount of stCELO that should be minted for a given\\n     * amount of CELO deposited.\\n     * @param celoAmount The amount of CELO deposited.\\n     * @return The amount of stCELO that should be minted.\\n     */\\n    function toStakedCelo(uint256 celoAmount) public view returns (uint256) {\\n        uint256 stCeloSupply = stakedCelo.totalSupply();\\n        uint256 celoBalance = account.getTotalCelo();\\n\\n        if (stCeloSupply == 0 || celoBalance == 0) {\\n            return celoAmount;\\n        }\\n\\n        return (celoAmount * stCeloSupply) / celoBalance;\\n    }\\n\\n    /**\\n     * @notice Computes the amount of CELO that should be withdrawn for a given\\n     * amount of stCELO burned.\\n     * @param stCeloAmount The amount of stCELO burned.\\n     * @return The amount of CELO that should be withdrawn.\\n     */\\n    function toCelo(uint256 stCeloAmount) public view returns (uint256) {\\n        uint256 stCeloSupply = stakedCelo.totalSupply();\\n        uint256 celoBalance = account.getTotalCelo();\\n\\n        if (stCeloSupply == 0 || celoBalance == 0) {\\n            return stCeloAmount;\\n        }\\n\\n        return (stCeloAmount * celoBalance) / stCeloSupply;\\n    }\\n\\n    /**\\n     * @notice Returns sum of input weights.\\n     * @param weights The weights to sum up.\\n     * @return The sum of input weights.\\n     */\\n    function getTotalWeightRequested(uint256[] memory weights) private pure returns (uint256) {\\n        uint256 totalVotesRequested = 0;\\n        for (uint256 i = 0; i < weights.length; i++) {\\n            totalVotesRequested += weights[i];\\n        }\\n\\n        return totalVotesRequested;\\n    }\\n}\\n\",\"keccak256\":\"0x36c6a1933fa0ecfc0928688d4f2be87205e3e442c5e563d8614fd8e7d028a3b7\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Provides some common general errors.\\n */\\nabstract contract Errors {\\n    /**\\n     * @notice Used when attempting to pass in address zero where not allowed.\\n     */\\n    error AddressZeroNotAllowed();\\n}\\n\",\"keccak256\":\"0xf05b0cd54af69df277819c986819d7ab9d475a6ff955fbaf1d26ec61d9e44b00\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UUPSOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\\n */\\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\\n    /**\\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\\n     * adds the onlyOwner modifer.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x5dbad350c6ae75b9d15c2080b1de6f02d8b7f32a71a6bcf775c9731820d115ec\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UsingRegistryUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccounts.sol\\\";\\nimport \\\"../interfaces/IElection.sol\\\";\\nimport \\\"../interfaces/IGoldToken.sol\\\";\\nimport \\\"../interfaces/ILockedGold.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IGovernance.sol\\\";\\nimport \\\"../interfaces/IValidators.sol\\\";\\n\\n/**\\n * @title A helper for getting Celo core contracts from the Registry.\\n */\\nabstract contract UsingRegistryUpgradeable is Initializable {\\n    /// @notice The canonical address of the Registry.\\n    address internal constant CANONICAL_REGISTRY = 0x000000000000000000000000000000000000ce10;\\n\\n    /// @notice The registry ID for the Accounts contract.\\n    bytes32 private constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n\\n    /// @notice The registry ID for the Election contract.\\n    bytes32 private constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n\\n    /// @notice The registry ID for the GoldToken contract.\\n    bytes32 private constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n\\n    /// @notice The registry ID for the LockedGold contract.\\n    bytes32 private constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n\\n    /// @notice The registry ID for the Governance contract.\\n    bytes32 private constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n\\n    /// @notice The registry ID for the Validator contract.\\n    bytes32 private constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n\\n    /// @notice The Registry.\\n    IRegistry public registry;\\n\\n    /**\\n     * @notice Initializes the UsingRegistryUpgradable contract in an upgradable scenario\\n     * @param _registry The address of the Registry. For convenience, if the zero address is\\n     * provided, the registry is set to the canonical Registry address, i.e. 0x0...ce10. This\\n     * parameter should only be a non-zero address when testing.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __UsingRegistry_init(address _registry) internal onlyInitializing {\\n        if (_registry == address(0)) {\\n            registry = IRegistry(CANONICAL_REGISTRY);\\n        } else {\\n            registry = IRegistry(_registry);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the Accounts contract from the Registry.\\n     * @return The Accounts contract from the Registry.\\n     */\\n    function getAccounts() internal view returns (IAccounts) {\\n        return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the Election contract from the Registry.\\n     * @return The Election contract from the Registry.\\n     */\\n    function getElection() internal view returns (IElection) {\\n        return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the GoldToken contract from the Registry.\\n     * @return The GoldToken contract from the Registry.\\n     */\\n    function getGoldToken() internal view returns (IGoldToken) {\\n        return IGoldToken(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the LockedGold contract from the Registry.\\n     * @return The LockedGold contract from the Registry.\\n     */\\n    function getLockedGold() internal view returns (ILockedGold) {\\n        return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the Governance contract from the Registry.\\n     * @return The Governance contract from the Registry.\\n     */\\n    function getGovernance() internal view returns (IGovernance) {\\n        return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the validators contract from the Registry.\\n     * @return The validators contract from the Registry.\\n     */\\n    function getValidators() internal view returns (IValidators) {\\n        return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n    }\\n}\\n\",\"keccak256\":\"0xabb9ce841ce13529276159c75e3e6a8d74d1bbd219a02de1eb11bb3aef61bed0\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccount {\\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\\n\\n    function scheduleTransfer(\\n        address[] calldata fromGroups,\\n        uint256[] calldata fromVotes,\\n        address[] calldata toGroups,\\n        uint256[] calldata toVotess\\n    ) external;\\n\\n    function scheduleWithdrawals(\\n        address beneficiary,\\n        address[] calldata group,\\n        uint256[] calldata withdrawals\\n    ) external;\\n\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external;\\n\\n    function getTotalCelo() external view returns (uint256);\\n\\n    function getCeloForGroup(address) external view returns (uint256);\\n\\n    function scheduledVotesForGroup(address group) external view returns (uint256);\\n\\n    function scheduledRevokeForGroup(address group) external view returns (uint256);\\n\\n    function scheduledWithdrawalsForGroup(address group) external view returns (uint256);\\n\\n    function votesForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfa2177635a152beb7313aa9af9a3494a9f760e233a04b980f20ac1748dde1377\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccounts.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccounts {\\n    function isAccount(address) external view returns (bool);\\n\\n    function voteSignerToAccount(address) external view returns (address);\\n\\n    function validatorSignerToAccount(address) external view returns (address);\\n\\n    function attestationSignerToAccount(address) external view returns (address);\\n\\n    function signerToAccount(address) external view returns (address);\\n\\n    function getAttestationSigner(address) external view returns (address);\\n\\n    function getValidatorSigner(address) external view returns (address);\\n\\n    function getVoteSigner(address) external view returns (address);\\n\\n    function hasAuthorizedVoteSigner(address) external view returns (bool);\\n\\n    function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n\\n    function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n    function setAccountDataEncryptionKey(bytes calldata) external;\\n\\n    function setMetadataURL(string calldata) external;\\n\\n    function setName(string calldata) external;\\n\\n    function setWalletAddress(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function setAccount(\\n        string calldata,\\n        bytes calldata,\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function getDataEncryptionKey(address) external view returns (bytes memory);\\n\\n    function getWalletAddress(address) external view returns (address);\\n\\n    function getMetadataURL(address) external view returns (string memory);\\n\\n    function batchGetMetadataURL(address[] calldata)\\n        external\\n        view\\n        returns (uint256[] memory, bytes memory);\\n\\n    function getName(address) external view returns (string memory);\\n\\n    function authorizeVoteSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function authorizeValidatorSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function authorizeValidatorSignerWithPublicKey(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32,\\n        bytes calldata\\n    ) external;\\n\\n    function authorizeValidatorSignerWithKeys(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32,\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external;\\n\\n    function authorizeAttestationSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function createAccount() external returns (bool);\\n}\\n\",\"keccak256\":\"0x661b5c89e143c166a8667ea927d787939c27a59bd52e12c94d67d7377003e734\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IElection.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IElection {\\n    function vote(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function activate(address) external returns (bool);\\n\\n    function activateForAccount(address, address) external returns (bool);\\n\\n    function revokeActive(\\n        address,\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function revokeAllActive(\\n        address,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function revokePending(\\n        address,\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function markGroupIneligible(address) external;\\n\\n    function markGroupEligible(\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function forceDecrementVotes(\\n        address,\\n        uint256,\\n        address[] calldata,\\n        address[] calldata,\\n        uint256[] calldata\\n    ) external returns (uint256);\\n\\n    // only owner\\n    function setElectableValidators(uint256, uint256) external returns (bool);\\n\\n    function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n\\n    function setElectabilityThreshold(uint256) external returns (bool);\\n\\n    // only VM\\n    function distributeEpochRewards(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external;\\n\\n    function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n\\n    function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n    // view functions\\n    function electValidatorSigners() external view returns (address[] memory);\\n\\n    function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n\\n    function getElectableValidators() external view returns (uint256, uint256);\\n\\n    function getElectabilityThreshold() external view returns (uint256);\\n\\n    function getNumVotesReceivable(address) external view returns (uint256);\\n\\n    function getTotalVotes() external view returns (uint256);\\n\\n    function getActiveVotes() external view returns (uint256);\\n\\n    function getTotalVotesByAccount(address) external view returns (uint256);\\n\\n    function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getTotalVotesForGroup(address) external view returns (uint256);\\n\\n    function getActiveVotesForGroup(address) external view returns (uint256);\\n\\n    function getPendingVotesForGroup(address) external view returns (uint256);\\n\\n    function getGroupEligibility(address) external view returns (bool);\\n\\n    function getGroupEpochRewards(\\n        address,\\n        uint256,\\n        uint256[] calldata\\n    ) external view returns (uint256);\\n\\n    function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n\\n    function getEligibleValidatorGroups() external view returns (address[] memory);\\n\\n    function getTotalVotesForEligibleValidatorGroups()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    function getCurrentValidatorSigners() external view returns (address[] memory);\\n\\n    function canReceiveVotes(address, uint256) external view returns (bool);\\n\\n    function hasActivatablePendingVotes(address, address) external view returns (bool);\\n\\n    function maxNumGroupsVotedFor() external view returns (uint256);\\n\\n    function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n\\n    function numberValidatorsInCurrentSet() external view returns (uint256);\\n\\n    function getEpochNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdb5870e4b37333b3ba2932b6adc14b86404d3f9e785061f85517c5558f6f217f\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGoldToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGoldToken {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferWithComment(\\n        address to,\\n        uint256 value,\\n        string calldata comment\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\\n\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x230bde369f53b4c36033c7b5465637d706873bf684f732afa7e083636d7c9d68\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGovernance {\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external returns (bool);\\n\\n    function getProposal(uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            string memory\\n        );\\n\\n    function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x21958f1d6595964dd706b5dc17455e59d7f1fc21a8f5c76b47b528e17f7f7d96\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ILockedGold.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface ILockedGold {\\n    function lock() external payable;\\n\\n    function incrementNonvotingAccountBalance(address, uint256) external;\\n\\n    function unlock(uint256) external;\\n\\n    function relock(uint256, uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function slash(\\n        address account,\\n        uint256 penalty,\\n        address reporter,\\n        uint256 reward,\\n        address[] calldata lessers,\\n        address[] calldata greaters,\\n        uint256[] calldata indices\\n    ) external;\\n\\n    function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n    function unlockingPeriod() external view returns (uint256);\\n\\n    function getAccountTotalLockedGold(address) external view returns (uint256);\\n\\n    function getTotalLockedGold() external view returns (uint256);\\n\\n    function getPendingWithdrawal(address, uint256) external view returns (uint256, uint256);\\n\\n    function getSlashingWhitelist() external view returns (bytes32[] memory);\\n\\n    function getPendingWithdrawals(address)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getTotalPendingWithdrawals(address) external view returns (uint256);\\n\\n    function isSlasher(address) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x50b09d43e613cd03c8ed1c83b6ff3dde9a22f4a426b0a0391d90bcc1ab08bd87\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function isPaused() external returns (bool);\\n}\\n\",\"keccak256\":\"0x09a0bc3c0f05fa42f8fdc22ca85217a732c1a676e292866bc4a08ba6f4947ee1\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IRegistry {\\n    function setAddressFor(string calldata, address) external;\\n\\n    function getAddressForOrDie(bytes32) external view returns (address);\\n\\n    function getAddressFor(bytes32) external view returns (address);\\n\\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n\\n    function getAddressForString(string calldata identifier) external view returns (address);\\n\\n    function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x15c870de545b84dea2aa846e91f15ab50f6e5090cec02bbf3b7cc085d23fc2eb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IStakedCelo.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IStakedCelo {\\n    function totalSupply() external view returns (uint256);\\n\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function lockVoteBalance(address account, uint256 amount) external;\\n\\n    function unlockVoteBalance(address account) external;\\n\\n    function lockedVoteBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3df273715b94f5dd3db16f1439d4ab8f53e9ee6cd52eaf4dcd3fdfd8ba679518\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IValidators.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.11;\\n\\ninterface IValidators {\\n    function registerValidator(\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function deregisterValidator(uint256) external returns (bool);\\n\\n    function affiliate(address) external returns (bool);\\n\\n    function deaffiliate() external returns (bool);\\n\\n    function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n\\n    function registerValidatorGroup(uint256) external returns (bool);\\n\\n    function deregisterValidatorGroup(uint256) external returns (bool);\\n\\n    function addMember(address) external returns (bool);\\n\\n    function addFirstMember(\\n        address,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function removeMember(address) external returns (bool);\\n\\n    function reorderMember(\\n        address,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function updateCommission() external;\\n\\n    function setNextCommissionUpdate(uint256) external;\\n\\n    function resetSlashingMultiplier() external;\\n\\n    // only owner\\n    function setCommissionUpdateDelay(uint256) external;\\n\\n    function setMaxGroupSize(uint256) external returns (bool);\\n\\n    function setMembershipHistoryLength(uint256) external returns (bool);\\n\\n    function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n\\n    function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n\\n    function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n\\n    function setSlashingMultiplierResetPeriod(uint256) external;\\n\\n    // view functions\\n    function getMaxGroupSize() external view returns (uint256);\\n\\n    function getCommissionUpdateDelay() external view returns (uint256);\\n\\n    function getValidatorScoreParameters() external view returns (uint256, uint256);\\n\\n    function getMembershipHistory(address)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            address[] memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function calculateEpochScore(uint256) external view returns (uint256);\\n\\n    function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n\\n    function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n\\n    function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n\\n    function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n\\n    function getValidator(address account)\\n        external\\n        view\\n        returns (\\n            bytes memory,\\n            bytes memory,\\n            address,\\n            uint256,\\n            address\\n        );\\n\\n    function getValidatorGroup(address)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getGroupNumMembers(address) external view returns (uint256);\\n\\n    function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n\\n    function getGroupsNumMembers(address[] calldata accounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getNumRegisteredValidators() external view returns (uint256);\\n\\n    function groupMembershipInEpoch(\\n        address,\\n        uint256,\\n        uint256\\n    ) external view returns (address);\\n\\n    // only registered contract\\n    function updateEcdsaPublicKey(\\n        address,\\n        address,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function updatePublicKeys(\\n        address,\\n        address,\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n\\n    function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n\\n    function getRegisteredValidators() external view returns (address[] memory);\\n\\n    function getRegisteredValidatorSigners() external view returns (address[] memory);\\n\\n    function getRegisteredValidatorGroups() external view returns (address[] memory);\\n\\n    function isValidatorGroup(address) external view returns (bool);\\n\\n    function isValidator(address) external view returns (bool);\\n\\n    function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n\\n    function getMembershipInLastEpoch(address) external view returns (address);\\n\\n    function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n\\n    // only VM\\n    function updateValidatorScoreFromSigner(address, uint256) external;\\n\\n    function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n    // only slasher\\n    function forceDeaffiliateIfValidator(address) external;\\n\\n    function halveSlashingMultiplier(address) external;\\n}\\n\",\"keccak256\":\"0x8aa4b70dab85380f94c0d7d2538268988d7153060660e48afece5a9c2f92fa6e\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50600060019054906101000a900460ff166200006f5760008054906101000a900460ff161562000080565b6200007f6200013c60201b60201c565b5b620000c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b99062000204565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000113576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620001355760008060016101000a81548160ff0219169083151502179055505b5062000226565b600062000154306200015a60201b620026181760201c565b15905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000620001ec602e836200017d565b9150620001f9826200018e565b604082019050919050565b600060208201905081810360008301526200021f81620001dd565b9050919050565b6080516142c46200025760003960008181610d6501528181610df4015281816118c5015261195401526142c46000f3fe6080604052600436106101e35760003560e01c80637b10399911610102578063abaaecf911610095578063c494ec1e11610064578063c494ec1e146106f1578063d0ebdbe71461072e578063e87c28a714610757578063f2fde38b14610780576101e3565b8063abaaecf914610621578063b187bd261461065e578063c0c53b8b14610689578063c40da15c146106b2576101e3565b80638da5cb5b116100d15780638da5cb5b146105635780639468ba0e1461058e5780639fd0506d146105b9578063a730117e146105e4576101e3565b80637b103999146104df5780637c0d530f1461050a5780638456cb59146105215780638cc9931f14610538576101e3565b80633f4ba83a1161017a5780634f1ef286116101495780634f1ef2861461045557806354255be014610471578063577bae251461049f578063715018a6146104c8576101e3565b80633f4ba83a14610396578063481c6a75146103ad57806348fd6ea6146103d85780634c23f22e14610415576101e3565b80632488d909116101b65780632488d909146102c85780633127ce32146103055780633659cfe6146103425780633cbf58721461036b576101e3565b80630567847f146101e85780630d526b9614610225578063121634e81461026257806319a7aff01461029f575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190613118565b6107a9565b60405161021c9190613154565b60405180910390f35b34801561023157600080fd5b5061024c60048036038101906102479190613118565b610913565b6040516102599190613154565b60405180910390f35b34801561026e57600080fd5b50610289600480360381019061028491906131cd565b6109ab565b6040516102969190613154565b60405180910390f35b3480156102ab57600080fd5b506102c660048036038101906102c19190613118565b610b49565b005b3480156102d457600080fd5b506102ef60048036038101906102ea9190613118565b610c74565b6040516102fc919061325e565b60405180910390f35b34801561031157600080fd5b5061032c600480360381019061032791906131cd565b610cc9565b6040516103399190613328565b60405180910390f35b34801561034e57600080fd5b50610369600480360381019061036491906131cd565b610d63565b005b34801561037757600080fd5b50610380610eec565b60405161038d9190613363565b60405180910390f35b3480156103a257600080fd5b506103ab610f22565b005b3480156103b957600080fd5b506103c2610fc6565b6040516103cf919061338d565b60405180910390f35b3480156103e457600080fd5b506103ff60048036038101906103fa91906131cd565b610fec565b60405161040c9190613154565b60405180910390f35b34801561042157600080fd5b5061043c600480360381019061043791906133a8565b611329565b60405161044c9493929190613423565b60405180910390f35b61046f600480360381019061046a91906135ae565b6118c3565b005b34801561047d57600080fd5b50610486611a00565b6040516104969493929190613423565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c1919061360a565b611a1b565b005b3480156104d457600080fd5b506104dd611bbc565b005b3480156104eb57600080fd5b506104f4611c44565b60405161050191906136bc565b60405180910390f35b34801561051657600080fd5b5061051f611c6a565b005b34801561052d57600080fd5b50610536611cf8565b005b34801561054457600080fd5b5061054d611d9c565b60405161055a9190613154565b60405180910390f35b34801561056f57600080fd5b50610578611e19565b604051610585919061338d565b60405180910390f35b34801561059a57600080fd5b506105a3611e43565b6040516105b09190613363565b60405180910390f35b3480156105c557600080fd5b506105ce611e79565b6040516105db919061338d565b60405180910390f35b3480156105f057600080fd5b5061060b600480360381019061060691906131cd565b611ebf565b6040516106189190613154565b60405180910390f35b34801561062d57600080fd5b5061064860048036038101906106439190613118565b611f71565b6040516106559190613154565b60405180910390f35b34801561066a57600080fd5b50610673611f89565b60405161068091906136f2565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab919061370d565b611fcf565b005b3480156106be57600080fd5b506106d960048036038101906106d49190613760565b6120d1565b6040516106e8939291906137a0565b60405180910390f35b3480156106fd57600080fd5b5061071860048036038101906107139190613118565b61218e565b6040516107259190613154565b60405180910390f35b34801561073a57600080fd5b50610755600480360381019061075091906131cd565b6122f8565b005b34801561076357600080fd5b5061077e600480360381019061077991906137d7565b612380565b005b34801561078c57600080fd5b506107a760048036038101906107a291906131cd565b612520565b005b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d919061382c565b90506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d2919061382c565b905060008214806108e35750600081145b156108f257839250505061090e565b8181856108ff9190613888565b6109099190613911565b925050505b919050565b60008061091e61263b565b73ffffffffffffffffffffffffffffffffffffffff1663c7f758a8846040518263ffffffff1660e01b81526004016109569190613154565b600060405180830381865afa158015610973573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061099c9190613a2b565b50509250505080915050919050565b600080606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080826001018054905090505b6000811115610b365760008360010182610a1690613ac2565b92508281548110610a2a57610a29613aec565b5b906000526020600020015490506000606b60008381526020019081526020016000205490506000811415610a5f5750506109fd565b610a6761263b565b73ffffffffffffffffffffffffffffffffffffffff1663ad78c1096040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad5919061382c565b81610ae09190613b1b565b4211610b2f5760008560000160008481526020019081526020016000209050610b2b85826003015483600201548460010154610b1c9190613b1b565b610b269190613b1b565b612702565b9450505b50506109fd565b610b3f8261218e565b9350505050919050565b610b51611f89565b15610b88576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606b6000838152602001908152602001600020549050610ba861263b565b73ffffffffffffffffffffffffffffffffffffffff1663ad78c1096040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c16919061382c565b81610c219190613b1b565b4211610c59576040517f8251df3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606b6000838152602001908152602001600020600090555050565b610c7c6130a6565b606960008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b6060606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015610d5757602002820191906000526020600020905b815481526020019060010190808311610d43575b50505050509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de990613bf4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e3161271c565b73ffffffffffffffffffffffffffffffffffffffff1614610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e90613c86565b60405180910390fd5b610e9081612773565b610ee981600067ffffffffffffffff811115610eaf57610eae613483565b5b6040519080825280601f01601f191660200182016040528015610ee15781602001600182028036833780820191505090505b5060006127f2565b50565b60017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c610f1c9190613ca6565b60001b81565b610f2a611e79565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f8e576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f9860006129c3565b7f0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f9460405160405180910390a1565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610ff6611f89565b1561102d576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080826001018054905090505b60008111156112d7576000836001018261109790613ac2565b925082815481106110ab576110aa613aec565b5b906000526020600020015490506000606b600083815260200190815260200160002054905060008114156111625784600101600186600101805490506110f19190613ca6565b8154811061110257611101613aec565b5b906000526020600020015485600101848154811061112357611122613aec565b5b90600052602060002001819055508460010180548061114557611144613cda565b5b60019003818190600052602060002001600090559055505061107e565b61116a61263b565b73ffffffffffffffffffffffffffffffffffffffff1663ad78c1096040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d8919061382c565b816111e39190613b1b565b4211611236576000856000016000848152602001908152602001600020905061122e8582600301548360020154846001015461121f9190613b1b565b6112299190613b1b565b612702565b9450506112d0565b846001016001866001018054905061124e9190613ca6565b8154811061125f5761125e613aec565b5b90600052602060002001548560010184815481106112805761127f613aec565b5b9060005260206000200181905550846001018054806112a2576112a1613cda565b5b60019003818190600052602060002001600090559055606b6000838152602001908152602001600020600090555b505061107e565b60006112e28361218e565b90507f7c6f785c69c2af01e80f58e72c654a146308c1a70e15028f45ac1d98b08303888682604051611315929190613d09565b60405180910390a180945050505050919050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113c157336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016113b8919061338d565b60405180910390fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663536a5f278b6040518263ffffffff1660e01b815260040161141e919061338d565b602060405180830381865afa15801561143b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145f919061382c565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b81526004016114ba919061338d565b602060405180830381865afa1580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb919061382c565b6115059190613b1b565b9050600081141561154d57896040517f09835c4f000000000000000000000000000000000000000000000000000000008152600401611544919061338d565b60405180910390fd5b600086888a61155c9190613b1b565b6115669190613b1b565b9050611571826107a9565b8111156115b5578a6040517f25becec40000000000000000000000000000000000000000000000000000000081526004016115ac919061338d565b60405180910390fd5b6000606a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160008d815260200190815260200160002090506000606960008e815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508160010154816020018181516116719190613ca6565b9150818152505081600201548160400181815161168e9190613ca6565b915081815250508160030154816060018181516116ab9190613ca6565b915081815250508b816020018181516116c49190613b1b565b915081815250508a816040018181516116dd9190613b1b565b9150818152505089816060018181516116f69190613b1b565b9150818152505060405180608001604052808e815260200182602001518152602001826040015181526020018260600151815250606960008f8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050506000826000015414156117a157826001018d90806001815401808255809150506001900390600052602060002001600090919091909150555b60405180608001604052808e81526020018d81526020018c81526020018b8152508360000160008f8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508c8e73ffffffffffffffffffffffffffffffffffffffff167fccddc503efe2d90a6cc16414e99fd2826fd7d72313194d217e36278c0905f9438e8e8e60405161184d939291906137a0565b60405180910390a36000606b60008f81526020019081526020016000205414156118925761187a8d610913565b606b60008f8152602001908152602001600020819055505b61189b8461218e565b8160200151826040015183606001519850985098509850505050505095509550955095915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415611952576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194990613bf4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661199161271c565b73ffffffffffffffffffffffffffffffffffffffff16146119e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119de90613c86565b60405180910390fd5b6119f082612773565b6119fc828260016127f2565b5050565b60008060008060018060036000935093509350935090919293565b611a23611f89565b15611a5a576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001018381548110611ab557611ab4613aec565b5b906000526020600020015490506000811480611ad15750838114155b15611b08576040517f07cc4d8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606b600086815260200190815260200160002054905060008114611b3257611b3185610b49565b5b8260010160018460010180549050611b4a9190613ca6565b81548110611b5b57611b5a613aec565b5b9060005260206000200154836001018581548110611b7c57611b7b613aec565b5b906000526020600020018190555082600101805480611b9e57611b9d613cda565b5b60019003818190600052602060002001600090559055505050505050565b611bc4612a01565b73ffffffffffffffffffffffffffffffffffffffff16611be2611e19565b73ffffffffffffffffffffffffffffffffffffffff1614611c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2f90613d7e565b60405180910390fd5b611c426000612a09565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611c72612a01565b73ffffffffffffffffffffffffffffffffffffffff16611c90611e19565b73ffffffffffffffffffffffffffffffffffffffff1614611ce6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdd90613d7e565b60405180910390fd5b611cf6611cf1611e19565b612acf565b565b611d00611e79565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d64576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d6e60016129c3565b7fab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d26760405160405180910390a1565b6000611da661263b565b73ffffffffffffffffffffffffffffffffffffffff1663ad78c1096040518163ffffffff1660e01b8152600401602060405180830381865afa158015611df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e14919061382c565b905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c611e739190613ca6565b60001b81565b600080600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c611eae9190613ca6565b60001b905080549150819250505090565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401611f1d919061338d565b602060405180830381865afa158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e919061382c565b9050611f69816107a9565b915050919050565b606b6020528060005260406000206000915090505481565b600080600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c611fbe9190613ca6565b60001b905080549150819250505090565b600060019054906101000a900460ff16611ff75760008054906101000a900460ff1615612000565b611fff612bab565b5b61203f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203690613e10565b60405180910390fd5b60008060019054906101000a900460ff16159050801561208f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61209884612bbc565b6120a182612ccd565b6120aa83612a09565b80156120cb5760008060016101000a81548160ff0219169083151502179055505b50505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461216857336040517f3b2495f100000000000000000000000000000000000000000000000000000000815260040161215f919061338d565b60405180910390fd5b61217785856000806000611329565b909192508093508194508295505050509250925092565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612222919061382c565b90506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b7919061382c565b905060008214806122c85750600081145b156122d75783925050506122f3565b8082856122e49190613888565b6122ee9190613911565b925050505b919050565b612300612a01565b73ffffffffffffffffffffffffffffffffffffffff1661231e611e19565b73ffffffffffffffffffffffffffffffffffffffff1614612374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236b90613d7e565b60405180910390fd5b61237d81612d28565b50565b612388612a01565b73ffffffffffffffffffffffffffffffffffffffff166123a6611e19565b73ffffffffffffffffffffffffffffffffffffffff16146123fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f390613d7e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806124635750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1561249a576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b612528612a01565b73ffffffffffffffffffffffffffffffffffffffff16612546611e19565b73ffffffffffffffffffffffffffffffffffffffff161461259c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259390613d7e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561260c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260390613ea2565b60405180910390fd5b61261581612a09565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200161268a90613f19565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016126bc9190613363565b602060405180830381865afa1580156126d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fd9190613f2e565b905090565b6000818310156127125781612714565b825b905092915050565b600061274a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612e16565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61277b612a01565b73ffffffffffffffffffffffffffffffffffffffff16612799611e19565b73ffffffffffffffffffffffffffffffffffffffff16146127ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e690613d7e565b60405180910390fd5b50565b60006127fc61271c565b905061280784612e20565b6000835111806128145750815b15612825576128238484612ed9565b505b60006128537f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612f06565b90508060000160009054906101000a900460ff166129bc5760018160000160006101000a81548160ff02191690831515021790555061291f858360405160240161289d919061338d565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612ed9565b5060008160000160006101000a81548160ff02191690831515021790555061294561271c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146129b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a990613fcd565b60405180910390fd5b6129bb85612f10565b5b5050505050565b600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c6129f59190613ca6565b60001b90508181555050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b36576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c612b689190613ca6565b60001b90508181557fd11d57c2c7468878b1035df11c670bcd0091aa840bf8aa166365397622237bea82604051612b9f919061338d565b60405180910390a15050565b6000612bb630612618565b15905090565b600060019054906101000a900460ff16612c0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c029061405f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612c885761ce10606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612cca565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600060019054906101000a900460ff16612d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d139061405f565b60405180910390fd5b612d2581612d28565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612d8f576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b6000819050919050565b612e2981612f5f565b612e68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5f906140f1565b60405180910390fd5b80612e957f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612e16565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060612efe838360405180606001604052806027815260200161426860279139612f72565b905092915050565b6000819050919050565b612f1981612e20565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600080823b905060008111915050919050565b6060612f7d84612f5f565b612fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb390614183565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051612fe491906141ea565b600060405180830381855af49150503d806000811461301f576040519150601f19603f3d011682016040523d82523d6000602084013e613024565b606091505b509150915061303482828661303f565b925050509392505050565b6060831561304f5782905061309f565b6000835111156130625782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130969190614245565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6130f5816130e2565b811461310057600080fd5b50565b600081359050613112816130ec565b92915050565b60006020828403121561312e5761312d6130d8565b5b600061313c84828501613103565b91505092915050565b61314e816130e2565b82525050565b60006020820190506131696000830184613145565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061319a8261316f565b9050919050565b6131aa8161318f565b81146131b557600080fd5b50565b6000813590506131c7816131a1565b92915050565b6000602082840312156131e3576131e26130d8565b5b60006131f1848285016131b8565b91505092915050565b613203816130e2565b82525050565b60808201600082015161321f60008501826131fa565b50602082015161323260208501826131fa565b50604082015161324560408501826131fa565b50606082015161325860608501826131fa565b50505050565b60006080820190506132736000830184613209565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006132b183836131fa565b60208301905092915050565b6000602082019050919050565b60006132d582613279565b6132df8185613284565b93506132ea83613295565b8060005b8381101561331b57815161330288826132a5565b975061330d836132bd565b9250506001810190506132ee565b5085935050505092915050565b6000602082019050818103600083015261334281846132ca565b905092915050565b6000819050919050565b61335d8161334a565b82525050565b60006020820190506133786000830184613354565b92915050565b6133878161318f565b82525050565b60006020820190506133a2600083018461337e565b92915050565b600080600080600060a086880312156133c4576133c36130d8565b5b60006133d2888289016131b8565b95505060206133e388828901613103565b94505060406133f488828901613103565b935050606061340588828901613103565b925050608061341688828901613103565b9150509295509295909350565b60006080820190506134386000830187613145565b6134456020830186613145565b6134526040830185613145565b61345f6060830184613145565b95945050505050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134bb82613472565b810181811067ffffffffffffffff821117156134da576134d9613483565b5b80604052505050565b60006134ed6130ce565b90506134f982826134b2565b919050565b600067ffffffffffffffff82111561351957613518613483565b5b61352282613472565b9050602081019050919050565b82818337600083830152505050565b600061355161354c846134fe565b6134e3565b90508281526020810184848401111561356d5761356c61346d565b5b61357884828561352f565b509392505050565b600082601f83011261359557613594613468565b5b81356135a584826020860161353e565b91505092915050565b600080604083850312156135c5576135c46130d8565b5b60006135d3858286016131b8565b925050602083013567ffffffffffffffff8111156135f4576135f36130dd565b5b61360085828601613580565b9150509250929050565b600080600060608486031215613623576136226130d8565b5b6000613631868287016131b8565b935050602061364286828701613103565b925050604061365386828701613103565b9150509250925092565b6000819050919050565b600061368261367d6136788461316f565b61365d565b61316f565b9050919050565b600061369482613667565b9050919050565b60006136a682613689565b9050919050565b6136b68161369b565b82525050565b60006020820190506136d160008301846136ad565b92915050565b60008115159050919050565b6136ec816136d7565b82525050565b600060208201905061370760008301846136e3565b92915050565b600080600060608486031215613726576137256130d8565b5b6000613734868287016131b8565b9350506020613745868287016131b8565b9250506040613756868287016131b8565b9150509250925092565b60008060408385031215613777576137766130d8565b5b6000613785858286016131b8565b925050602061379685828601613103565b9150509250929050565b60006060820190506137b56000830186613145565b6137c26020830185613145565b6137cf6040830184613145565b949350505050565b600080604083850312156137ee576137ed6130d8565b5b60006137fc858286016131b8565b925050602061380d858286016131b8565b9150509250929050565b600081519050613826816130ec565b92915050565b600060208284031215613842576138416130d8565b5b600061385084828501613817565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613893826130e2565b915061389e836130e2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156138d7576138d6613859565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061391c826130e2565b9150613927836130e2565b925082613937576139366138e2565b5b828204905092915050565b600081519050613951816131a1565b92915050565b600067ffffffffffffffff82111561397257613971613483565b5b61397b82613472565b9050602081019050919050565b60005b838110156139a657808201518184015260208101905061398b565b838111156139b5576000848401525b50505050565b60006139ce6139c984613957565b6134e3565b9050828152602081018484840111156139ea576139e961346d565b5b6139f5848285613988565b509392505050565b600082601f830112613a1257613a11613468565b5b8151613a228482602086016139bb565b91505092915050565b600080600080600060a08688031215613a4757613a466130d8565b5b6000613a5588828901613942565b9550506020613a6688828901613817565b9450506040613a7788828901613817565b9350506060613a8888828901613817565b925050608086015167ffffffffffffffff811115613aa957613aa86130dd565b5b613ab5888289016139fd565b9150509295509295909350565b6000613acd826130e2565b91506000821415613ae157613ae0613859565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613b26826130e2565b9150613b31836130e2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b6657613b65613859565b5b828201905092915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613bde602c83613b71565b9150613be982613b82565b604082019050919050565b60006020820190508181036000830152613c0d81613bd1565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613c70602c83613b71565b9150613c7b82613c14565b604082019050919050565b60006020820190508181036000830152613c9f81613c63565b9050919050565b6000613cb1826130e2565b9150613cbc836130e2565b925082821015613ccf57613cce613859565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000604082019050613d1e600083018561337e565b613d2b6020830184613145565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613d68602083613b71565b9150613d7382613d32565b602082019050919050565b60006020820190508181036000830152613d9781613d5b565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613dfa602e83613b71565b9150613e0582613d9e565b604082019050919050565b60006020820190508181036000830152613e2981613ded565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613e8c602683613b71565b9150613e9782613e30565b604082019050919050565b60006020820190508181036000830152613ebb81613e7f565b9050919050565b600081905092915050565b7f476f7665726e616e636500000000000000000000000000000000000000000000600082015250565b6000613f03600a83613ec2565b9150613f0e82613ecd565b600a82019050919050565b6000613f2482613ef6565b9150819050919050565b600060208284031215613f4457613f436130d8565b5b6000613f5284828501613942565b91505092915050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b6000613fb7602f83613b71565b9150613fc282613f5b565b604082019050919050565b60006020820190508181036000830152613fe681613faa565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614049602b83613b71565b915061405482613fed565b604082019050919050565b600060208201905081810360008301526140788161403c565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006140db602d83613b71565b91506140e68261407f565b604082019050919050565b6000602082019050818103600083015261410a816140ce565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061416d602683613b71565b915061417882614111565b604082019050919050565b6000602082019050818103600083015261419c81614160565b9050919050565b600081519050919050565b600081905092915050565b60006141c4826141a3565b6141ce81856141ae565b93506141de818560208601613988565b80840191505092915050565b60006141f682846141b9565b915081905092915050565b600081519050919050565b600061421782614201565b6142218185613b71565b9350614231818560208601613988565b61423a81613472565b840191505092915050565b6000602082019050818103600083015261425f818461420c565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208d896a9ec9c1526a0eec7beda071c416b72a907bca66e33fc23c7dec6feb9cb564736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c80637b10399911610102578063abaaecf911610095578063c494ec1e11610064578063c494ec1e146106f1578063d0ebdbe71461072e578063e87c28a714610757578063f2fde38b14610780576101e3565b8063abaaecf914610621578063b187bd261461065e578063c0c53b8b14610689578063c40da15c146106b2576101e3565b80638da5cb5b116100d15780638da5cb5b146105635780639468ba0e1461058e5780639fd0506d146105b9578063a730117e146105e4576101e3565b80637b103999146104df5780637c0d530f1461050a5780638456cb59146105215780638cc9931f14610538576101e3565b80633f4ba83a1161017a5780634f1ef286116101495780634f1ef2861461045557806354255be014610471578063577bae251461049f578063715018a6146104c8576101e3565b80633f4ba83a14610396578063481c6a75146103ad57806348fd6ea6146103d85780634c23f22e14610415576101e3565b80632488d909116101b65780632488d909146102c85780633127ce32146103055780633659cfe6146103425780633cbf58721461036b576101e3565b80630567847f146101e85780630d526b9614610225578063121634e81461026257806319a7aff01461029f575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190613118565b6107a9565b60405161021c9190613154565b60405180910390f35b34801561023157600080fd5b5061024c60048036038101906102479190613118565b610913565b6040516102599190613154565b60405180910390f35b34801561026e57600080fd5b50610289600480360381019061028491906131cd565b6109ab565b6040516102969190613154565b60405180910390f35b3480156102ab57600080fd5b506102c660048036038101906102c19190613118565b610b49565b005b3480156102d457600080fd5b506102ef60048036038101906102ea9190613118565b610c74565b6040516102fc919061325e565b60405180910390f35b34801561031157600080fd5b5061032c600480360381019061032791906131cd565b610cc9565b6040516103399190613328565b60405180910390f35b34801561034e57600080fd5b50610369600480360381019061036491906131cd565b610d63565b005b34801561037757600080fd5b50610380610eec565b60405161038d9190613363565b60405180910390f35b3480156103a257600080fd5b506103ab610f22565b005b3480156103b957600080fd5b506103c2610fc6565b6040516103cf919061338d565b60405180910390f35b3480156103e457600080fd5b506103ff60048036038101906103fa91906131cd565b610fec565b60405161040c9190613154565b60405180910390f35b34801561042157600080fd5b5061043c600480360381019061043791906133a8565b611329565b60405161044c9493929190613423565b60405180910390f35b61046f600480360381019061046a91906135ae565b6118c3565b005b34801561047d57600080fd5b50610486611a00565b6040516104969493929190613423565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c1919061360a565b611a1b565b005b3480156104d457600080fd5b506104dd611bbc565b005b3480156104eb57600080fd5b506104f4611c44565b60405161050191906136bc565b60405180910390f35b34801561051657600080fd5b5061051f611c6a565b005b34801561052d57600080fd5b50610536611cf8565b005b34801561054457600080fd5b5061054d611d9c565b60405161055a9190613154565b60405180910390f35b34801561056f57600080fd5b50610578611e19565b604051610585919061338d565b60405180910390f35b34801561059a57600080fd5b506105a3611e43565b6040516105b09190613363565b60405180910390f35b3480156105c557600080fd5b506105ce611e79565b6040516105db919061338d565b60405180910390f35b3480156105f057600080fd5b5061060b600480360381019061060691906131cd565b611ebf565b6040516106189190613154565b60405180910390f35b34801561062d57600080fd5b5061064860048036038101906106439190613118565b611f71565b6040516106559190613154565b60405180910390f35b34801561066a57600080fd5b50610673611f89565b60405161068091906136f2565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab919061370d565b611fcf565b005b3480156106be57600080fd5b506106d960048036038101906106d49190613760565b6120d1565b6040516106e8939291906137a0565b60405180910390f35b3480156106fd57600080fd5b5061071860048036038101906107139190613118565b61218e565b6040516107259190613154565b60405180910390f35b34801561073a57600080fd5b50610755600480360381019061075091906131cd565b6122f8565b005b34801561076357600080fd5b5061077e600480360381019061077991906137d7565b612380565b005b34801561078c57600080fd5b506107a760048036038101906107a291906131cd565b612520565b005b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d919061382c565b90506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d2919061382c565b905060008214806108e35750600081145b156108f257839250505061090e565b8181856108ff9190613888565b6109099190613911565b925050505b919050565b60008061091e61263b565b73ffffffffffffffffffffffffffffffffffffffff1663c7f758a8846040518263ffffffff1660e01b81526004016109569190613154565b600060405180830381865afa158015610973573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061099c9190613a2b565b50509250505080915050919050565b600080606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080826001018054905090505b6000811115610b365760008360010182610a1690613ac2565b92508281548110610a2a57610a29613aec565b5b906000526020600020015490506000606b60008381526020019081526020016000205490506000811415610a5f5750506109fd565b610a6761263b565b73ffffffffffffffffffffffffffffffffffffffff1663ad78c1096040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad5919061382c565b81610ae09190613b1b565b4211610b2f5760008560000160008481526020019081526020016000209050610b2b85826003015483600201548460010154610b1c9190613b1b565b610b269190613b1b565b612702565b9450505b50506109fd565b610b3f8261218e565b9350505050919050565b610b51611f89565b15610b88576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606b6000838152602001908152602001600020549050610ba861263b565b73ffffffffffffffffffffffffffffffffffffffff1663ad78c1096040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c16919061382c565b81610c219190613b1b565b4211610c59576040517f8251df3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606b6000838152602001908152602001600020600090555050565b610c7c6130a6565b606960008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b6060606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015610d5757602002820191906000526020600020905b815481526020019060010190808311610d43575b50505050509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de990613bf4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e3161271c565b73ffffffffffffffffffffffffffffffffffffffff1614610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e90613c86565b60405180910390fd5b610e9081612773565b610ee981600067ffffffffffffffff811115610eaf57610eae613483565b5b6040519080825280601f01601f191660200182016040528015610ee15781602001600182028036833780820191505090505b5060006127f2565b50565b60017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c610f1c9190613ca6565b60001b81565b610f2a611e79565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f8e576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f9860006129c3565b7f0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f9460405160405180910390a1565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610ff6611f89565b1561102d576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080826001018054905090505b60008111156112d7576000836001018261109790613ac2565b925082815481106110ab576110aa613aec565b5b906000526020600020015490506000606b600083815260200190815260200160002054905060008114156111625784600101600186600101805490506110f19190613ca6565b8154811061110257611101613aec565b5b906000526020600020015485600101848154811061112357611122613aec565b5b90600052602060002001819055508460010180548061114557611144613cda565b5b60019003818190600052602060002001600090559055505061107e565b61116a61263b565b73ffffffffffffffffffffffffffffffffffffffff1663ad78c1096040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d8919061382c565b816111e39190613b1b565b4211611236576000856000016000848152602001908152602001600020905061122e8582600301548360020154846001015461121f9190613b1b565b6112299190613b1b565b612702565b9450506112d0565b846001016001866001018054905061124e9190613ca6565b8154811061125f5761125e613aec565b5b90600052602060002001548560010184815481106112805761127f613aec565b5b9060005260206000200181905550846001018054806112a2576112a1613cda565b5b60019003818190600052602060002001600090559055606b6000838152602001908152602001600020600090555b505061107e565b60006112e28361218e565b90507f7c6f785c69c2af01e80f58e72c654a146308c1a70e15028f45ac1d98b08303888682604051611315929190613d09565b60405180910390a180945050505050919050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113c157336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016113b8919061338d565b60405180910390fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663536a5f278b6040518263ffffffff1660e01b815260040161141e919061338d565b602060405180830381865afa15801561143b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145f919061382c565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b81526004016114ba919061338d565b602060405180830381865afa1580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb919061382c565b6115059190613b1b565b9050600081141561154d57896040517f09835c4f000000000000000000000000000000000000000000000000000000008152600401611544919061338d565b60405180910390fd5b600086888a61155c9190613b1b565b6115669190613b1b565b9050611571826107a9565b8111156115b5578a6040517f25becec40000000000000000000000000000000000000000000000000000000081526004016115ac919061338d565b60405180910390fd5b6000606a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160008d815260200190815260200160002090506000606960008e815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508160010154816020018181516116719190613ca6565b9150818152505081600201548160400181815161168e9190613ca6565b915081815250508160030154816060018181516116ab9190613ca6565b915081815250508b816020018181516116c49190613b1b565b915081815250508a816040018181516116dd9190613b1b565b9150818152505089816060018181516116f69190613b1b565b9150818152505060405180608001604052808e815260200182602001518152602001826040015181526020018260600151815250606960008f8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050506000826000015414156117a157826001018d90806001815401808255809150506001900390600052602060002001600090919091909150555b60405180608001604052808e81526020018d81526020018c81526020018b8152508360000160008f8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508c8e73ffffffffffffffffffffffffffffffffffffffff167fccddc503efe2d90a6cc16414e99fd2826fd7d72313194d217e36278c0905f9438e8e8e60405161184d939291906137a0565b60405180910390a36000606b60008f81526020019081526020016000205414156118925761187a8d610913565b606b60008f8152602001908152602001600020819055505b61189b8461218e565b8160200151826040015183606001519850985098509850505050505095509550955095915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415611952576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194990613bf4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661199161271c565b73ffffffffffffffffffffffffffffffffffffffff16146119e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119de90613c86565b60405180910390fd5b6119f082612773565b6119fc828260016127f2565b5050565b60008060008060018060036000935093509350935090919293565b611a23611f89565b15611a5a576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001018381548110611ab557611ab4613aec565b5b906000526020600020015490506000811480611ad15750838114155b15611b08576040517f07cc4d8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606b600086815260200190815260200160002054905060008114611b3257611b3185610b49565b5b8260010160018460010180549050611b4a9190613ca6565b81548110611b5b57611b5a613aec565b5b9060005260206000200154836001018581548110611b7c57611b7b613aec565b5b906000526020600020018190555082600101805480611b9e57611b9d613cda565b5b60019003818190600052602060002001600090559055505050505050565b611bc4612a01565b73ffffffffffffffffffffffffffffffffffffffff16611be2611e19565b73ffffffffffffffffffffffffffffffffffffffff1614611c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2f90613d7e565b60405180910390fd5b611c426000612a09565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611c72612a01565b73ffffffffffffffffffffffffffffffffffffffff16611c90611e19565b73ffffffffffffffffffffffffffffffffffffffff1614611ce6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdd90613d7e565b60405180910390fd5b611cf6611cf1611e19565b612acf565b565b611d00611e79565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d64576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d6e60016129c3565b7fab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d26760405160405180910390a1565b6000611da661263b565b73ffffffffffffffffffffffffffffffffffffffff1663ad78c1096040518163ffffffff1660e01b8152600401602060405180830381865afa158015611df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e14919061382c565b905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c611e739190613ca6565b60001b81565b600080600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c611eae9190613ca6565b60001b905080549150819250505090565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401611f1d919061338d565b602060405180830381865afa158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e919061382c565b9050611f69816107a9565b915050919050565b606b6020528060005260406000206000915090505481565b600080600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c611fbe9190613ca6565b60001b905080549150819250505090565b600060019054906101000a900460ff16611ff75760008054906101000a900460ff1615612000565b611fff612bab565b5b61203f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203690613e10565b60405180910390fd5b60008060019054906101000a900460ff16159050801561208f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61209884612bbc565b6120a182612ccd565b6120aa83612a09565b80156120cb5760008060016101000a81548160ff0219169083151502179055505b50505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461216857336040517f3b2495f100000000000000000000000000000000000000000000000000000000815260040161215f919061338d565b60405180910390fd5b61217785856000806000611329565b909192508093508194508295505050509250925092565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612222919061382c565b90506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b7919061382c565b905060008214806122c85750600081145b156122d75783925050506122f3565b8082856122e49190613888565b6122ee9190613911565b925050505b919050565b612300612a01565b73ffffffffffffffffffffffffffffffffffffffff1661231e611e19565b73ffffffffffffffffffffffffffffffffffffffff1614612374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236b90613d7e565b60405180910390fd5b61237d81612d28565b50565b612388612a01565b73ffffffffffffffffffffffffffffffffffffffff166123a6611e19565b73ffffffffffffffffffffffffffffffffffffffff16146123fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f390613d7e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806124635750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1561249a576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b612528612a01565b73ffffffffffffffffffffffffffffffffffffffff16612546611e19565b73ffffffffffffffffffffffffffffffffffffffff161461259c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259390613d7e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561260c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260390613ea2565b60405180910390fd5b61261581612a09565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200161268a90613f19565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016126bc9190613363565b602060405180830381865afa1580156126d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fd9190613f2e565b905090565b6000818310156127125781612714565b825b905092915050565b600061274a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612e16565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61277b612a01565b73ffffffffffffffffffffffffffffffffffffffff16612799611e19565b73ffffffffffffffffffffffffffffffffffffffff16146127ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e690613d7e565b60405180910390fd5b50565b60006127fc61271c565b905061280784612e20565b6000835111806128145750815b15612825576128238484612ed9565b505b60006128537f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612f06565b90508060000160009054906101000a900460ff166129bc5760018160000160006101000a81548160ff02191690831515021790555061291f858360405160240161289d919061338d565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612ed9565b5060008160000160006101000a81548160ff02191690831515021790555061294561271c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146129b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a990613fcd565b60405180910390fd5b6129bb85612f10565b5b5050505050565b600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c6129f59190613ca6565b60001b90508181555050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b36576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c612b689190613ca6565b60001b90508181557fd11d57c2c7468878b1035df11c670bcd0091aa840bf8aa166365397622237bea82604051612b9f919061338d565b60405180910390a15050565b6000612bb630612618565b15905090565b600060019054906101000a900460ff16612c0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c029061405f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612c885761ce10606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612cca565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600060019054906101000a900460ff16612d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d139061405f565b60405180910390fd5b612d2581612d28565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612d8f576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b6000819050919050565b612e2981612f5f565b612e68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5f906140f1565b60405180910390fd5b80612e957f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612e16565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060612efe838360405180606001604052806027815260200161426860279139612f72565b905092915050565b6000819050919050565b612f1981612e20565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600080823b905060008111915050919050565b6060612f7d84612f5f565b612fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb390614183565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051612fe491906141ea565b600060405180830381855af49150503d806000811461301f576040519150601f19603f3d011682016040523d82523d6000602084013e613024565b606091505b509150915061303482828661303f565b925050509392505050565b6060831561304f5782905061309f565b6000835111156130625782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130969190614245565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6130f5816130e2565b811461310057600080fd5b50565b600081359050613112816130ec565b92915050565b60006020828403121561312e5761312d6130d8565b5b600061313c84828501613103565b91505092915050565b61314e816130e2565b82525050565b60006020820190506131696000830184613145565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061319a8261316f565b9050919050565b6131aa8161318f565b81146131b557600080fd5b50565b6000813590506131c7816131a1565b92915050565b6000602082840312156131e3576131e26130d8565b5b60006131f1848285016131b8565b91505092915050565b613203816130e2565b82525050565b60808201600082015161321f60008501826131fa565b50602082015161323260208501826131fa565b50604082015161324560408501826131fa565b50606082015161325860608501826131fa565b50505050565b60006080820190506132736000830184613209565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006132b183836131fa565b60208301905092915050565b6000602082019050919050565b60006132d582613279565b6132df8185613284565b93506132ea83613295565b8060005b8381101561331b57815161330288826132a5565b975061330d836132bd565b9250506001810190506132ee565b5085935050505092915050565b6000602082019050818103600083015261334281846132ca565b905092915050565b6000819050919050565b61335d8161334a565b82525050565b60006020820190506133786000830184613354565b92915050565b6133878161318f565b82525050565b60006020820190506133a2600083018461337e565b92915050565b600080600080600060a086880312156133c4576133c36130d8565b5b60006133d2888289016131b8565b95505060206133e388828901613103565b94505060406133f488828901613103565b935050606061340588828901613103565b925050608061341688828901613103565b9150509295509295909350565b60006080820190506134386000830187613145565b6134456020830186613145565b6134526040830185613145565b61345f6060830184613145565b95945050505050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134bb82613472565b810181811067ffffffffffffffff821117156134da576134d9613483565b5b80604052505050565b60006134ed6130ce565b90506134f982826134b2565b919050565b600067ffffffffffffffff82111561351957613518613483565b5b61352282613472565b9050602081019050919050565b82818337600083830152505050565b600061355161354c846134fe565b6134e3565b90508281526020810184848401111561356d5761356c61346d565b5b61357884828561352f565b509392505050565b600082601f83011261359557613594613468565b5b81356135a584826020860161353e565b91505092915050565b600080604083850312156135c5576135c46130d8565b5b60006135d3858286016131b8565b925050602083013567ffffffffffffffff8111156135f4576135f36130dd565b5b61360085828601613580565b9150509250929050565b600080600060608486031215613623576136226130d8565b5b6000613631868287016131b8565b935050602061364286828701613103565b925050604061365386828701613103565b9150509250925092565b6000819050919050565b600061368261367d6136788461316f565b61365d565b61316f565b9050919050565b600061369482613667565b9050919050565b60006136a682613689565b9050919050565b6136b68161369b565b82525050565b60006020820190506136d160008301846136ad565b92915050565b60008115159050919050565b6136ec816136d7565b82525050565b600060208201905061370760008301846136e3565b92915050565b600080600060608486031215613726576137256130d8565b5b6000613734868287016131b8565b9350506020613745868287016131b8565b9250506040613756868287016131b8565b9150509250925092565b60008060408385031215613777576137766130d8565b5b6000613785858286016131b8565b925050602061379685828601613103565b9150509250929050565b60006060820190506137b56000830186613145565b6137c26020830185613145565b6137cf6040830184613145565b949350505050565b600080604083850312156137ee576137ed6130d8565b5b60006137fc858286016131b8565b925050602061380d858286016131b8565b9150509250929050565b600081519050613826816130ec565b92915050565b600060208284031215613842576138416130d8565b5b600061385084828501613817565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613893826130e2565b915061389e836130e2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156138d7576138d6613859565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061391c826130e2565b9150613927836130e2565b925082613937576139366138e2565b5b828204905092915050565b600081519050613951816131a1565b92915050565b600067ffffffffffffffff82111561397257613971613483565b5b61397b82613472565b9050602081019050919050565b60005b838110156139a657808201518184015260208101905061398b565b838111156139b5576000848401525b50505050565b60006139ce6139c984613957565b6134e3565b9050828152602081018484840111156139ea576139e961346d565b5b6139f5848285613988565b509392505050565b600082601f830112613a1257613a11613468565b5b8151613a228482602086016139bb565b91505092915050565b600080600080600060a08688031215613a4757613a466130d8565b5b6000613a5588828901613942565b9550506020613a6688828901613817565b9450506040613a7788828901613817565b9350506060613a8888828901613817565b925050608086015167ffffffffffffffff811115613aa957613aa86130dd565b5b613ab5888289016139fd565b9150509295509295909350565b6000613acd826130e2565b91506000821415613ae157613ae0613859565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613b26826130e2565b9150613b31836130e2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b6657613b65613859565b5b828201905092915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613bde602c83613b71565b9150613be982613b82565b604082019050919050565b60006020820190508181036000830152613c0d81613bd1565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613c70602c83613b71565b9150613c7b82613c14565b604082019050919050565b60006020820190508181036000830152613c9f81613c63565b9050919050565b6000613cb1826130e2565b9150613cbc836130e2565b925082821015613ccf57613cce613859565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000604082019050613d1e600083018561337e565b613d2b6020830184613145565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613d68602083613b71565b9150613d7382613d32565b602082019050919050565b60006020820190508181036000830152613d9781613d5b565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613dfa602e83613b71565b9150613e0582613d9e565b604082019050919050565b60006020820190508181036000830152613e2981613ded565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613e8c602683613b71565b9150613e9782613e30565b604082019050919050565b60006020820190508181036000830152613ebb81613e7f565b9050919050565b600081905092915050565b7f476f7665726e616e636500000000000000000000000000000000000000000000600082015250565b6000613f03600a83613ec2565b9150613f0e82613ecd565b600a82019050919050565b6000613f2482613ef6565b9150819050919050565b600060208284031215613f4457613f436130d8565b5b6000613f5284828501613942565b91505092915050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b6000613fb7602f83613b71565b9150613fc282613f5b565b604082019050919050565b60006020820190508181036000830152613fe681613faa565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614049602b83613b71565b915061405482613fed565b604082019050919050565b600060208201905081810360008301526140788161403c565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006140db602d83613b71565b91506140e68261407f565b604082019050919050565b6000602082019050818103600083015261410a816140ce565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061416d602683613b71565b915061417882614111565b604082019050919050565b6000602082019050818103600083015261419c81614160565b9050919050565b600081519050919050565b600081905092915050565b60006141c4826141a3565b6141ce81856141ae565b93506141de818560208601613988565b80840191505092915050565b60006141f682846141b9565b915081905092915050565b600081519050919050565b600061421782614201565b6142218185613b71565b9350614231818560208601613988565b61423a81613472565b840191505092915050565b6000602082019050818103600083015261425f818461420c565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208d896a9ec9c1526a0eec7beda071c416b72a907bca66e33fc23c7dec6feb9cb564736f6c634300080b0033",
  "devdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "params": {
            "caller": "`msg.sender` that called the function."
          }
        }
      ],
      "NoStakedCelo(address)": [
        {
          "params": {
            "account": "The account's address."
          }
        }
      ],
      "NotEnoughStakedCelo(address)": [
        {
          "params": {
            "account": "The account's address."
          }
        }
      ]
    },
    "events": {
      "LockedStCeloInVoting(address,uint256)": {
        "params": {
          "account": "The account's address.",
          "lockedCelo": "The stCELO that is still being locked."
        }
      },
      "ProposalVoted(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "abstainVotes": "The abstain votes.",
          "noVotes": "The no votes.",
          "proposalId": "The proposal UIID.",
          "voter": "The voter's address.",
          "yesVotes": "The yes votes."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "deleteExpiredProposalTimestamp(uint256)": {
        "params": {
          "proposalId": "The proposal Id."
        }
      },
      "deleteExpiredVoterProposalId(address,uint256,uint256)": {
        "params": {
          "index": "Index of voter's proposal id.",
          "proposalId": "The proposal id.",
          "voter": "The voter address."
        }
      },
      "getLockedStCeloInVoting(address)": {
        "params": {
          "beneficiary": "The account."
        }
      },
      "getProposalTimestamp(uint256)": {
        "params": {
          "proposalId": "The proposal UUID."
        },
        "returns": {
          "_0": "The timestamp of proposal."
        }
      },
      "getReferendumDuration()": {
        "returns": {
          "_0": "Governance referendum duration."
        }
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "Storage version of the contract.",
          "_1": "Major version of the contract.",
          "_2": "Minor version of the contract.",
          "_3": "Patch version of the contract."
        }
      },
      "getVoteRecord(uint256)": {
        "params": {
          "proposalId": "The proposal UUID."
        }
      },
      "getVoteWeight(address)": {
        "params": {
          "beneficiary": "The account."
        }
      },
      "getVotedStillRelevantProposals(address)": {
        "details": "For up to date result call updateHistoryAndReturnLockedStCeloInVoting first.",
        "params": {
          "voter": "The voter."
        },
        "returns": {
          "_0": "Proposals in referendum stage."
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "_manager": "The address of the contract manager.",
          "_owner": "The address of the contract owner.",
          "_registry": "The address of the Celo Registry."
        }
      },
      "isPaused()": {
        "returns": {
          "_0": "`true` if the contract is paused, `false` otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeVotes(address,uint256)": {
        "params": {
          "accountVoter": "The account that is voting.",
          "proposalId": "The ID of the proposal to vote on."
        },
        "returns": {
          "totalAbstainVotes": "SUM of all AccountContract abstain votes for proposal.",
          "totalNoVotes": "SUM of all AccountContract no votes for proposal.",
          "totalYesVotes": "SUM of all AccountContract yes votes for proposal."
        }
      },
      "setDependencies(address,address)": {
        "details": "The StakedCelo contracts all reference each other so we need a way of setting these after all contracts are deployed and initialized.",
        "params": {
          "_account": "The address of the Account contract.",
          "_stakedCelo": "the address of the StakedCelo contract."
        }
      },
      "setManager(address)": {
        "params": {
          "_manager": "The new manager address."
        }
      },
      "toCelo(uint256)": {
        "params": {
          "stCeloAmount": "The amount of stCELO burned."
        },
        "returns": {
          "_0": "The amount of CELO that should be withdrawn."
        }
      },
      "toStakedCelo(uint256)": {
        "params": {
          "celoAmount": "The amount of CELO deposited."
        },
        "returns": {
          "_0": "The amount of stCELO that should be minted."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateHistoryAndReturnLockedStCeloInVoting(address)": {
        "params": {
          "beneficiary": "The beneficiary."
        },
        "returns": {
          "_0": "Currently locked stCELO in voting."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "voteProposal(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "abstainVotes": "The abstain votes weight.",
          "accountVoter": "The account that is voting.",
          "noVotes": "The no votes weight.",
          "proposalId": "The ID of the proposal to vote on.",
          "yesVotes": "The yes votes weight."
        },
        "returns": {
          "_0": "totalWeights Account's staked celo balance.",
          "totalAbstainVotes": "SUM of all AccountContract abstain votes for proposal.",
          "totalNoVotes": "SUM of all AccountContract no votes for proposal.",
          "totalYesVotes": "SUM of all AccountContract yes votes for proposal."
        }
      }
    },
    "title": "Handles governance voting for CELO in protocol.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressZeroNotAllowed()": [
        {
          "notice": "Used when attempting to pass in address zero where not allowed."
        }
      ],
      "CallerNotManager(address)": [
        {
          "notice": "Used when an `onlyManager` function is called by a non-manager."
        }
      ],
      "IncorrectIndex()": [
        {
          "notice": "Used when attempting to delete voter's proposal id with incorrect index."
        }
      ],
      "NoStakedCelo(address)": [
        {
          "notice": "Used when attempting to vote when there is no stCELO."
        }
      ],
      "NotEnoughStakedCelo(address)": [
        {
          "notice": "Used when attempting to vote when there is not enough of stCELO."
        }
      ],
      "OnlyPauser()": [
        {
          "notice": "Used when an `onlyPauser` function is called with a different address."
        }
      ],
      "Paused()": [
        {
          "notice": "Used when an `onlyWhenNotPaused` function is called while the contract is paused."
        }
      ],
      "ProposalNotExpired()": [
        {
          "notice": "Used when attempting to delete voter's proposal id when proposal is not expired."
        }
      ]
    },
    "events": {
      "ContractPaused()": {
        "notice": "Emitted when this contract is paused."
      },
      "ContractUnpaused()": {
        "notice": "Emitted when this contract is unpaused."
      },
      "LockedStCeloInVoting(address,uint256)": {
        "notice": "Emitted when unlock of stCELO is requested."
      },
      "ManagerSet(address)": {
        "notice": "Emitted when the manager is initially set or later modified."
      },
      "PauserSet(address)": {
        "notice": "Emitted when the address authorized to pause/unpause the contract is changed."
      },
      "ProposalVoted(address,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when an account votes for governance proposal."
      }
    },
    "kind": "user",
    "methods": {
      "PAUSED_POSITION()": {
        "notice": "The storage slot under which we store a boolean representing whether or not the contract is currently paused."
      },
      "PAUSER_POSITION()": {
        "notice": "The storage slot under which we store an address representing the address permissioned to pause/unpause this contract."
      },
      "constructor": {
        "notice": "Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized."
      },
      "deleteExpiredProposalTimestamp(uint256)": {
        "notice": "Deletes timestamp of expired proposal from storage."
      },
      "deleteExpiredVoterProposalId(address,uint256,uint256)": {
        "notice": "Deletes proposalId from voter's history if proposal expired."
      },
      "getLockedStCeloInVoting(address)": {
        "notice": "Returns currently locked stCELO in voting. (This stCELO cannot be unlocked.)"
      },
      "getProposalTimestamp(uint256)": {
        "notice": "Returns save timestamp of proposal."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "getVoteRecord(uint256)": {
        "notice": "Gets vote record of proposal."
      },
      "getVoteWeight(address)": {
        "notice": "Returns vote weight of account owning stCELO."
      },
      "getVotedStillRelevantProposals(address)": {
        "notice": "Returns proposals still in referendum stage that voter voted on."
      },
      "initialize(address,address,address)": {
        "notice": "Initialize the contract with registry and owner."
      },
      "isPaused()": {
        "notice": "Returns whether or not the contract is paused."
      },
      "pause()": {
        "notice": "Pauses the contract."
      },
      "pauser()": {
        "notice": "Returns the address permissioned to pause/unpause this contract."
      },
      "proposalTimestamps(uint256)": {
        "notice": "Timestamps of every voted proposal."
      },
      "registry()": {
        "notice": "The Registry."
      },
      "revokeVotes(address,uint256)": {
        "notice": "Revokes votes on already voted proposal."
      },
      "setDependencies(address,address)": {
        "notice": "Set this contract's dependencies in the StakedCelo system."
      },
      "setManager(address)": {
        "notice": "Sets the manager address."
      },
      "setPauser()": {
        "notice": "Sets that address permissioned to pause/unpause this contract to the owner of this contract."
      },
      "toCelo(uint256)": {
        "notice": "Computes the amount of CELO that should be withdrawn for a given amount of stCELO burned."
      },
      "toStakedCelo(uint256)": {
        "notice": "Computes the amount of stCELO that should be minted for a given amount of CELO deposited."
      },
      "unpause()": {
        "notice": "Unpauses the contract."
      },
      "updateHistoryAndReturnLockedStCeloInVoting(address)": {
        "notice": "Updates the beneficiaries voting history and returns locked stCELO in voting. (This stCELO cannot be unlocked.) And it will remove voted proposals from account history if appropriate."
      },
      "voteProposal(address,uint256,uint256,uint256,uint256)": {
        "notice": "Votes on a proposal in the referendum stage."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Vote.sol:Vote",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Vote.sol:Vote",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 481,
        "contract": "contracts/Vote.sol:Vote",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Vote.sol:Vote",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Vote.sol:Vote",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6369,
        "contract": "contracts/Vote.sol:Vote",
        "label": "registry",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRegistry)7600"
      },
      {
        "astId": 3636,
        "contract": "contracts/Vote.sol:Vote",
        "label": "manager",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 5329,
        "contract": "contracts/Vote.sol:Vote",
        "label": "stakedCelo",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IStakedCelo)7668"
      },
      {
        "astId": 5333,
        "contract": "contracts/Vote.sol:Vote",
        "label": "account",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IAccount)6581"
      },
      {
        "astId": 5339,
        "contract": "contracts/Vote.sol:Vote",
        "label": "voteRecords",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_struct(ProposalVoteRecord)5307_storage)"
      },
      {
        "astId": 5345,
        "contract": "contracts/Vote.sol:Vote",
        "label": "voters",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(Voter)5316_storage)"
      },
      {
        "astId": 5350,
        "contract": "contracts/Vote.sol:Vote",
        "label": "proposalTimestamps",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccount)6581": {
        "encoding": "inplace",
        "label": "contract IAccount",
        "numberOfBytes": "20"
      },
      "t_contract(IRegistry)7600": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IStakedCelo)7668": {
        "encoding": "inplace",
        "label": "contract IStakedCelo",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Voter)5316_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vote.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)5316_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVoteRecord)5307_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vote.ProposalVoteRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVoteRecord)5307_storage"
      },
      "t_mapping(t_uint256,t_struct(VoterRecord)5325_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vote.VoterRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(VoterRecord)5325_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ProposalVoteRecord)5307_storage": {
        "encoding": "inplace",
        "label": "struct Vote.ProposalVoteRecord",
        "members": [
          {
            "astId": 5300,
            "contract": "contracts/Vote.sol:Vote",
            "label": "proposalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5302,
            "contract": "contracts/Vote.sol:Vote",
            "label": "yesVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5304,
            "contract": "contracts/Vote.sol:Vote",
            "label": "noVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5306,
            "contract": "contracts/Vote.sol:Vote",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Voter)5316_storage": {
        "encoding": "inplace",
        "label": "struct Vote.Voter",
        "members": [
          {
            "astId": 5312,
            "contract": "contracts/Vote.sol:Vote",
            "label": "proposalVotes",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(VoterRecord)5325_storage)"
          },
          {
            "astId": 5315,
            "contract": "contracts/Vote.sol:Vote",
            "label": "votedProposalIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VoterRecord)5325_storage": {
        "encoding": "inplace",
        "label": "struct Vote.VoterRecord",
        "members": [
          {
            "astId": 5318,
            "contract": "contracts/Vote.sol:Vote",
            "label": "proposalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5320,
            "contract": "contracts/Vote.sol:Vote",
            "label": "yesVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5322,
            "contract": "contracts/Vote.sol:Vote",
            "label": "noVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5324,
            "contract": "contracts/Vote.sol:Vote",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}