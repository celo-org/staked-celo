{
  "address": "0x37085C37065F0E320776f775865e2832046A0304",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZeroNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotManager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "CantWithdrawAccordingToStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "FailedToUnblockGroup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupAlreadyBlocked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupBalanced",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotBalanced",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotEligible",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotOverflowing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupStillOverflowing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveGroups",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoGroups",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupBlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupUnblocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        }
      ],
      "name": "PauserSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAUSED_POSITION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_POSITION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "account",
      "outputs": [
        {
          "internalType": "contract IAccount",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "blockGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultStrategy",
      "outputs": [
        {
          "internalType": "contract IDefaultStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "celoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stCeloAmount",
          "type": "uint256"
        }
      ],
      "name": "generateDepositVoteDistribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "finalGroups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "finalVotes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "celoWithdrawalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stCeloWithdrawalAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTransfer",
          "type": "bool"
        }
      ],
      "name": "generateWithdrawalVoteDistribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "groups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBlockedGroup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfBlockedGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfVotedGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getStCeloInGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overflow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unhealthy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVotedGroup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "groupHealth",
      "outputs": [
        {
          "internalType": "contract IGroupHealth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "isBlockedGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "isVotedGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "rebalanceOverflowedGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "rebalanceWhenHealthChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_groupHealth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultStrategy",
          "type": "address"
        }
      ],
      "name": "setDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stCeloInGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStCeloLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStCeloOverflow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStCeloUnhealthy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "unblockGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdafdeb21b2cf588a25efd44fcd6636233b71030395d31971915b159adcb69022",
  "receipt": {
    "to": null,
    "from": "0x5bC1C4C1D67C5E4384189302BC653A611568a788",
    "contractAddress": "0x37085C37065F0E320776f775865e2832046A0304",
    "transactionIndex": 0,
    "gasUsed": "4881426",
    "logsBloom": "0x
    "blockHash": "0x537c95f42f6bb6b26c3518658044c24c5d066baff4d9da5e695bad46ee0b942b",
    "transactionHash": "0xdafdeb21b2cf588a25efd44fcd6636233b71030395d31971915b159adcb69022",
    "logs": [],
    "blockNumber": 23564467,
    "cumulativeGasUsed": "4881426",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4e72b277d948a49a90e2a93328ecbb49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZeroNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"CantWithdrawAccordingToStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"FailedToUnblockGroup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupAlreadyBlocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupBalanced\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotBalanced\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotEligible\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotOverflowing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupStillOverflowing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveGroups\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoGroups\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupUnblocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"PauserSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAUSED_POSITION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_POSITION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"account\",\"outputs\":[{\"internalType\":\"contract IAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"blockGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultStrategy\",\"outputs\":[{\"internalType\":\"contract IDefaultStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"celoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stCeloAmount\",\"type\":\"uint256\"}],\"name\":\"generateDepositVoteDistribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"finalGroups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"finalVotes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"celoWithdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stCeloWithdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTransfer\",\"type\":\"bool\"}],\"name\":\"generateWithdrawalVoteDistribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"groups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBlockedGroup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfBlockedGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfVotedGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getStCeloInGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unhealthy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVotedGroup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupHealth\",\"outputs\":[{\"internalType\":\"contract IGroupHealth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"isBlockedGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"isVotedGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"rebalanceOverflowedGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"rebalanceWhenHealthChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_groupHealth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultStrategy\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stCeloInGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStCeloLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStCeloOverflow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStCeloUnhealthy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"unblockGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"params\":{\"caller\":\"`msg.sender` that called the function.\"}}],\"CantWithdrawAccordingToStrategy(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"FailedToUnblockGroup(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupAlreadyBlocked(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupBalanced(address)\":[{\"params\":{\"group\":\"The group address.\"}}],\"GroupNotBalanced(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupNotEligible(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupNotOverflowing(address)\":[{\"params\":{\"group\":\"The group address.\"}}],\"GroupStillOverflowing(address)\":[{\"params\":{\"group\":\"The group address.\"}}]},\"events\":{\"GroupBlocked(address)\":{\"params\":{\"group\":\"The group's address.\"}},\"GroupUnblocked(address)\":{\"params\":{\"group\":\"The group's address.\"}}},\"kind\":\"dev\",\"methods\":{\"blockGroup(address)\":{\"params\":{\"group\":\"The group address.\"}},\"generateDepositVoteDistribution(address,uint256,uint256)\":{\"params\":{\"celoAmount\":\"The amount of CELO.\",\"group\":\"The validator group that we want to deposit to or transfer from.\",\"stCeloAmount\":\"The amount of stCELO.\"},\"returns\":{\"finalGroups\":\"The groups to withdraw from.\",\"finalVotes\":\"The amount to withdraw from each group.\"}},\"generateWithdrawalVoteDistribution(address,uint256,uint256,bool)\":{\"params\":{\"celoWithdrawalAmount\":\"The amount of CELO to withdraw.\",\"group\":\"The validator group that we want to withdraw from.\",\"stCeloWithdrawalAmount\":\"The amount of stCELO to withdraw.\"},\"returns\":{\"groups\":\"The groups to withdraw from.\",\"votes\":\"The amount to withdraw from each group.\"}},\"getBlockedGroup(uint256)\":{\"returns\":{\"_0\":\"The blocked group.\"}},\"getNumberOfBlockedGroups()\":{\"returns\":{\"_0\":\"The length of blocked groups.\"}},\"getNumberOfVotedGroups()\":{\"returns\":{\"_0\":\"The length of voted groups.\"}},\"getStCeloInGroup(address)\":{\"returns\":{\"overflow\":\"The stCELO amount that is overflowed to default strategy.\",\"total\":\"The total stCELO amount.\",\"unhealthy\":\"The stCELO amount that is moved to default strategy because group is/was unhealthy.\"}},\"getVersionNumber()\":{\"returns\":{\"_0\":\"Storage version of the contract.\",\"_1\":\"Major version of the contract.\",\"_2\":\"Minor version of the contract.\",\"_3\":\"Patch version of the contract.\"}},\"getVotedGroup(uint256)\":{\"returns\":{\"_0\":\"The specific group.\"}},\"initialize(address,address)\":{\"params\":{\"_manager\":\"The address of the Manager contract.\",\"_owner\":\"The address of the contract owner.\"}},\"isBlockedGroup(address)\":{\"params\":{\"group\":\"The validator group.\"},\"returns\":{\"_0\":\"Whether or not group is blocked.\"}},\"isPaused()\":{\"returns\":{\"_0\":\"`true` if the contract is paused, `false` otherwise.\"}},\"isVotedGroup(address)\":{\"params\":{\"group\":\"The validator group.\"},\"returns\":{\"_0\":\"Whether or not is group is voted.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rebalanceOverflowedGroup(address)\":{\"params\":{\"group\":\"The group address.\"}},\"rebalanceWhenHealthChanged(address)\":{\"params\":{\"group\":\"The group address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDependencies(address,address,address)\":{\"params\":{\"_account\":\"The address of the Account contract.\",\"_defaultStrategy\":\"The address of the DefaultStrategy contract.\",\"_groupHealth\":\"The address of the GroupHealth contract.\"}},\"setManager(address)\":{\"params\":{\"_manager\":\"The new manager address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unblockGroup(address)\":{\"params\":{\"group\":\"The address of the group to add to the set of specific group strategies.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"totalStCeloLocked\":{\"details\":\"To get the actual stCelo in specific strategy it is necessary to subtract `totalStCeloOverflow`.\"}},\"title\":\"SpecificGroupStrategy is responsible for handling any deposit/withdrawal for accounts with specific strategy selected.\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressZeroNotAllowed()\":[{\"notice\":\"Used when attempting to pass in address zero where not allowed.\"}],\"CallerNotManager(address)\":[{\"notice\":\"Used when an `onlyManager` function is called by a non-manager.\"}],\"CantWithdrawAccordingToStrategy(address)\":[{\"notice\":\"Used when there isn't enough CELO voting for an account's strategy to fulfill a withdrawal.\"}],\"FailedToUnblockGroup(address)\":[{\"notice\":\"Used when attempting to unblock a group that is not blocked.\"}],\"GroupAlreadyBlocked(address)\":[{\"notice\":\"Used when attempting to block a group that is not allowed.\"}],\"GroupBalanced(address)\":[{\"notice\":\"Used when trying to `rebalanceWhenHealthChanged` when the group cannot be rebalanced since it is in correct state.\"}],\"GroupNotBalanced(address)\":[{\"notice\":\"Used when attempting to withdraw from specific group but group does not have enough CELO. It is necessary to rebalance the group.\"}],\"GroupNotEligible(address)\":[{\"notice\":\"Used when a group does not meet the validator group health requirements.\"}],\"GroupNotOverflowing(address)\":[{\"notice\":\"Used when trying to `rebalanceOverflowedGroup` when the group is not overflowing.\"}],\"GroupStillOverflowing(address)\":[{\"notice\":\"Used when trying to `rebalanceOverflowedGroup` when the overflowing group cannot be rebalanced since it has no receivable votes.\"}],\"NoActiveGroups()\":[{\"notice\":\"Used when attempting to deposit when there are not active groups to vote for.\"}],\"NoGroups()\":[{\"notice\":\"Used when attempting to withdraw but there are no groups being voted for.\"}],\"OnlyPauser()\":[{\"notice\":\"Used when an `onlyPauser` function is called with a different address.\"}],\"Paused()\":[{\"notice\":\"Used when an `onlyWhenNotPaused` function is called while the contract is paused.\"}]},\"events\":{\"ContractPaused()\":{\"notice\":\"Emitted when this contract is paused.\"},\"ContractUnpaused()\":{\"notice\":\"Emitted when this contract is unpaused.\"},\"GroupBlocked(address)\":{\"notice\":\"Emmited when group is blocked.\"},\"GroupUnblocked(address)\":{\"notice\":\"Emitted when a group was unblocked.\"},\"ManagerSet(address)\":{\"notice\":\"Emitted when the manager is initially set or later modified.\"},\"PauserSet(address)\":{\"notice\":\"Emitted when the address authorized to pause/unpause the contract is changed.\"}},\"kind\":\"user\",\"methods\":{\"PAUSED_POSITION()\":{\"notice\":\"The storage slot under which we store a boolean representing whether or not the contract is currently paused.\"},\"PAUSER_POSITION()\":{\"notice\":\"The storage slot under which we store an address representing the address permissioned to pause/unpause this contract.\"},\"account()\":{\"notice\":\"An instance of the Account contract for the StakedCelo protocol.\"},\"blockGroup(address)\":{\"notice\":\"Marks a group as blocked for voting.\"},\"constructor\":{\"notice\":\"Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized.\"},\"defaultStrategy()\":{\"notice\":\"An instance of the DefaultStrategy contract for the StakedCelo protocol.\"},\"generateDepositVoteDistribution(address,uint256,uint256)\":{\"notice\":\"Generates groups and votes to distribute votes to.\"},\"generateWithdrawalVoteDistribution(address,uint256,uint256,bool)\":{\"notice\":\"Used to withdraw CELO from a specific group that account voted for previously. It is expected that strategy will be balanced. For balancing use `rebalance` function.\"},\"getBlockedGroup(uint256)\":{\"notice\":\"Returns the blocked group at index.\"},\"getNumberOfBlockedGroups()\":{\"notice\":\"Returns the number of blocked groups.\"},\"getNumberOfVotedGroups()\":{\"notice\":\"Returns the number of voted groups.\"},\"getStCeloInGroup(address)\":{\"notice\":\"Returns the specific group total stCELO.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"getVotedGroup(uint256)\":{\"notice\":\"Returns the specific group at index.\"},\"groupHealth()\":{\"notice\":\"An instance of the GroupHealth contract for the StakedCelo protocol.\"},\"initialize(address,address)\":{\"notice\":\"Initialize the contract with registry and owner.\"},\"isBlockedGroup(address)\":{\"notice\":\"Returns if group is blocked.\"},\"isPaused()\":{\"notice\":\"Returns whether or not the contract is paused.\"},\"isVotedGroup(address)\":{\"notice\":\"Returns if a group is a voted group.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"pauser()\":{\"notice\":\"Returns the address permissioned to pause/unpause this contract.\"},\"rebalanceOverflowedGroup(address)\":{\"notice\":\"When there is group that is overflowing and in meantime there are votes that freed up. This function makes sure to reschedule votes correctly for overflowing group.\"},\"rebalanceWhenHealthChanged(address)\":{\"notice\":\"Used when validator gets unhealthy and we need to move funds to default strategy\"},\"setDependencies(address,address,address)\":{\"notice\":\"Set this contract's dependencies in the StakedCelo system.\"},\"setManager(address)\":{\"notice\":\"Sets the manager address.\"},\"setPauser()\":{\"notice\":\"Sets that address permissioned to pause/unpause this contract to the owner of this contract.\"},\"stCeloInGroup(address)\":{\"notice\":\"stCELO that was cast for specific group strategies, group => stCELO amount\"},\"totalStCeloLocked()\":{\"notice\":\"Total stCELO that was voted with on specific group strategies (including overflows).\"},\"totalStCeloOverflow()\":{\"notice\":\"Total stCelo that was overflowed to default strategy.\"},\"totalStCeloUnhealthy()\":{\"notice\":\"Total stCelo that is cast for unhealthy groups and was moved to default strategy.\"},\"unblockGroup(address)\":{\"notice\":\"Unblocks previously blocked group.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SpecificGroupStrategy.sol\":\"SpecificGroupStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Managed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title Used via inheritance to grant special access control to the Manager\\n * contract.\\n */\\nabstract contract Managed is Errors, Initializable, OwnableUpgradeable {\\n    address public manager;\\n\\n    /**\\n     * @notice Emitted when the manager is initially set or later modified.\\n     * @param manager The new managing account address.\\n     */\\n    event ManagerSet(address indexed manager);\\n\\n    /**\\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManager(address caller);\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        if (manager != msg.sender) {\\n            revert CallerNotManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function setManager(address _manager) external onlyOwner {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract in an upgradable context.\\n     * @param _manager The initial managing address.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Managed_init(address _manager) internal onlyInitializing {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function _setManager(address _manager) internal {\\n        if (_manager == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xdc8295fafa6b34f9ee48868045a6c01c4844bb3a596e3b25b8d6bb29dce15617\",\"license\":\"LGPL-3.0-only\"},\"contracts/Pausable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IPausable.sol\\\";\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title A helper contract to add pasuing functionality to a contract.\\n * @notice Used to prevent/mitigate damage in case an exploit is found in the\\n * extending contract.\\n */\\nabstract contract Pausable is Errors, IPausable {\\n    /**\\n     * @notice The storage slot under which we store a boolean representing\\n     * whether or not the contract is currently paused.\\n     */\\n    bytes32 public constant PAUSED_POSITION =\\n        bytes32(uint256(keccak256(\\\"staked-celo.pausable.paused\\\")) - 1);\\n    /**\\n     * @notice The storage slot under which we store an address representing the\\n     * address permissioned to pause/unpause this contract.\\n     */\\n    bytes32 public constant PAUSER_POSITION =\\n        bytes32(uint256(keccak256(\\\"staked-celo.pausable.pauser\\\")) - 1);\\n\\n    /**\\n     * Emitted when this contract is paused.\\n     */\\n    event ContractPaused();\\n\\n    /**\\n     * Emitted when this contract is unpaused.\\n     */\\n    event ContractUnpaused();\\n\\n    /**\\n     * @notice Emitted when the address authorized to pause/unpause the contract is\\n     * changed.\\n     * @param pauser THe new pauser.\\n     */\\n    event PauserSet(address pauser);\\n\\n    /**\\n     * @notice Used when an `onlyWhenNotPaused` function is called while the\\n     * contract is paused.\\n     */\\n    error Paused();\\n\\n    /**\\n     * @notice Used when an `onlyPauser` function is called with a different\\n     * address.\\n     */\\n    error OnlyPauser();\\n\\n    /**\\n     * @notice Reverts if the contract is paused.\\n     */\\n    modifier onlyWhenNotPaused() {\\n        if (isPaused()) {\\n            revert Paused();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the caller is not the pauser.\\n     */\\n    modifier onlyPauser() {\\n        if (msg.sender != pauser()) {\\n            revert OnlyPauser();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Pauses the contract.\\n     */\\n    function pause() public onlyPauser {\\n        _setPaused(true);\\n        emit ContractPaused();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract.\\n     */\\n    function unpause() public onlyPauser {\\n        _setPaused(false);\\n        emit ContractUnpaused();\\n    }\\n\\n    /**\\n     * @notice Returns whether or not the contract is paused.\\n     * @return `true` if the contract is paused, `false` otherwise.\\n     */\\n    function isPaused() public view returns (bool) {\\n        bool paused;\\n        bytes32 pausedPosition = PAUSED_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            paused := sload(pausedPosition)\\n        }\\n        return paused;\\n    }\\n\\n    /**\\n     * @notice Returns the address permissioned to pause/unpause this contract.\\n     */\\n    function pauser() public view returns (address) {\\n        address pauserAddress;\\n        bytes32 pauserPosition = PAUSER_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pauserAddress := sload(pauserPosition)\\n        }\\n        return pauserAddress;\\n    }\\n\\n    /**\\n     * @notice Sets the contract's paused state.\\n     * @param paused `true` for paused, `false` for unpaused.\\n     */\\n    function _setPaused(bool paused) internal {\\n        bytes32 pausedPosition = PAUSED_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(pausedPosition, paused)\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the address permissioned to pause this contract.\\n     * @param _pauser The new pauser.\\n     * @dev This should be wrapped by the inheriting contract, likely in a\\n     * permissioned function like `onlyOwner`.\\n     */\\n    function _setPauser(address _pauser) internal {\\n        if (_pauser == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n        bytes32 pauserPosition = PAUSER_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(pauserPosition, _pauser)\\n        }\\n        emit PauserSet(_pauser);\\n    }\\n}\\n\",\"keccak256\":\"0x86570b00c8fb2b23bf310237c81029a64b89b5b060b89e49c5085182d4b00d9e\",\"license\":\"LGPL-3.0-only\"},\"contracts/SpecificGroupStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./common/UUPSOwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/IGroupHealth.sol\\\";\\nimport \\\"./interfaces/IManager.sol\\\";\\nimport \\\"./interfaces/IDefaultStrategy.sol\\\";\\nimport \\\"./Managed.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title SpecificGroupStrategy is responsible for handling any deposit/withdrawal\\n * for accounts with specific strategy selected.\\n */\\ncontract SpecificGroupStrategy is Errors, UUPSOwnableUpgradeable, Managed, Pausable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Validator groups that is voted for.\\n     */\\n    EnumerableSet.AddressSet private votedGroups;\\n\\n    /**\\n     * @notice Validator groups that were blocked from voting.\\n     */\\n    EnumerableSet.AddressSet private blockedGroups;\\n\\n    /**\\n     * @notice stCELO that was cast for specific group strategies,\\n     * group => stCELO amount\\n     */\\n    mapping(address => uint256) public stCeloInGroup;\\n\\n    /**\\n     * @notice Total stCELO that was voted with on specific group strategies (including overflows).\\n     * @dev To get the actual stCelo in specific strategy\\n     * it is necessary to subtract `totalStCeloOverflow`.\\n     */\\n    uint256 public totalStCeloLocked;\\n\\n    /**\\n     * @notice stCELO that was cast for specific group strategies and overflowed\\n     * to default strategy: group => stCELO amount.\\n     */\\n    mapping(address => uint256) private stCeloInGroupOverflowed;\\n\\n    /**\\n     * @notice Total stCelo that was overflowed to default strategy.\\n     */\\n    uint256 public totalStCeloOverflow;\\n\\n    /**\\n     * @notice stCELO that was cast for specific group strategies that\\n     * became unhealthy and was transfered to default strategy:\\n     * group => stCELO amount.\\n     */\\n    mapping(address => uint256) private stCeloInGroupUnhealthy;\\n\\n    /**\\n     * @notice Total stCelo that is cast for unhealthy groups and was moved to default strategy.\\n     */\\n    uint256 public totalStCeloUnhealthy;\\n\\n    /**\\n     * @notice An instance of the GroupHealth contract for the StakedCelo protocol.\\n     */\\n    IGroupHealth public groupHealth;\\n\\n    /**\\n     * @notice An instance of the DefaultStrategy contract for the StakedCelo protocol.\\n     */\\n    IDefaultStrategy public defaultStrategy;\\n\\n    /**\\n     * @notice An instance of the Account contract for the StakedCelo protocol.\\n     */\\n    IAccount public account;\\n\\n    /**\\n     * @notice Emitted when a group was unblocked.\\n     * @param group The group's address.\\n     */\\n    event GroupUnblocked(address indexed group);\\n\\n    /**\\n     * @notice Emmited when group is blocked.\\n     * @param group The group's address.\\n     */\\n    event GroupBlocked(address group);\\n\\n    /**\\n     * @notice Used when attempting to block a group that is not allowed.\\n     * @param group The group's address.\\n     */\\n    error GroupAlreadyBlocked(address group);\\n\\n    /**\\n     * @notice Used when attempting to unblock a group that is not blocked.\\n     * @param group The group's address.\\n     */\\n    error FailedToUnblockGroup(address group);\\n\\n    /**\\n     * @notice Used when a group does not meet the validator group health requirements.\\n     * @param group The group's address.\\n     */\\n    error GroupNotEligible(address group);\\n\\n    /**\\n     * @notice Used when attempting to withdraw from specific group\\n     * but group does not have enough CELO. It is necessary to rebalance the group.\\n     * @param group The group's address.\\n     */\\n    error GroupNotBalanced(address group);\\n\\n    /**\\n     * @notice Used when there isn't enough CELO voting for an account's strategy\\n     * to fulfill a withdrawal.\\n     * @param group The group's address.\\n     */\\n    error CantWithdrawAccordingToStrategy(address group);\\n\\n    /**\\n     * @notice Used when attempting to deposit when there are not active groups\\n     * to vote for.\\n     */\\n    error NoActiveGroups();\\n\\n    /**\\n     * @notice Used when attempting to withdraw but there are no groups being\\n     * voted for.\\n     */\\n    error NoGroups();\\n\\n    /**\\n     * Used when trying to `rebalanceOverflowedGroup` when the group is not overflowing.\\n     * @param group The group address.\\n     */\\n    error GroupNotOverflowing(address group);\\n\\n    /**\\n     * Used when trying to `rebalanceOverflowedGroup` when the overflowing group cannot\\n     * be rebalanced since it has no receivable votes.\\n     * @param group The group address.\\n     */\\n    error GroupStillOverflowing(address group);\\n\\n    /**\\n     * Used when trying to `rebalanceWhenHealthChanged` when the group cannot\\n     * be rebalanced since it is in correct state.\\n     * @param group The group address.\\n     */\\n    error GroupBalanced(address group);\\n\\n    /**\\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\\n     * implementation gets initialized.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() initializer {}\\n\\n    /**\\n     * @notice Initialize the contract with registry and owner.\\n     * @param _owner The address of the contract owner.\\n     * @param _manager The address of the Manager contract.\\n     */\\n    function initialize(address _owner, address _manager) external initializer {\\n        _transferOwnership(_owner);\\n        __Managed_init(_manager);\\n    }\\n\\n    /**\\n     * @notice Set this contract's dependencies in the StakedCelo system.\\n     * @param _account The address of the Account contract.\\n     * @param _groupHealth The address of the GroupHealth contract.\\n     * @param _defaultStrategy The address of the DefaultStrategy contract.\\n     */\\n    function setDependencies(\\n        address _account,\\n        address _groupHealth,\\n        address _defaultStrategy\\n    ) external onlyOwner {\\n        if (\\n            _account == address(0) || _groupHealth == address(0) || _defaultStrategy == address(0)\\n        ) {\\n            revert AddressZeroNotAllowed();\\n        }\\n\\n        account = IAccount(_account);\\n        groupHealth = IGroupHealth(_groupHealth);\\n        defaultStrategy = IDefaultStrategy(_defaultStrategy);\\n    }\\n\\n    /**\\n     * @notice Sets that address permissioned to pause/unpause this contract to\\n     * the owner of this contract.\\n     */\\n    function setPauser() external onlyOwner {\\n        _setPauser(owner());\\n    }\\n\\n    /**\\n     * @notice Unblocks previously blocked group.\\n     * @param group The address of the group to add to the set of specific group\\n     * strategies.\\n     */\\n    function unblockGroup(address group) external onlyOwner {\\n        if (!groupHealth.isGroupValid(group)) {\\n            revert GroupNotEligible(group);\\n        }\\n\\n        if (!blockedGroups.remove(group)) {\\n            revert FailedToUnblockGroup(group);\\n        }\\n\\n        emit GroupUnblocked(group);\\n    }\\n\\n    /**\\n     * @notice Marks a group as blocked for voting.\\n     * @param group The group address.\\n     */\\n    function blockGroup(address group) external onlyOwner {\\n        _blockGroup(group);\\n    }\\n\\n    /**\\n     * @notice Used to withdraw CELO from a specific group\\n     * that account voted for previously. It is expected that strategy will be balanced.\\n     * For balancing use `rebalance` function.\\n     * @param group The validator group that we want to withdraw from.\\n     * @param celoWithdrawalAmount The amount of CELO to withdraw.\\n     * @param stCeloWithdrawalAmount The amount of stCELO to withdraw.\\n     * @return groups The groups to withdraw from.\\n     * @return votes The amount to withdraw from each group.\\n     */\\n    function generateWithdrawalVoteDistribution(\\n        address group,\\n        uint256 celoWithdrawalAmount,\\n        uint256 stCeloWithdrawalAmount,\\n        bool isTransfer\\n    ) external onlyManager returns (address[] memory groups, uint256[] memory votes) {\\n        if (votedGroups.length() == 0) {\\n            revert NoGroups();\\n        }\\n\\n        if (stCeloWithdrawalAmount > stCeloInGroup[group]) {\\n            revert CantWithdrawAccordingToStrategy(group);\\n        }\\n\\n        updateGroupStCelo(group, stCeloWithdrawalAmount, false);\\n\\n        uint256 overflowingStCelo = stCeloInGroupOverflowed[group];\\n        uint256 unhealthyStCelo = stCeloInGroupUnhealthy[group];\\n        if (overflowingStCelo > 0 || unhealthyStCelo > 0) {\\n            uint256 celoToBeMovedFromDefaultStrategy = Math.min(\\n                celoWithdrawalAmount,\\n                IManager(manager).toCelo(overflowingStCelo + unhealthyStCelo)\\n            );\\n            celoWithdrawalAmount -= celoToBeMovedFromDefaultStrategy;\\n\\n            (address[] memory overflowGroups, uint256[] memory overflowVotes) = defaultStrategy\\n                .generateWithdrawalVoteDistribution(celoToBeMovedFromDefaultStrategy);\\n\\n            handleWithdrawalOverflowAndUnhealthyAccounting(\\n                group,\\n                celoToBeMovedFromDefaultStrategy,\\n                overflowingStCelo\\n            );\\n\\n            if (celoWithdrawalAmount > 0) {\\n                groups = new address[](overflowGroups.length + 1);\\n                votes = new uint256[](overflowGroups.length + 1);\\n                for (uint256 i = 0; i < overflowGroups.length; i++) {\\n                    groups[i] = overflowGroups[i];\\n                    votes[i] = overflowVotes[i];\\n                }\\n                if (!isTransfer && account.getCeloForGroup(group) < celoWithdrawalAmount) {\\n                    revert GroupNotBalanced(group);\\n                }\\n                groups[overflowGroups.length] = group;\\n                votes[overflowGroups.length] = celoWithdrawalAmount;\\n            } else {\\n                groups = overflowGroups;\\n                votes = overflowVotes;\\n            }\\n        } else {\\n            groups = new address[](1);\\n            votes = new uint256[](1);\\n            groups[0] = group;\\n            votes[0] = celoWithdrawalAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Generates groups and votes to distribute votes to.\\n     * @param group The validator group that we want to deposit to or transfer from.\\n     * @param celoAmount The amount of CELO.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @return finalGroups The groups to withdraw from.\\n     * @return finalVotes The amount to withdraw from each group.\\n     */\\n    function generateDepositVoteDistribution(\\n        address group,\\n        uint256 celoAmount,\\n        uint256 stCeloAmount\\n    ) external onlyManager returns (address[] memory finalGroups, uint256[] memory finalVotes) {\\n        votedGroups.add(group);\\n        updateGroupStCelo(group, stCeloAmount, true);\\n\\n        if (groupHealth.isGroupValid(group) && !blockedGroups.contains(group)) {\\n            uint256 receivableVotes = IManager(manager).getReceivableVotesForGroup(group);\\n            uint256 votesToBeScheduledForSpecificGroup = Math.min(receivableVotes, celoAmount);\\n\\n            celoAmount -= votesToBeScheduledForSpecificGroup;\\n            if (celoAmount > 0) {\\n                // overflow\\n                (address[] memory groups, uint256[] memory votesForGroups) = defaultStrategy\\n                    .generateDepositVoteDistribution(celoAmount, group);\\n                updateOverflowGroup(\\n                    group,\\n                    Math.min(IManager(manager).toStakedCelo(celoAmount), stCeloAmount),\\n                    true\\n                );\\n                finalGroups = new address[](groups.length + 1);\\n                finalVotes = new uint256[](groups.length + 1);\\n                for (uint256 i = 0; i < groups.length; i++) {\\n                    finalGroups[i] = groups[i];\\n                    finalVotes[i] = votesForGroups[i];\\n                }\\n                finalGroups[groups.length] = group;\\n                finalVotes[groups.length] = votesToBeScheduledForSpecificGroup;\\n            } else {\\n                finalGroups = new address[](1);\\n                finalVotes = new uint256[](1);\\n                finalGroups[0] = group;\\n                finalVotes[0] = votesToBeScheduledForSpecificGroup;\\n            }\\n        } else {\\n            (finalGroups, finalVotes) = defaultStrategy.generateDepositVoteDistribution(\\n                celoAmount,\\n                group\\n            );\\n            updateUnhealthyGroupStCelo(group, stCeloAmount, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Used when validator gets unhealthy and we need to move funds to default strategy\\n     * @param group The group address.\\n     */\\n    function rebalanceWhenHealthChanged(address group) external onlyWhenNotPaused {\\n        bool isGroupValid = groupHealth.isGroupValid(group);\\n        uint256 unhealthyStCelo = stCeloInGroupUnhealthy[group];\\n\\n        if (isGroupValid && !blockedGroups.contains(group)) {\\n            if (unhealthyStCelo == 0) {\\n                revert GroupBalanced(group);\\n            }\\n            uint256 toMove = unhealthyStCelo;\\n\\n            transferFromDefaultStrategy(group, toMove);\\n            updateUnhealthyGroupStCelo(group, toMove, false);\\n        } else {\\n            uint256 totalStCeloInGroup = stCeloInGroup[group];\\n            if (totalStCeloInGroup == unhealthyStCelo) {\\n                revert GroupBalanced(group);\\n            }\\n\\n            if (defaultStrategy.getNumberOfGroups() == 0) {\\n                revert NoActiveGroups();\\n            }\\n\\n            uint256 overflow = stCeloInGroupOverflowed[group];\\n            uint256 toMove = totalStCeloInGroup - unhealthyStCelo - overflow;\\n\\n            transferToDefaultStrategy(group, toMove);\\n            updateUnhealthyGroupStCelo(group, toMove, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns if a group is a voted group.\\n     * @param group The validator group.\\n     * @return Whether or not is group is voted.\\n     */\\n    function isVotedGroup(address group) external view returns (bool) {\\n        return votedGroups.contains(group);\\n    }\\n\\n    /**\\n     * @notice Returns if group is blocked.\\n     * @param group The validator group.\\n     * @return Whether or not group is blocked.\\n     */\\n    function isBlockedGroup(address group) external view returns (bool) {\\n        return blockedGroups.contains(group);\\n    }\\n\\n    /**\\n     * @notice Returns the number of blocked groups.\\n     * @return The length of blocked groups.\\n     */\\n    function getNumberOfBlockedGroups() external view returns (uint256) {\\n        return blockedGroups.length();\\n    }\\n\\n    /**\\n     * @notice Returns the blocked group at index.\\n     * @return The blocked group.\\n     */\\n    function getBlockedGroup(uint256 index) external view returns (address) {\\n        return blockedGroups.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the number of voted groups.\\n     * @return The length of voted groups.\\n     */\\n    function getNumberOfVotedGroups() external view returns (uint256) {\\n        return votedGroups.length();\\n    }\\n\\n    /**\\n     * @notice Returns the specific group at index.\\n     * @return The specific group.\\n     */\\n    function getVotedGroup(uint256 index) external view returns (address) {\\n        return votedGroups.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 1, 1, 0);\\n    }\\n\\n    /**\\n     * @notice When there is group that is overflowing and\\n     * in meantime there are votes that freed up. This function\\n     * makes sure to reschedule votes correctly for overflowing group.\\n     * @param group The group address.\\n     */\\n    function rebalanceOverflowedGroup(address group) public onlyWhenNotPaused {\\n        if (!groupHealth.isGroupValid(group) || blockedGroups.contains(group)) {\\n            revert GroupNotEligible(group);\\n        }\\n\\n        uint256 overflowingStCelo = stCeloInGroupOverflowed[group];\\n        if (overflowingStCelo == 0) {\\n            revert GroupNotOverflowing(group);\\n        }\\n\\n        uint256 receivableVotes = IManager(manager).getReceivableVotesForGroup(group);\\n        if (receivableVotes == 0) {\\n            revert GroupStillOverflowing(group);\\n        }\\n\\n        uint256 receivableStCelo = IManager(manager).toStakedCelo(receivableVotes);\\n        uint256 toMove = Math.min(receivableStCelo, overflowingStCelo);\\n        transferFromDefaultStrategy(group, toMove);\\n        updateOverflowGroup(group, toMove, false);\\n    }\\n\\n    /**\\n     * @notice Returns the specific group total stCELO.\\n     * @return total The total stCELO amount.\\n     * @return overflow The stCELO amount that is overflowed to default strategy.\\n     * @return unhealthy The stCELO amount that is moved to default strategy\\n     * because group is/was unhealthy.\\n     */\\n    function getStCeloInGroup(address group)\\n        public\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 overflow,\\n            uint256 unhealthy\\n        )\\n    {\\n        total = stCeloInGroup[group];\\n        overflow = stCeloInGroupOverflowed[group];\\n        unhealthy = stCeloInGroupUnhealthy[group];\\n    }\\n\\n    /**\\n     * @notice Adds/substracts value to totals of strategy and\\n     * total stCELO in specific group.\\n     * @param group The validator group that we are updating.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @param add Whether to add or substract.\\n     */\\n    function updateGroupStCelo(\\n        address group,\\n        uint256 stCeloAmount,\\n        bool add\\n    ) internal {\\n        if (add) {\\n            stCeloInGroup[group] += stCeloAmount;\\n            totalStCeloLocked += stCeloAmount;\\n        } else {\\n            stCeloInGroup[group] -= stCeloAmount;\\n            totalStCeloLocked -= stCeloAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds/substracts value to unhealthy totals of strategy and\\n     * unhealthy total stCELO in specific group.\\n     * @param group The validator group that we are updating.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @param add Whether to add or substract.\\n     */\\n    function updateUnhealthyGroupStCelo(\\n        address group,\\n        uint256 stCeloAmount,\\n        bool add\\n    ) internal {\\n        if (add) {\\n            stCeloInGroupUnhealthy[group] += stCeloAmount;\\n            totalStCeloUnhealthy += stCeloAmount;\\n        } else {\\n            stCeloInGroupUnhealthy[group] -= stCeloAmount;\\n            totalStCeloUnhealthy -= stCeloAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates overflow stCELO amount of group.\\n     * @param group The group that is overflowing.\\n     * @param stCeloAmount The stCELO amount.\\n     * @param add Whether to add or subtract stCELO amount.\\n     */\\n    function updateOverflowGroup(\\n        address group,\\n        uint256 stCeloAmount,\\n        bool add\\n    ) private {\\n        if (add) {\\n            stCeloInGroupOverflowed[group] += stCeloAmount;\\n            totalStCeloOverflow += stCeloAmount;\\n        } else {\\n            stCeloInGroupOverflowed[group] -= stCeloAmount;\\n            totalStCeloOverflow -= stCeloAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Blocks a group from being added as voted group.\\n     * @param group The group address.\\n     */\\n    function _blockGroup(address group) private {\\n        if (defaultStrategy.getNumberOfGroups() == 0) {\\n            revert NoActiveGroups();\\n        }\\n\\n        if (blockedGroups.contains(group)) {\\n            revert GroupAlreadyBlocked(group);\\n        }\\n\\n        blockedGroups.add(group);\\n\\n        emit GroupBlocked(group);\\n    }\\n\\n    /**\\n     * Transfers stCelo to default strategy without updating accounting in specific group.\\n     * @param group The group addres.\\n     * @param stCeloToMove StCelo amount to be moved.\\n     */\\n    function transferToDefaultStrategy(address group, uint256 stCeloToMove) private {\\n        uint256 toMoveCelo = IManager(manager).toCelo(stCeloToMove);\\n        address[] memory fromGroups = new address[](1);\\n        uint256[] memory fromVotes = new uint256[](1);\\n        fromGroups[0] = group;\\n        fromVotes[0] = toMoveCelo;\\n        (address[] memory toGroups, uint256[] memory toVotes) = defaultStrategy\\n            .generateDepositVoteDistribution(toMoveCelo, address(0));\\n        IManager(manager).scheduleTransferWithinStrategy(fromGroups, toGroups, fromVotes, toVotes);\\n    }\\n\\n    /**\\n     * Transfers stCelo from default strategy without updating accounting in specific group.\\n     * @param group The group addres.\\n     * @param stCeloToMove StCELO amount to be moved.\\n     */\\n    function transferFromDefaultStrategy(address group, uint256 stCeloToMove) private {\\n        uint256 toMoveCelo = IManager(manager).toCelo(stCeloToMove);\\n        (address[] memory fromGroups, uint256[] memory fromVotes) = defaultStrategy\\n            .generateWithdrawalVoteDistribution(toMoveCelo);\\n        address[] memory toGroups = new address[](1);\\n        uint256[] memory toVotes = new uint256[](1);\\n        toGroups[0] = group;\\n        toVotes[0] = toMoveCelo;\\n        IManager(manager).scheduleTransferWithinStrategy(fromGroups, toGroups, fromVotes, toVotes);\\n    }\\n\\n    /**\\n     * Handles accounting when group is overflowing/unhelthy during withdrawal.\\n     * @param group The group address.\\n     * @param celoToBeMovedFromDefaultStrategy The celo that is being moved from default strategy.\\n     * @param overflowingStCelo StCELO amount that is overflowing.\\n     */\\n    function handleWithdrawalOverflowAndUnhealthyAccounting(\\n        address group,\\n        uint256 celoToBeMovedFromDefaultStrategy,\\n        uint256 overflowingStCelo\\n    ) private {\\n        uint256 stCeloToBeMoved = IManager(manager).toStakedCelo(celoToBeMovedFromDefaultStrategy);\\n        uint256 subtractedFromOveflow = Math.min(overflowingStCelo, stCeloToBeMoved);\\n        if (subtractedFromOveflow > 0) {\\n            updateOverflowGroup(group, subtractedFromOveflow, false);\\n        }\\n        uint256 subtracteddFromUnHealthy = stCeloToBeMoved - subtractedFromOveflow;\\n        if (subtracteddFromUnHealthy > 0) {\\n            updateUnhealthyGroupStCelo(group, subtracteddFromUnHealthy, false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1463712e7878eb46e8d6eaee327f3fe606f37ca10ba17d5bfcf78991b47af25\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Provides some common general errors.\\n */\\nabstract contract Errors {\\n    /**\\n     * @notice Used when attempting to pass in address zero where not allowed.\\n     */\\n    error AddressZeroNotAllowed();\\n}\\n\",\"keccak256\":\"0xf05b0cd54af69df277819c986819d7ab9d475a6ff955fbaf1d26ec61d9e44b00\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UUPSOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\\n */\\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\\n    /**\\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\\n     * adds the onlyOwner modifer.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x5dbad350c6ae75b9d15c2080b1de6f02d8b7f32a71a6bcf775c9731820d115ec\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccount {\\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\\n\\n    function scheduleTransfer(\\n        address[] calldata fromGroups,\\n        uint256[] calldata fromVotes,\\n        address[] calldata toGroups,\\n        uint256[] calldata toVotess\\n    ) external;\\n\\n    function scheduleWithdrawals(\\n        address beneficiary,\\n        address[] calldata group,\\n        uint256[] calldata withdrawals\\n    ) external;\\n\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external;\\n\\n    function getTotalCelo() external view returns (uint256);\\n\\n    function getCeloForGroup(address) external view returns (uint256);\\n\\n    function scheduledVotesForGroup(address group) external view returns (uint256);\\n\\n    function scheduledRevokeForGroup(address group) external view returns (uint256);\\n\\n    function scheduledWithdrawalsForGroup(address group) external view returns (uint256);\\n\\n    function votesForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfa2177635a152beb7313aa9af9a3494a9f760e233a04b980f20ac1748dde1377\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IDefaultStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IDefaultStrategy {\\n    function generateDepositVoteDistribution(uint256 celoAmount, address depositGroupToIgnore)\\n        external\\n        returns (address[] memory finalGroups, uint256[] memory finalVotes);\\n\\n    function generateWithdrawalVoteDistribution(uint256 celoAmount)\\n        external\\n        returns (address[] memory finalGroups, uint256[] memory finalVotes);\\n\\n    function activateGroup(address group) external;\\n\\n    function isActive(address group) external view returns (bool);\\n\\n    function getNumberOfGroups() external view returns (uint256);\\n\\n    function stCeloInGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x66b2e7ab382f5aaa507c9cf5e64de42849669933cf189537bfb263731bb7a55b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGroupHealth.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGroupHealth {\\n    function isGroupValid(address group) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb38a5b01fae32670a6727bef4d74f88b19e3d6b6dd2bd9e5c9142b2c0d11a400\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IManager {\\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\\n        external\\n        returns (uint256);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function scheduleTransferWithinStrategy(\\n        address[] calldata fromGroups,\\n        address[] calldata toGroups,\\n        uint256[] calldata fromVotes,\\n        uint256[] calldata toVotes\\n    ) external;\\n\\n    function toCelo(uint256 stCeloAmount) external view returns (uint256);\\n\\n    function toStakedCelo(uint256 celoAmount) external view returns (uint256);\\n\\n    function getReceivableVotesForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae2e3dc80238a25d5d402dbb696c5c78445a6e9ac2676b0c25e33a45c7fbbbeb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function isPaused() external returns (bool);\\n}\\n\",\"keccak256\":\"0x09a0bc3c0f05fa42f8fdc22ca85217a732c1a676e292866bc4a08ba6f4947ee1\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50600060019054906101000a900460ff166200006f5760008054906101000a900460ff161562000080565b6200007f6200013c60201b60201c565b5b620000c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b99062000204565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000113576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620001355760008060016101000a81548160ff0219169083151502179055505b5062000226565b600062000154306200015a60201b62002dd01760201c565b15905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000620001ec602e836200017d565b9150620001f9826200018e565b604082019050919050565b600060208201905081810360008301526200021f81620001dd565b9050919050565b608051615720620002576000396000818161090c0152818161099b01528181610caa0152610d3901526157206000f3fe60806040526004361061021a5760003560e01c80638456cb5911610123578063b52d326c116100ab578063f2fde38b1161006f578063f2fde38b146107a9578063f8649e75146107d2578063fac5bb9b146107fd578063fea4765b14610828578063ff0b5830146108535761021a565b8063b52d326c146106b3578063cc222f8d146106dc578063cd15285814610719578063d00a5bf814610757578063d0ebdbe7146107805761021a565b80639468ba0e116100f25780639468ba0e146105dc5780639fd0506d14610607578063a3f16ef114610632578063b187bd261461065d578063b2705329146106885761021a565b80638456cb591461053257806385a92cb7146105495780638ceaa3fe146105865780638da5cb5b146105b15761021a565b806354255be0116101a65780636253d792116101755780636253d79214610461578063664420851461048a578063715018a6146104c75780637c0d530f146104de578063843c7a8b146104f55761021a565b806354255be01461038b57806356ab819f146103b95780635c650b5f146103f85780635dab2420146104365761021a565b80633f4ba83a116101ed5780633f4ba83a146102c7578063481c6a75146102de578063485cc955146103095780634a1376b6146103325780634f1ef2861461036f5761021a565b8063284197961461021f57806332ce1ab41461024a5780633659cfe6146102735780633cbf58721461029c575b600080fd5b34801561022b57600080fd5b5061023461087c565b6040516102419190614456565b60405180910390f35b34801561025657600080fd5b50610271600480360381019061026c91906144e3565b610882565b005b34801561027f57600080fd5b5061029a600480360381019061029591906144e3565b61090a565b005b3480156102a857600080fd5b506102b1610a93565b6040516102be9190614529565b60405180910390f35b3480156102d357600080fd5b506102dc610ac9565b005b3480156102ea57600080fd5b506102f3610b6d565b6040516103009190614553565b60405180910390f35b34801561031557600080fd5b50610330600480360381019061032b919061456e565b610b93565b005b34801561033e57600080fd5b50610359600480360381019061035491906145da565b610c8b565b6040516103669190614553565b60405180910390f35b6103896004803603810190610384919061474d565b610ca8565b005b34801561039757600080fd5b506103a0610de5565b6040516103b094939291906147a9565b60405180910390f35b3480156103c557600080fd5b506103e060048036038101906103db91906144e3565b610e00565b6040516103ef939291906147ee565b60405180910390f35b34801561040457600080fd5b5061041f600480360381019061041a919061485d565b610ed2565b60405161042d929190614a40565b60405180910390f35b34801561044257600080fd5b5061044b61164b565b6040516104589190614ad6565b60405180910390f35b34801561046d57600080fd5b50610488600480360381019061048391906144e3565b611671565b005b34801561049657600080fd5b506104b160048036038101906104ac91906144e3565b6119e5565b6040516104be9190614b00565b60405180910390f35b3480156104d357600080fd5b506104dc611a02565b005b3480156104ea57600080fd5b506104f3611a8a565b005b34801561050157600080fd5b5061051c600480360381019061051791906145da565b611b18565b6040516105299190614553565b60405180910390f35b34801561053e57600080fd5b50610547611b35565b005b34801561055557600080fd5b50610570600480360381019061056b91906144e3565b611bd9565b60405161057d9190614456565b60405180910390f35b34801561059257600080fd5b5061059b611bf1565b6040516105a89190614456565b60405180910390f35b3480156105bd57600080fd5b506105c6611bf7565b6040516105d39190614553565b60405180910390f35b3480156105e857600080fd5b506105f1611c21565b6040516105fe9190614529565b60405180910390f35b34801561061357600080fd5b5061061c611c57565b6040516106299190614553565b60405180910390f35b34801561063e57600080fd5b50610647611c9d565b6040516106549190614b3c565b60405180910390f35b34801561066957600080fd5b50610672611cc3565b60405161067f9190614b00565b60405180910390f35b34801561069457600080fd5b5061069d611d09565b6040516106aa9190614456565b60405180910390f35b3480156106bf57600080fd5b506106da60048036038101906106d59190614b57565b611d0f565b005b3480156106e857600080fd5b5061070360048036038101906106fe91906144e3565b611f28565b6040516107109190614b00565b60405180910390f35b34801561072557600080fd5b50610740600480360381019061073b9190614baa565b611f45565b60405161074e929190614a40565b60405180910390f35b34801561076357600080fd5b5061077e600480360381019061077991906144e3565b612695565b005b34801561078c57600080fd5b506107a760048036038101906107a291906144e3565b612a14565b005b3480156107b557600080fd5b506107d060048036038101906107cb91906144e3565b612a9c565b005b3480156107de57600080fd5b506107e7612b94565b6040516107f49190614456565b60405180910390f35b34801561080957600080fd5b50610812612ba5565b60405161081f9190614c1e565b60405180910390f35b34801561083457600080fd5b5061083d612bcb565b60405161084a9190614456565b60405180910390f35b34801561085f57600080fd5b5061087a600480360381019061087591906144e3565b612bdc565b005b606f5481565b61088a612df3565b73ffffffffffffffffffffffffffffffffffffffff166108a8611bf7565b73ffffffffffffffffffffffffffffffffffffffff16146108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590614c96565b60405180910390fd5b61090781612dfb565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099090614d28565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109d8612f6b565b73ffffffffffffffffffffffffffffffffffffffff1614610a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2590614dba565b60405180910390fd5b610a3781612fc2565b610a9081600067ffffffffffffffff811115610a5657610a55614622565b5b6040519080825280601f01601f191660200182016040528015610a885781602001600182028036833780820191505090505b506000613041565b50565b60017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c610ac39190614e09565b60001b81565b610ad1611c57565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b35576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b3f6000613212565b7f0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f9460405160405180910390a1565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff16610bbb5760008054906101000a900460ff1615610bc4565b610bc3613250565b5b610c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfa90614eaf565b60405180910390fd5b60008060019054906101000a900460ff161590508015610c53576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610c5c83613261565b610c6582613327565b8015610c865760008060016101000a81548160ff0219169083151502179055505b505050565b6000610ca182606861338290919063ffffffff16565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e90614d28565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d76612f6b565b73ffffffffffffffffffffffffffffffffffffffff1614610dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc390614dba565b60405180910390fd5b610dd582612fc2565b610de182826001613041565b5050565b60008060008060018060016000935093509350935090919293565b6000806000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509193909250565b6060803373ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f6757336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401610f5e9190614553565b60405180910390fd5b6000610f73606661339c565b1415610fab576040517f377b56d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484111561102f57856040517f0d4386640000000000000000000000000000000000000000000000000000000081526004016110269190614553565b60405180910390fd5b61103b868560006133b1565b6000606c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000606e60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008211806110d25750600081115b1561153757600061118988606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f85876111279190614ecf565b6040518263ffffffff1660e01b81526004016111439190614456565b602060405180830381865afa158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190614f3a565b6134a0565b905080886111979190614e09565b9750600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336691a41846040518263ffffffff1660e01b81526004016111f79190614456565b6000604051808303816000875af1158015611216573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061123f9190615107565b9150915061124e8b84876134b9565b60008a111561152857600182516112659190614ecf565b67ffffffffffffffff81111561127e5761127d614622565b5b6040519080825280602002602001820160405280156112ac5781602001602082028036833780820191505090505b509650600182516112bd9190614ecf565b67ffffffffffffffff8111156112d6576112d5614622565b5b6040519080825280602002602001820160405280156113045781602001602082028036833780820191505090505b50955060005b82518110156113c8578281815181106113265761132561517f565b5b60200260200101518882815181106113415761134061517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081818151811061138e5761138d61517f565b5b60200260200101518782815181106113a9576113a861517f565b5b60200260200101818152505080806113c0906151ae565b91505061130a565b5087158015611471575089607260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acd201d08d6040518263ffffffff1660e01b815260040161142e9190614553565b602060405180830381865afa15801561144b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146f9190614f3a565b105b156114b3578a6040517f339102f10000000000000000000000000000000000000000000000000000000081526004016114aa9190614553565b60405180910390fd5b8a878351815181106114c8576114c761517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505089868351815181106115175761151661517f565b5b60200260200101818152505061152f565b8196508095505b505050611640565b600167ffffffffffffffff81111561155257611551614622565b5b6040519080825280602002602001820160405280156115805781602001602082028036833780820191505090505b509350600167ffffffffffffffff81111561159e5761159d614622565b5b6040519080825280602002602001820160405280156115cc5781602001602082028036833780820191505090505b50925087846000815181106115e4576115e361517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086836000815181106116335761163261517f565b5b6020026020010181815250505b505094509492505050565b607260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611679611cc3565b156116b0576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b815260040161170b9190614553565b602060405180830381865afa158015611728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174c919061520c565b158061176857506117678160686135ab90919063ffffffff16565b5b156117aa57806040517f10a7bc6b0000000000000000000000000000000000000000000000000000000081526004016117a19190614553565b60405180910390fd5b6000606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561183457816040517f08015b2400000000000000000000000000000000000000000000000000000000815260040161182b9190614553565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058846040518263ffffffff1660e01b81526004016118919190614553565b602060405180830381865afa1580156118ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d29190614f3a565b9050600081141561191a57826040517feeec2b540000000000000000000000000000000000000000000000000000000081526004016119119190614553565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e836040518263ffffffff1660e01b81526004016119779190614456565b602060405180830381865afa158015611994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b89190614f3a565b905060006119c682856134a0565b90506119d285826135db565b6119de858260006138cd565b5050505050565b60006119fb8260666135ab90919063ffffffff16565b9050919050565b611a0a612df3565b73ffffffffffffffffffffffffffffffffffffffff16611a28611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614611a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7590614c96565b60405180910390fd5b611a886000613261565b565b611a92612df3565b73ffffffffffffffffffffffffffffffffffffffff16611ab0611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd90614c96565b60405180910390fd5b611b16611b11611bf7565b6139bc565b565b6000611b2e82606661338290919063ffffffff16565b9050919050565b611b3d611c57565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ba1576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bab6001613212565b7fab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d26760405160405180910390a1565b606a6020528060005260406000206000915090505481565b606b5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c611c519190614e09565b60001b81565b600080600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c611c8c9190614e09565b60001b905080549150819250505090565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c611cf89190614e09565b60001b905080549150819250505090565b606d5481565b611d17612df3565b73ffffffffffffffffffffffffffffffffffffffff16611d35611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614611d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8290614c96565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611df25750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611e295750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15611e60576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82607260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080607160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000611f3e8260686135ab90919063ffffffff16565b9050919050565b6060803373ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611fda57336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401611fd19190614553565b60405180910390fd5b611fee856066613a9890919063ffffffff16565b50611ffb858460016133b1565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425866040518263ffffffff1660e01b81526004016120569190614553565b602060405180830381865afa158015612073573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612097919061520c565b80156120b457506120b28560686135ab90919063ffffffff16565b155b156125d3576000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058876040518263ffffffff1660e01b81526004016121169190614553565b602060405180830381865afa158015612133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121579190614f3a565b9050600061216582876134a0565b905080866121739190614e09565b955060008611156124c357600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d27898b6040518363ffffffff1660e01b81526004016121de929190615239565b6000604051808303816000875af11580156121fd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122269190615107565b915091506122da896122d3606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e8c6040518263ffffffff1660e01b815260040161228c9190614456565b602060405180830381865afa1580156122a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cd9190614f3a565b8a6134a0565b60016138cd565b600182516122e89190614ecf565b67ffffffffffffffff81111561230157612300614622565b5b60405190808252806020026020018201604052801561232f5781602001602082028036833780820191505090505b509550600182516123409190614ecf565b67ffffffffffffffff81111561235957612358614622565b5b6040519080825280602002602001820160405280156123875781602001602082028036833780820191505090505b50945060005b825181101561244b578281815181106123a9576123a861517f565b5b60200260200101518782815181106123c4576123c361517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181815181106124115761241061517f565b5b602002602001015186828151811061242c5761242b61517f565b5b6020026020010181815250508080612443906151ae565b91505061238d565b5088868351815181106124615761246061517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082858351815181106124b0576124af61517f565b5b60200260200101818152505050506125cc565b600167ffffffffffffffff8111156124de576124dd614622565b5b60405190808252806020026020018201604052801561250c5781602001602082028036833780820191505090505b509350600167ffffffffffffffff81111561252a57612529614622565b5b6040519080825280602002602001820160405280156125585781602001602082028036833780820191505090505b50925086846000815181106125705761256f61517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080836000815181106125bf576125be61517f565b5b6020026020010181815250505b505061268d565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d2785876040518363ffffffff1660e01b8152600401612630929190615239565b6000604051808303816000875af115801561264f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906126789190615107565b809250819350505061268c85846001613ac8565b5b935093915050565b61269d611cc3565b156126d4576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425836040518263ffffffff1660e01b81526004016127319190614553565b602060405180830381865afa15801561274e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612772919061520c565b90506000606e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508180156127d657506127d48360686135ab90919063ffffffff16565b155b1561284257600081141561282157826040517f9bd3a6600000000000000000000000000000000000000000000000000000000081526004016128189190614553565b60405180910390fd5b600081905061283084826135db565b61283c84826000613ac8565b50612a0f565b6000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818114156128cb57836040517f9bd3a6600000000000000000000000000000000000000000000000000000000081526004016128c29190614553565b60405180910390fd5b6000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1fa411a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561293a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295e9190614f3a565b1415612996576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008184846129e99190614e09565b6129f39190614e09565b90506129ff8682613bb7565b612a0b86826001613ac8565b5050505b505050565b612a1c612df3565b73ffffffffffffffffffffffffffffffffffffffff16612a3a611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614612a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8790614c96565b60405180910390fd5b612a9981613eac565b50565b612aa4612df3565b73ffffffffffffffffffffffffffffffffffffffff16612ac2611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614612b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0f90614c96565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7f906152d4565b60405180910390fd5b612b9181613261565b50565b6000612ba0606661339c565b905090565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612bd7606861339c565b905090565b612be4612df3565b73ffffffffffffffffffffffffffffffffffffffff16612c02611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614612c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4f90614c96565b60405180910390fd5b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b8152600401612cb39190614553565b602060405180830381865afa158015612cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf4919061520c565b612d3557806040517f10a7bc6b000000000000000000000000000000000000000000000000000000008152600401612d2c9190614553565b60405180910390fd5b612d49816068613f9a90919063ffffffff16565b612d8a57806040517fe9b829ba000000000000000000000000000000000000000000000000000000008152600401612d819190614553565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167f7fab4241c447cd1e7af48ab4c6bbeab72a3836e47ed68c58b78b399531a5cd6c60405160405180910390a250565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1fa411a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8e9190614f3a565b1415612ec6576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612eda8160686135ab90919063ffffffff16565b15612f1c57806040517fe09c4db2000000000000000000000000000000000000000000000000000000008152600401612f139190614553565b60405180910390fd5b612f30816068613a9890919063ffffffff16565b507f65aef4c8071073180f00fde0e2179949872e90b7003d3b2a22d7bc182d2cc88681604051612f609190614553565b60405180910390a150565b6000612f997f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613fca565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612fca612df3565b73ffffffffffffffffffffffffffffffffffffffff16612fe8611bf7565b73ffffffffffffffffffffffffffffffffffffffff161461303e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161303590614c96565b60405180910390fd5b50565b600061304b612f6b565b905061305684613fd4565b6000835111806130635750815b1561307457613072848461408d565b505b60006130a27f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6140ba565b90508060000160009054906101000a900460ff1661320b5760018160000160006101000a81548160ff02191690831515021790555061316e85836040516024016130ec9190614553565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061408d565b5060008160000160006101000a81548160ff021916908315150217905550613194612f6b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614613201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f890615366565b60405180910390fd5b61320a856140c4565b5b5050505050565b600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c6132449190614e09565b60001b90508181555050565b600061325b30612dd0565b15905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16613376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161336d906153f8565b60405180910390fd5b61337f81613eac565b50565b60006133918360000183614113565b60001c905092915050565b60006133aa8260000161413e565b9050919050565b801561342b5781606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546134069190614ecf565b9250508190555081606b600082825461341f9190614ecf565b9250508190555061349b565b81606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461347a9190614e09565b9250508190555081606b60008282546134939190614e09565b925050819055505b505050565b60008183106134af57816134b1565b825b905092915050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e846040518263ffffffff1660e01b81526004016135169190614456565b602060405180830381865afa158015613533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135579190614f3a565b9050600061356583836134a0565b9050600081111561357d5761357c858260006138cd565b5b6000818361358b9190614e09565b905060008111156135a3576135a286826000613ac8565b5b505050505050565b60006135d3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61414f565b905092915050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f836040518263ffffffff1660e01b81526004016136389190614456565b602060405180830381865afa158015613655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136799190614f3a565b9050600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336691a41846040518263ffffffff1660e01b81526004016136d99190614456565b6000604051808303816000875af11580156136f8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906137219190615107565b915091506000600167ffffffffffffffff81111561374257613741614622565b5b6040519080825280602002602001820160405280156137705781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff8111156137905761378f614622565b5b6040519080825280602002602001820160405280156137be5781602001602082028036833780820191505090505b50905086826000815181106137d6576137d561517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084816000815181106138255761382461517f565b5b602002602001018181525050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c4d4e40858486856040518563ffffffff1660e01b81526004016138929493929190615418565b600060405180830381600087803b1580156138ac57600080fd5b505af11580156138c0573d6000803e3d6000fd5b5050505050505050505050565b80156139475781606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139229190614ecf565b9250508190555081606d600082825461393b9190614ecf565b925050819055506139b7565b81606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139969190614e09565b9250508190555081606d60008282546139af9190614e09565b925050819055505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613a23576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c613a559190614e09565b60001b90508181557fd11d57c2c7468878b1035df11c670bcd0091aa840bf8aa166365397622237bea82604051613a8c9190614553565b60405180910390a15050565b6000613ac0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b614172565b905092915050565b8015613b425781606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613b1d9190614ecf565b9250508190555081606f6000828254613b369190614ecf565b92505081905550613bb2565b81606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613b919190614e09565b9250508190555081606f6000828254613baa9190614e09565b925050819055505b505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f836040518263ffffffff1660e01b8152600401613c149190614456565b602060405180830381865afa158015613c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c559190614f3a565b90506000600167ffffffffffffffff811115613c7457613c73614622565b5b604051908082528060200260200182016040528015613ca25781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff811115613cc257613cc1614622565b5b604051908082528060200260200182016040528015613cf05781602001602082028036833780820191505090505b5090508482600081518110613d0857613d0761517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600081518110613d5757613d5661517f565b5b602002602001018181525050600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d278660006040518363ffffffff1660e01b8152600401613dc4929190615239565b6000604051808303816000875af1158015613de3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613e0c9190615107565b91509150606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c4d4e40858486856040518563ffffffff1660e01b8152600401613e719493929190615418565b600060405180830381600087803b158015613e8b57600080fd5b505af1158015613e9f573d6000803e3d6000fd5b5050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613f13576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b6000613fc2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6141e2565b905092915050565b6000819050919050565b613fdd816142f6565b61401c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614013906154eb565b60405180910390fd5b806140497f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613fca565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606140b283836040518060600160405280602781526020016156c460279139614309565b905092915050565b6000819050919050565b6140cd81613fd4565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600082600001828154811061412b5761412a61517f565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b600061417e838361414f565b6141d75782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506141dc565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146142ea5760006001826142149190614e09565b905060006001866000018054905061422c9190614e09565b905081811461429b57600086600001828154811061424d5761424c61517f565b5b90600052602060002001549050808760000184815481106142715761427061517f565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806142af576142ae61550b565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506142f0565b60009150505b92915050565b600080823b905060008111915050919050565b6060614314846142f6565b614353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161434a906155ac565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161437b9190615646565b600060405180830381855af49150503d80600081146143b6576040519150601f19603f3d011682016040523d82523d6000602084013e6143bb565b606091505b50915091506143cb8282866143d6565b925050509392505050565b606083156143e657829050614436565b6000835111156143f95782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161442d91906156a1565b60405180910390fd5b9392505050565b6000819050919050565b6144508161443d565b82525050565b600060208201905061446b6000830184614447565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006144b082614485565b9050919050565b6144c0816144a5565b81146144cb57600080fd5b50565b6000813590506144dd816144b7565b92915050565b6000602082840312156144f9576144f861447b565b5b6000614507848285016144ce565b91505092915050565b6000819050919050565b61452381614510565b82525050565b600060208201905061453e600083018461451a565b92915050565b61454d816144a5565b82525050565b60006020820190506145686000830184614544565b92915050565b600080604083850312156145855761458461447b565b5b6000614593858286016144ce565b92505060206145a4858286016144ce565b9150509250929050565b6145b78161443d565b81146145c257600080fd5b50565b6000813590506145d4816145ae565b92915050565b6000602082840312156145f0576145ef61447b565b5b60006145fe848285016145c5565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61465a82614611565b810181811067ffffffffffffffff8211171561467957614678614622565b5b80604052505050565b600061468c614471565b90506146988282614651565b919050565b600067ffffffffffffffff8211156146b8576146b7614622565b5b6146c182614611565b9050602081019050919050565b82818337600083830152505050565b60006146f06146eb8461469d565b614682565b90508281526020810184848401111561470c5761470b61460c565b5b6147178482856146ce565b509392505050565b600082601f83011261473457614733614607565b5b81356147448482602086016146dd565b91505092915050565b600080604083850312156147645761476361447b565b5b6000614772858286016144ce565b925050602083013567ffffffffffffffff81111561479357614792614480565b5b61479f8582860161471f565b9150509250929050565b60006080820190506147be6000830187614447565b6147cb6020830186614447565b6147d86040830185614447565b6147e56060830184614447565b95945050505050565b60006060820190506148036000830186614447565b6148106020830185614447565b61481d6040830184614447565b949350505050565b60008115159050919050565b61483a81614825565b811461484557600080fd5b50565b60008135905061485781614831565b92915050565b600080600080608085870312156148775761487661447b565b5b6000614885878288016144ce565b9450506020614896878288016145c5565b93505060406148a7878288016145c5565b92505060606148b887828801614848565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6148f9816144a5565b82525050565b600061490b83836148f0565b60208301905092915050565b6000602082019050919050565b600061492f826148c4565b61493981856148cf565b9350614944836148e0565b8060005b8381101561497557815161495c88826148ff565b975061496783614917565b925050600181019050614948565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6149b78161443d565b82525050565b60006149c983836149ae565b60208301905092915050565b6000602082019050919050565b60006149ed82614982565b6149f7818561498d565b9350614a028361499e565b8060005b83811015614a33578151614a1a88826149bd565b9750614a25836149d5565b925050600181019050614a06565b5085935050505092915050565b60006040820190508181036000830152614a5a8185614924565b90508181036020830152614a6e81846149e2565b90509392505050565b6000819050919050565b6000614a9c614a97614a9284614485565b614a77565b614485565b9050919050565b6000614aae82614a81565b9050919050565b6000614ac082614aa3565b9050919050565b614ad081614ab5565b82525050565b6000602082019050614aeb6000830184614ac7565b92915050565b614afa81614825565b82525050565b6000602082019050614b156000830184614af1565b92915050565b6000614b2682614aa3565b9050919050565b614b3681614b1b565b82525050565b6000602082019050614b516000830184614b2d565b92915050565b600080600060608486031215614b7057614b6f61447b565b5b6000614b7e868287016144ce565b9350506020614b8f868287016144ce565b9250506040614ba0868287016144ce565b9150509250925092565b600080600060608486031215614bc357614bc261447b565b5b6000614bd1868287016144ce565b9350506020614be2868287016145c5565b9250506040614bf3868287016145c5565b9150509250925092565b6000614c0882614aa3565b9050919050565b614c1881614bfd565b82525050565b6000602082019050614c336000830184614c0f565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614c80602083614c39565b9150614c8b82614c4a565b602082019050919050565b60006020820190508181036000830152614caf81614c73565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000614d12602c83614c39565b9150614d1d82614cb6565b604082019050919050565b60006020820190508181036000830152614d4181614d05565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000614da4602c83614c39565b9150614daf82614d48565b604082019050919050565b60006020820190508181036000830152614dd381614d97565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614e148261443d565b9150614e1f8361443d565b925082821015614e3257614e31614dda565b5b828203905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614e99602e83614c39565b9150614ea482614e3d565b604082019050919050565b60006020820190508181036000830152614ec881614e8c565b9050919050565b6000614eda8261443d565b9150614ee58361443d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614f1a57614f19614dda565b5b828201905092915050565b600081519050614f34816145ae565b92915050565b600060208284031215614f5057614f4f61447b565b5b6000614f5e84828501614f25565b91505092915050565b600067ffffffffffffffff821115614f8257614f81614622565b5b602082029050602081019050919050565b600080fd5b600081519050614fa7816144b7565b92915050565b6000614fc0614fbb84614f67565b614682565b90508083825260208201905060208402830185811115614fe357614fe2614f93565b5b835b8181101561500c5780614ff88882614f98565b845260208401935050602081019050614fe5565b5050509392505050565b600082601f83011261502b5761502a614607565b5b815161503b848260208601614fad565b91505092915050565b600067ffffffffffffffff82111561505f5761505e614622565b5b602082029050602081019050919050565b600061508361507e84615044565b614682565b905080838252602082019050602084028301858111156150a6576150a5614f93565b5b835b818110156150cf57806150bb8882614f25565b8452602084019350506020810190506150a8565b5050509392505050565b600082601f8301126150ee576150ed614607565b5b81516150fe848260208601615070565b91505092915050565b6000806040838503121561511e5761511d61447b565b5b600083015167ffffffffffffffff81111561513c5761513b614480565b5b61514885828601615016565b925050602083015167ffffffffffffffff81111561516957615168614480565b5b615175858286016150d9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006151b98261443d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156151ec576151eb614dda565b5b600182019050919050565b60008151905061520681614831565b92915050565b6000602082840312156152225761522161447b565b5b6000615230848285016151f7565b91505092915050565b600060408201905061524e6000830185614447565b61525b6020830184614544565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006152be602683614c39565b91506152c982615262565b604082019050919050565b600060208201905081810360008301526152ed816152b1565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b6000615350602f83614c39565b915061535b826152f4565b604082019050919050565b6000602082019050818103600083015261537f81615343565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006153e2602b83614c39565b91506153ed82615386565b604082019050919050565b60006020820190508181036000830152615411816153d5565b9050919050565b600060808201905081810360008301526154328187614924565b905081810360208301526154468186614924565b9050818103604083015261545a81856149e2565b9050818103606083015261546e81846149e2565b905095945050505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006154d5602d83614c39565b91506154e082615479565b604082019050919050565b60006020820190508181036000830152615504816154c8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000615596602683614c39565b91506155a18261553a565b604082019050919050565b600060208201905081810360008301526155c581615589565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156156005780820151818401526020810190506155e5565b8381111561560f576000848401525b50505050565b6000615620826155cc565b61562a81856155d7565b935061563a8185602086016155e2565b80840191505092915050565b60006156528284615615565b915081905092915050565b600081519050919050565b60006156738261565d565b61567d8185614c39565b935061568d8185602086016155e2565b61569681614611565b840191505092915050565b600060208201905081810360008301526156bb8184615668565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209f7e276a9a4692ce2b07df9ef4c300a25f62ae8c90d3c8dd82b390d9c9e7323464736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c80638456cb5911610123578063b52d326c116100ab578063f2fde38b1161006f578063f2fde38b146107a9578063f8649e75146107d2578063fac5bb9b146107fd578063fea4765b14610828578063ff0b5830146108535761021a565b8063b52d326c146106b3578063cc222f8d146106dc578063cd15285814610719578063d00a5bf814610757578063d0ebdbe7146107805761021a565b80639468ba0e116100f25780639468ba0e146105dc5780639fd0506d14610607578063a3f16ef114610632578063b187bd261461065d578063b2705329146106885761021a565b80638456cb591461053257806385a92cb7146105495780638ceaa3fe146105865780638da5cb5b146105b15761021a565b806354255be0116101a65780636253d792116101755780636253d79214610461578063664420851461048a578063715018a6146104c75780637c0d530f146104de578063843c7a8b146104f55761021a565b806354255be01461038b57806356ab819f146103b95780635c650b5f146103f85780635dab2420146104365761021a565b80633f4ba83a116101ed5780633f4ba83a146102c7578063481c6a75146102de578063485cc955146103095780634a1376b6146103325780634f1ef2861461036f5761021a565b8063284197961461021f57806332ce1ab41461024a5780633659cfe6146102735780633cbf58721461029c575b600080fd5b34801561022b57600080fd5b5061023461087c565b6040516102419190614456565b60405180910390f35b34801561025657600080fd5b50610271600480360381019061026c91906144e3565b610882565b005b34801561027f57600080fd5b5061029a600480360381019061029591906144e3565b61090a565b005b3480156102a857600080fd5b506102b1610a93565b6040516102be9190614529565b60405180910390f35b3480156102d357600080fd5b506102dc610ac9565b005b3480156102ea57600080fd5b506102f3610b6d565b6040516103009190614553565b60405180910390f35b34801561031557600080fd5b50610330600480360381019061032b919061456e565b610b93565b005b34801561033e57600080fd5b50610359600480360381019061035491906145da565b610c8b565b6040516103669190614553565b60405180910390f35b6103896004803603810190610384919061474d565b610ca8565b005b34801561039757600080fd5b506103a0610de5565b6040516103b094939291906147a9565b60405180910390f35b3480156103c557600080fd5b506103e060048036038101906103db91906144e3565b610e00565b6040516103ef939291906147ee565b60405180910390f35b34801561040457600080fd5b5061041f600480360381019061041a919061485d565b610ed2565b60405161042d929190614a40565b60405180910390f35b34801561044257600080fd5b5061044b61164b565b6040516104589190614ad6565b60405180910390f35b34801561046d57600080fd5b50610488600480360381019061048391906144e3565b611671565b005b34801561049657600080fd5b506104b160048036038101906104ac91906144e3565b6119e5565b6040516104be9190614b00565b60405180910390f35b3480156104d357600080fd5b506104dc611a02565b005b3480156104ea57600080fd5b506104f3611a8a565b005b34801561050157600080fd5b5061051c600480360381019061051791906145da565b611b18565b6040516105299190614553565b60405180910390f35b34801561053e57600080fd5b50610547611b35565b005b34801561055557600080fd5b50610570600480360381019061056b91906144e3565b611bd9565b60405161057d9190614456565b60405180910390f35b34801561059257600080fd5b5061059b611bf1565b6040516105a89190614456565b60405180910390f35b3480156105bd57600080fd5b506105c6611bf7565b6040516105d39190614553565b60405180910390f35b3480156105e857600080fd5b506105f1611c21565b6040516105fe9190614529565b60405180910390f35b34801561061357600080fd5b5061061c611c57565b6040516106299190614553565b60405180910390f35b34801561063e57600080fd5b50610647611c9d565b6040516106549190614b3c565b60405180910390f35b34801561066957600080fd5b50610672611cc3565b60405161067f9190614b00565b60405180910390f35b34801561069457600080fd5b5061069d611d09565b6040516106aa9190614456565b60405180910390f35b3480156106bf57600080fd5b506106da60048036038101906106d59190614b57565b611d0f565b005b3480156106e857600080fd5b5061070360048036038101906106fe91906144e3565b611f28565b6040516107109190614b00565b60405180910390f35b34801561072557600080fd5b50610740600480360381019061073b9190614baa565b611f45565b60405161074e929190614a40565b60405180910390f35b34801561076357600080fd5b5061077e600480360381019061077991906144e3565b612695565b005b34801561078c57600080fd5b506107a760048036038101906107a291906144e3565b612a14565b005b3480156107b557600080fd5b506107d060048036038101906107cb91906144e3565b612a9c565b005b3480156107de57600080fd5b506107e7612b94565b6040516107f49190614456565b60405180910390f35b34801561080957600080fd5b50610812612ba5565b60405161081f9190614c1e565b60405180910390f35b34801561083457600080fd5b5061083d612bcb565b60405161084a9190614456565b60405180910390f35b34801561085f57600080fd5b5061087a600480360381019061087591906144e3565b612bdc565b005b606f5481565b61088a612df3565b73ffffffffffffffffffffffffffffffffffffffff166108a8611bf7565b73ffffffffffffffffffffffffffffffffffffffff16146108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590614c96565b60405180910390fd5b61090781612dfb565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099090614d28565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109d8612f6b565b73ffffffffffffffffffffffffffffffffffffffff1614610a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2590614dba565b60405180910390fd5b610a3781612fc2565b610a9081600067ffffffffffffffff811115610a5657610a55614622565b5b6040519080825280601f01601f191660200182016040528015610a885781602001600182028036833780820191505090505b506000613041565b50565b60017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c610ac39190614e09565b60001b81565b610ad1611c57565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b35576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b3f6000613212565b7f0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f9460405160405180910390a1565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff16610bbb5760008054906101000a900460ff1615610bc4565b610bc3613250565b5b610c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfa90614eaf565b60405180910390fd5b60008060019054906101000a900460ff161590508015610c53576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610c5c83613261565b610c6582613327565b8015610c865760008060016101000a81548160ff0219169083151502179055505b505050565b6000610ca182606861338290919063ffffffff16565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e90614d28565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d76612f6b565b73ffffffffffffffffffffffffffffffffffffffff1614610dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc390614dba565b60405180910390fd5b610dd582612fc2565b610de182826001613041565b5050565b60008060008060018060016000935093509350935090919293565b6000806000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509193909250565b6060803373ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f6757336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401610f5e9190614553565b60405180910390fd5b6000610f73606661339c565b1415610fab576040517f377b56d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484111561102f57856040517f0d4386640000000000000000000000000000000000000000000000000000000081526004016110269190614553565b60405180910390fd5b61103b868560006133b1565b6000606c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000606e60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008211806110d25750600081115b1561153757600061118988606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f85876111279190614ecf565b6040518263ffffffff1660e01b81526004016111439190614456565b602060405180830381865afa158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190614f3a565b6134a0565b905080886111979190614e09565b9750600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336691a41846040518263ffffffff1660e01b81526004016111f79190614456565b6000604051808303816000875af1158015611216573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061123f9190615107565b9150915061124e8b84876134b9565b60008a111561152857600182516112659190614ecf565b67ffffffffffffffff81111561127e5761127d614622565b5b6040519080825280602002602001820160405280156112ac5781602001602082028036833780820191505090505b509650600182516112bd9190614ecf565b67ffffffffffffffff8111156112d6576112d5614622565b5b6040519080825280602002602001820160405280156113045781602001602082028036833780820191505090505b50955060005b82518110156113c8578281815181106113265761132561517f565b5b60200260200101518882815181106113415761134061517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081818151811061138e5761138d61517f565b5b60200260200101518782815181106113a9576113a861517f565b5b60200260200101818152505080806113c0906151ae565b91505061130a565b5087158015611471575089607260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acd201d08d6040518263ffffffff1660e01b815260040161142e9190614553565b602060405180830381865afa15801561144b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146f9190614f3a565b105b156114b3578a6040517f339102f10000000000000000000000000000000000000000000000000000000081526004016114aa9190614553565b60405180910390fd5b8a878351815181106114c8576114c761517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505089868351815181106115175761151661517f565b5b60200260200101818152505061152f565b8196508095505b505050611640565b600167ffffffffffffffff81111561155257611551614622565b5b6040519080825280602002602001820160405280156115805781602001602082028036833780820191505090505b509350600167ffffffffffffffff81111561159e5761159d614622565b5b6040519080825280602002602001820160405280156115cc5781602001602082028036833780820191505090505b50925087846000815181106115e4576115e361517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086836000815181106116335761163261517f565b5b6020026020010181815250505b505094509492505050565b607260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611679611cc3565b156116b0576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b815260040161170b9190614553565b602060405180830381865afa158015611728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174c919061520c565b158061176857506117678160686135ab90919063ffffffff16565b5b156117aa57806040517f10a7bc6b0000000000000000000000000000000000000000000000000000000081526004016117a19190614553565b60405180910390fd5b6000606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561183457816040517f08015b2400000000000000000000000000000000000000000000000000000000815260040161182b9190614553565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058846040518263ffffffff1660e01b81526004016118919190614553565b602060405180830381865afa1580156118ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d29190614f3a565b9050600081141561191a57826040517feeec2b540000000000000000000000000000000000000000000000000000000081526004016119119190614553565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e836040518263ffffffff1660e01b81526004016119779190614456565b602060405180830381865afa158015611994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b89190614f3a565b905060006119c682856134a0565b90506119d285826135db565b6119de858260006138cd565b5050505050565b60006119fb8260666135ab90919063ffffffff16565b9050919050565b611a0a612df3565b73ffffffffffffffffffffffffffffffffffffffff16611a28611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614611a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7590614c96565b60405180910390fd5b611a886000613261565b565b611a92612df3565b73ffffffffffffffffffffffffffffffffffffffff16611ab0611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd90614c96565b60405180910390fd5b611b16611b11611bf7565b6139bc565b565b6000611b2e82606661338290919063ffffffff16565b9050919050565b611b3d611c57565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ba1576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bab6001613212565b7fab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d26760405160405180910390a1565b606a6020528060005260406000206000915090505481565b606b5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c611c519190614e09565b60001b81565b600080600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c611c8c9190614e09565b60001b905080549150819250505090565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c611cf89190614e09565b60001b905080549150819250505090565b606d5481565b611d17612df3565b73ffffffffffffffffffffffffffffffffffffffff16611d35611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614611d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8290614c96565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611df25750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611e295750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15611e60576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82607260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080607160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000611f3e8260686135ab90919063ffffffff16565b9050919050565b6060803373ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611fda57336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401611fd19190614553565b60405180910390fd5b611fee856066613a9890919063ffffffff16565b50611ffb858460016133b1565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425866040518263ffffffff1660e01b81526004016120569190614553565b602060405180830381865afa158015612073573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612097919061520c565b80156120b457506120b28560686135ab90919063ffffffff16565b155b156125d3576000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058876040518263ffffffff1660e01b81526004016121169190614553565b602060405180830381865afa158015612133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121579190614f3a565b9050600061216582876134a0565b905080866121739190614e09565b955060008611156124c357600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d27898b6040518363ffffffff1660e01b81526004016121de929190615239565b6000604051808303816000875af11580156121fd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122269190615107565b915091506122da896122d3606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e8c6040518263ffffffff1660e01b815260040161228c9190614456565b602060405180830381865afa1580156122a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cd9190614f3a565b8a6134a0565b60016138cd565b600182516122e89190614ecf565b67ffffffffffffffff81111561230157612300614622565b5b60405190808252806020026020018201604052801561232f5781602001602082028036833780820191505090505b509550600182516123409190614ecf565b67ffffffffffffffff81111561235957612358614622565b5b6040519080825280602002602001820160405280156123875781602001602082028036833780820191505090505b50945060005b825181101561244b578281815181106123a9576123a861517f565b5b60200260200101518782815181106123c4576123c361517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181815181106124115761241061517f565b5b602002602001015186828151811061242c5761242b61517f565b5b6020026020010181815250508080612443906151ae565b91505061238d565b5088868351815181106124615761246061517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082858351815181106124b0576124af61517f565b5b60200260200101818152505050506125cc565b600167ffffffffffffffff8111156124de576124dd614622565b5b60405190808252806020026020018201604052801561250c5781602001602082028036833780820191505090505b509350600167ffffffffffffffff81111561252a57612529614622565b5b6040519080825280602002602001820160405280156125585781602001602082028036833780820191505090505b50925086846000815181106125705761256f61517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080836000815181106125bf576125be61517f565b5b6020026020010181815250505b505061268d565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d2785876040518363ffffffff1660e01b8152600401612630929190615239565b6000604051808303816000875af115801561264f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906126789190615107565b809250819350505061268c85846001613ac8565b5b935093915050565b61269d611cc3565b156126d4576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425836040518263ffffffff1660e01b81526004016127319190614553565b602060405180830381865afa15801561274e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612772919061520c565b90506000606e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508180156127d657506127d48360686135ab90919063ffffffff16565b155b1561284257600081141561282157826040517f9bd3a6600000000000000000000000000000000000000000000000000000000081526004016128189190614553565b60405180910390fd5b600081905061283084826135db565b61283c84826000613ac8565b50612a0f565b6000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818114156128cb57836040517f9bd3a6600000000000000000000000000000000000000000000000000000000081526004016128c29190614553565b60405180910390fd5b6000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1fa411a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561293a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295e9190614f3a565b1415612996576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008184846129e99190614e09565b6129f39190614e09565b90506129ff8682613bb7565b612a0b86826001613ac8565b5050505b505050565b612a1c612df3565b73ffffffffffffffffffffffffffffffffffffffff16612a3a611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614612a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8790614c96565b60405180910390fd5b612a9981613eac565b50565b612aa4612df3565b73ffffffffffffffffffffffffffffffffffffffff16612ac2611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614612b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0f90614c96565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7f906152d4565b60405180910390fd5b612b9181613261565b50565b6000612ba0606661339c565b905090565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612bd7606861339c565b905090565b612be4612df3565b73ffffffffffffffffffffffffffffffffffffffff16612c02611bf7565b73ffffffffffffffffffffffffffffffffffffffff1614612c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4f90614c96565b60405180910390fd5b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b8152600401612cb39190614553565b602060405180830381865afa158015612cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf4919061520c565b612d3557806040517f10a7bc6b000000000000000000000000000000000000000000000000000000008152600401612d2c9190614553565b60405180910390fd5b612d49816068613f9a90919063ffffffff16565b612d8a57806040517fe9b829ba000000000000000000000000000000000000000000000000000000008152600401612d819190614553565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167f7fab4241c447cd1e7af48ab4c6bbeab72a3836e47ed68c58b78b399531a5cd6c60405160405180910390a250565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1fa411a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8e9190614f3a565b1415612ec6576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612eda8160686135ab90919063ffffffff16565b15612f1c57806040517fe09c4db2000000000000000000000000000000000000000000000000000000008152600401612f139190614553565b60405180910390fd5b612f30816068613a9890919063ffffffff16565b507f65aef4c8071073180f00fde0e2179949872e90b7003d3b2a22d7bc182d2cc88681604051612f609190614553565b60405180910390a150565b6000612f997f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613fca565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612fca612df3565b73ffffffffffffffffffffffffffffffffffffffff16612fe8611bf7565b73ffffffffffffffffffffffffffffffffffffffff161461303e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161303590614c96565b60405180910390fd5b50565b600061304b612f6b565b905061305684613fd4565b6000835111806130635750815b1561307457613072848461408d565b505b60006130a27f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6140ba565b90508060000160009054906101000a900460ff1661320b5760018160000160006101000a81548160ff02191690831515021790555061316e85836040516024016130ec9190614553565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061408d565b5060008160000160006101000a81548160ff021916908315150217905550613194612f6b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614613201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f890615366565b60405180910390fd5b61320a856140c4565b5b5050505050565b600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c6132449190614e09565b60001b90508181555050565b600061325b30612dd0565b15905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16613376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161336d906153f8565b60405180910390fd5b61337f81613eac565b50565b60006133918360000183614113565b60001c905092915050565b60006133aa8260000161413e565b9050919050565b801561342b5781606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546134069190614ecf565b9250508190555081606b600082825461341f9190614ecf565b9250508190555061349b565b81606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461347a9190614e09565b9250508190555081606b60008282546134939190614e09565b925050819055505b505050565b60008183106134af57816134b1565b825b905092915050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e846040518263ffffffff1660e01b81526004016135169190614456565b602060405180830381865afa158015613533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135579190614f3a565b9050600061356583836134a0565b9050600081111561357d5761357c858260006138cd565b5b6000818361358b9190614e09565b905060008111156135a3576135a286826000613ac8565b5b505050505050565b60006135d3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61414f565b905092915050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f836040518263ffffffff1660e01b81526004016136389190614456565b602060405180830381865afa158015613655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136799190614f3a565b9050600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336691a41846040518263ffffffff1660e01b81526004016136d99190614456565b6000604051808303816000875af11580156136f8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906137219190615107565b915091506000600167ffffffffffffffff81111561374257613741614622565b5b6040519080825280602002602001820160405280156137705781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff8111156137905761378f614622565b5b6040519080825280602002602001820160405280156137be5781602001602082028036833780820191505090505b50905086826000815181106137d6576137d561517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084816000815181106138255761382461517f565b5b602002602001018181525050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c4d4e40858486856040518563ffffffff1660e01b81526004016138929493929190615418565b600060405180830381600087803b1580156138ac57600080fd5b505af11580156138c0573d6000803e3d6000fd5b5050505050505050505050565b80156139475781606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139229190614ecf565b9250508190555081606d600082825461393b9190614ecf565b925050819055506139b7565b81606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546139969190614e09565b9250508190555081606d60008282546139af9190614e09565b925050819055505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613a23576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c613a559190614e09565b60001b90508181557fd11d57c2c7468878b1035df11c670bcd0091aa840bf8aa166365397622237bea82604051613a8c9190614553565b60405180910390a15050565b6000613ac0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b614172565b905092915050565b8015613b425781606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613b1d9190614ecf565b9250508190555081606f6000828254613b369190614ecf565b92505081905550613bb2565b81606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613b919190614e09565b9250508190555081606f6000828254613baa9190614e09565b925050819055505b505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f836040518263ffffffff1660e01b8152600401613c149190614456565b602060405180830381865afa158015613c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c559190614f3a565b90506000600167ffffffffffffffff811115613c7457613c73614622565b5b604051908082528060200260200182016040528015613ca25781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff811115613cc257613cc1614622565b5b604051908082528060200260200182016040528015613cf05781602001602082028036833780820191505090505b5090508482600081518110613d0857613d0761517f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600081518110613d5757613d5661517f565b5b602002602001018181525050600080607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0cd8d278660006040518363ffffffff1660e01b8152600401613dc4929190615239565b6000604051808303816000875af1158015613de3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613e0c9190615107565b91509150606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c4d4e40858486856040518563ffffffff1660e01b8152600401613e719493929190615418565b600060405180830381600087803b158015613e8b57600080fd5b505af1158015613e9f573d6000803e3d6000fd5b5050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613f13576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b6000613fc2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6141e2565b905092915050565b6000819050919050565b613fdd816142f6565b61401c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614013906154eb565b60405180910390fd5b806140497f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613fca565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606140b283836040518060600160405280602781526020016156c460279139614309565b905092915050565b6000819050919050565b6140cd81613fd4565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600082600001828154811061412b5761412a61517f565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b600061417e838361414f565b6141d75782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506141dc565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146142ea5760006001826142149190614e09565b905060006001866000018054905061422c9190614e09565b905081811461429b57600086600001828154811061424d5761424c61517f565b5b90600052602060002001549050808760000184815481106142715761427061517f565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806142af576142ae61550b565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506142f0565b60009150505b92915050565b600080823b905060008111915050919050565b6060614314846142f6565b614353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161434a906155ac565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161437b9190615646565b600060405180830381855af49150503d80600081146143b6576040519150601f19603f3d011682016040523d82523d6000602084013e6143bb565b606091505b50915091506143cb8282866143d6565b925050509392505050565b606083156143e657829050614436565b6000835111156143f95782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161442d91906156a1565b60405180910390fd5b9392505050565b6000819050919050565b6144508161443d565b82525050565b600060208201905061446b6000830184614447565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006144b082614485565b9050919050565b6144c0816144a5565b81146144cb57600080fd5b50565b6000813590506144dd816144b7565b92915050565b6000602082840312156144f9576144f861447b565b5b6000614507848285016144ce565b91505092915050565b6000819050919050565b61452381614510565b82525050565b600060208201905061453e600083018461451a565b92915050565b61454d816144a5565b82525050565b60006020820190506145686000830184614544565b92915050565b600080604083850312156145855761458461447b565b5b6000614593858286016144ce565b92505060206145a4858286016144ce565b9150509250929050565b6145b78161443d565b81146145c257600080fd5b50565b6000813590506145d4816145ae565b92915050565b6000602082840312156145f0576145ef61447b565b5b60006145fe848285016145c5565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61465a82614611565b810181811067ffffffffffffffff8211171561467957614678614622565b5b80604052505050565b600061468c614471565b90506146988282614651565b919050565b600067ffffffffffffffff8211156146b8576146b7614622565b5b6146c182614611565b9050602081019050919050565b82818337600083830152505050565b60006146f06146eb8461469d565b614682565b90508281526020810184848401111561470c5761470b61460c565b5b6147178482856146ce565b509392505050565b600082601f83011261473457614733614607565b5b81356147448482602086016146dd565b91505092915050565b600080604083850312156147645761476361447b565b5b6000614772858286016144ce565b925050602083013567ffffffffffffffff81111561479357614792614480565b5b61479f8582860161471f565b9150509250929050565b60006080820190506147be6000830187614447565b6147cb6020830186614447565b6147d86040830185614447565b6147e56060830184614447565b95945050505050565b60006060820190506148036000830186614447565b6148106020830185614447565b61481d6040830184614447565b949350505050565b60008115159050919050565b61483a81614825565b811461484557600080fd5b50565b60008135905061485781614831565b92915050565b600080600080608085870312156148775761487661447b565b5b6000614885878288016144ce565b9450506020614896878288016145c5565b93505060406148a7878288016145c5565b92505060606148b887828801614848565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6148f9816144a5565b82525050565b600061490b83836148f0565b60208301905092915050565b6000602082019050919050565b600061492f826148c4565b61493981856148cf565b9350614944836148e0565b8060005b8381101561497557815161495c88826148ff565b975061496783614917565b925050600181019050614948565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6149b78161443d565b82525050565b60006149c983836149ae565b60208301905092915050565b6000602082019050919050565b60006149ed82614982565b6149f7818561498d565b9350614a028361499e565b8060005b83811015614a33578151614a1a88826149bd565b9750614a25836149d5565b925050600181019050614a06565b5085935050505092915050565b60006040820190508181036000830152614a5a8185614924565b90508181036020830152614a6e81846149e2565b90509392505050565b6000819050919050565b6000614a9c614a97614a9284614485565b614a77565b614485565b9050919050565b6000614aae82614a81565b9050919050565b6000614ac082614aa3565b9050919050565b614ad081614ab5565b82525050565b6000602082019050614aeb6000830184614ac7565b92915050565b614afa81614825565b82525050565b6000602082019050614b156000830184614af1565b92915050565b6000614b2682614aa3565b9050919050565b614b3681614b1b565b82525050565b6000602082019050614b516000830184614b2d565b92915050565b600080600060608486031215614b7057614b6f61447b565b5b6000614b7e868287016144ce565b9350506020614b8f868287016144ce565b9250506040614ba0868287016144ce565b9150509250925092565b600080600060608486031215614bc357614bc261447b565b5b6000614bd1868287016144ce565b9350506020614be2868287016145c5565b9250506040614bf3868287016145c5565b9150509250925092565b6000614c0882614aa3565b9050919050565b614c1881614bfd565b82525050565b6000602082019050614c336000830184614c0f565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614c80602083614c39565b9150614c8b82614c4a565b602082019050919050565b60006020820190508181036000830152614caf81614c73565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000614d12602c83614c39565b9150614d1d82614cb6565b604082019050919050565b60006020820190508181036000830152614d4181614d05565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000614da4602c83614c39565b9150614daf82614d48565b604082019050919050565b60006020820190508181036000830152614dd381614d97565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614e148261443d565b9150614e1f8361443d565b925082821015614e3257614e31614dda565b5b828203905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614e99602e83614c39565b9150614ea482614e3d565b604082019050919050565b60006020820190508181036000830152614ec881614e8c565b9050919050565b6000614eda8261443d565b9150614ee58361443d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614f1a57614f19614dda565b5b828201905092915050565b600081519050614f34816145ae565b92915050565b600060208284031215614f5057614f4f61447b565b5b6000614f5e84828501614f25565b91505092915050565b600067ffffffffffffffff821115614f8257614f81614622565b5b602082029050602081019050919050565b600080fd5b600081519050614fa7816144b7565b92915050565b6000614fc0614fbb84614f67565b614682565b90508083825260208201905060208402830185811115614fe357614fe2614f93565b5b835b8181101561500c5780614ff88882614f98565b845260208401935050602081019050614fe5565b5050509392505050565b600082601f83011261502b5761502a614607565b5b815161503b848260208601614fad565b91505092915050565b600067ffffffffffffffff82111561505f5761505e614622565b5b602082029050602081019050919050565b600061508361507e84615044565b614682565b905080838252602082019050602084028301858111156150a6576150a5614f93565b5b835b818110156150cf57806150bb8882614f25565b8452602084019350506020810190506150a8565b5050509392505050565b600082601f8301126150ee576150ed614607565b5b81516150fe848260208601615070565b91505092915050565b6000806040838503121561511e5761511d61447b565b5b600083015167ffffffffffffffff81111561513c5761513b614480565b5b61514885828601615016565b925050602083015167ffffffffffffffff81111561516957615168614480565b5b615175858286016150d9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006151b98261443d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156151ec576151eb614dda565b5b600182019050919050565b60008151905061520681614831565b92915050565b6000602082840312156152225761522161447b565b5b6000615230848285016151f7565b91505092915050565b600060408201905061524e6000830185614447565b61525b6020830184614544565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006152be602683614c39565b91506152c982615262565b604082019050919050565b600060208201905081810360008301526152ed816152b1565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b6000615350602f83614c39565b915061535b826152f4565b604082019050919050565b6000602082019050818103600083015261537f81615343565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006153e2602b83614c39565b91506153ed82615386565b604082019050919050565b60006020820190508181036000830152615411816153d5565b9050919050565b600060808201905081810360008301526154328187614924565b905081810360208301526154468186614924565b9050818103604083015261545a81856149e2565b9050818103606083015261546e81846149e2565b905095945050505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006154d5602d83614c39565b91506154e082615479565b604082019050919050565b60006020820190508181036000830152615504816154c8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000615596602683614c39565b91506155a18261553a565b604082019050919050565b600060208201905081810360008301526155c581615589565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156156005780820151818401526020810190506155e5565b8381111561560f576000848401525b50505050565b6000615620826155cc565b61562a81856155d7565b935061563a8185602086016155e2565b80840191505092915050565b60006156528284615615565b915081905092915050565b600081519050919050565b60006156738261565d565b61567d8185614c39565b935061568d8185602086016155e2565b61569681614611565b840191505092915050565b600060208201905081810360008301526156bb8184615668565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209f7e276a9a4692ce2b07df9ef4c300a25f62ae8c90d3c8dd82b390d9c9e7323464736f6c634300080b0033",
  "devdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "params": {
            "caller": "`msg.sender` that called the function."
          }
        }
      ],
      "CantWithdrawAccordingToStrategy(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "FailedToUnblockGroup(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupAlreadyBlocked(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupBalanced(address)": [
        {
          "params": {
            "group": "The group address."
          }
        }
      ],
      "GroupNotBalanced(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupNotEligible(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupNotOverflowing(address)": [
        {
          "params": {
            "group": "The group address."
          }
        }
      ],
      "GroupStillOverflowing(address)": [
        {
          "params": {
            "group": "The group address."
          }
        }
      ]
    },
    "events": {
      "GroupBlocked(address)": {
        "params": {
          "group": "The group's address."
        }
      },
      "GroupUnblocked(address)": {
        "params": {
          "group": "The group's address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "blockGroup(address)": {
        "params": {
          "group": "The group address."
        }
      },
      "generateDepositVoteDistribution(address,uint256,uint256)": {
        "params": {
          "celoAmount": "The amount of CELO.",
          "group": "The validator group that we want to deposit to or transfer from.",
          "stCeloAmount": "The amount of stCELO."
        },
        "returns": {
          "finalGroups": "The groups to withdraw from.",
          "finalVotes": "The amount to withdraw from each group."
        }
      },
      "generateWithdrawalVoteDistribution(address,uint256,uint256,bool)": {
        "params": {
          "celoWithdrawalAmount": "The amount of CELO to withdraw.",
          "group": "The validator group that we want to withdraw from.",
          "stCeloWithdrawalAmount": "The amount of stCELO to withdraw."
        },
        "returns": {
          "groups": "The groups to withdraw from.",
          "votes": "The amount to withdraw from each group."
        }
      },
      "getBlockedGroup(uint256)": {
        "returns": {
          "_0": "The blocked group."
        }
      },
      "getNumberOfBlockedGroups()": {
        "returns": {
          "_0": "The length of blocked groups."
        }
      },
      "getNumberOfVotedGroups()": {
        "returns": {
          "_0": "The length of voted groups."
        }
      },
      "getStCeloInGroup(address)": {
        "returns": {
          "overflow": "The stCELO amount that is overflowed to default strategy.",
          "total": "The total stCELO amount.",
          "unhealthy": "The stCELO amount that is moved to default strategy because group is/was unhealthy."
        }
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "Storage version of the contract.",
          "_1": "Major version of the contract.",
          "_2": "Minor version of the contract.",
          "_3": "Patch version of the contract."
        }
      },
      "getVotedGroup(uint256)": {
        "returns": {
          "_0": "The specific group."
        }
      },
      "initialize(address,address)": {
        "params": {
          "_manager": "The address of the Manager contract.",
          "_owner": "The address of the contract owner."
        }
      },
      "isBlockedGroup(address)": {
        "params": {
          "group": "The validator group."
        },
        "returns": {
          "_0": "Whether or not group is blocked."
        }
      },
      "isPaused()": {
        "returns": {
          "_0": "`true` if the contract is paused, `false` otherwise."
        }
      },
      "isVotedGroup(address)": {
        "params": {
          "group": "The validator group."
        },
        "returns": {
          "_0": "Whether or not is group is voted."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rebalanceOverflowedGroup(address)": {
        "params": {
          "group": "The group address."
        }
      },
      "rebalanceWhenHealthChanged(address)": {
        "params": {
          "group": "The group address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDependencies(address,address,address)": {
        "params": {
          "_account": "The address of the Account contract.",
          "_defaultStrategy": "The address of the DefaultStrategy contract.",
          "_groupHealth": "The address of the GroupHealth contract."
        }
      },
      "setManager(address)": {
        "params": {
          "_manager": "The new manager address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unblockGroup(address)": {
        "params": {
          "group": "The address of the group to add to the set of specific group strategies."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "totalStCeloLocked": {
        "details": "To get the actual stCelo in specific strategy it is necessary to subtract `totalStCeloOverflow`."
      }
    },
    "title": "SpecificGroupStrategy is responsible for handling any deposit/withdrawal for accounts with specific strategy selected.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressZeroNotAllowed()": [
        {
          "notice": "Used when attempting to pass in address zero where not allowed."
        }
      ],
      "CallerNotManager(address)": [
        {
          "notice": "Used when an `onlyManager` function is called by a non-manager."
        }
      ],
      "CantWithdrawAccordingToStrategy(address)": [
        {
          "notice": "Used when there isn't enough CELO voting for an account's strategy to fulfill a withdrawal."
        }
      ],
      "FailedToUnblockGroup(address)": [
        {
          "notice": "Used when attempting to unblock a group that is not blocked."
        }
      ],
      "GroupAlreadyBlocked(address)": [
        {
          "notice": "Used when attempting to block a group that is not allowed."
        }
      ],
      "GroupBalanced(address)": [
        {
          "notice": "Used when trying to `rebalanceWhenHealthChanged` when the group cannot be rebalanced since it is in correct state."
        }
      ],
      "GroupNotBalanced(address)": [
        {
          "notice": "Used when attempting to withdraw from specific group but group does not have enough CELO. It is necessary to rebalance the group."
        }
      ],
      "GroupNotEligible(address)": [
        {
          "notice": "Used when a group does not meet the validator group health requirements."
        }
      ],
      "GroupNotOverflowing(address)": [
        {
          "notice": "Used when trying to `rebalanceOverflowedGroup` when the group is not overflowing."
        }
      ],
      "GroupStillOverflowing(address)": [
        {
          "notice": "Used when trying to `rebalanceOverflowedGroup` when the overflowing group cannot be rebalanced since it has no receivable votes."
        }
      ],
      "NoActiveGroups()": [
        {
          "notice": "Used when attempting to deposit when there are not active groups to vote for."
        }
      ],
      "NoGroups()": [
        {
          "notice": "Used when attempting to withdraw but there are no groups being voted for."
        }
      ],
      "OnlyPauser()": [
        {
          "notice": "Used when an `onlyPauser` function is called with a different address."
        }
      ],
      "Paused()": [
        {
          "notice": "Used when an `onlyWhenNotPaused` function is called while the contract is paused."
        }
      ]
    },
    "events": {
      "ContractPaused()": {
        "notice": "Emitted when this contract is paused."
      },
      "ContractUnpaused()": {
        "notice": "Emitted when this contract is unpaused."
      },
      "GroupBlocked(address)": {
        "notice": "Emmited when group is blocked."
      },
      "GroupUnblocked(address)": {
        "notice": "Emitted when a group was unblocked."
      },
      "ManagerSet(address)": {
        "notice": "Emitted when the manager is initially set or later modified."
      },
      "PauserSet(address)": {
        "notice": "Emitted when the address authorized to pause/unpause the contract is changed."
      }
    },
    "kind": "user",
    "methods": {
      "PAUSED_POSITION()": {
        "notice": "The storage slot under which we store a boolean representing whether or not the contract is currently paused."
      },
      "PAUSER_POSITION()": {
        "notice": "The storage slot under which we store an address representing the address permissioned to pause/unpause this contract."
      },
      "account()": {
        "notice": "An instance of the Account contract for the StakedCelo protocol."
      },
      "blockGroup(address)": {
        "notice": "Marks a group as blocked for voting."
      },
      "constructor": {
        "notice": "Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized."
      },
      "defaultStrategy()": {
        "notice": "An instance of the DefaultStrategy contract for the StakedCelo protocol."
      },
      "generateDepositVoteDistribution(address,uint256,uint256)": {
        "notice": "Generates groups and votes to distribute votes to."
      },
      "generateWithdrawalVoteDistribution(address,uint256,uint256,bool)": {
        "notice": "Used to withdraw CELO from a specific group that account voted for previously. It is expected that strategy will be balanced. For balancing use `rebalance` function."
      },
      "getBlockedGroup(uint256)": {
        "notice": "Returns the blocked group at index."
      },
      "getNumberOfBlockedGroups()": {
        "notice": "Returns the number of blocked groups."
      },
      "getNumberOfVotedGroups()": {
        "notice": "Returns the number of voted groups."
      },
      "getStCeloInGroup(address)": {
        "notice": "Returns the specific group total stCELO."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "getVotedGroup(uint256)": {
        "notice": "Returns the specific group at index."
      },
      "groupHealth()": {
        "notice": "An instance of the GroupHealth contract for the StakedCelo protocol."
      },
      "initialize(address,address)": {
        "notice": "Initialize the contract with registry and owner."
      },
      "isBlockedGroup(address)": {
        "notice": "Returns if group is blocked."
      },
      "isPaused()": {
        "notice": "Returns whether or not the contract is paused."
      },
      "isVotedGroup(address)": {
        "notice": "Returns if a group is a voted group."
      },
      "pause()": {
        "notice": "Pauses the contract."
      },
      "pauser()": {
        "notice": "Returns the address permissioned to pause/unpause this contract."
      },
      "rebalanceOverflowedGroup(address)": {
        "notice": "When there is group that is overflowing and in meantime there are votes that freed up. This function makes sure to reschedule votes correctly for overflowing group."
      },
      "rebalanceWhenHealthChanged(address)": {
        "notice": "Used when validator gets unhealthy and we need to move funds to default strategy"
      },
      "setDependencies(address,address,address)": {
        "notice": "Set this contract's dependencies in the StakedCelo system."
      },
      "setManager(address)": {
        "notice": "Sets the manager address."
      },
      "setPauser()": {
        "notice": "Sets that address permissioned to pause/unpause this contract to the owner of this contract."
      },
      "stCeloInGroup(address)": {
        "notice": "stCELO that was cast for specific group strategies, group => stCELO amount"
      },
      "totalStCeloLocked()": {
        "notice": "Total stCELO that was voted with on specific group strategies (including overflows)."
      },
      "totalStCeloOverflow()": {
        "notice": "Total stCelo that was overflowed to default strategy."
      },
      "totalStCeloUnhealthy()": {
        "notice": "Total stCelo that is cast for unhealthy groups and was moved to default strategy."
      },
      "unblockGroup(address)": {
        "notice": "Unblocks previously blocked group."
      },
      "unpause()": {
        "notice": "Unpauses the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 481,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3636,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "manager",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 3927,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "votedGroups",
        "offset": 0,
        "slot": "102",
        "type": "t_struct(AddressSet)1684_storage"
      },
      {
        "astId": 3931,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "blockedGroups",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(AddressSet)1684_storage"
      },
      {
        "astId": 3936,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "stCeloInGroup",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3939,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "totalStCeloLocked",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 3944,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "stCeloInGroupOverflowed",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3947,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "totalStCeloOverflow",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 3952,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "stCeloInGroupUnhealthy",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3955,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "totalStCeloUnhealthy",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 3959,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "groupHealth",
        "offset": 0,
        "slot": "112",
        "type": "t_contract(IGroupHealth)7355"
      },
      {
        "astId": 3963,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "defaultStrategy",
        "offset": 0,
        "slot": "113",
        "type": "t_contract(IDefaultStrategy)6860"
      },
      {
        "astId": 3967,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "account",
        "offset": 0,
        "slot": "114",
        "type": "t_contract(IAccount)6581"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccount)6581": {
        "encoding": "inplace",
        "label": "contract IAccount",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultStrategy)6860": {
        "encoding": "inplace",
        "label": "contract IDefaultStrategy",
        "numberOfBytes": "20"
      },
      "t_contract(IGroupHealth)7355": {
        "encoding": "inplace",
        "label": "contract IGroupHealth",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1684_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1683,
            "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1383_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1383_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1378,
            "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1382,
            "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}