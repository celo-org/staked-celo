{
  "address": "0x9B1eb2bc54d9935084A921DD36fA57c83E20B71D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotManager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "CantWithdrawAccordingToStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "FailedToAddSpecificGroupStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "FailedToBlockStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "FailedToUnBlockStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "real",
          "type": "uint256"
        }
      ],
      "name": "GroupNotBalancedOrNotEnoughStCelo",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotOverflowing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupStillOverflowing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxGroupsVotedForReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveGroups",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoGroups",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "StrategyAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "StrategyAlreadyBlocked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "StrategyNotEligible",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "StrategyBlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "StrategyUnblocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "account",
      "outputs": [
        {
          "internalType": "contract IAccount",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "blockStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "celoWithdrawalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stCeloWithdrawalAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateAndUpdateForWithdrawal",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "groups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "celoWithdrawalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stCeloWithdrawalAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateAndUpdateForWithdrawalTransfer",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "groups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultStrategy",
      "outputs": [
        {
          "internalType": "contract IDefaultStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "celoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stCeloAmount",
          "type": "uint256"
        }
      ],
      "name": "generateGroupVotesToDistributeTo",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "finalGroups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "finalVotes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBlockedStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfBlockedStrategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfStrategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "getStCeloInStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overflow",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "groupHealth",
      "outputs": [
        {
          "internalType": "contract IGroupHealth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "isBlockedStrategy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "isStrategy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "rebalanceOverflowedGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_groupHealth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultStrategy",
          "type": "address"
        }
      ],
      "name": "setDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stCeloInStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStCeloLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStCeloOverflow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "unblockStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ea944d8754193ade168dcf5077330efb268a39247170db4b2f05270a70a6d9d",
  "receipt": {
    "to": null,
    "from": "0x5bC1C4C1D67C5E4384189302BC653A611568a788",
    "contractAddress": "0x9B1eb2bc54d9935084A921DD36fA57c83E20B71D",
    "transactionIndex": 0,
    "gasUsed": "4043087",
    "logsBloom": "0x
    "blockHash": "0x5b5e05fa86f3643ad2a23687b6ce287fced0dd3140569013e3db685c30467d1f",
    "transactionHash": "0x4ea944d8754193ade168dcf5077330efb268a39247170db4b2f05270a70a6d9d",
    "logs": [],
    "blockNumber": 16321823,
    "cumulativeGasUsed": "4043087",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f051a28401f992e504f883b8bfc781d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"CantWithdrawAccordingToStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"FailedToAddSpecificGroupStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"FailedToBlockStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"FailedToUnBlockStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"real\",\"type\":\"uint256\"}],\"name\":\"GroupNotBalancedOrNotEnoughStCelo\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotOverflowing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupStillOverflowing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxGroupsVotedForReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveGroups\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoGroups\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"StrategyAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"StrategyAlreadyBlocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"StrategyNotEligible\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"StrategyBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"StrategyUnblocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"account\",\"outputs\":[{\"internalType\":\"contract IAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"blockStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"celoWithdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stCeloWithdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"calculateAndUpdateForWithdrawal\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"groups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"celoWithdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stCeloWithdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"calculateAndUpdateForWithdrawalTransfer\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"groups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultStrategy\",\"outputs\":[{\"internalType\":\"contract IDefaultStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"celoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stCeloAmount\",\"type\":\"uint256\"}],\"name\":\"generateGroupVotesToDistributeTo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"finalGroups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"finalVotes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBlockedStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfBlockedStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getStCeloInStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupHealth\",\"outputs\":[{\"internalType\":\"contract IGroupHealth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"isBlockedStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"isStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"rebalanceOverflowedGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_groupHealth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultStrategy\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stCeloInStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStCeloLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStCeloOverflow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"unblockStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"params\":{\"caller\":\"`msg.sender` that called the function.\"}}],\"CantWithdrawAccordingToStrategy(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"FailedToAddSpecificGroupStrategy(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"FailedToBlockStrategy(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"FailedToUnBlockStrategy(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupNotBalancedOrNotEnoughStCelo(address,uint256,uint256)\":[{\"params\":{\"expected\":\"The expected vote amount.\",\"group\":\"The group's address.\",\"real\":\"The real vote amount.\"}}],\"GroupNotOverflowing(address)\":[{\"params\":{\"group\":\"The group address.\"}}],\"GroupStillOverflowing(address)\":[{\"params\":{\"group\":\"The group address.\"}}],\"StrategyAlreadyAdded(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"StrategyAlreadyBlocked(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"StrategyNotEligible(address)\":[{\"params\":{\"group\":\"The group's address.\"}}]},\"events\":{\"StrategyBlocked(address)\":{\"params\":{\"group\":\"The group's address.\"}},\"StrategyUnblocked(address)\":{\"params\":{\"group\":\"The group's address.\"}}},\"kind\":\"dev\",\"methods\":{\"blockStrategy(address)\":{\"params\":{\"group\":\"The address of the group to remove from the set of specific group strategies.\"}},\"calculateAndUpdateForWithdrawal(address,uint256,uint256)\":{\"params\":{\"celoWithdrawalAmount\":\"The amount of CELO to withdraw.\",\"stCeloWithdrawalAmount\":\"The amount of stCELO to withdraw.\",\"strategy\":\"The validator group that we want to withdraw from.\"},\"returns\":{\"groups\":\"The groups to withdraw from.\",\"votes\":\"The amount to withdraw from each group.\"}},\"calculateAndUpdateForWithdrawalTransfer(address,uint256,uint256)\":{\"params\":{\"celoWithdrawalAmount\":\"The amount of stCELO to withdraw.\",\"strategy\":\"The validator group that we want to withdraw from.\"},\"returns\":{\"groups\":\"The groups to withdraw from.\",\"votes\":\"The amount to withdraw from each group.\"}},\"generateGroupVotesToDistributeTo(address,uint256,uint256)\":{\"params\":{\"celoAmount\":\"The amount of CELO.\",\"stCeloAmount\":\"The amount of stCELO.\",\"strategy\":\"The validator group that we want to deposit to or transfer from.\"},\"returns\":{\"finalGroups\":\"The groups to withdraw from.\",\"finalVotes\":\"The amount to withdraw from each group.\"}},\"getBlockedStrategy(uint256)\":{\"returns\":{\"_0\":\"The blocked group.\"}},\"getNumberOfBlockedStrategies()\":{\"returns\":{\"_0\":\"The length of blocked groups.\"}},\"getNumberOfStrategies()\":{\"returns\":{\"_0\":\"The length of active groups.\"}},\"getStCeloInStrategy(address)\":{\"returns\":{\"overflow\":\"The stCELO amount that is overflowed to default strategy.\",\"total\":\"The total stCELO amount.\"}},\"getStrategy(uint256)\":{\"returns\":{\"_0\":\"The specific group.\"}},\"getVersionNumber()\":{\"returns\":{\"_0\":\"Storage version of the contract.\",\"_1\":\"Major version of the contract.\",\"_2\":\"Minor version of the contract.\",\"_3\":\"Patch version of the contract.\"}},\"initialize(address,address,address)\":{\"params\":{\"_manager\":\"The address of the Manager contract.\",\"_owner\":\"The address of the contract owner.\",\"_registry\":\"The address of the Celo Registry.\"}},\"isBlockedStrategy(address)\":{\"params\":{\"strategy\":\"The validator group.\"},\"returns\":{\"_0\":\"Whether or not is blocked specific group strategy.\"}},\"isStrategy(address)\":{\"params\":{\"strategy\":\"The validator group.\"},\"returns\":{\"_0\":\"Whether or not is specific group strategy.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rebalanceOverflowedGroup(address)\":{\"params\":{\"strategy\":\"The group address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDependencies(address,address,address)\":{\"params\":{\"_account\":\"The address of the Account contract.\",\"_defaultStrategy\":\"The address of the DefaultStrategy contract.\",\"_groupHealth\":\"The address of the GroupHealth contract.\"}},\"setManager(address)\":{\"params\":{\"_manager\":\"The new manager address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unblockStrategy(address)\":{\"params\":{\"group\":\"The address of the group to add to the set of specific group strategies.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"totalStCeloLocked\":{\"details\":\"To get the actual stCelo in specific strategy it is necessary to subtract `totalStCeloOverflow`.\"}},\"title\":\"SpecificGroupStrategy is responsible for handling any deposit/withdrawal for accounts with specific strategy selected.\",\"version\":1},\"userdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"notice\":\"Used when an `onlyManager` function is called by a non-manager.\"}],\"CantWithdrawAccordingToStrategy(address)\":[{\"notice\":\"Used when there isn't enough CELO voting for an account's strategy to fulfill a withdrawal.\"}],\"FailedToAddSpecificGroupStrategy(address)\":[{\"notice\":\"Used when an attempt to add an specific group strategy to the EnumerableSet fails.\"}],\"FailedToBlockStrategy(address)\":[{\"notice\":\"Used when attempting to block a strategy failed.\"}],\"FailedToUnBlockStrategy(address)\":[{\"notice\":\"Used when attempting to unblock a strategy that is not blocked.\"}],\"GroupNotBalancedOrNotEnoughStCelo(address,uint256,uint256)\":[{\"notice\":\"Used when attempting to withdraw from specific group strategy but group does not have enough CELO. Group either doesn't have enough stCELO or it is necessary to rebalance the group.\"}],\"GroupNotOverflowing(address)\":[{\"notice\":\"Used when trying to `rebalanceOverflowedGroup` when the group is not overflowing.\"}],\"GroupStillOverflowing(address)\":[{\"notice\":\"Used when trying to `rebalanceOverflowedGroup` when the overflowing group cannot be rebalanced since it has no receivable votes.\"}],\"MaxGroupsVotedForReached()\":[{\"notice\":\"Used when attempting to allow a strategy when the maximum number of groups voted (as allowed by the Election contract) is already being voted for.\"}],\"NoActiveGroups()\":[{\"notice\":\"Used when attempting to deposit when there are not active groups to vote for.\"}],\"NoGroups()\":[{\"notice\":\"Used when attempting to withdraw but there are no groups being voted for.\"}],\"NullAddress()\":[{\"notice\":\"Used when a passed address is address(0).\"}],\"StrategyAlreadyAdded(address)\":[{\"notice\":\"Used when attempting to allow strategy that is already allowed.\"}],\"StrategyAlreadyBlocked(address)\":[{\"notice\":\"Used when attempting to block a strategy that is not allowed.\"}],\"StrategyNotEligible(address)\":[{\"notice\":\"Used when a strategy does not meet the validator group health requirements.\"}]},\"events\":{\"ManagerSet(address)\":{\"notice\":\"Emitted when the manager is initially set or later modified.\"},\"StrategyBlocked(address)\":{\"notice\":\"Emmited when strategy is blocked.\"},\"StrategyUnblocked(address)\":{\"notice\":\"Emitted when a strategy was unlbocked.\"}},\"kind\":\"user\",\"methods\":{\"account()\":{\"notice\":\"An instance of the Account contract for the StakedCelo protocol.\"},\"blockStrategy(address)\":{\"notice\":\"Marks a group as not specific group strategy for voting.\"},\"calculateAndUpdateForWithdrawal(address,uint256,uint256)\":{\"notice\":\"Used to withdraw CELO from a specific group strategy that account voted for previously. It is expected that strategy will be balanced. For balancing use `rebalance` function.\"},\"calculateAndUpdateForWithdrawalTransfer(address,uint256,uint256)\":{\"notice\":\"Used to withdraw CELO from the system from specific group strategy that account voted for previously. It is expected that strategy will be balanced. For balancing use `rebalance` function\"},\"defaultStrategy()\":{\"notice\":\"An instance of the DefaultStrategy contract for the StakedCelo protocol.\"},\"generateGroupVotesToDistributeTo(address,uint256,uint256)\":{\"notice\":\"Generates groups and votes to distribute votes to.\"},\"getBlockedStrategy(uint256)\":{\"notice\":\"Returns the blocked group strategy at index.\"},\"getNumberOfBlockedStrategies()\":{\"notice\":\"Returns the number of blocked group strategies.\"},\"getNumberOfStrategies()\":{\"notice\":\"Returns the number of specific group strategies.\"},\"getStCeloInStrategy(address)\":{\"notice\":\"Returns the specific group total stCELO.\"},\"getStrategy(uint256)\":{\"notice\":\"Returns the specific group strategy at index.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"groupHealth()\":{\"notice\":\"An instance of the GroupHealth contract for the StakedCelo protocol.\"},\"initialize(address,address,address)\":{\"notice\":\"Initialize the contract with registry and owner.\"},\"isBlockedStrategy(address)\":{\"notice\":\"Returns if strategy is blocked.\"},\"isStrategy(address)\":{\"notice\":\"Returns if a group is a valid specific group strategy.\"},\"rebalanceOverflowedGroup(address)\":{\"notice\":\"When there is strategy that is overflowing and in meantime there are votes that freed up. This function makes sure to reschedule votes correctly for overflowing group.\"},\"registry()\":{\"notice\":\"The Registry.\"},\"setDependencies(address,address,address)\":{\"notice\":\"Set this contract's dependencies in the StakedCelo system.\"},\"setManager(address)\":{\"notice\":\"Sets the manager address.\"},\"stCeloInStrategy(address)\":{\"notice\":\"stCELO that was cast for specific group strategies, strategy => stCELO amount\"},\"totalStCeloLocked()\":{\"notice\":\"Total stCELO that was voted with on specific group strategies (including overflows).\"},\"totalStCeloOverflow()\":{\"notice\":\"Total stCelo that was overflowed to default strategy.\"},\"unblockStrategy(address)\":{\"notice\":\"Unblocks previously blocked Strategy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SpecificGroupStrategy.sol\":\"SpecificGroupStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Managed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Used via inheritance to grant special access control to the Manager\\n * contract.\\n */\\nabstract contract Managed is Initializable, OwnableUpgradeable {\\n    address public manager;\\n\\n    /**\\n     * @notice Emitted when the manager is initially set or later modified.\\n     * @param manager The new managing account address.\\n     */\\n    event ManagerSet(address indexed manager);\\n\\n    /**\\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManager(address caller);\\n\\n    /**\\n     * @notice Used when a passed address is address(0).\\n     */\\n    error NullAddress();\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        if (manager != msg.sender) {\\n            revert CallerNotManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function setManager(address _manager) external onlyOwner {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract in an upgradable context.\\n     * @param _manager The initial managing address.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Managed_init(address _manager) internal onlyInitializing {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function _setManager(address _manager) internal {\\n        if (_manager == address(0)) {\\n            revert NullAddress();\\n        }\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xb378cf0f0b77e80291f24b4320f22d6c4213849bd1d2f854370c79837f1081d6\",\"license\":\"LGPL-3.0-only\"},\"contracts/SpecificGroupStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./common/UsingRegistryUpgradeable.sol\\\";\\nimport \\\"./common/UUPSOwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/IGroupHealth.sol\\\";\\nimport \\\"./interfaces/IManager.sol\\\";\\nimport \\\"./interfaces/IDefaultStrategy.sol\\\";\\nimport \\\"./Managed.sol\\\";\\n\\n/**\\n * @title SpecificGroupStrategy is responsible for handling any deposit/withdrawal\\n * for accounts with specific strategy selected.\\n */\\ncontract SpecificGroupStrategy is UUPSOwnableUpgradeable, UsingRegistryUpgradeable, Managed {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Specific groups strategies (validator groups) that can be chosen to be voted on.\\n     */\\n    EnumerableSet.AddressSet private specificGroupStrategies;\\n\\n    /**\\n     * @notice Specific groups strategies that were blocked from voting.\\n     */\\n    EnumerableSet.AddressSet private blockedStrategies;\\n\\n    /**\\n     * @notice stCELO that was cast for specific group strategies,\\n     * strategy => stCELO amount\\n     */\\n    mapping(address => uint256) public stCeloInStrategy;\\n\\n    /**\\n     * @notice Total stCELO that was voted with on specific group strategies (including overflows).\\n     * @dev To get the actual stCelo in specific strategy\\n     * it is necessary to subtract `totalStCeloOverflow`.\\n     */\\n    uint256 public totalStCeloLocked;\\n\\n    /**\\n     * @notice stCELO that was cast for specific group strategies and overflowed\\n     * to default strategy: strategy => stCELO amount.\\n     */\\n    mapping(address => uint256) private stCeloInStrategyOverflowed;\\n\\n    /**\\n     * @notice Total stCelo that was overflowed to default strategy.\\n     */\\n    uint256 public totalStCeloOverflow;\\n\\n    /**\\n     * @notice An instance of the GroupHealth contract for the StakedCelo protocol.\\n     */\\n    IGroupHealth public groupHealth;\\n\\n    /**\\n     * @notice An instance of the DefaultStrategy contract for the StakedCelo protocol.\\n     */\\n    IDefaultStrategy public defaultStrategy;\\n\\n    /**\\n     * @notice An instance of the Account contract for the StakedCelo protocol.\\n     */\\n    IAccount public account;\\n\\n    /**\\n     * @notice Emitted when a strategy was unlbocked.\\n     * @param group The group's address.\\n     */\\n    event StrategyUnblocked(address indexed group);\\n\\n    /**\\n     * @notice Emmited when strategy is blocked.\\n     * @param group The group's address.\\n     */\\n    event StrategyBlocked(address group);\\n\\n    /**\\n     * @notice Used when attempting to block a strategy that is not allowed.\\n     * @param group The group's address.\\n     */\\n    error StrategyAlreadyBlocked(address group);\\n\\n    /**\\n     * @notice Used when an attempt to add an specific group strategy to the EnumerableSet\\n     * fails.\\n     * @param group The group's address.\\n     */\\n    error FailedToAddSpecificGroupStrategy(address group);\\n\\n    /**\\n     * @notice Used when attempting to block a strategy failed.\\n     * @param group The group's address.\\n     */\\n    error FailedToBlockStrategy(address group);\\n\\n    /**\\n     * @notice Used when attempting to unblock a strategy that is not blocked.\\n     * @param group The group's address.\\n     */\\n    error FailedToUnBlockStrategy(address group);\\n\\n    /**\\n     * @notice Used when attempting to allow strategy that is already allowed.\\n     * @param group The group's address.\\n     */\\n    error StrategyAlreadyAdded(address group);\\n\\n    /**\\n     * @notice Used when a strategy does not meet the validator group health requirements.\\n     * @param group The group's address.\\n     */\\n    error StrategyNotEligible(address group);\\n\\n    /**\\n     * @notice Used when attempting to withdraw from specific group strategy\\n     * but group does not have enough CELO. Group either doesn't have enough stCELO\\n     * or it is necessary to rebalance the group.\\n     * @param group The group's address.\\n     * @param expected The expected vote amount.\\n     * @param real The real vote amount.\\n     */\\n    error GroupNotBalancedOrNotEnoughStCelo(address group, uint256 expected, uint256 real);\\n\\n    /**\\n     * @notice Used when there isn't enough CELO voting for an account's strategy\\n     * to fulfill a withdrawal.\\n     * @param group The group's address.\\n     */\\n    error CantWithdrawAccordingToStrategy(address group);\\n\\n    /**\\n     * @notice Used when attempting to deposit when there are not active groups\\n     * to vote for.\\n     */\\n    error NoActiveGroups();\\n\\n    /**\\n     * @notice Used when attempting to withdraw but there are no groups being\\n     * voted for.\\n     */\\n    error NoGroups();\\n\\n    /**\\n     * @notice Used when attempting to allow a strategy when the maximum number\\n     * of groups voted (as allowed by the Election contract) is already being\\n     * voted for.\\n     */\\n    error MaxGroupsVotedForReached();\\n\\n    /**\\n     * Used when trying to `rebalanceOverflowedGroup` when the group is not overflowing.\\n     * @param group The group address.\\n     */\\n    error GroupNotOverflowing(address group);\\n\\n    /**\\n     * Used when trying to `rebalanceOverflowedGroup` when the overflowing group cannot\\n     * be rebalanced since it has no receivable votes.\\n     * @param group The group address.\\n     */\\n    error GroupStillOverflowing(address group);\\n\\n    /**\\n     * @notice Initialize the contract with registry and owner.\\n     * @param _registry The address of the Celo Registry.\\n     * @param _owner The address of the contract owner.\\n     * @param _manager The address of the Manager contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _owner,\\n        address _manager\\n    ) external initializer {\\n        _transferOwnership(_owner);\\n        __UsingRegistry_init(_registry);\\n        __Managed_init(_manager);\\n    }\\n\\n    /**\\n     * @notice Set this contract's dependencies in the StakedCelo system.\\n     * @param _account The address of the Account contract.\\n     * @param _groupHealth The address of the GroupHealth contract.\\n     * @param _defaultStrategy The address of the DefaultStrategy contract.\\n     */\\n    function setDependencies(\\n        address _account,\\n        address _groupHealth,\\n        address _defaultStrategy\\n    ) external onlyOwner {\\n        require(_account != address(0), \\\"Account null\\\");\\n        require(_groupHealth != address(0), \\\"GroupHealth null\\\");\\n        require(_defaultStrategy != address(0), \\\"DefaultStrategy null\\\");\\n\\n        account = IAccount(_account);\\n        groupHealth = IGroupHealth(_groupHealth);\\n        defaultStrategy = IDefaultStrategy(_defaultStrategy);\\n    }\\n\\n    /**\\n     * @notice Unblocks previously blocked Strategy\\n     * @param group The address of the group to add to the set of specific group\\n     * strategies.\\n     */\\n    function unblockStrategy(address group) external onlyOwner {\\n        if (!groupHealth.isGroupValid(group)) {\\n            revert StrategyNotEligible(group);\\n        }\\n\\n        if (!blockedStrategies.remove(group)) {\\n            revert FailedToUnBlockStrategy(group);\\n        }\\n        emit StrategyUnblocked(group);\\n    }\\n\\n    /**\\n     * @notice Marks a group as not specific group strategy for voting.\\n     * @param group The address of the group to remove from the set of specific group\\n     * strategies.\\n     */\\n    function blockStrategy(address group) external onlyOwner {\\n        _blockStrategy(group);\\n    }\\n\\n    /**\\n     * @notice Used to withdraw CELO from a specific group strategy\\n     * that account voted for previously. It is expected that strategy will be balanced.\\n     * For balancing use `rebalance` function.\\n     * @param strategy The validator group that we want to withdraw from.\\n     * @param celoWithdrawalAmount The amount of CELO to withdraw.\\n     * @param stCeloWithdrawalAmount The amount of stCELO to withdraw.\\n     * @return groups The groups to withdraw from.\\n     * @return votes The amount to withdraw from each group.\\n     */\\n    function calculateAndUpdateForWithdrawal(\\n        address strategy,\\n        uint256 celoWithdrawalAmount,\\n        uint256 stCeloWithdrawalAmount\\n    ) external onlyManager returns (address[] memory groups, uint256[] memory votes) {\\n        uint256 votesRemaining = account.getCeloForGroup(strategy);\\n        (groups, votes) = calculateAndUpdateForWithdrawalTransfer(\\n            strategy,\\n            celoWithdrawalAmount,\\n            stCeloWithdrawalAmount\\n        );\\n\\n        if (votesRemaining < celoWithdrawalAmount) {\\n            revert GroupNotBalancedOrNotEnoughStCelo(\\n                strategy,\\n                celoWithdrawalAmount,\\n                votesRemaining\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Generates groups and votes to distribute votes to.\\n     * @param strategy The validator group that we want to deposit to or transfer from.\\n     * @param celoAmount The amount of CELO.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @return finalGroups The groups to withdraw from.\\n     * @return finalVotes The amount to withdraw from each group.\\n     */\\n    function generateGroupVotesToDistributeTo(\\n        address strategy,\\n        uint256 celoAmount,\\n        uint256 stCeloAmount\\n    ) external onlyManager returns (address[] memory finalGroups, uint256[] memory finalVotes) {\\n        specificGroupStrategies.add(strategy);\\n        uint256 receivableVotes = IManager(manager).getReceivableVotesForGroup(strategy);\\n        uint256 votesToBeScheduledForSpecificStrategy = Math.min(receivableVotes, celoAmount);\\n\\n        celoAmount -= votesToBeScheduledForSpecificStrategy;\\n        if (celoAmount > 0) {\\n            // overflow\\n            (address[] memory groups, uint256[] memory votesForGroups) = defaultStrategy\\n                .generateVoteDistribution(false, celoAmount, strategy);\\n            updateOverflowGroup(strategy, IManager(manager).toStakedCelo(celoAmount), true);\\n            finalGroups = new address[](groups.length + 1);\\n            finalVotes = new uint256[](groups.length + 1);\\n            for (uint256 i = 0; i < groups.length; i++) {\\n                finalGroups[i] = groups[i];\\n                finalVotes[i] = votesForGroups[i];\\n            }\\n            finalGroups[groups.length] = strategy;\\n            finalVotes[groups.length] = votesToBeScheduledForSpecificStrategy;\\n        } else {\\n            finalGroups = new address[](1);\\n            finalVotes = new uint256[](1);\\n            finalGroups[0] = strategy;\\n            finalVotes[0] = votesToBeScheduledForSpecificStrategy;\\n        }\\n\\n        updateGroupStCelo(strategy, stCeloAmount, true);\\n    }\\n\\n    /**\\n     * @notice Returns if a group is a valid specific group strategy.\\n     * @param strategy The validator group.\\n     * @return Whether or not is specific group strategy.\\n     */\\n    function isStrategy(address strategy) external view returns (bool) {\\n        return specificGroupStrategies.contains(strategy);\\n    }\\n\\n    /**\\n     * @notice Returns if strategy is blocked.\\n     * @param strategy The validator group.\\n     * @return Whether or not is blocked specific group strategy.\\n     */\\n    function isBlockedStrategy(address strategy) external view returns (bool) {\\n        return blockedStrategies.contains(strategy);\\n    }\\n\\n    /**\\n     * @notice Returns the number of blocked group strategies.\\n     * @return The length of blocked groups.\\n     */\\n    function getNumberOfBlockedStrategies() external view returns (uint256) {\\n        return blockedStrategies.length();\\n    }\\n\\n    /**\\n     * @notice Returns the blocked group strategy at index.\\n     * @return The blocked group.\\n     */\\n    function getBlockedStrategy(uint256 index) external view returns (address) {\\n        return blockedStrategies.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the number of specific group strategies.\\n     * @return The length of active groups.\\n     */\\n    function getNumberOfStrategies() external view returns (uint256) {\\n        return specificGroupStrategies.length();\\n    }\\n\\n    /**\\n     * @notice Returns the specific group strategy at index.\\n     * @return The specific group.\\n     */\\n    function getStrategy(uint256 index) external view returns (address) {\\n        return specificGroupStrategies.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 1, 0, 0);\\n    }\\n\\n    /**\\n     * @notice Used to withdraw CELO from the system from specific group strategy\\n     * that account voted for previously. It is expected that strategy will be balanced.\\n     * For balancing use `rebalance` function\\n     * @param strategy The validator group that we want to withdraw from.\\n     * @param celoWithdrawalAmount The amount of stCELO to withdraw.\\n     * @return groups The groups to withdraw from.\\n     * @return votes The amount to withdraw from each group.\\n     */\\n    function calculateAndUpdateForWithdrawalTransfer(\\n        address strategy,\\n        uint256 celoWithdrawalAmount,\\n        uint256 stCeloWithdrawalAmount\\n    ) public onlyManager returns (address[] memory groups, uint256[] memory votes) {\\n        if (specificGroupStrategies.length() == 0) {\\n            revert NoGroups();\\n        }\\n\\n        if (stCeloWithdrawalAmount > stCeloInStrategy[strategy]) {\\n            revert CantWithdrawAccordingToStrategy(strategy);\\n        }\\n\\n        uint256 overflowingStCelo = stCeloInStrategyOverflowed[strategy];\\n        if (overflowingStCelo > 0) {\\n            uint256 overflowingCelo = IManager(manager).toCelo(overflowingStCelo);\\n            uint256 celoToBeMovedFromOverflow = Math.min(celoWithdrawalAmount, overflowingCelo);\\n            (address[] memory overflowGroups, uint256[] memory overflowVotes) = defaultStrategy\\n                .generateVoteDistribution(true, celoToBeMovedFromOverflow, address(0));\\n            uint256 stCeloToBeMoved = IManager(manager).toStakedCelo(celoToBeMovedFromOverflow);\\n            updateOverflowGroup(strategy, stCeloToBeMoved, false);\\n            celoWithdrawalAmount -= celoToBeMovedFromOverflow;\\n            if (celoWithdrawalAmount > 0) {\\n                groups = new address[](overflowGroups.length + 1);\\n                votes = new uint256[](overflowGroups.length + 1);\\n                for (uint256 i = 0; i < overflowGroups.length; i++) {\\n                    groups[i] = overflowGroups[i];\\n                    votes[i] = overflowVotes[i];\\n                }\\n                groups[overflowGroups.length] = strategy;\\n                votes[overflowGroups.length] = celoWithdrawalAmount;\\n            } else {\\n                groups = overflowGroups;\\n                votes = overflowVotes;\\n            }\\n        } else {\\n            groups = new address[](1);\\n            votes = new uint256[](1);\\n            groups[0] = strategy;\\n            votes[0] = celoWithdrawalAmount;\\n        }\\n\\n        updateGroupStCelo(strategy, stCeloWithdrawalAmount, false);\\n    }\\n\\n    /**\\n     * @notice When there is strategy that is overflowing and\\n     * in meantime there are votes that freed up. This function\\n     * makes sure to reschedule votes correctly for overflowing group.\\n     * @param strategy The group address.\\n     */\\n    function rebalanceOverflowedGroup(address strategy) public {\\n        uint256 overflowingStCelo = stCeloInStrategyOverflowed[strategy];\\n        if (overflowingStCelo == 0) {\\n            revert GroupNotOverflowing(strategy);\\n        }\\n\\n        uint256 receivableVotes = IManager(manager).getReceivableVotesForGroup(strategy);\\n        if (receivableVotes == 0) {\\n            revert GroupStillOverflowing(strategy);\\n        }\\n\\n        uint256 receivableStCelo = IManager(manager).toStakedCelo(receivableVotes);\\n        uint256 toMove = Math.min(receivableStCelo, overflowingStCelo);\\n        updateGroupStCelo(strategy, toMove, false);\\n        IManager(manager).transferBetweenStrategies(address(0), strategy, toMove);\\n        updateOverflowGroup(strategy, toMove, false);\\n    }\\n\\n    /**\\n     * @notice Returns the specific group total stCELO.\\n     * @return total The total stCELO amount.\\n     * @return overflow The stCELO amount that is overflowed to default strategy.\\n     */\\n    function getStCeloInStrategy(address strategy)\\n        public\\n        view\\n        returns (uint256 total, uint256 overflow)\\n    {\\n        total = stCeloInStrategy[strategy];\\n        overflow = stCeloInStrategyOverflowed[strategy];\\n    }\\n\\n    /**\\n     * @notice Adds/substracts value to totals of strategy and\\n     * total stCELO in specific strategy.\\n     * @param strategy The validator group that we are updating.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @param add Whether to add or substract.\\n     */\\n    function updateGroupStCelo(\\n        address strategy,\\n        uint256 stCeloAmount,\\n        bool add\\n    ) internal {\\n        if (add) {\\n            stCeloInStrategy[strategy] += stCeloAmount;\\n            totalStCeloLocked += stCeloAmount;\\n        } else {\\n            stCeloInStrategy[strategy] -= stCeloAmount;\\n            totalStCeloLocked -= stCeloAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates overflow stCELO amount of strategy.\\n     * @param strategy The strategy that is overflowing.\\n     * @param stCeloAmount The stCELO amount.\\n     * @param add Whether to add or subtract stCELO amount.\\n     */\\n    function updateOverflowGroup(\\n        address strategy,\\n        uint256 stCeloAmount,\\n        bool add\\n    ) private {\\n        if (add) {\\n            stCeloInStrategyOverflowed[strategy] += stCeloAmount;\\n            totalStCeloOverflow += stCeloAmount;\\n        } else {\\n            stCeloInStrategyOverflowed[strategy] -= stCeloAmount;\\n            totalStCeloOverflow -= stCeloAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Blocks a group from being added as specific group strategy for voting.\\n     * @param group The address of the group to remove from the set of specific group\\n     * strategies.\\n     */\\n    function _blockStrategy(address group) private {\\n        if (defaultStrategy.getNumberOfGroups() == 0) {\\n            revert NoActiveGroups();\\n        }\\n\\n        if (blockedStrategies.contains(group)) {\\n            revert StrategyAlreadyBlocked(group);\\n        }\\n\\n        (uint256 stCeloInSpecificStrategy, uint256 overflowedStCelo) = getStCeloInStrategy(group);\\n\\n        if (stCeloInSpecificStrategy - overflowedStCelo != 0) {\\n            IManager(manager).transferBetweenStrategies(\\n                group,\\n                address(0),\\n                stCeloInSpecificStrategy\\n            );\\n        }\\n\\n        specificGroupStrategies.remove(group);\\n        blockedStrategies.add(group);\\n\\n        emit StrategyBlocked(group);\\n    }\\n}\\n\",\"keccak256\":\"0x3d3b7ccab7268be5597c3619b33a1983facda36265215962b85973d40daa5a73\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UUPSOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\\n */\\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\\n    /**\\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\\n     * adds the onlyOwner modifer.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x5dbad350c6ae75b9d15c2080b1de6f02d8b7f32a71a6bcf775c9731820d115ec\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UsingRegistryUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccounts.sol\\\";\\nimport \\\"../interfaces/IElection.sol\\\";\\nimport \\\"../interfaces/IGoldToken.sol\\\";\\nimport \\\"../interfaces/ILockedGold.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IGovernance.sol\\\";\\nimport \\\"../interfaces/IValidators.sol\\\";\\n\\n/**\\n * @title A helper for getting Celo core contracts from the Registry.\\n */\\nabstract contract UsingRegistryUpgradeable is Initializable {\\n    /// @notice The canonical address of the Registry.\\n    address internal constant CANONICAL_REGISTRY = 0x000000000000000000000000000000000000ce10;\\n\\n    /// @notice The registry ID for the Accounts contract.\\n    bytes32 private constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n\\n    /// @notice The registry ID for the Election contract.\\n    bytes32 private constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n\\n    /// @notice The registry ID for the GoldToken contract.\\n    bytes32 private constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n\\n    /// @notice The registry ID for the LockedGold contract.\\n    bytes32 private constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n\\n    /// @notice The registry ID for the Governance contract.\\n    bytes32 private constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n\\n    /// @notice The registry ID for the Validator contract.\\n    bytes32 private constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n\\n    /// @notice The Registry.\\n    IRegistry public registry;\\n\\n    /**\\n     * @notice Initializes the UsingRegistryUpgradable contract in an upgradable scenario\\n     * @param _registry The address of the Registry. For convenience, if the zero address is\\n     * provided, the registry is set to the canonical Registry address, i.e. 0x0...ce10. This\\n     * parameter should only be a non-zero address when testing.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __UsingRegistry_init(address _registry) internal onlyInitializing {\\n        if (_registry == address(0)) {\\n            registry = IRegistry(CANONICAL_REGISTRY);\\n        } else {\\n            registry = IRegistry(_registry);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the Accounts contract from the Registry.\\n     * @return The Accounts contract from the Registry.\\n     */\\n    function getAccounts() internal view returns (IAccounts) {\\n        return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the Election contract from the Registry.\\n     * @return The Election contract from the Registry.\\n     */\\n    function getElection() internal view returns (IElection) {\\n        return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the GoldToken contract from the Registry.\\n     * @return The GoldToken contract from the Registry.\\n     */\\n    function getGoldToken() internal view returns (IGoldToken) {\\n        return IGoldToken(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the LockedGold contract from the Registry.\\n     * @return The LockedGold contract from the Registry.\\n     */\\n    function getLockedGold() internal view returns (ILockedGold) {\\n        return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the Governance contract from the Registry.\\n     * @return The Governance contract from the Registry.\\n     */\\n    function getGovernance() internal view returns (IGovernance) {\\n        return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the validators contract from the Registry.\\n     * @return The validators contract from the Registry.\\n     */\\n    function getValidators() internal view returns (IValidators) {\\n        return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n    }\\n}\\n\",\"keccak256\":\"0xabb9ce841ce13529276159c75e3e6a8d74d1bbd219a02de1eb11bb3aef61bed0\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccount {\\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\\n\\n    function scheduleTransfer(\\n        address[] calldata fromGroups,\\n        uint256[] calldata fromVotes,\\n        address[] calldata toGroups,\\n        uint256[] calldata toVotess\\n    ) external;\\n\\n    function scheduleWithdrawals(\\n        address beneficiary,\\n        address[] calldata group,\\n        uint256[] calldata withdrawals\\n    ) external;\\n\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external;\\n\\n    function getTotalCelo() external view returns (uint256);\\n\\n    function getCeloForGroup(address) external view returns (uint256);\\n\\n    function scheduledVotesForGroup(address group) external view returns (uint256);\\n\\n    function scheduledRevokeForGroup(address group) external view returns (uint256);\\n\\n    function scheduledWithdrawalsForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x88cffcc9e6200c2ce1e6ecca97ddde0abde976268314bcd7da451d1fc104c44f\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccounts.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccounts {\\n    function isAccount(address) external view returns (bool);\\n\\n    function voteSignerToAccount(address) external view returns (address);\\n\\n    function validatorSignerToAccount(address) external view returns (address);\\n\\n    function attestationSignerToAccount(address) external view returns (address);\\n\\n    function signerToAccount(address) external view returns (address);\\n\\n    function getAttestationSigner(address) external view returns (address);\\n\\n    function getValidatorSigner(address) external view returns (address);\\n\\n    function getVoteSigner(address) external view returns (address);\\n\\n    function hasAuthorizedVoteSigner(address) external view returns (bool);\\n\\n    function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n\\n    function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n    function setAccountDataEncryptionKey(bytes calldata) external;\\n\\n    function setMetadataURL(string calldata) external;\\n\\n    function setName(string calldata) external;\\n\\n    function setWalletAddress(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function setAccount(\\n        string calldata,\\n        bytes calldata,\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function getDataEncryptionKey(address) external view returns (bytes memory);\\n\\n    function getWalletAddress(address) external view returns (address);\\n\\n    function getMetadataURL(address) external view returns (string memory);\\n\\n    function batchGetMetadataURL(address[] calldata)\\n        external\\n        view\\n        returns (uint256[] memory, bytes memory);\\n\\n    function getName(address) external view returns (string memory);\\n\\n    function authorizeVoteSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function authorizeValidatorSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function authorizeValidatorSignerWithPublicKey(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32,\\n        bytes calldata\\n    ) external;\\n\\n    function authorizeValidatorSignerWithKeys(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32,\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external;\\n\\n    function authorizeAttestationSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function createAccount() external returns (bool);\\n}\\n\",\"keccak256\":\"0x661b5c89e143c166a8667ea927d787939c27a59bd52e12c94d67d7377003e734\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IDefaultStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IDefaultStrategy {\\n    function generateVoteDistribution(\\n        bool withdraw,\\n        uint256 celoAmount,\\n        address groupToIgnore\\n    ) external returns (address[] memory finalGroups, uint256[] memory finalVotes);\\n\\n    function activateGroup(address group) external;\\n\\n    function addToStrategyTotalStCeloVotes(address strategy, uint256 stCeloAmount) external;\\n\\n    function subtractFromStrategyTotalStCeloVotes(address strategy, uint256 stCeloAmount) external;\\n\\n    function isActive(address group) external view returns (bool);\\n\\n    function getNumberOfGroups() external view returns (uint256);\\n\\n    function stCeloInGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x199ae1eafd71a54871431405a39759674104edb698344672d9a1351875c08988\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IElection.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IElection {\\n    function vote(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function activate(address) external returns (bool);\\n\\n    function activateForAccount(address, address) external returns (bool);\\n\\n    function revokeActive(\\n        address,\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function revokeAllActive(\\n        address,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function revokePending(\\n        address,\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function markGroupIneligible(address) external;\\n\\n    function markGroupEligible(\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function forceDecrementVotes(\\n        address,\\n        uint256,\\n        address[] calldata,\\n        address[] calldata,\\n        uint256[] calldata\\n    ) external returns (uint256);\\n\\n    // only owner\\n    function setElectableValidators(uint256, uint256) external returns (bool);\\n\\n    function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n\\n    function setElectabilityThreshold(uint256) external returns (bool);\\n\\n    // only VM\\n    function distributeEpochRewards(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external;\\n\\n    function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n\\n    function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n    // view functions\\n    function electValidatorSigners() external view returns (address[] memory);\\n\\n    function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n\\n    function getElectableValidators() external view returns (uint256, uint256);\\n\\n    function getElectabilityThreshold() external view returns (uint256);\\n\\n    function getNumVotesReceivable(address) external view returns (uint256);\\n\\n    function getTotalVotes() external view returns (uint256);\\n\\n    function getActiveVotes() external view returns (uint256);\\n\\n    function getTotalVotesByAccount(address) external view returns (uint256);\\n\\n    function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getTotalVotesForGroup(address) external view returns (uint256);\\n\\n    function getActiveVotesForGroup(address) external view returns (uint256);\\n\\n    function getPendingVotesForGroup(address) external view returns (uint256);\\n\\n    function getGroupEligibility(address) external view returns (bool);\\n\\n    function getGroupEpochRewards(\\n        address,\\n        uint256,\\n        uint256[] calldata\\n    ) external view returns (uint256);\\n\\n    function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n\\n    function getEligibleValidatorGroups() external view returns (address[] memory);\\n\\n    function getTotalVotesForEligibleValidatorGroups()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    function getCurrentValidatorSigners() external view returns (address[] memory);\\n\\n    function canReceiveVotes(address, uint256) external view returns (bool);\\n\\n    function hasActivatablePendingVotes(address, address) external view returns (bool);\\n\\n    function maxNumGroupsVotedFor() external view returns (uint256);\\n\\n    function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n\\n    function numberValidatorsInCurrentSet() external view returns (uint256);\\n\\n    function getEpochNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdb5870e4b37333b3ba2932b6adc14b86404d3f9e785061f85517c5558f6f217f\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGoldToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGoldToken {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferWithComment(\\n        address to,\\n        uint256 value,\\n        string calldata comment\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\\n\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x230bde369f53b4c36033c7b5465637d706873bf684f732afa7e083636d7c9d68\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGovernance {\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external returns (bool);\\n\\n    function getProposal(uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            string memory\\n        );\\n\\n    function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x21958f1d6595964dd706b5dc17455e59d7f1fc21a8f5c76b47b528e17f7f7d96\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGroupHealth.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGroupHealth {\\n    function isGroupValid(address group) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb38a5b01fae32670a6727bef4d74f88b19e3d6b6dd2bd9e5c9142b2c0d11a400\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ILockedGold.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface ILockedGold {\\n    function unlockingPeriod() external view returns (uint256);\\n\\n    function incrementNonvotingAccountBalance(address, uint256) external;\\n\\n    function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n    function getAccountTotalLockedGold(address) external view returns (uint256);\\n\\n    function getTotalLockedGold() external view returns (uint256);\\n\\n    function getPendingWithdrawal(address, uint256) external view returns (uint256, uint256);\\n\\n    function getSlashingWhitelist() external view returns (bytes32[] memory);\\n\\n    function getPendingWithdrawals(address)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getTotalPendingWithdrawals(address) external view returns (uint256);\\n\\n    function lock() external payable;\\n\\n    function unlock(uint256) external;\\n\\n    function relock(uint256, uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function slash(\\n        address account,\\n        uint256 penalty,\\n        address reporter,\\n        uint256 reward,\\n        address[] calldata lessers,\\n        address[] calldata greaters,\\n        uint256[] calldata indices\\n    ) external;\\n\\n    function isSlasher(address) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x62bdefa4681c4cf5e197ca9c01d036e1569ea72da6b659f89af58b945a298866\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IManager {\\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\\n        external\\n        returns (uint256);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function transferBetweenStrategies(\\n        address fromStrategy,\\n        address toStrategy,\\n        uint256 stCeloAmount\\n    ) external;\\n\\n    function scheduleTransferWithinStrategy(\\n        address[] calldata fromGroups,\\n        address[] calldata toGroups,\\n        uint256[] calldata fromVotes,\\n        uint256[] calldata toVotes\\n    ) external;\\n\\n    function toCelo(uint256 stCeloAmount) external view returns (uint256);\\n\\n    function toStakedCelo(uint256 celoAmount) external view returns (uint256);\\n\\n    function getReceivableVotesForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6f2ac34aed1a1cf2c2a179091715db28b4bb280205a0637b6e583702cf77c5d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IRegistry {\\n    function setAddressFor(string calldata, address) external;\\n\\n    function getAddressForOrDie(bytes32) external view returns (address);\\n\\n    function getAddressFor(bytes32) external view returns (address);\\n\\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n\\n    function getAddressForString(string calldata identifier) external view returns (address);\\n\\n    function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x15c870de545b84dea2aa846e91f15ab50f6e5090cec02bbf3b7cc085d23fc2eb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IValidators.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.11;\\n\\ninterface IValidators {\\n    function registerValidator(\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function deregisterValidator(uint256) external returns (bool);\\n\\n    function affiliate(address) external returns (bool);\\n\\n    function deaffiliate() external returns (bool);\\n\\n    function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n\\n    function registerValidatorGroup(uint256) external returns (bool);\\n\\n    function deregisterValidatorGroup(uint256) external returns (bool);\\n\\n    function addMember(address) external returns (bool);\\n\\n    function addFirstMember(\\n        address,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function removeMember(address) external returns (bool);\\n\\n    function reorderMember(\\n        address,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function updateCommission() external;\\n\\n    function setNextCommissionUpdate(uint256) external;\\n\\n    function resetSlashingMultiplier() external;\\n\\n    // only owner\\n    function setCommissionUpdateDelay(uint256) external;\\n\\n    function setMaxGroupSize(uint256) external returns (bool);\\n\\n    function setMembershipHistoryLength(uint256) external returns (bool);\\n\\n    function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n\\n    function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n\\n    function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n\\n    function setSlashingMultiplierResetPeriod(uint256) external;\\n\\n    // view functions\\n    function getMaxGroupSize() external view returns (uint256);\\n\\n    function getCommissionUpdateDelay() external view returns (uint256);\\n\\n    function getValidatorScoreParameters() external view returns (uint256, uint256);\\n\\n    function getMembershipHistory(address)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            address[] memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function calculateEpochScore(uint256) external view returns (uint256);\\n\\n    function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n\\n    function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n\\n    function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n\\n    function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n\\n    function getValidator(address account)\\n        external\\n        view\\n        returns (\\n            bytes memory,\\n            bytes memory,\\n            address,\\n            uint256,\\n            address\\n        );\\n\\n    function getValidatorGroup(address)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getGroupNumMembers(address) external view returns (uint256);\\n\\n    function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n\\n    function getGroupsNumMembers(address[] calldata accounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getNumRegisteredValidators() external view returns (uint256);\\n\\n    function groupMembershipInEpoch(\\n        address,\\n        uint256,\\n        uint256\\n    ) external view returns (address);\\n\\n    // only registered contract\\n    function updateEcdsaPublicKey(\\n        address,\\n        address,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function updatePublicKeys(\\n        address,\\n        address,\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n\\n    function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n\\n    function getRegisteredValidators() external view returns (address[] memory);\\n\\n    function getRegisteredValidatorSigners() external view returns (address[] memory);\\n\\n    function getRegisteredValidatorGroups() external view returns (address[] memory);\\n\\n    function isValidatorGroup(address) external view returns (bool);\\n\\n    function isValidator(address) external view returns (bool);\\n\\n    function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n\\n    function getMembershipInLastEpoch(address) external view returns (address);\\n\\n    function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n\\n    // only VM\\n    function updateValidatorScoreFromSigner(address, uint256) external;\\n\\n    function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n    // only slasher\\n    function forceDeaffiliateIfValidator(address) external;\\n\\n    function halveSlashingMultiplier(address) external;\\n}\\n\",\"keccak256\":\"0x8aa4b70dab85380f94c0d7d2538268988d7153060660e48afece5a9c2f92fa6e\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b5060805161487a61007460003960008181610df301528181610e820152818161102a01526110b9015261487a6000f3fe6080604052600436106101cd5760003560e01c80638ceaa3fe116100f7578063b52d326c11610095578063d0ebdbe711610064578063d0ebdbe714610698578063e7df821f146106c1578063f2fde38b146106fe578063fac5bb9b14610727576101cd565b8063b52d326c146105cb578063bc72f7ec146105f4578063c0c53b8b14610632578063cfc0cc341461065b576101cd565b80639592970f116100d15780639592970f1461050e5780639d709ca014610537578063a3f16ef114610575578063b2705329146105a0576101cd565b80638ceaa3fe1461047b5780638da5cb5b146104a65780639016e580146104d1576101cd565b8063481c6a751161016f5780635dab24201161013e5780635dab2420146103e55780636253d79214610410578063715018a6146104395780637b10399914610450576101cd565b8063481c6a75146103455780634f1ef2861461037057806354255be01461038c5780635bdd7805146103ba576101cd565b80631abb6c5d116101ab5780631abb6c5d1461028b5780632e8ebaae146102b65780633659cfe6146102f35780633bb3a4c91461031c576101cd565b806304744470146101d25780630ea044d81461020f5780631832dea31461024d575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f4919061356c565b610752565b60405161020691906135b2565b60405180910390f35b34801561021b57600080fd5b50610236600480360381019061023191906135f9565b61076a565b6040516102449291906137c8565b60405180910390f35b34801561025957600080fd5b50610274600480360381019061026f919061356c565b610d37565b6040516102829291906137ff565b60405180910390f35b34801561029757600080fd5b506102a0610dc3565b6040516102ad91906135b2565b60405180910390f35b3480156102c257600080fd5b506102dd60048036038101906102d8919061356c565b610dd4565b6040516102ea9190613843565b60405180910390f35b3480156102ff57600080fd5b5061031a6004803603810190610315919061356c565b610df1565b005b34801561032857600080fd5b50610343600480360381019061033e919061356c565b610f7a565b005b34801561035157600080fd5b5061035a611002565b604051610367919061386d565b60405180910390f35b61038a600480360381019061038591906139ce565b611028565b005b34801561039857600080fd5b506103a1611165565b6040516103b19493929190613a2a565b60405180910390f35b3480156103c657600080fd5b506103cf61117f565b6040516103dc91906135b2565b60405180910390f35b3480156103f157600080fd5b506103fa611190565b6040516104079190613ace565b60405180910390f35b34801561041c57600080fd5b506104376004803603810190610432919061356c565b6111b6565b005b34801561044557600080fd5b5061044e611485565b005b34801561045c57600080fd5b5061046561150d565b6040516104729190613b0a565b60405180910390f35b34801561048757600080fd5b50610490611533565b60405161049d91906135b2565b60405180910390f35b3480156104b257600080fd5b506104bb611539565b6040516104c8919061386d565b60405180910390f35b3480156104dd57600080fd5b506104f860048036038101906104f3919061356c565b611563565b6040516105059190613843565b60405180910390f35b34801561051a57600080fd5b506105356004803603810190610530919061356c565b611580565b005b34801561054357600080fd5b5061055e600480360381019061055991906135f9565b611774565b60405161056c9291906137c8565b60405180910390f35b34801561058157600080fd5b5061058a611e55565b6040516105979190613b46565b60405180910390f35b3480156105ac57600080fd5b506105b5611e7b565b6040516105c291906135b2565b60405180910390f35b3480156105d757600080fd5b506105f260048036038101906105ed9190613b61565b611e81565b005b34801561060057600080fd5b5061061b600480360381019061061691906135f9565b612115565b6040516106299291906137c8565b60405180910390f35b34801561063e57600080fd5b5061065960048036038101906106549190613b61565b6122af565b005b34801561066757600080fd5b50610682600480360381019061067d9190613bb4565b6123b1565b60405161068f919061386d565b60405180910390f35b3480156106a457600080fd5b506106bf60048036038101906106ba919061356c565b6123ce565b005b3480156106cd57600080fd5b506106e860048036038101906106e39190613bb4565b612456565b6040516106f5919061386d565b60405180910390f35b34801561070a57600080fd5b506107256004803603810190610720919061356c565b612473565b005b34801561073357600080fd5b5061073c61256b565b6040516107499190613c02565b60405180910390f35b606b6020528060005260406000206000915090505481565b6060803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107ff57336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016107f6919061386d565b60405180910390fd5b61081385606761259190919063ffffffff16565b506000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058876040518263ffffffff1660e01b8152600401610871919061386d565b602060405180830381865afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190613c32565b905060006108c082876125c1565b905080866108ce9190613c8e565b95506000861115610c1857600080607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320e92e5960008a8c6040518463ffffffff1660e01b815260040161093c93929190613cc2565b6000604051808303816000875af115801561095b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109849190613e99565b91509150610a2f89606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e8b6040518263ffffffff1660e01b81526004016109e791906135b2565b602060405180830381865afa158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190613c32565b60016125da565b60018251610a3d9190613f11565b67ffffffffffffffff811115610a5657610a556138a3565b5b604051908082528060200260200182016040528015610a845781602001602082028036833780820191505090505b50955060018251610a959190613f11565b67ffffffffffffffff811115610aae57610aad6138a3565b5b604051908082528060200260200182016040528015610adc5781602001602082028036833780820191505090505b50945060005b8251811015610ba057828181518110610afe57610afd613f67565b5b6020026020010151878281518110610b1957610b18613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818181518110610b6657610b65613f67565b5b6020026020010151868281518110610b8157610b80613f67565b5b6020026020010181815250508080610b9890613f96565b915050610ae2565b508886835181518110610bb657610bb5613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508285835181518110610c0557610c04613f67565b5b6020026020010181815250505050610d21565b600167ffffffffffffffff811115610c3357610c326138a3565b5b604051908082528060200260200182016040528015610c615781602001602082028036833780820191505090505b509350600167ffffffffffffffff811115610c7f57610c7e6138a3565b5b604051908082528060200260200182016040528015610cad5781602001602082028036833780820191505090505b5092508684600081518110610cc557610cc4613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508083600081518110610d1457610d13613f67565b5b6020026020010181815250505b610d2d878660016126c9565b5050935093915050565b600080606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150606d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050915091565b6000610dcf60696127b8565b905090565b6000610dea8260676127cd90919063ffffffff16565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610e80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7790614062565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610ebf6127fd565b73ffffffffffffffffffffffffffffffffffffffff1614610f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0c906140f4565b60405180910390fd5b610f1e81612854565b610f7781600067ffffffffffffffff811115610f3d57610f3c6138a3565b5b6040519080825280601f01601f191660200182016040528015610f6f5781602001600182028036833780820191505090505b5060006128d3565b50565b610f82612aa4565b73ffffffffffffffffffffffffffffffffffffffff16610fa0611539565b73ffffffffffffffffffffffffffffffffffffffff1614610ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fed90614160565b60405180910390fd5b610fff81612aac565b50565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156110b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ae90614062565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166110f66127fd565b73ffffffffffffffffffffffffffffffffffffffff161461114c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611143906140f4565b60405180910390fd5b61115582612854565b611161828260016128d3565b5050565b600080600080600180600080935093509350935090919293565b600061118b60676127b8565b905090565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561124057816040517f08015b24000000000000000000000000000000000000000000000000000000008152600401611237919061386d565b60405180910390fd5b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058846040518263ffffffff1660e01b815260040161129d919061386d565b602060405180830381865afa1580156112ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112de9190613c32565b9050600081141561132657826040517feeec2b5400000000000000000000000000000000000000000000000000000000815260040161131d919061386d565b60405180910390fd5b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e836040518263ffffffff1660e01b815260040161138391906135b2565b602060405180830381865afa1580156113a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c49190613c32565b905060006113d282856125c1565b90506113e0858260006126c9565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ca09a12600087846040518463ffffffff1660e01b815260040161144093929190614180565b600060405180830381600087803b15801561145a57600080fd5b505af115801561146e573d6000803e3d6000fd5b5050505061147e858260006125da565b5050505050565b61148d612aa4565b73ffffffffffffffffffffffffffffffffffffffff166114ab611539565b73ffffffffffffffffffffffffffffffffffffffff1614611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f890614160565b60405180910390fd5b61150b6000612ce9565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606c5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006115798260696127cd90919063ffffffff16565b9050919050565b611588612aa4565b73ffffffffffffffffffffffffffffffffffffffff166115a6611539565b73ffffffffffffffffffffffffffffffffffffffff16146115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f390614160565b60405180910390fd5b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b8152600401611657919061386d565b602060405180830381865afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169891906141e3565b6116d957806040517fa5c0a8620000000000000000000000000000000000000000000000000000000081526004016116d0919061386d565b60405180910390fd5b6116ed816069612daf90919063ffffffff16565b61172e57806040517f6a0c20aa000000000000000000000000000000000000000000000000000000008152600401611725919061386d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167f666abdeecfb674d03c6d66a5a773e77d2f5334a9dc1948268a16d77120f9399a60405160405180910390a250565b6060803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461180957336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401611800919061386d565b60405180910390fd5b600061181560676127b8565b141561184d576040517f377b56d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311156118d157846040517f0d4386640000000000000000000000000000000000000000000000000000000081526004016118c8919061386d565b60405180910390fd5b6000606d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115611d37576000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f836040518263ffffffff1660e01b815260040161197b91906135b2565b602060405180830381865afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190613c32565b905060006119ca87836125c1565b9050600080607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320e92e5960018560006040518463ffffffff1660e01b8152600401611a3093929190613cc2565b6000604051808303816000875af1158015611a4f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a789190613e99565b915091506000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e856040518263ffffffff1660e01b8152600401611ad991906135b2565b602060405180830381865afa158015611af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1a9190613c32565b9050611b288b8260006125da565b838a611b349190613c8e565b995060008a1115611d265760018351611b4d9190613f11565b67ffffffffffffffff811115611b6657611b656138a3565b5b604051908082528060200260200182016040528015611b945781602001602082028036833780820191505090505b50975060018351611ba59190613f11565b67ffffffffffffffff811115611bbe57611bbd6138a3565b5b604051908082528060200260200182016040528015611bec5781602001602082028036833780820191505090505b50965060005b8351811015611cb057838181518110611c0e57611c0d613f67565b5b6020026020010151898281518110611c2957611c28613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828181518110611c7657611c75613f67565b5b6020026020010151888281518110611c9157611c90613f67565b5b6020026020010181815250508080611ca890613f96565b915050611bf2565b508a88845181518110611cc657611cc5613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508987845181518110611d1557611d14613f67565b5b602002602001018181525050611d2d565b8297508196505b5050505050611e40565b600167ffffffffffffffff811115611d5257611d516138a3565b5b604051908082528060200260200182016040528015611d805781602001602082028036833780820191505090505b509250600167ffffffffffffffff811115611d9e57611d9d6138a3565b5b604051908082528060200260200182016040528015611dcc5781602001602082028036833780820191505090505b5091508583600081518110611de457611de3613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508482600081518110611e3357611e32613f67565b5b6020026020010181815250505b611e4c868560006126c9565b50935093915050565b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606e5481565b611e89612aa4565b73ffffffffffffffffffffffffffffffffffffffff16611ea7611539565b73ffffffffffffffffffffffffffffffffffffffff1614611efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef490614160565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f649061425c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd4906142c8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561204d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204490614334565b60405180910390fd5b82607160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6060803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146121aa57336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016121a1919061386d565b60405180910390fd5b6000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acd201d0876040518263ffffffff1660e01b8152600401612207919061386d565b602060405180830381865afa158015612224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122489190613c32565b9050612255868686611774565b8093508194505050848110156122a6578585826040517ffb9e187100000000000000000000000000000000000000000000000000000000815260040161229d93929190614354565b60405180910390fd5b50935093915050565b600060019054906101000a900460ff166122d75760008054906101000a900460ff16156122e0565b6122df612ddf565b5b61231f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612316906143fd565b60405180910390fd5b60008060019054906101000a900460ff16159050801561236f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61237883612ce9565b61238184612df0565b61238a82612f01565b80156123ab5760008060016101000a81548160ff0219169083151502179055505b50505050565b60006123c7826067612f5c90919063ffffffff16565b9050919050565b6123d6612aa4565b73ffffffffffffffffffffffffffffffffffffffff166123f4611539565b73ffffffffffffffffffffffffffffffffffffffff161461244a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244190614160565b60405180910390fd5b61245381612f76565b50565b600061246c826069612f5c90919063ffffffff16565b9050919050565b61247b612aa4565b73ffffffffffffffffffffffffffffffffffffffff16612499611539565b73ffffffffffffffffffffffffffffffffffffffff16146124ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e690614160565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561255f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125569061448f565b60405180910390fd5b61256881612ce9565b50565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006125b9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613064565b905092915050565b60008183106125d057816125d2565b825b905092915050565b80156126545781606d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461262f9190613f11565b9250508190555081606e60008282546126489190613f11565b925050819055506126c4565b81606d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126a39190613c8e565b9250508190555081606e60008282546126bc9190613c8e565b925050819055505b505050565b80156127435781606b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461271e9190613f11565b9250508190555081606c60008282546127379190613f11565b925050819055506127b3565b81606b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127929190613c8e565b9250508190555081606c60008282546127ab9190613c8e565b925050819055505b505050565b60006127c6826000016130d4565b9050919050565b60006127f5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6130e5565b905092915050565b600061282b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613108565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61285c612aa4565b73ffffffffffffffffffffffffffffffffffffffff1661287a611539565b73ffffffffffffffffffffffffffffffffffffffff16146128d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c790614160565b60405180910390fd5b50565b60006128dd6127fd565b90506128e884613112565b6000835111806128f55750815b156129065761290484846131cb565b505b60006129347f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6131f8565b90508060000160009054906101000a900460ff16612a9d5760018160000160006101000a81548160ff021916908315150217905550612a00858360405160240161297e919061386d565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506131cb565b5060008160000160006101000a81548160ff021916908315150217905550612a266127fd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8a90614521565b60405180910390fd5b612a9c85613202565b5b5050505050565b600033905090565b6000607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1fa411a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3f9190613c32565b1415612b77576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612b8b8160696127cd90919063ffffffff16565b15612bcd57806040517f245168e6000000000000000000000000000000000000000000000000000000008152600401612bc4919061386d565b60405180910390fd5b600080612bd983610d37565b9150915060008183612beb9190613c8e565b14612c8357606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ca09a12846000856040518463ffffffff1660e01b8152600401612c5093929190614180565b600060405180830381600087803b158015612c6a57600080fd5b505af1158015612c7e573d6000803e3d6000fd5b505050505b612c97836067612daf90919063ffffffff16565b50612cac83606961259190919063ffffffff16565b507f4d0adcb8f1e9b3fe21a25a94cda0b080420b5aa6111075824cab2f35614cfade83604051612cdc919061386d565b60405180910390a1505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000612dd7836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613251565b905092915050565b6000612dea30613365565b15905090565b600060019054906101000a900460ff16612e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e36906145b3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612ebc5761ce10606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612efe565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600060019054906101000a900460ff16612f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f47906145b3565b60405180910390fd5b612f5981612f76565b50565b6000612f6b8360000183613388565b60001c905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612fdd576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b600061307083836130e5565b6130c95782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506130ce565b600090505b92915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6000819050919050565b61311b816133b3565b61315a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161315190614645565b60405180910390fd5b806131877f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613108565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606131f0838360405180606001604052806027815260200161481e602791396133c6565b905092915050565b6000819050919050565b61320b81613112565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600080836001016000848152602001908152602001600020549050600081146133595760006001826132839190613c8e565b905060006001866000018054905061329b9190613c8e565b905081811461330a5760008660000182815481106132bc576132bb613f67565b5b90600052602060002001549050808760000184815481106132e0576132df613f67565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061331e5761331d614665565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061335f565b60009150505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008260000182815481106133a05761339f613f67565b5b9060005260206000200154905092915050565b600080823b905060008111915050919050565b60606133d1846133b3565b613410576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161340790614706565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161343891906147a0565b600060405180830381855af49150503d8060008114613473576040519150601f19603f3d011682016040523d82523d6000602084013e613478565b606091505b5091509150613488828286613493565b925050509392505050565b606083156134a3578290506134f3565b6000835111156134b65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ea91906147fb565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135398261350e565b9050919050565b6135498161352e565b811461355457600080fd5b50565b60008135905061356681613540565b92915050565b60006020828403121561358257613581613504565b5b600061359084828501613557565b91505092915050565b6000819050919050565b6135ac81613599565b82525050565b60006020820190506135c760008301846135a3565b92915050565b6135d681613599565b81146135e157600080fd5b50565b6000813590506135f3816135cd565b92915050565b60008060006060848603121561361257613611613504565b5b600061362086828701613557565b9350506020613631868287016135e4565b9250506040613642868287016135e4565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6136818161352e565b82525050565b60006136938383613678565b60208301905092915050565b6000602082019050919050565b60006136b78261364c565b6136c18185613657565b93506136cc83613668565b8060005b838110156136fd5781516136e48882613687565b97506136ef8361369f565b9250506001810190506136d0565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61373f81613599565b82525050565b60006137518383613736565b60208301905092915050565b6000602082019050919050565b60006137758261370a565b61377f8185613715565b935061378a83613726565b8060005b838110156137bb5781516137a28882613745565b97506137ad8361375d565b92505060018101905061378e565b5085935050505092915050565b600060408201905081810360008301526137e281856136ac565b905081810360208301526137f6818461376a565b90509392505050565b600060408201905061381460008301856135a3565b61382160208301846135a3565b9392505050565b60008115159050919050565b61383d81613828565b82525050565b60006020820190506138586000830184613834565b92915050565b6138678161352e565b82525050565b6000602082019050613882600083018461385e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6138db82613892565b810181811067ffffffffffffffff821117156138fa576138f96138a3565b5b80604052505050565b600061390d6134fa565b905061391982826138d2565b919050565b600067ffffffffffffffff821115613939576139386138a3565b5b61394282613892565b9050602081019050919050565b82818337600083830152505050565b600061397161396c8461391e565b613903565b90508281526020810184848401111561398d5761398c61388d565b5b61399884828561394f565b509392505050565b600082601f8301126139b5576139b4613888565b5b81356139c584826020860161395e565b91505092915050565b600080604083850312156139e5576139e4613504565b5b60006139f385828601613557565b925050602083013567ffffffffffffffff811115613a1457613a13613509565b5b613a20858286016139a0565b9150509250929050565b6000608082019050613a3f60008301876135a3565b613a4c60208301866135a3565b613a5960408301856135a3565b613a6660608301846135a3565b95945050505050565b6000819050919050565b6000613a94613a8f613a8a8461350e565b613a6f565b61350e565b9050919050565b6000613aa682613a79565b9050919050565b6000613ab882613a9b565b9050919050565b613ac881613aad565b82525050565b6000602082019050613ae36000830184613abf565b92915050565b6000613af482613a9b565b9050919050565b613b0481613ae9565b82525050565b6000602082019050613b1f6000830184613afb565b92915050565b6000613b3082613a9b565b9050919050565b613b4081613b25565b82525050565b6000602082019050613b5b6000830184613b37565b92915050565b600080600060608486031215613b7a57613b79613504565b5b6000613b8886828701613557565b9350506020613b9986828701613557565b9250506040613baa86828701613557565b9150509250925092565b600060208284031215613bca57613bc9613504565b5b6000613bd8848285016135e4565b91505092915050565b6000613bec82613a9b565b9050919050565b613bfc81613be1565b82525050565b6000602082019050613c176000830184613bf3565b92915050565b600081519050613c2c816135cd565b92915050565b600060208284031215613c4857613c47613504565b5b6000613c5684828501613c1d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c9982613599565b9150613ca483613599565b925082821015613cb757613cb6613c5f565b5b828203905092915050565b6000606082019050613cd76000830186613834565b613ce460208301856135a3565b613cf1604083018461385e565b949350505050565b600067ffffffffffffffff821115613d1457613d136138a3565b5b602082029050602081019050919050565b600080fd5b600081519050613d3981613540565b92915050565b6000613d52613d4d84613cf9565b613903565b90508083825260208201905060208402830185811115613d7557613d74613d25565b5b835b81811015613d9e5780613d8a8882613d2a565b845260208401935050602081019050613d77565b5050509392505050565b600082601f830112613dbd57613dbc613888565b5b8151613dcd848260208601613d3f565b91505092915050565b600067ffffffffffffffff821115613df157613df06138a3565b5b602082029050602081019050919050565b6000613e15613e1084613dd6565b613903565b90508083825260208201905060208402830185811115613e3857613e37613d25565b5b835b81811015613e615780613e4d8882613c1d565b845260208401935050602081019050613e3a565b5050509392505050565b600082601f830112613e8057613e7f613888565b5b8151613e90848260208601613e02565b91505092915050565b60008060408385031215613eb057613eaf613504565b5b600083015167ffffffffffffffff811115613ece57613ecd613509565b5b613eda85828601613da8565b925050602083015167ffffffffffffffff811115613efb57613efa613509565b5b613f0785828601613e6b565b9150509250929050565b6000613f1c82613599565b9150613f2783613599565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f5c57613f5b613c5f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613fa182613599565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fd457613fd3613c5f565b5b600182019050919050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b600061404c602c83613fdf565b915061405782613ff0565b604082019050919050565b6000602082019050818103600083015261407b8161403f565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006140de602c83613fdf565b91506140e982614082565b604082019050919050565b6000602082019050818103600083015261410d816140d1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061414a602083613fdf565b915061415582614114565b602082019050919050565b600060208201905081810360008301526141798161413d565b9050919050565b6000606082019050614195600083018661385e565b6141a2602083018561385e565b6141af60408301846135a3565b949350505050565b6141c081613828565b81146141cb57600080fd5b50565b6000815190506141dd816141b7565b92915050565b6000602082840312156141f9576141f8613504565b5b6000614207848285016141ce565b91505092915050565b7f4163636f756e74206e756c6c0000000000000000000000000000000000000000600082015250565b6000614246600c83613fdf565b915061425182614210565b602082019050919050565b6000602082019050818103600083015261427581614239565b9050919050565b7f47726f75704865616c7468206e756c6c00000000000000000000000000000000600082015250565b60006142b2601083613fdf565b91506142bd8261427c565b602082019050919050565b600060208201905081810360008301526142e1816142a5565b9050919050565b7f44656661756c745374726174656779206e756c6c000000000000000000000000600082015250565b600061431e601483613fdf565b9150614329826142e8565b602082019050919050565b6000602082019050818103600083015261434d81614311565b9050919050565b6000606082019050614369600083018661385e565b61437660208301856135a3565b61438360408301846135a3565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006143e7602e83613fdf565b91506143f28261438b565b604082019050919050565b60006020820190508181036000830152614416816143da565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614479602683613fdf565b91506144848261441d565b604082019050919050565b600060208201905081810360008301526144a88161446c565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b600061450b602f83613fdf565b9150614516826144af565b604082019050919050565b6000602082019050818103600083015261453a816144fe565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061459d602b83613fdf565b91506145a882614541565b604082019050919050565b600060208201905081810360008301526145cc81614590565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600061462f602d83613fdf565b915061463a826145d3565b604082019050919050565b6000602082019050818103600083015261465e81614622565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006146f0602683613fdf565b91506146fb82614694565b604082019050919050565b6000602082019050818103600083015261471f816146e3565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561475a57808201518184015260208101905061473f565b83811115614769576000848401525b50505050565b600061477a82614726565b6147848185614731565b935061479481856020860161473c565b80840191505092915050565b60006147ac828461476f565b915081905092915050565b600081519050919050565b60006147cd826147b7565b6147d78185613fdf565b93506147e781856020860161473c565b6147f081613892565b840191505092915050565b6000602082019050818103600083015261481581846147c2565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220167fa125b6c5448c4510584cae1b3cb521e1ea17a3fdda82467afbd3b0f5816d64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638ceaa3fe116100f7578063b52d326c11610095578063d0ebdbe711610064578063d0ebdbe714610698578063e7df821f146106c1578063f2fde38b146106fe578063fac5bb9b14610727576101cd565b8063b52d326c146105cb578063bc72f7ec146105f4578063c0c53b8b14610632578063cfc0cc341461065b576101cd565b80639592970f116100d15780639592970f1461050e5780639d709ca014610537578063a3f16ef114610575578063b2705329146105a0576101cd565b80638ceaa3fe1461047b5780638da5cb5b146104a65780639016e580146104d1576101cd565b8063481c6a751161016f5780635dab24201161013e5780635dab2420146103e55780636253d79214610410578063715018a6146104395780637b10399914610450576101cd565b8063481c6a75146103455780634f1ef2861461037057806354255be01461038c5780635bdd7805146103ba576101cd565b80631abb6c5d116101ab5780631abb6c5d1461028b5780632e8ebaae146102b65780633659cfe6146102f35780633bb3a4c91461031c576101cd565b806304744470146101d25780630ea044d81461020f5780631832dea31461024d575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f4919061356c565b610752565b60405161020691906135b2565b60405180910390f35b34801561021b57600080fd5b50610236600480360381019061023191906135f9565b61076a565b6040516102449291906137c8565b60405180910390f35b34801561025957600080fd5b50610274600480360381019061026f919061356c565b610d37565b6040516102829291906137ff565b60405180910390f35b34801561029757600080fd5b506102a0610dc3565b6040516102ad91906135b2565b60405180910390f35b3480156102c257600080fd5b506102dd60048036038101906102d8919061356c565b610dd4565b6040516102ea9190613843565b60405180910390f35b3480156102ff57600080fd5b5061031a6004803603810190610315919061356c565b610df1565b005b34801561032857600080fd5b50610343600480360381019061033e919061356c565b610f7a565b005b34801561035157600080fd5b5061035a611002565b604051610367919061386d565b60405180910390f35b61038a600480360381019061038591906139ce565b611028565b005b34801561039857600080fd5b506103a1611165565b6040516103b19493929190613a2a565b60405180910390f35b3480156103c657600080fd5b506103cf61117f565b6040516103dc91906135b2565b60405180910390f35b3480156103f157600080fd5b506103fa611190565b6040516104079190613ace565b60405180910390f35b34801561041c57600080fd5b506104376004803603810190610432919061356c565b6111b6565b005b34801561044557600080fd5b5061044e611485565b005b34801561045c57600080fd5b5061046561150d565b6040516104729190613b0a565b60405180910390f35b34801561048757600080fd5b50610490611533565b60405161049d91906135b2565b60405180910390f35b3480156104b257600080fd5b506104bb611539565b6040516104c8919061386d565b60405180910390f35b3480156104dd57600080fd5b506104f860048036038101906104f3919061356c565b611563565b6040516105059190613843565b60405180910390f35b34801561051a57600080fd5b506105356004803603810190610530919061356c565b611580565b005b34801561054357600080fd5b5061055e600480360381019061055991906135f9565b611774565b60405161056c9291906137c8565b60405180910390f35b34801561058157600080fd5b5061058a611e55565b6040516105979190613b46565b60405180910390f35b3480156105ac57600080fd5b506105b5611e7b565b6040516105c291906135b2565b60405180910390f35b3480156105d757600080fd5b506105f260048036038101906105ed9190613b61565b611e81565b005b34801561060057600080fd5b5061061b600480360381019061061691906135f9565b612115565b6040516106299291906137c8565b60405180910390f35b34801561063e57600080fd5b5061065960048036038101906106549190613b61565b6122af565b005b34801561066757600080fd5b50610682600480360381019061067d9190613bb4565b6123b1565b60405161068f919061386d565b60405180910390f35b3480156106a457600080fd5b506106bf60048036038101906106ba919061356c565b6123ce565b005b3480156106cd57600080fd5b506106e860048036038101906106e39190613bb4565b612456565b6040516106f5919061386d565b60405180910390f35b34801561070a57600080fd5b506107256004803603810190610720919061356c565b612473565b005b34801561073357600080fd5b5061073c61256b565b6040516107499190613c02565b60405180910390f35b606b6020528060005260406000206000915090505481565b6060803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107ff57336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016107f6919061386d565b60405180910390fd5b61081385606761259190919063ffffffff16565b506000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058876040518263ffffffff1660e01b8152600401610871919061386d565b602060405180830381865afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190613c32565b905060006108c082876125c1565b905080866108ce9190613c8e565b95506000861115610c1857600080607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320e92e5960008a8c6040518463ffffffff1660e01b815260040161093c93929190613cc2565b6000604051808303816000875af115801561095b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109849190613e99565b91509150610a2f89606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e8b6040518263ffffffff1660e01b81526004016109e791906135b2565b602060405180830381865afa158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190613c32565b60016125da565b60018251610a3d9190613f11565b67ffffffffffffffff811115610a5657610a556138a3565b5b604051908082528060200260200182016040528015610a845781602001602082028036833780820191505090505b50955060018251610a959190613f11565b67ffffffffffffffff811115610aae57610aad6138a3565b5b604051908082528060200260200182016040528015610adc5781602001602082028036833780820191505090505b50945060005b8251811015610ba057828181518110610afe57610afd613f67565b5b6020026020010151878281518110610b1957610b18613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818181518110610b6657610b65613f67565b5b6020026020010151868281518110610b8157610b80613f67565b5b6020026020010181815250508080610b9890613f96565b915050610ae2565b508886835181518110610bb657610bb5613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508285835181518110610c0557610c04613f67565b5b6020026020010181815250505050610d21565b600167ffffffffffffffff811115610c3357610c326138a3565b5b604051908082528060200260200182016040528015610c615781602001602082028036833780820191505090505b509350600167ffffffffffffffff811115610c7f57610c7e6138a3565b5b604051908082528060200260200182016040528015610cad5781602001602082028036833780820191505090505b5092508684600081518110610cc557610cc4613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508083600081518110610d1457610d13613f67565b5b6020026020010181815250505b610d2d878660016126c9565b5050935093915050565b600080606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150606d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050915091565b6000610dcf60696127b8565b905090565b6000610dea8260676127cd90919063ffffffff16565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610e80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7790614062565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610ebf6127fd565b73ffffffffffffffffffffffffffffffffffffffff1614610f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0c906140f4565b60405180910390fd5b610f1e81612854565b610f7781600067ffffffffffffffff811115610f3d57610f3c6138a3565b5b6040519080825280601f01601f191660200182016040528015610f6f5781602001600182028036833780820191505090505b5060006128d3565b50565b610f82612aa4565b73ffffffffffffffffffffffffffffffffffffffff16610fa0611539565b73ffffffffffffffffffffffffffffffffffffffff1614610ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fed90614160565b60405180910390fd5b610fff81612aac565b50565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156110b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ae90614062565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166110f66127fd565b73ffffffffffffffffffffffffffffffffffffffff161461114c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611143906140f4565b60405180910390fd5b61115582612854565b611161828260016128d3565b5050565b600080600080600180600080935093509350935090919293565b600061118b60676127b8565b905090565b607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561124057816040517f08015b24000000000000000000000000000000000000000000000000000000008152600401611237919061386d565b60405180910390fd5b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058846040518263ffffffff1660e01b815260040161129d919061386d565b602060405180830381865afa1580156112ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112de9190613c32565b9050600081141561132657826040517feeec2b5400000000000000000000000000000000000000000000000000000000815260040161131d919061386d565b60405180910390fd5b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e836040518263ffffffff1660e01b815260040161138391906135b2565b602060405180830381865afa1580156113a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c49190613c32565b905060006113d282856125c1565b90506113e0858260006126c9565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ca09a12600087846040518463ffffffff1660e01b815260040161144093929190614180565b600060405180830381600087803b15801561145a57600080fd5b505af115801561146e573d6000803e3d6000fd5b5050505061147e858260006125da565b5050505050565b61148d612aa4565b73ffffffffffffffffffffffffffffffffffffffff166114ab611539565b73ffffffffffffffffffffffffffffffffffffffff1614611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f890614160565b60405180910390fd5b61150b6000612ce9565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606c5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006115798260696127cd90919063ffffffff16565b9050919050565b611588612aa4565b73ffffffffffffffffffffffffffffffffffffffff166115a6611539565b73ffffffffffffffffffffffffffffffffffffffff16146115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f390614160565b60405180910390fd5b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b8152600401611657919061386d565b602060405180830381865afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169891906141e3565b6116d957806040517fa5c0a8620000000000000000000000000000000000000000000000000000000081526004016116d0919061386d565b60405180910390fd5b6116ed816069612daf90919063ffffffff16565b61172e57806040517f6a0c20aa000000000000000000000000000000000000000000000000000000008152600401611725919061386d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167f666abdeecfb674d03c6d66a5a773e77d2f5334a9dc1948268a16d77120f9399a60405160405180910390a250565b6060803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461180957336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401611800919061386d565b60405180910390fd5b600061181560676127b8565b141561184d576040517f377b56d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311156118d157846040517f0d4386640000000000000000000000000000000000000000000000000000000081526004016118c8919061386d565b60405180910390fd5b6000606d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115611d37576000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f836040518263ffffffff1660e01b815260040161197b91906135b2565b602060405180830381865afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190613c32565b905060006119ca87836125c1565b9050600080607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320e92e5960018560006040518463ffffffff1660e01b8152600401611a3093929190613cc2565b6000604051808303816000875af1158015611a4f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a789190613e99565b915091506000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e856040518263ffffffff1660e01b8152600401611ad991906135b2565b602060405180830381865afa158015611af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1a9190613c32565b9050611b288b8260006125da565b838a611b349190613c8e565b995060008a1115611d265760018351611b4d9190613f11565b67ffffffffffffffff811115611b6657611b656138a3565b5b604051908082528060200260200182016040528015611b945781602001602082028036833780820191505090505b50975060018351611ba59190613f11565b67ffffffffffffffff811115611bbe57611bbd6138a3565b5b604051908082528060200260200182016040528015611bec5781602001602082028036833780820191505090505b50965060005b8351811015611cb057838181518110611c0e57611c0d613f67565b5b6020026020010151898281518110611c2957611c28613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828181518110611c7657611c75613f67565b5b6020026020010151888281518110611c9157611c90613f67565b5b6020026020010181815250508080611ca890613f96565b915050611bf2565b508a88845181518110611cc657611cc5613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508987845181518110611d1557611d14613f67565b5b602002602001018181525050611d2d565b8297508196505b5050505050611e40565b600167ffffffffffffffff811115611d5257611d516138a3565b5b604051908082528060200260200182016040528015611d805781602001602082028036833780820191505090505b509250600167ffffffffffffffff811115611d9e57611d9d6138a3565b5b604051908082528060200260200182016040528015611dcc5781602001602082028036833780820191505090505b5091508583600081518110611de457611de3613f67565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508482600081518110611e3357611e32613f67565b5b6020026020010181815250505b611e4c868560006126c9565b50935093915050565b606f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606e5481565b611e89612aa4565b73ffffffffffffffffffffffffffffffffffffffff16611ea7611539565b73ffffffffffffffffffffffffffffffffffffffff1614611efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef490614160565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f649061425c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd4906142c8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561204d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204490614334565b60405180910390fd5b82607160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6060803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146121aa57336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016121a1919061386d565b60405180910390fd5b6000607160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acd201d0876040518263ffffffff1660e01b8152600401612207919061386d565b602060405180830381865afa158015612224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122489190613c32565b9050612255868686611774565b8093508194505050848110156122a6578585826040517ffb9e187100000000000000000000000000000000000000000000000000000000815260040161229d93929190614354565b60405180910390fd5b50935093915050565b600060019054906101000a900460ff166122d75760008054906101000a900460ff16156122e0565b6122df612ddf565b5b61231f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612316906143fd565b60405180910390fd5b60008060019054906101000a900460ff16159050801561236f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61237883612ce9565b61238184612df0565b61238a82612f01565b80156123ab5760008060016101000a81548160ff0219169083151502179055505b50505050565b60006123c7826067612f5c90919063ffffffff16565b9050919050565b6123d6612aa4565b73ffffffffffffffffffffffffffffffffffffffff166123f4611539565b73ffffffffffffffffffffffffffffffffffffffff161461244a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244190614160565b60405180910390fd5b61245381612f76565b50565b600061246c826069612f5c90919063ffffffff16565b9050919050565b61247b612aa4565b73ffffffffffffffffffffffffffffffffffffffff16612499611539565b73ffffffffffffffffffffffffffffffffffffffff16146124ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e690614160565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561255f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125569061448f565b60405180910390fd5b61256881612ce9565b50565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006125b9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613064565b905092915050565b60008183106125d057816125d2565b825b905092915050565b80156126545781606d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461262f9190613f11565b9250508190555081606e60008282546126489190613f11565b925050819055506126c4565b81606d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126a39190613c8e565b9250508190555081606e60008282546126bc9190613c8e565b925050819055505b505050565b80156127435781606b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461271e9190613f11565b9250508190555081606c60008282546127379190613f11565b925050819055506127b3565b81606b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127929190613c8e565b9250508190555081606c60008282546127ab9190613c8e565b925050819055505b505050565b60006127c6826000016130d4565b9050919050565b60006127f5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6130e5565b905092915050565b600061282b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613108565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61285c612aa4565b73ffffffffffffffffffffffffffffffffffffffff1661287a611539565b73ffffffffffffffffffffffffffffffffffffffff16146128d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c790614160565b60405180910390fd5b50565b60006128dd6127fd565b90506128e884613112565b6000835111806128f55750815b156129065761290484846131cb565b505b60006129347f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6131f8565b90508060000160009054906101000a900460ff16612a9d5760018160000160006101000a81548160ff021916908315150217905550612a00858360405160240161297e919061386d565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506131cb565b5060008160000160006101000a81548160ff021916908315150217905550612a266127fd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8a90614521565b60405180910390fd5b612a9c85613202565b5b5050505050565b600033905090565b6000607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1fa411a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3f9190613c32565b1415612b77576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612b8b8160696127cd90919063ffffffff16565b15612bcd57806040517f245168e6000000000000000000000000000000000000000000000000000000008152600401612bc4919061386d565b60405180910390fd5b600080612bd983610d37565b9150915060008183612beb9190613c8e565b14612c8357606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ca09a12846000856040518463ffffffff1660e01b8152600401612c5093929190614180565b600060405180830381600087803b158015612c6a57600080fd5b505af1158015612c7e573d6000803e3d6000fd5b505050505b612c97836067612daf90919063ffffffff16565b50612cac83606961259190919063ffffffff16565b507f4d0adcb8f1e9b3fe21a25a94cda0b080420b5aa6111075824cab2f35614cfade83604051612cdc919061386d565b60405180910390a1505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000612dd7836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613251565b905092915050565b6000612dea30613365565b15905090565b600060019054906101000a900460ff16612e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e36906145b3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612ebc5761ce10606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612efe565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600060019054906101000a900460ff16612f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f47906145b3565b60405180910390fd5b612f5981612f76565b50565b6000612f6b8360000183613388565b60001c905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612fdd576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b600061307083836130e5565b6130c95782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506130ce565b600090505b92915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6000819050919050565b61311b816133b3565b61315a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161315190614645565b60405180910390fd5b806131877f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613108565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606131f0838360405180606001604052806027815260200161481e602791396133c6565b905092915050565b6000819050919050565b61320b81613112565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600080836001016000848152602001908152602001600020549050600081146133595760006001826132839190613c8e565b905060006001866000018054905061329b9190613c8e565b905081811461330a5760008660000182815481106132bc576132bb613f67565b5b90600052602060002001549050808760000184815481106132e0576132df613f67565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061331e5761331d614665565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061335f565b60009150505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008260000182815481106133a05761339f613f67565b5b9060005260206000200154905092915050565b600080823b905060008111915050919050565b60606133d1846133b3565b613410576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161340790614706565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161343891906147a0565b600060405180830381855af49150503d8060008114613473576040519150601f19603f3d011682016040523d82523d6000602084013e613478565b606091505b5091509150613488828286613493565b925050509392505050565b606083156134a3578290506134f3565b6000835111156134b65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ea91906147fb565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135398261350e565b9050919050565b6135498161352e565b811461355457600080fd5b50565b60008135905061356681613540565b92915050565b60006020828403121561358257613581613504565b5b600061359084828501613557565b91505092915050565b6000819050919050565b6135ac81613599565b82525050565b60006020820190506135c760008301846135a3565b92915050565b6135d681613599565b81146135e157600080fd5b50565b6000813590506135f3816135cd565b92915050565b60008060006060848603121561361257613611613504565b5b600061362086828701613557565b9350506020613631868287016135e4565b9250506040613642868287016135e4565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6136818161352e565b82525050565b60006136938383613678565b60208301905092915050565b6000602082019050919050565b60006136b78261364c565b6136c18185613657565b93506136cc83613668565b8060005b838110156136fd5781516136e48882613687565b97506136ef8361369f565b9250506001810190506136d0565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61373f81613599565b82525050565b60006137518383613736565b60208301905092915050565b6000602082019050919050565b60006137758261370a565b61377f8185613715565b935061378a83613726565b8060005b838110156137bb5781516137a28882613745565b97506137ad8361375d565b92505060018101905061378e565b5085935050505092915050565b600060408201905081810360008301526137e281856136ac565b905081810360208301526137f6818461376a565b90509392505050565b600060408201905061381460008301856135a3565b61382160208301846135a3565b9392505050565b60008115159050919050565b61383d81613828565b82525050565b60006020820190506138586000830184613834565b92915050565b6138678161352e565b82525050565b6000602082019050613882600083018461385e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6138db82613892565b810181811067ffffffffffffffff821117156138fa576138f96138a3565b5b80604052505050565b600061390d6134fa565b905061391982826138d2565b919050565b600067ffffffffffffffff821115613939576139386138a3565b5b61394282613892565b9050602081019050919050565b82818337600083830152505050565b600061397161396c8461391e565b613903565b90508281526020810184848401111561398d5761398c61388d565b5b61399884828561394f565b509392505050565b600082601f8301126139b5576139b4613888565b5b81356139c584826020860161395e565b91505092915050565b600080604083850312156139e5576139e4613504565b5b60006139f385828601613557565b925050602083013567ffffffffffffffff811115613a1457613a13613509565b5b613a20858286016139a0565b9150509250929050565b6000608082019050613a3f60008301876135a3565b613a4c60208301866135a3565b613a5960408301856135a3565b613a6660608301846135a3565b95945050505050565b6000819050919050565b6000613a94613a8f613a8a8461350e565b613a6f565b61350e565b9050919050565b6000613aa682613a79565b9050919050565b6000613ab882613a9b565b9050919050565b613ac881613aad565b82525050565b6000602082019050613ae36000830184613abf565b92915050565b6000613af482613a9b565b9050919050565b613b0481613ae9565b82525050565b6000602082019050613b1f6000830184613afb565b92915050565b6000613b3082613a9b565b9050919050565b613b4081613b25565b82525050565b6000602082019050613b5b6000830184613b37565b92915050565b600080600060608486031215613b7a57613b79613504565b5b6000613b8886828701613557565b9350506020613b9986828701613557565b9250506040613baa86828701613557565b9150509250925092565b600060208284031215613bca57613bc9613504565b5b6000613bd8848285016135e4565b91505092915050565b6000613bec82613a9b565b9050919050565b613bfc81613be1565b82525050565b6000602082019050613c176000830184613bf3565b92915050565b600081519050613c2c816135cd565b92915050565b600060208284031215613c4857613c47613504565b5b6000613c5684828501613c1d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c9982613599565b9150613ca483613599565b925082821015613cb757613cb6613c5f565b5b828203905092915050565b6000606082019050613cd76000830186613834565b613ce460208301856135a3565b613cf1604083018461385e565b949350505050565b600067ffffffffffffffff821115613d1457613d136138a3565b5b602082029050602081019050919050565b600080fd5b600081519050613d3981613540565b92915050565b6000613d52613d4d84613cf9565b613903565b90508083825260208201905060208402830185811115613d7557613d74613d25565b5b835b81811015613d9e5780613d8a8882613d2a565b845260208401935050602081019050613d77565b5050509392505050565b600082601f830112613dbd57613dbc613888565b5b8151613dcd848260208601613d3f565b91505092915050565b600067ffffffffffffffff821115613df157613df06138a3565b5b602082029050602081019050919050565b6000613e15613e1084613dd6565b613903565b90508083825260208201905060208402830185811115613e3857613e37613d25565b5b835b81811015613e615780613e4d8882613c1d565b845260208401935050602081019050613e3a565b5050509392505050565b600082601f830112613e8057613e7f613888565b5b8151613e90848260208601613e02565b91505092915050565b60008060408385031215613eb057613eaf613504565b5b600083015167ffffffffffffffff811115613ece57613ecd613509565b5b613eda85828601613da8565b925050602083015167ffffffffffffffff811115613efb57613efa613509565b5b613f0785828601613e6b565b9150509250929050565b6000613f1c82613599565b9150613f2783613599565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f5c57613f5b613c5f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613fa182613599565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fd457613fd3613c5f565b5b600182019050919050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b600061404c602c83613fdf565b915061405782613ff0565b604082019050919050565b6000602082019050818103600083015261407b8161403f565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006140de602c83613fdf565b91506140e982614082565b604082019050919050565b6000602082019050818103600083015261410d816140d1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061414a602083613fdf565b915061415582614114565b602082019050919050565b600060208201905081810360008301526141798161413d565b9050919050565b6000606082019050614195600083018661385e565b6141a2602083018561385e565b6141af60408301846135a3565b949350505050565b6141c081613828565b81146141cb57600080fd5b50565b6000815190506141dd816141b7565b92915050565b6000602082840312156141f9576141f8613504565b5b6000614207848285016141ce565b91505092915050565b7f4163636f756e74206e756c6c0000000000000000000000000000000000000000600082015250565b6000614246600c83613fdf565b915061425182614210565b602082019050919050565b6000602082019050818103600083015261427581614239565b9050919050565b7f47726f75704865616c7468206e756c6c00000000000000000000000000000000600082015250565b60006142b2601083613fdf565b91506142bd8261427c565b602082019050919050565b600060208201905081810360008301526142e1816142a5565b9050919050565b7f44656661756c745374726174656779206e756c6c000000000000000000000000600082015250565b600061431e601483613fdf565b9150614329826142e8565b602082019050919050565b6000602082019050818103600083015261434d81614311565b9050919050565b6000606082019050614369600083018661385e565b61437660208301856135a3565b61438360408301846135a3565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006143e7602e83613fdf565b91506143f28261438b565b604082019050919050565b60006020820190508181036000830152614416816143da565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614479602683613fdf565b91506144848261441d565b604082019050919050565b600060208201905081810360008301526144a88161446c565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b600061450b602f83613fdf565b9150614516826144af565b604082019050919050565b6000602082019050818103600083015261453a816144fe565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061459d602b83613fdf565b91506145a882614541565b604082019050919050565b600060208201905081810360008301526145cc81614590565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600061462f602d83613fdf565b915061463a826145d3565b604082019050919050565b6000602082019050818103600083015261465e81614622565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006146f0602683613fdf565b91506146fb82614694565b604082019050919050565b6000602082019050818103600083015261471f816146e3565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561475a57808201518184015260208101905061473f565b83811115614769576000848401525b50505050565b600061477a82614726565b6147848185614731565b935061479481856020860161473c565b80840191505092915050565b60006147ac828461476f565b915081905092915050565b600081519050919050565b60006147cd826147b7565b6147d78185613fdf565b93506147e781856020860161473c565b6147f081613892565b840191505092915050565b6000602082019050818103600083015261481581846147c2565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220167fa125b6c5448c4510584cae1b3cb521e1ea17a3fdda82467afbd3b0f5816d64736f6c634300080b0033",
  "devdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "params": {
            "caller": "`msg.sender` that called the function."
          }
        }
      ],
      "CantWithdrawAccordingToStrategy(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "FailedToAddSpecificGroupStrategy(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "FailedToBlockStrategy(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "FailedToUnBlockStrategy(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupNotBalancedOrNotEnoughStCelo(address,uint256,uint256)": [
        {
          "params": {
            "expected": "The expected vote amount.",
            "group": "The group's address.",
            "real": "The real vote amount."
          }
        }
      ],
      "GroupNotOverflowing(address)": [
        {
          "params": {
            "group": "The group address."
          }
        }
      ],
      "GroupStillOverflowing(address)": [
        {
          "params": {
            "group": "The group address."
          }
        }
      ],
      "StrategyAlreadyAdded(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "StrategyAlreadyBlocked(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "StrategyNotEligible(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ]
    },
    "events": {
      "StrategyBlocked(address)": {
        "params": {
          "group": "The group's address."
        }
      },
      "StrategyUnblocked(address)": {
        "params": {
          "group": "The group's address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "blockStrategy(address)": {
        "params": {
          "group": "The address of the group to remove from the set of specific group strategies."
        }
      },
      "calculateAndUpdateForWithdrawal(address,uint256,uint256)": {
        "params": {
          "celoWithdrawalAmount": "The amount of CELO to withdraw.",
          "stCeloWithdrawalAmount": "The amount of stCELO to withdraw.",
          "strategy": "The validator group that we want to withdraw from."
        },
        "returns": {
          "groups": "The groups to withdraw from.",
          "votes": "The amount to withdraw from each group."
        }
      },
      "calculateAndUpdateForWithdrawalTransfer(address,uint256,uint256)": {
        "params": {
          "celoWithdrawalAmount": "The amount of stCELO to withdraw.",
          "strategy": "The validator group that we want to withdraw from."
        },
        "returns": {
          "groups": "The groups to withdraw from.",
          "votes": "The amount to withdraw from each group."
        }
      },
      "generateGroupVotesToDistributeTo(address,uint256,uint256)": {
        "params": {
          "celoAmount": "The amount of CELO.",
          "stCeloAmount": "The amount of stCELO.",
          "strategy": "The validator group that we want to deposit to or transfer from."
        },
        "returns": {
          "finalGroups": "The groups to withdraw from.",
          "finalVotes": "The amount to withdraw from each group."
        }
      },
      "getBlockedStrategy(uint256)": {
        "returns": {
          "_0": "The blocked group."
        }
      },
      "getNumberOfBlockedStrategies()": {
        "returns": {
          "_0": "The length of blocked groups."
        }
      },
      "getNumberOfStrategies()": {
        "returns": {
          "_0": "The length of active groups."
        }
      },
      "getStCeloInStrategy(address)": {
        "returns": {
          "overflow": "The stCELO amount that is overflowed to default strategy.",
          "total": "The total stCELO amount."
        }
      },
      "getStrategy(uint256)": {
        "returns": {
          "_0": "The specific group."
        }
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "Storage version of the contract.",
          "_1": "Major version of the contract.",
          "_2": "Minor version of the contract.",
          "_3": "Patch version of the contract."
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "_manager": "The address of the Manager contract.",
          "_owner": "The address of the contract owner.",
          "_registry": "The address of the Celo Registry."
        }
      },
      "isBlockedStrategy(address)": {
        "params": {
          "strategy": "The validator group."
        },
        "returns": {
          "_0": "Whether or not is blocked specific group strategy."
        }
      },
      "isStrategy(address)": {
        "params": {
          "strategy": "The validator group."
        },
        "returns": {
          "_0": "Whether or not is specific group strategy."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rebalanceOverflowedGroup(address)": {
        "params": {
          "strategy": "The group address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDependencies(address,address,address)": {
        "params": {
          "_account": "The address of the Account contract.",
          "_defaultStrategy": "The address of the DefaultStrategy contract.",
          "_groupHealth": "The address of the GroupHealth contract."
        }
      },
      "setManager(address)": {
        "params": {
          "_manager": "The new manager address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unblockStrategy(address)": {
        "params": {
          "group": "The address of the group to add to the set of specific group strategies."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "totalStCeloLocked": {
        "details": "To get the actual stCelo in specific strategy it is necessary to subtract `totalStCeloOverflow`."
      }
    },
    "title": "SpecificGroupStrategy is responsible for handling any deposit/withdrawal for accounts with specific strategy selected.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "notice": "Used when an `onlyManager` function is called by a non-manager."
        }
      ],
      "CantWithdrawAccordingToStrategy(address)": [
        {
          "notice": "Used when there isn't enough CELO voting for an account's strategy to fulfill a withdrawal."
        }
      ],
      "FailedToAddSpecificGroupStrategy(address)": [
        {
          "notice": "Used when an attempt to add an specific group strategy to the EnumerableSet fails."
        }
      ],
      "FailedToBlockStrategy(address)": [
        {
          "notice": "Used when attempting to block a strategy failed."
        }
      ],
      "FailedToUnBlockStrategy(address)": [
        {
          "notice": "Used when attempting to unblock a strategy that is not blocked."
        }
      ],
      "GroupNotBalancedOrNotEnoughStCelo(address,uint256,uint256)": [
        {
          "notice": "Used when attempting to withdraw from specific group strategy but group does not have enough CELO. Group either doesn't have enough stCELO or it is necessary to rebalance the group."
        }
      ],
      "GroupNotOverflowing(address)": [
        {
          "notice": "Used when trying to `rebalanceOverflowedGroup` when the group is not overflowing."
        }
      ],
      "GroupStillOverflowing(address)": [
        {
          "notice": "Used when trying to `rebalanceOverflowedGroup` when the overflowing group cannot be rebalanced since it has no receivable votes."
        }
      ],
      "MaxGroupsVotedForReached()": [
        {
          "notice": "Used when attempting to allow a strategy when the maximum number of groups voted (as allowed by the Election contract) is already being voted for."
        }
      ],
      "NoActiveGroups()": [
        {
          "notice": "Used when attempting to deposit when there are not active groups to vote for."
        }
      ],
      "NoGroups()": [
        {
          "notice": "Used when attempting to withdraw but there are no groups being voted for."
        }
      ],
      "NullAddress()": [
        {
          "notice": "Used when a passed address is address(0)."
        }
      ],
      "StrategyAlreadyAdded(address)": [
        {
          "notice": "Used when attempting to allow strategy that is already allowed."
        }
      ],
      "StrategyAlreadyBlocked(address)": [
        {
          "notice": "Used when attempting to block a strategy that is not allowed."
        }
      ],
      "StrategyNotEligible(address)": [
        {
          "notice": "Used when a strategy does not meet the validator group health requirements."
        }
      ]
    },
    "events": {
      "ManagerSet(address)": {
        "notice": "Emitted when the manager is initially set or later modified."
      },
      "StrategyBlocked(address)": {
        "notice": "Emmited when strategy is blocked."
      },
      "StrategyUnblocked(address)": {
        "notice": "Emitted when a strategy was unlbocked."
      }
    },
    "kind": "user",
    "methods": {
      "account()": {
        "notice": "An instance of the Account contract for the StakedCelo protocol."
      },
      "blockStrategy(address)": {
        "notice": "Marks a group as not specific group strategy for voting."
      },
      "calculateAndUpdateForWithdrawal(address,uint256,uint256)": {
        "notice": "Used to withdraw CELO from a specific group strategy that account voted for previously. It is expected that strategy will be balanced. For balancing use `rebalance` function."
      },
      "calculateAndUpdateForWithdrawalTransfer(address,uint256,uint256)": {
        "notice": "Used to withdraw CELO from the system from specific group strategy that account voted for previously. It is expected that strategy will be balanced. For balancing use `rebalance` function"
      },
      "defaultStrategy()": {
        "notice": "An instance of the DefaultStrategy contract for the StakedCelo protocol."
      },
      "generateGroupVotesToDistributeTo(address,uint256,uint256)": {
        "notice": "Generates groups and votes to distribute votes to."
      },
      "getBlockedStrategy(uint256)": {
        "notice": "Returns the blocked group strategy at index."
      },
      "getNumberOfBlockedStrategies()": {
        "notice": "Returns the number of blocked group strategies."
      },
      "getNumberOfStrategies()": {
        "notice": "Returns the number of specific group strategies."
      },
      "getStCeloInStrategy(address)": {
        "notice": "Returns the specific group total stCELO."
      },
      "getStrategy(uint256)": {
        "notice": "Returns the specific group strategy at index."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "groupHealth()": {
        "notice": "An instance of the GroupHealth contract for the StakedCelo protocol."
      },
      "initialize(address,address,address)": {
        "notice": "Initialize the contract with registry and owner."
      },
      "isBlockedStrategy(address)": {
        "notice": "Returns if strategy is blocked."
      },
      "isStrategy(address)": {
        "notice": "Returns if a group is a valid specific group strategy."
      },
      "rebalanceOverflowedGroup(address)": {
        "notice": "When there is strategy that is overflowing and in meantime there are votes that freed up. This function makes sure to reschedule votes correctly for overflowing group."
      },
      "registry()": {
        "notice": "The Registry."
      },
      "setDependencies(address,address,address)": {
        "notice": "Set this contract's dependencies in the StakedCelo system."
      },
      "setManager(address)": {
        "notice": "Sets the manager address."
      },
      "stCeloInStrategy(address)": {
        "notice": "stCELO that was cast for specific group strategies, strategy => stCELO amount"
      },
      "totalStCeloLocked()": {
        "notice": "Total stCELO that was voted with on specific group strategies (including overflows)."
      },
      "totalStCeloOverflow()": {
        "notice": "Total stCelo that was overflowed to default strategy."
      },
      "unblockStrategy(address)": {
        "notice": "Unblocks previously blocked Strategy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 584,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13491,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "registry",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRegistry)16523"
      },
      {
        "astId": 7073,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "manager",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 9185,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "specificGroupStrategies",
        "offset": 0,
        "slot": "103",
        "type": "t_struct(AddressSet)3257_storage"
      },
      {
        "astId": 9189,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "blockedStrategies",
        "offset": 0,
        "slot": "105",
        "type": "t_struct(AddressSet)3257_storage"
      },
      {
        "astId": 9194,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "stCeloInStrategy",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9197,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "totalStCeloLocked",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 9202,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "stCeloInStrategyOverflowed",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9205,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "totalStCeloOverflow",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 9209,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "groupHealth",
        "offset": 0,
        "slot": "111",
        "type": "t_contract(IGroupHealth)16283"
      },
      {
        "astId": 9213,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "defaultStrategy",
        "offset": 0,
        "slot": "112",
        "type": "t_contract(IDefaultStrategy)15788"
      },
      {
        "astId": 9217,
        "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
        "label": "account",
        "offset": 0,
        "slot": "113",
        "type": "t_contract(IAccount)15504"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccount)15504": {
        "encoding": "inplace",
        "label": "contract IAccount",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultStrategy)15788": {
        "encoding": "inplace",
        "label": "contract IDefaultStrategy",
        "numberOfBytes": "20"
      },
      "t_contract(IGroupHealth)16283": {
        "encoding": "inplace",
        "label": "contract IGroupHealth",
        "numberOfBytes": "20"
      },
      "t_contract(IRegistry)16523": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3257_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3256,
            "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2956_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2956_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2951,
            "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2955,
            "contract": "contracts/SpecificGroupStrategy.sol:SpecificGroupStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}