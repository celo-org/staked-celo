{
  "address": "0xC4cd8ae0566f6A7faC62F4bc79cBe1DBb987BD3b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotManager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotManagerNorStrategy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CantWithdrawAccordingToStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotEligible",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "HealthyGroup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "InvalidFromGroup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "InvalidToGroup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveGroups",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAbleToDistributeVotes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotUnsortedGroup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualCelo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedCelo",
          "type": "uint256"
        }
      ],
      "name": "RebalanceEnoughStCelo",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualCelo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedCelo",
          "type": "uint256"
        }
      ],
      "name": "RebalanceNoExtraStCelo",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "update",
          "type": "bool"
        }
      ],
      "name": "SortedFlagUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "account",
      "outputs": [
        {
          "internalType": "contract IAccount",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lesser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greater",
          "type": "address"
        }
      ],
      "name": "activateGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "deactivateGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "deactivateUnhealthyGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "withdraw",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "celoAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositGroupToIgnore",
          "type": "address"
        }
      ],
      "name": "generateVoteDistribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "finalGroups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "finalVotes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getExpectedAndActualStCeloForGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expectedStCelo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actualStCelo",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getGroupPreviousAndNext",
      "outputs": [
        {
          "internalType": "address",
          "name": "previousAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nextAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGroupsHead",
      "outputs": [
        {
          "internalType": "address",
          "name": "head",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "previousAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGroupsTail",
      "outputs": [
        {
          "internalType": "address",
          "name": "tail",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nextAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfUnsortedGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUnsortedGroupAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "groupHealth",
      "outputs": [
        {
          "internalType": "contract IGroupHealth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGroupsToDistributeTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGroupsToWithdrawFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromGroup",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toGroup",
          "type": "address"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_groupHealth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_specificGroupStrategy",
          "type": "address"
        }
      ],
      "name": "setDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "distributeTo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loopLimit",
          "type": "uint256"
        }
      ],
      "name": "setSortingParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sorted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "specificGroupStrategy",
      "outputs": [
        {
          "internalType": "contract ISpecificGroupStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stCeloInGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStCeloInStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lesserKey",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greaterKey",
          "type": "address"
        }
      ],
      "name": "updateActiveGroupOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x60d8e6f927ddad8fd4edc9f040acea9259206a2ade156a4f8511cd6f5a3ca13f",
  "receipt": {
    "to": null,
    "from": "0x5bC1C4C1D67C5E4384189302BC653A611568a788",
    "contractAddress": "0xC4cd8ae0566f6A7faC62F4bc79cBe1DBb987BD3b",
    "transactionIndex": 0,
    "gasUsed": "5139502",
    "logsBloom": "0x
    "blockHash": "0x161fdcfb37e6abb9cb591eb7025d5efa646f3285d1aa61db160b975c062ea484",
    "transactionHash": "0x60d8e6f927ddad8fd4edc9f040acea9259206a2ade156a4f8511cd6f5a3ca13f",
    "logs": [],
    "blockNumber": 16321828,
    "cumulativeGasUsed": "5139502",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f051a28401f992e504f883b8bfc781d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotManagerNorStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantWithdrawAccordingToStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotEligible\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"HealthyGroup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"InvalidFromGroup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"InvalidToGroup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveGroups\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAbleToDistributeVotes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotUnsortedGroup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualCelo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedCelo\",\"type\":\"uint256\"}],\"name\":\"RebalanceEnoughStCelo\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualCelo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedCelo\",\"type\":\"uint256\"}],\"name\":\"RebalanceNoExtraStCelo\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"SortedFlagUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"account\",\"outputs\":[{\"internalType\":\"contract IAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lesser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greater\",\"type\":\"address\"}],\"name\":\"activateGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"deactivateGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"deactivateUnhealthyGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"withdraw\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"celoAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositGroupToIgnore\",\"type\":\"address\"}],\"name\":\"generateVoteDistribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"finalGroups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"finalVotes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getExpectedAndActualStCeloForGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedStCelo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualStCelo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getGroupPreviousAndNext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nextAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGroupsHead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"head\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGroupsTail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tail\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nextAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfUnsortedGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUnsortedGroupAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupHealth\",\"outputs\":[{\"internalType\":\"contract IGroupHealth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGroupsToDistributeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGroupsToWithdrawFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromGroup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toGroup\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_groupHealth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_specificGroupStrategy\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distributeTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loopLimit\",\"type\":\"uint256\"}],\"name\":\"setSortingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sorted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specificGroupStrategy\",\"outputs\":[{\"internalType\":\"contract ISpecificGroupStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stCeloInGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStCeloInStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lesserKey\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greaterKey\",\"type\":\"address\"}],\"name\":\"updateActiveGroupOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"params\":{\"caller\":\"`msg.sender` that called the function.\"}}],\"CallerNotManagerNorStrategy(address)\":[{\"params\":{\"caller\":\"`msg.sender` that called the function.\"}}],\"GroupAlreadyAdded(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupNotActive(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupNotEligible(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"HealthyGroup(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"InvalidFromGroup(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"InvalidToGroup(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"RebalanceEnoughStCelo(address,uint256,uint256)\":[{\"params\":{\"actualCelo\":\"The actual stCELO value.\",\"expectedCelo\":\"The expected stCELO value.\",\"group\":\"The group's address.\"}}],\"RebalanceNoExtraStCelo(address,uint256,uint256)\":[{\"params\":{\"actualCelo\":\"The actual stCELO value.\",\"expectedCelo\":\"The expected stCELO value.\",\"group\":\"The group's address.\"}}]},\"events\":{\"GroupActivated(address)\":{\"params\":{\"group\":\"The group's address.\"}},\"GroupRemoved(address)\":{\"params\":{\"group\":\"The group's address.\"}},\"SortedFlagUpdated(bool)\":{\"params\":{\"update\":\"The new value.\"}}},\"kind\":\"dev\",\"methods\":{\"activateGroup(address,address,address)\":{\"params\":{\"greater\":\"The group receiving more votes (in default strategy) than `group`,  or 0 if `group` has the most votes of any validator group.\",\"group\":\"The address of the group to add to the set of votable groups.\",\"lesser\":\"The group receiving fewer votes (in default strategy) than `group`, or 0 if `group` has the fewest votes of any validator group.\"}},\"deactivateGroup(address)\":{\"params\":{\"group\":\"The group to deactivated.\"}},\"deactivateUnhealthyGroup(address)\":{\"params\":{\"group\":\"The group to deactivate if unhealthy.\"}},\"generateVoteDistribution(bool,uint256,address)\":{\"params\":{\"celoAmount\":\"The amount of votes to distribute.\",\"depositGroupToIgnore\":\"The group that will not be used for deposit\",\"withdraw\":\"Whether to withdraw or deposit.\"},\"returns\":{\"finalGroups\":\"The groups that were chosen for distribution.\",\"finalVotes\":\"The votes of chosen finalGroups.\"}},\"getExpectedAndActualStCeloForGroup(address)\":{\"params\":{\"group\":\"The group.\"},\"returns\":{\"actualStCelo\":\"The amount of stCELO which is currently assigned to group in the strategy.\",\"expectedStCelo\":\"The amount of stCELO that group should have. (The total amount of stCELO in the default strategy divided by the number of active groups.)\"}},\"getGroupPreviousAndNext(address)\":{\"params\":{\"group\":\"The group address.\"},\"returns\":{\"nextAddress\":\"The next address.\",\"previousAddress\":\"The previous address.\"}},\"getGroupsHead()\":{\"returns\":{\"head\":\"The address of the sorted group with most votes.\",\"previousAddress\":\"The previous address from head.\"}},\"getGroupsTail()\":{\"returns\":{\"nextAddress\":\"The next address after tail.\",\"tail\":\"The address of the sorted group with least votes.\"}},\"getNumberOfGroups()\":{\"returns\":{\"_0\":\"The number of active groups.\"}},\"getNumberOfUnsortedGroups()\":{\"returns\":{\"_0\":\"The number of unsorted groups.\"}},\"getUnsortedGroupAt(uint256)\":{\"params\":{\"index\":\"The index to look up.\"},\"returns\":{\"_0\":\"The group.\"}},\"getVersionNumber()\":{\"returns\":{\"_0\":\"Storage version of the contract.\",\"_1\":\"Major version of the contract.\",\"_2\":\"Minor version of the contract.\",\"_3\":\"Patch version of the contract.\"}},\"initialize(address,address,address)\":{\"params\":{\"_manager\":\"The address of the Manager contract.\",\"_owner\":\"The address of the contract owner.\",\"_registry\":\"The address of the Celo Registry.\"}},\"isActive(address)\":{\"returns\":{\"_0\":\"Whether or not the given group is active.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rebalance(address,address)\":{\"params\":{\"fromGroup\":\"The from group.\",\"toGroup\":\"The to group.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDependencies(address,address,address)\":{\"params\":{\"_account\":\"The address of the Account contract.\",\"_groupHealth\":\"The address of the GroupHealth contract.\",\"_specificGroupStrategy\":\"The address of the SpecificGroupStrategy contract.\"}},\"setManager(address)\":{\"params\":{\"_manager\":\"The new manager address.\"}},\"setSortingParams(uint256,uint256,uint256)\":{\"params\":{\"distributeTo\":\"Maximum number of groups that can be distributed to.\",\"loopLimit\":\"The sorting loop limit while sorting active groups on chain.\",\"withdrawFrom\":\"Maximum number of groups that can be withdrawn from.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateActiveGroupOrder(address,address,address)\":{\"params\":{\"greaterKey\":\"The key of the group greater than the group to update.\",\"group\":\"The group address.\",\"lesserKey\":\"The key of the group less than the group to update.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"DefaultStrategy is responsible for handling any deposit/withdrawal for accounts without any specific strategy.\",\"version\":1},\"userdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"notice\":\"Used when an `onlyManager` function is called by a non-manager.\"}],\"CallerNotManagerNorStrategy(address)\":[{\"notice\":\"Used when a `managerOrStrategy` function is called  by a non-manager or non-strategy.\"}],\"CantWithdrawAccordingToStrategy()\":[{\"notice\":\"Used when there isn't enough CELO voting for an account's strategy to fulfill a withdrawal.\"}],\"GroupAlreadyAdded(address)\":[{\"notice\":\"Used when attempting to activate a group that is already active.\"}],\"GroupNotActive(address)\":[{\"notice\":\"Used when attempting to deactivate a group that is not active.\"}],\"GroupNotEligible(address)\":[{\"notice\":\"Used when a group does not meet the validator group health requirements.\"}],\"HealthyGroup(address)\":[{\"notice\":\"Used when attempting to deactivate a healthy group using deactivateUnhealthyGroup().\"}],\"InvalidFromGroup(address)\":[{\"notice\":\"Used when rebalancing from non-active group.\"}],\"InvalidToGroup(address)\":[{\"notice\":\"Used when rebalancing to a non-active group.\"}],\"NoActiveGroups()\":[{\"notice\":\"Used when attempting to deposit when there are no active groups to vote for.\"}],\"NotAbleToDistributeVotes()\":[{\"notice\":\"Used when atempting to distribute votes but validator group limit is reached.\"}],\"NotUnsortedGroup()\":[{\"notice\":\"Used when attempting sort active groups when there are no unsorted group.\"}],\"NullAddress()\":[{\"notice\":\"Used when a passed address is address(0).\"}],\"RebalanceEnoughStCelo(address,uint256,uint256)\":[{\"notice\":\"Used when rebalancing and toGroup has enough stCELO.\"}],\"RebalanceNoExtraStCelo(address,uint256,uint256)\":[{\"notice\":\"Used when rebalancing and fromGroup doesn't have any extra stCELO.\"}]},\"events\":{\"GroupActivated(address)\":{\"notice\":\"Emitted when a new group is activated for voting.\"},\"GroupRemoved(address)\":{\"notice\":\"Emitted when a group is deactivated.\"},\"ManagerSet(address)\":{\"notice\":\"Emitted when the manager is initially set or later modified.\"},\"SortedFlagUpdated(bool)\":{\"notice\":\"Emmited when sorted status of active groups was changed\"}},\"kind\":\"user\",\"methods\":{\"account()\":{\"notice\":\"An instance of the Account contract for the StakedCelo protocol.\"},\"activateGroup(address,address,address)\":{\"notice\":\"Marks a group as votable for default strategy. It is necessary to call `updateGroupHealth` in GroupHealth smart contract first.\"},\"deactivateGroup(address)\":{\"notice\":\"Deactivates group.\"},\"deactivateUnhealthyGroup(address)\":{\"notice\":\"Deactivates an unhealthy group.\"},\"generateVoteDistribution(bool,uint256,address)\":{\"notice\":\"Distributes votes by computing the number of votes each active group should either receive or have withdrawn.\"},\"getExpectedAndActualStCeloForGroup(address)\":{\"notice\":\"Returns expected stCELO and actual stCELO for group.\"},\"getGroupPreviousAndNext(address)\":{\"notice\":\"Returns previous and next address of key.\"},\"getGroupsHead()\":{\"notice\":\"Returns head and previous address of head.\"},\"getGroupsTail()\":{\"notice\":\"Returns tail and next address of tail.\"},\"getNumberOfGroups()\":{\"notice\":\"Returns the number of active groups.\"},\"getNumberOfUnsortedGroups()\":{\"notice\":\"Returns the number of unsorted groups.\"},\"getUnsortedGroupAt(uint256)\":{\"notice\":\"Returns the unsorted group at index.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"groupHealth()\":{\"notice\":\"An instance of the GroupHealth contract for the StakedCelo protocol.\"},\"initialize(address,address,address)\":{\"notice\":\"Initialize the contract with registry and owner.\"},\"isActive(address)\":{\"notice\":\"Returns whether active groups contain group.\"},\"maxGroupsToDistributeTo()\":{\"notice\":\"Maximum number of groups to distribute votes to.\"},\"maxGroupsToWithdrawFrom()\":{\"notice\":\"Maximum number of groups to withdraw from.\"},\"rebalance(address,address)\":{\"notice\":\"Rebalances CELO between groups that have an incorrect CELO-stCELO ratio. `fromGroup` is required to have more CELO than it should and `toGroup` needs to have less CELO than it should.\"},\"registry()\":{\"notice\":\"The Registry.\"},\"setDependencies(address,address,address)\":{\"notice\":\"Set this contract's dependencies in the StakedCelo system.\"},\"setManager(address)\":{\"notice\":\"Sets the manager address.\"},\"setSortingParams(uint256,uint256,uint256)\":{\"notice\":\"Set distribution/withdrawal algorithm parameters.\"},\"sorted()\":{\"notice\":\"Whether or not active groups are sorted. If active groups are not sorted it is neccessary to call updateActiveGroupOrder\"},\"specificGroupStrategy()\":{\"notice\":\"An instance of the SpecificGroupStrategy for the StakedCelo protocol.\"},\"stCeloInGroup(address)\":{\"notice\":\"stCELO that was cast for default group strategy, strategy => stCELO amount\"},\"totalStCeloInStrategy()\":{\"notice\":\"Total stCELO that was voted with on default strategy.\"},\"updateActiveGroupOrder(address,address,address)\":{\"notice\":\"Updates group order of unsorted group. When there are no more unsorted groups it will mark active groups as sorted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DefaultStrategy.sol\":\"DefaultStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/DefaultStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./common/UsingRegistryUpgradeable.sol\\\";\\nimport \\\"./common/UUPSOwnableUpgradeable.sol\\\";\\nimport \\\"./common/linkedlists/AddressSortedLinkedList.sol\\\";\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/IGroupHealth.sol\\\";\\nimport \\\"./interfaces/IManager.sol\\\";\\nimport \\\"./interfaces/ISpecificGroupStrategy.sol\\\";\\nimport \\\"./Managed.sol\\\";\\n\\n/**\\n * @title DefaultStrategy is responsible for handling any deposit/withdrawal\\n * for accounts without any specific strategy.\\n */\\ncontract DefaultStrategy is UUPSOwnableUpgradeable, UsingRegistryUpgradeable, Managed {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using AddressSortedLinkedList for SortedLinkedList.List;\\n\\n    /**\\n     * @notice Holds a group's address and votes.\\n     * @param group The address of the group.\\n     * @param votes The votes assigned to the group.\\n     */\\n    struct GroupWithVotes {\\n        address group;\\n        uint256 votes;\\n    }\\n\\n    /**\\n     * @notice The set of currently active groups that will be voted for with\\n     * new deposits.\\n     */\\n    SortedLinkedList.List private activeGroups;\\n\\n    /**\\n     * @notice An instance of the GroupHealth contract for the StakedCelo protocol.\\n     */\\n    IGroupHealth public groupHealth;\\n\\n    /**\\n     * @notice An instance of the Account contract for the StakedCelo protocol.\\n     */\\n    IAccount public account;\\n\\n    /**\\n     * @notice An instance of the SpecificGroupStrategy for the StakedCelo protocol.\\n     */\\n    ISpecificGroupStrategy public specificGroupStrategy;\\n\\n    /**\\n     * @notice stCELO that was cast for default group strategy,\\n     * strategy => stCELO amount\\n     */\\n    mapping(address => uint256) public stCeloInGroup;\\n\\n    /**\\n     * @notice Maximum number of groups to distribute votes to.\\n     */\\n    uint256 public maxGroupsToDistributeTo;\\n\\n    /**\\n     * @notice Maximum number of groups to withdraw from.\\n     */\\n    uint256 public maxGroupsToWithdrawFrom;\\n\\n    /**\\n     * @notice Total stCELO that was voted with on default strategy.\\n     */\\n    uint256 public totalStCeloInStrategy;\\n\\n    /**\\n     * @notice Loop limit while sorting active groups on chain.\\n     */\\n    uint256 private sortingLoopLimit;\\n\\n    /**\\n     * @notice Whether or not active groups are sorted.\\n     * If active groups are not sorted it is neccessary to call updateActiveGroupOrder\\n     */\\n    bool public sorted;\\n\\n    /**\\n     * @notice Groups that need to be sorted\\n     */\\n    EnumerableSet.AddressSet private unsortedGroups;\\n\\n    /**\\n     * @notice Emitted when a group is deactivated.\\n     * @param group The group's address.\\n     */\\n    event GroupRemoved(address indexed group);\\n\\n    /**\\n     * @notice Emitted when a new group is activated for voting.\\n     * @param group The group's address.\\n     */\\n    event GroupActivated(address indexed group);\\n\\n    /**\\n     * Emmited when sorted status of active groups was changed\\n     * @param update The new value.\\n     */\\n    event SortedFlagUpdated(bool update);\\n\\n    /**\\n     * @notice Used when there isn't enough CELO voting for an account's strategy\\n     * to fulfill a withdrawal.\\n     */\\n    error CantWithdrawAccordingToStrategy();\\n\\n    /**\\n     * @notice Used when attempting to activate a group that is already active.\\n     * @param group The group's address.\\n     */\\n    error GroupAlreadyAdded(address group);\\n\\n    /**\\n     * @notice Used when a group does not meet the validator group health requirements.\\n     * @param group The group's address.\\n     */\\n    error GroupNotEligible(address group);\\n\\n    /**\\n     * @notice Used when attempting to deactivate a group that is not active.\\n     * @param group The group's address.\\n     */\\n    error GroupNotActive(address group);\\n\\n    /**\\n     * @notice Used when attempting to deactivate a healthy group using deactivateUnhealthyGroup().\\n     * @param group The group's address.\\n     */\\n    error HealthyGroup(address group);\\n\\n    /**\\n     * @notice Used when attempting to deposit when there are no active groups\\n     * to vote for.\\n     */\\n    error NoActiveGroups();\\n\\n    /**\\n     * @notice Used when atempting to distribute votes but validator group limit is reached.\\n     */\\n    error NotAbleToDistributeVotes();\\n\\n    /**\\n     * @notice Used when attempting sort active groups when there are no unsorted group.\\n     */\\n    error NotUnsortedGroup();\\n\\n    /**\\n     * @notice Used when rebalancing to a non-active group.\\n     * @param group The group's address.\\n     */\\n    error InvalidToGroup(address group);\\n\\n    /**\\n     * @notice Used when rebalancing from non-active group.\\n     * @param group The group's address.\\n     */\\n    error InvalidFromGroup(address group);\\n\\n    /**\\n     * @notice Used when rebalancing and fromGroup doesn't have any extra stCELO.\\n     * @param group The group's address.\\n     * @param actualCelo The actual stCELO value.\\n     * @param expectedCelo The expected stCELO value.\\n     */\\n    error RebalanceNoExtraStCelo(address group, uint256 actualCelo, uint256 expectedCelo);\\n\\n    /**\\n     * @notice Used when rebalancing and toGroup has enough stCELO.\\n     * @param group The group's address.\\n     * @param actualCelo The actual stCELO value.\\n     * @param expectedCelo The expected stCELO value.\\n     */\\n    error RebalanceEnoughStCelo(address group, uint256 actualCelo, uint256 expectedCelo);\\n\\n    /**\\n     *  @notice Used when a `managerOrStrategy` function is called\\n     *  by a non-manager or non-strategy.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManagerNorStrategy(address caller);\\n\\n    /**\\n     * @notice Checks that only the manager or strategy contract can execute a function.\\n     */\\n    modifier managerOrStrategy() {\\n        if (manager != msg.sender && address(specificGroupStrategy) != msg.sender) {\\n            revert CallerNotManagerNorStrategy(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the contract with registry and owner.\\n     * @param _registry The address of the Celo Registry.\\n     * @param _owner The address of the contract owner.\\n     * @param _manager The address of the Manager contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _owner,\\n        address _manager\\n    ) external initializer {\\n        _transferOwnership(_owner);\\n        __UsingRegistry_init(_registry);\\n        __Managed_init(_manager);\\n        maxGroupsToDistributeTo = 8;\\n        maxGroupsToWithdrawFrom = 8;\\n        sortingLoopLimit = 10;\\n        sorted = true;\\n        emit SortedFlagUpdated(sorted);\\n    }\\n\\n    /**\\n     * @notice Set this contract's dependencies in the StakedCelo system.\\n     * @param _account The address of the Account contract.\\n     * @param _groupHealth The address of the GroupHealth contract.\\n     * @param _specificGroupStrategy The address of the SpecificGroupStrategy contract.\\n     */\\n    function setDependencies(\\n        address _account,\\n        address _groupHealth,\\n        address _specificGroupStrategy\\n    ) external onlyOwner {\\n        require(_account != address(0), \\\"Account null\\\");\\n        require(_groupHealth != address(0), \\\"GroupHealth null\\\");\\n        require(_specificGroupStrategy != address(0), \\\"SpecificGroupStrategy null\\\");\\n\\n        groupHealth = IGroupHealth(_groupHealth);\\n        specificGroupStrategy = ISpecificGroupStrategy(_specificGroupStrategy);\\n        account = IAccount(_account);\\n    }\\n\\n    /**\\n     * @notice Set distribution/withdrawal algorithm parameters.\\n     * @param distributeTo Maximum number of groups that can be distributed to.\\n     * @param withdrawFrom Maximum number of groups that can be withdrawn from.\\n     * @param loopLimit The sorting loop limit while sorting active groups on chain.\\n     */\\n    function setSortingParams(\\n        uint256 distributeTo,\\n        uint256 withdrawFrom,\\n        uint256 loopLimit\\n    ) external onlyOwner {\\n        maxGroupsToDistributeTo = distributeTo;\\n        maxGroupsToWithdrawFrom = withdrawFrom;\\n        sortingLoopLimit = loopLimit;\\n    }\\n\\n    /**\\n     * @notice Distributes votes by computing the number of votes each active\\n     * group should either receive or have withdrawn.\\n     * @param withdraw Whether to withdraw or deposit.\\n     * @param celoAmount The amount of votes to distribute.\\n     * @param depositGroupToIgnore The group that will not be used for deposit\\n     * @return finalGroups The groups that were chosen for distribution.\\n     * @return finalVotes The votes of chosen finalGroups.\\n     */\\n    function generateVoteDistribution(\\n        bool withdraw,\\n        uint256 celoAmount,\\n        address depositGroupToIgnore\\n    )\\n        external\\n        managerOrStrategy\\n        returns (address[] memory finalGroups, uint256[] memory finalVotes)\\n    {\\n        (finalGroups, finalVotes) = withdraw\\n            ? _generateWithdrawalVoteDistribution(celoAmount)\\n            : _generateDepositVoteDistribution(celoAmount, depositGroupToIgnore);\\n    }\\n\\n    /**\\n     * @notice Updates group order of unsorted group. When there are no more unsorted groups\\n     * it will mark active groups as sorted.\\n     * @param group The group address.\\n     * @param lesserKey The key of the group less than the group to update.\\n     * @param greaterKey The key of the group greater than the group to update.\\n     */\\n    function updateActiveGroupOrder(\\n        address group,\\n        address lesserKey,\\n        address greaterKey\\n    ) external {\\n        if (!unsortedGroups.contains(group)) {\\n            revert NotUnsortedGroup();\\n        }\\n\\n        activeGroups.update(group, stCeloInGroup[group], lesserKey, greaterKey);\\n        unsortedGroups.remove(group);\\n        if (unsortedGroups.length() == 0) {\\n            sorted = true;\\n            emit SortedFlagUpdated(sorted);\\n        }\\n    }\\n\\n    /**\\n     * @notice Marks a group as votable for default strategy.\\n     * It is necessary to call `updateGroupHealth` in GroupHealth smart contract first.\\n     * @param group The address of the group to add to the set of votable\\n     * groups.\\n     * @param lesser The group receiving fewer votes (in default strategy) than `group`,\\n     * or 0 if `group` has the fewest votes of any validator group.\\n     * @param greater The group receiving more votes (in default strategy) than `group`,\\n     *  or 0 if `group` has the most votes of any validator group.\\n     */\\n    function activateGroup(\\n        address group,\\n        address lesser,\\n        address greater\\n    ) external onlyOwner {\\n        if (!groupHealth.isGroupValid(group)) {\\n            revert GroupNotEligible(group);\\n        }\\n\\n        if (activeGroups.contains(group)) {\\n            revert GroupAlreadyAdded(group);\\n        }\\n\\n        // For migration purposes between V1 and V2. It can be removed once migrated to V2.\\n        uint256 currentStCelo = 0;\\n        uint256 stCeloForWholeGroup = IManager(manager).toStakedCelo(\\n            account.getCeloForGroup(group)\\n        );\\n\\n        if (stCeloForWholeGroup != 0) {\\n            uint256 specificGroupTotalStCelo = specificGroupStrategy.stCeloInStrategy(group);\\n            currentStCelo =\\n                stCeloForWholeGroup -\\n                Math.min(stCeloForWholeGroup, specificGroupTotalStCelo);\\n            updateGroupStCelo(group, currentStCelo, true);\\n        }\\n\\n        activeGroups.insert(group, currentStCelo, lesser, greater);\\n\\n        emit GroupActivated(group);\\n    }\\n\\n    /**\\n     * @notice Deactivates group.\\n     * @param group The group to deactivated.\\n     */\\n    function deactivateGroup(address group) external onlyOwner {\\n        _deactivateGroup(group);\\n    }\\n\\n    /**\\n     * @notice Deactivates an unhealthy group.\\n     * @param group The group to deactivate if unhealthy.\\n     */\\n    function deactivateUnhealthyGroup(address group) external {\\n        if (groupHealth.isGroupValid(group)) {\\n            revert HealthyGroup(group);\\n        }\\n        _deactivateGroup((group));\\n    }\\n\\n    /**\\n     * @notice Returns the number of active groups.\\n     * @return The number of active groups.\\n     */\\n    function getNumberOfGroups() external view returns (uint256) {\\n        return activeGroups.getNumElements();\\n    }\\n\\n    /**\\n     * @notice Returns previous and next address of key.\\n     * @param group The group address.\\n     * @return previousAddress The previous address.\\n     * @return nextAddress The next address.\\n     */\\n    function getGroupPreviousAndNext(address group)\\n        external\\n        view\\n        returns (address previousAddress, address nextAddress)\\n    {\\n        (, previousAddress, nextAddress) = activeGroups.get(group);\\n    }\\n\\n    /**\\n     * @notice Returns head and previous address of head.\\n     * @return head The address of the sorted group with most votes.\\n     * @return previousAddress The previous address from head.\\n     */\\n    function getGroupsHead() external view returns (address head, address previousAddress) {\\n        head = activeGroups.getHead();\\n        (, previousAddress, ) = activeGroups.get(head);\\n    }\\n\\n    /**\\n     * @notice Returns tail and next address of tail.\\n     * @return tail The address of the sorted group with least votes.\\n     * @return nextAddress The next address after tail.\\n     */\\n    function getGroupsTail() external view returns (address tail, address nextAddress) {\\n        tail = activeGroups.getTail();\\n        (, , nextAddress) = activeGroups.get(tail);\\n    }\\n\\n    /**\\n     * @notice Returns whether active groups contain group.\\n     * @return Whether or not the given group is active.\\n     */\\n    function isActive(address group) external view returns (bool) {\\n        return activeGroups.contains(group);\\n    }\\n\\n    /**\\n     * @notice Returns the number of unsorted groups.\\n     * @return The number of unsorted groups.\\n     */\\n    function getNumberOfUnsortedGroups() external view returns (uint256) {\\n        return unsortedGroups.length();\\n    }\\n\\n    /**\\n     * @notice Returns the unsorted group at index.\\n     * @param index The index to look up.\\n     * @return The group.\\n     */\\n    function getUnsortedGroupAt(uint256 index) external view returns (address) {\\n        return unsortedGroups.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 1, 0, 0);\\n    }\\n\\n    /**\\n     * @notice Rebalances CELO between groups that have an incorrect CELO-stCELO ratio.\\n     * `fromGroup` is required to have more CELO than it should and `toGroup` needs\\n     * to have less CELO than it should.\\n     * @param fromGroup The from group.\\n     * @param toGroup The to group.\\n     */\\n    function rebalance(address fromGroup, address toGroup) public {\\n        if (!activeGroups.contains(fromGroup)) {\\n            revert InvalidFromGroup(fromGroup);\\n        }\\n\\n        if (!activeGroups.contains(toGroup)) {\\n            revert InvalidToGroup(toGroup);\\n        }\\n\\n        (uint256 expectedFromStCelo, uint256 actualFromStCelo) = getExpectedAndActualStCeloForGroup(\\n            fromGroup\\n        );\\n        if (actualFromStCelo <= expectedFromStCelo) {\\n            // fromGroup needs to have more stCELO than it should\\n            revert RebalanceNoExtraStCelo(fromGroup, actualFromStCelo, expectedFromStCelo);\\n        }\\n\\n        (uint256 expectedToStCelo, uint256 actualToStCelo) = getExpectedAndActualStCeloForGroup(\\n            toGroup\\n        );\\n\\n        if (actualToStCelo >= expectedToStCelo) {\\n            // toGroup needs to have less stCELO than it should\\n            revert RebalanceEnoughStCelo(toGroup, actualToStCelo, expectedToStCelo);\\n        }\\n\\n        uint256 toMove = Math.min(\\n            actualFromStCelo - expectedFromStCelo,\\n            expectedToStCelo - actualToStCelo\\n        );\\n\\n        updateGroupStCelo(fromGroup, toMove, false);\\n        updateGroupStCelo(toGroup, toMove, true);\\n\\n        trySort(fromGroup, stCeloInGroup[fromGroup], false);\\n        trySort(toGroup, stCeloInGroup[toGroup], true);\\n    }\\n\\n    /**\\n     * @notice Returns expected stCELO and actual stCELO for group.\\n     * @param group The group.\\n     * @return expectedStCelo The amount of stCELO that group should have.\\n     * (The total amount of stCELO in the default strategy divided by the number of active groups.)\\n     * @return actualStCelo The amount of stCELO which is currently\\n     * assigned to group in the strategy.\\n     */\\n    function getExpectedAndActualStCeloForGroup(address group)\\n        public\\n        view\\n        returns (uint256 expectedStCelo, uint256 actualStCelo)\\n    {\\n        address head = activeGroups.getHead();\\n        uint256 numberOfActiveGroups = activeGroups.getNumElements();\\n        expectedStCelo = totalStCeloInStrategy / numberOfActiveGroups;\\n        if (group == head) {\\n            uint256 divisionResidue = totalStCeloInStrategy -\\n                (expectedStCelo * numberOfActiveGroups);\\n            expectedStCelo += divisionResidue;\\n        }\\n\\n        actualStCelo = stCeloInGroup[group];\\n    }\\n\\n    /**\\n     * @notice Adds/substracts value to totals of group and\\n     * total stCELO in default strategy.\\n     * @param group The validator group that we are updating.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @param add Whether to add or substract.\\n     */\\n    function updateGroupStCelo(\\n        address group,\\n        uint256 stCeloAmount,\\n        bool add\\n    ) internal {\\n        if (add) {\\n            stCeloInGroup[group] += stCeloAmount;\\n            totalStCeloInStrategy += stCeloAmount;\\n        } else {\\n            stCeloInGroup[group] -= stCeloAmount;\\n            totalStCeloInStrategy -= stCeloAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Deactivates group.\\n     * @param group The group to deactivated.\\n     */\\n    function _deactivateGroup(address group) private {\\n        if (!activeGroups.contains(group)) {\\n            revert GroupNotActive(group);\\n        }\\n        activeGroups.remove(group);\\n        unsortedGroups.remove(group);\\n\\n        uint256 groupTotalStCeloVotes = stCeloInGroup[group];\\n\\n        if (groupTotalStCeloVotes > 0) {\\n            updateGroupStCelo(group, groupTotalStCeloVotes, false);\\n            address[] memory fromGroups = new address[](1);\\n            uint256[] memory fromVotes = new uint256[](1);\\n            fromGroups[0] = group;\\n            fromVotes[0] = IManager(manager).toCelo(groupTotalStCeloVotes);\\n            (\\n                address[] memory toGroups,\\n                uint256[] memory toVotes\\n            ) = _generateDepositVoteDistribution(\\n                    IManager(manager).toCelo(groupTotalStCeloVotes),\\n                    address(0)\\n                );\\n            IManager(manager).scheduleTransferWithinStrategy(\\n                fromGroups,\\n                toGroups,\\n                fromVotes,\\n                toVotes\\n            );\\n        }\\n\\n        emit GroupRemoved(group);\\n    }\\n\\n    /**\\n     * @notice Distributes votes by computing the number of votes to be subtracted\\n     * from each active group.\\n     * @param celoAmount The amount of votes to subtract.\\n     * @return finalGroups The groups that were chosen for subtraction.\\n     * @return finalVotes The votes of chosen finalGroups.\\n     */\\n    function _generateWithdrawalVoteDistribution(uint256 celoAmount)\\n        private\\n        returns (address[] memory finalGroups, uint256[] memory finalVotes)\\n    {\\n        if (activeGroups.getNumElements() == 0) {\\n            revert NoActiveGroups();\\n        }\\n\\n        uint256 maxGroupCount = Math.min(maxGroupsToWithdrawFrom, activeGroups.getNumElements());\\n\\n        address[] memory groups = new address[](maxGroupCount);\\n        uint256[] memory votes = new uint256[](maxGroupCount);\\n\\n        address votedGroup = activeGroups.getHead();\\n        uint256 groupsIndex;\\n\\n        while (groupsIndex < maxGroupCount && celoAmount != 0 && votedGroup != address(0)) {\\n            votes[groupsIndex] = Math.min(\\n                Math.min(\\n                    account.getCeloForGroup(votedGroup),\\n                    IManager(manager).toCelo(stCeloInGroup[votedGroup])\\n                ),\\n                celoAmount\\n            );\\n\\n            groups[groupsIndex] = votedGroup;\\n            celoAmount -= votes[groupsIndex];\\n            updateGroupStCelo(\\n                votedGroup,\\n                IManager(manager).toStakedCelo(votes[groupsIndex]),\\n                false\\n            );\\n            trySort(votedGroup, stCeloInGroup[votedGroup], false);\\n\\n            if (sorted) {\\n                votedGroup = activeGroups.getHead();\\n            } else {\\n                (, votedGroup, ) = activeGroups.get(votedGroup);\\n            }\\n\\n            groupsIndex++;\\n        }\\n\\n        if (celoAmount != 0) {\\n            revert NotAbleToDistributeVotes();\\n        }\\n\\n        finalGroups = new address[](groupsIndex);\\n        finalVotes = new uint256[](groupsIndex);\\n\\n        for (uint256 i = 0; i < groupsIndex; i++) {\\n            finalGroups[i] = groups[i];\\n            finalVotes[i] = votes[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Distributes votes by computing the number of votes each active\\n     * group should receive.\\n     * @param celoAmount The amount of votes to distribute.\\n     * @param depositGroupToIgnore The group that will not be used for deposit.\\n     * @return finalGroups The groups that were chosen for distribution.\\n     * @return finalVotes The votes of chosen finalGroups.\\n     */\\n    function _generateDepositVoteDistribution(uint256 celoAmount, address depositGroupToIgnore)\\n        private\\n        returns (address[] memory finalGroups, uint256[] memory finalVotes)\\n    {\\n        if (activeGroups.getNumElements() == 0) {\\n            revert NoActiveGroups();\\n        }\\n\\n        uint256 maxGroupCount = Math.min(maxGroupsToDistributeTo, activeGroups.getNumElements());\\n\\n        address[] memory groups = new address[](maxGroupCount);\\n        uint256[] memory votes = new uint256[](maxGroupCount);\\n\\n        address votedGroup = activeGroups.getTail();\\n        uint256 groupsIndex;\\n\\n        while (groupsIndex < maxGroupCount && celoAmount != 0 && votedGroup != address(0)) {\\n            uint256 receivableVotes = IManager(manager).getReceivableVotesForGroup(votedGroup);\\n            if (votedGroup == depositGroupToIgnore || receivableVotes == 0) {\\n                (, , votedGroup) = activeGroups.get(votedGroup);\\n                continue;\\n            }\\n\\n            votes[groupsIndex] = Math.min(receivableVotes, celoAmount);\\n            groups[groupsIndex] = votedGroup;\\n            celoAmount -= votes[groupsIndex];\\n            updateGroupStCelo(votedGroup, IManager(manager).toStakedCelo(votes[groupsIndex]), true);\\n            trySort(votedGroup, stCeloInGroup[votedGroup], true);\\n\\n            if (sorted) {\\n                votedGroup = activeGroups.getTail();\\n            } else {\\n                (, , votedGroup) = activeGroups.get(votedGroup);\\n            }\\n            groupsIndex++;\\n        }\\n\\n        if (celoAmount != 0) {\\n            revert NotAbleToDistributeVotes();\\n        }\\n\\n        finalGroups = new address[](groupsIndex);\\n        finalVotes = new uint256[](groupsIndex);\\n\\n        for (uint256 i = 0; i < groupsIndex; i++) {\\n            finalGroups[i] = groups[i];\\n            finalVotes[i] = votes[i];\\n        }\\n    }\\n\\n    /**\\n     * Try to sort group in active groups based on new value.\\n     * @param group The group address.\\n     * @param newValue The new value of group.\\n     * @param valueIncreased Whether value increased/decreased compared to original value.\\n     */\\n    function trySort(\\n        address group,\\n        uint256 newValue,\\n        bool valueIncreased\\n    ) private {\\n        if (unsortedGroups.contains(group)) {\\n            return;\\n        }\\n\\n        (address lesserKey, address greaterKey) = valueIncreased\\n            ? activeGroups.getLesserAndGreaterOfAddressThatIncreasedValue(\\n                group,\\n                newValue,\\n                sortingLoopLimit\\n            )\\n            : activeGroups.getLesserAndGreaterOfAddressThatDecreasedValue(\\n                group,\\n                newValue,\\n                sortingLoopLimit\\n            );\\n        if (lesserKey != greaterKey || activeGroups.getNumElements() == 1) {\\n            activeGroups.update(group, newValue, lesserKey, greaterKey);\\n        } else {\\n            if (sorted) {\\n                sorted = false;\\n            }\\n            unsortedGroups.add(group);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2411a02b779301154d337fe00857574de79245ddf8d2c5a7966e7314b7f7bec7\",\"license\":\"LGPL-3.0-only\"},\"contracts/Managed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Used via inheritance to grant special access control to the Manager\\n * contract.\\n */\\nabstract contract Managed is Initializable, OwnableUpgradeable {\\n    address public manager;\\n\\n    /**\\n     * @notice Emitted when the manager is initially set or later modified.\\n     * @param manager The new managing account address.\\n     */\\n    event ManagerSet(address indexed manager);\\n\\n    /**\\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManager(address caller);\\n\\n    /**\\n     * @notice Used when a passed address is address(0).\\n     */\\n    error NullAddress();\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        if (manager != msg.sender) {\\n            revert CallerNotManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function setManager(address _manager) external onlyOwner {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract in an upgradable context.\\n     * @param _manager The initial managing address.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Managed_init(address _manager) internal onlyInitializing {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function _setManager(address _manager) internal {\\n        if (_manager == address(0)) {\\n            revert NullAddress();\\n        }\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xb378cf0f0b77e80291f24b4320f22d6c4213849bd1d2f854370c79837f1081d6\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UUPSOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\\n */\\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\\n    /**\\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\\n     * adds the onlyOwner modifer.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x5dbad350c6ae75b9d15c2080b1de6f02d8b7f32a71a6bcf775c9731820d115ec\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UsingRegistryUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccounts.sol\\\";\\nimport \\\"../interfaces/IElection.sol\\\";\\nimport \\\"../interfaces/IGoldToken.sol\\\";\\nimport \\\"../interfaces/ILockedGold.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IGovernance.sol\\\";\\nimport \\\"../interfaces/IValidators.sol\\\";\\n\\n/**\\n * @title A helper for getting Celo core contracts from the Registry.\\n */\\nabstract contract UsingRegistryUpgradeable is Initializable {\\n    /// @notice The canonical address of the Registry.\\n    address internal constant CANONICAL_REGISTRY = 0x000000000000000000000000000000000000ce10;\\n\\n    /// @notice The registry ID for the Accounts contract.\\n    bytes32 private constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n\\n    /// @notice The registry ID for the Election contract.\\n    bytes32 private constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n\\n    /// @notice The registry ID for the GoldToken contract.\\n    bytes32 private constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n\\n    /// @notice The registry ID for the LockedGold contract.\\n    bytes32 private constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n\\n    /// @notice The registry ID for the Governance contract.\\n    bytes32 private constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n\\n    /// @notice The registry ID for the Validator contract.\\n    bytes32 private constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n\\n    /// @notice The Registry.\\n    IRegistry public registry;\\n\\n    /**\\n     * @notice Initializes the UsingRegistryUpgradable contract in an upgradable scenario\\n     * @param _registry The address of the Registry. For convenience, if the zero address is\\n     * provided, the registry is set to the canonical Registry address, i.e. 0x0...ce10. This\\n     * parameter should only be a non-zero address when testing.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __UsingRegistry_init(address _registry) internal onlyInitializing {\\n        if (_registry == address(0)) {\\n            registry = IRegistry(CANONICAL_REGISTRY);\\n        } else {\\n            registry = IRegistry(_registry);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the Accounts contract from the Registry.\\n     * @return The Accounts contract from the Registry.\\n     */\\n    function getAccounts() internal view returns (IAccounts) {\\n        return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the Election contract from the Registry.\\n     * @return The Election contract from the Registry.\\n     */\\n    function getElection() internal view returns (IElection) {\\n        return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the GoldToken contract from the Registry.\\n     * @return The GoldToken contract from the Registry.\\n     */\\n    function getGoldToken() internal view returns (IGoldToken) {\\n        return IGoldToken(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the LockedGold contract from the Registry.\\n     * @return The LockedGold contract from the Registry.\\n     */\\n    function getLockedGold() internal view returns (ILockedGold) {\\n        return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the Governance contract from the Registry.\\n     * @return The Governance contract from the Registry.\\n     */\\n    function getGovernance() internal view returns (IGovernance) {\\n        return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the validators contract from the Registry.\\n     * @return The validators contract from the Registry.\\n     */\\n    function getValidators() internal view returns (IValidators) {\\n        return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n    }\\n}\\n\",\"keccak256\":\"0xabb9ce841ce13529276159c75e3e6a8d74d1bbd219a02de1eb11bb3aef61bed0\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/linkedlists/AddressSortedLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./SortedLinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by address.\\n */\\nlibrary AddressSortedLinkedList {\\n  using SortedLinkedList for SortedLinkedList.List;\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    SortedLinkedList.List storage list,\\n    address key,\\n    uint256 value,\\n    address lesserKey,\\n    address greaterKey\\n  ) public {\\n    list.insert(toBytes(key), value, toBytes(lesserKey), toBytes(greaterKey));\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(SortedLinkedList.List storage list, address key) public {\\n    list.remove(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    SortedLinkedList.List storage list,\\n    address key,\\n    uint256 value,\\n    address lesserKey,\\n    address greaterKey\\n  ) public {\\n    list.update(toBytes(key), value, toBytes(lesserKey), toBytes(greaterKey));\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(SortedLinkedList.List storage list, address key) public view returns (bool) {\\n    return list.contains(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(SortedLinkedList.List storage list, address key) public view returns (uint256) {\\n    return list.getValue(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   */\\n  function getElements(SortedLinkedList.List storage list)\\n    public\\n    view\\n    returns (address[] memory, uint256[] memory)\\n  {\\n    bytes32[] memory byteKeys = list.getKeys();\\n    address[] memory keys = new address[](byteKeys.length);\\n    uint256[] memory values = new uint256[](byteKeys.length);\\n    for (uint256 i = 0; i < byteKeys.length; i = i + 1) {\\n      keys[i] = toAddress(byteKeys[i]);\\n      values[i] = list.values[byteKeys[i]];\\n    }\\n    return (keys, values);\\n  }\\n\\n  /**\\n   * @notice Returns the minimum of `max` and the  number of elements in the list > threshold.\\n   * @param list A storage pointer to the underlying list.\\n   * @param threshold The number that the element must exceed to be included.\\n   * @param max The maximum number returned by this function.\\n   * @return The minimum of `max` and the  number of elements in the list > threshold.\\n   */\\n  function numElementsGreaterThan(\\n    SortedLinkedList.List storage list,\\n    uint256 threshold,\\n    uint256 max\\n  ) public view returns (uint256) {\\n    uint256 revisedMax = Math.min(max, list.list.numElements);\\n    bytes32 key = list.list.head;\\n    for (uint256 i = 0; i < revisedMax; i = i + 1) {\\n      if (list.getValue(key) < threshold) {\\n        return i;\\n      }\\n      key = list.list.elements[key].previousKey;\\n    }\\n    return revisedMax;\\n  }\\n\\n  /**\\n   * @notice Returns the N greatest elements of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the greatest elements.\\n   */\\n  function headN(SortedLinkedList.List storage list, uint256 n)\\n    public\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory byteKeys = list.headN(n);\\n    address[] memory keys = new address[](n);\\n    for (uint256 i = 0; i < n; i = i + 1) {\\n      keys[i] = toAddress(byteKeys[i]);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(SortedLinkedList.List storage list) public view returns (address[] memory) {\\n    return headN(list, list.list.numElements);\\n  }\\n\\n  /**\\n   * @notice Returns the number of elements in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The number of elements in the list.\\n   */\\n  function getNumElements(SortedLinkedList.List storage list) public view returns (uint256) {\\n    return list.list.numElements;\\n  }\\n\\n  /**\\n   * @notice Returns the key of the first element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The key of the first element in the list.\\n   */\\n  function getHead(SortedLinkedList.List storage list) public view returns (address) {\\n    return toAddress(list.list.head);\\n  }\\n\\n  /**\\n   * @notice Returns the key of the last element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The key of the last element in the list.\\n   */\\n  function getTail(SortedLinkedList.List storage list) public view returns (address) {\\n    return toAddress(list.list.tail);\\n  }\\n\\n  /**\\n   * @notice Gets lesser and greater for address that has increased it's value.\\n   * @param list A storage pointer to the underlying list.\\n   * @param group The original address.\\n   * @param newValue New value that has to be bigger or equal than the previous one.\\n   * @param loopLimit The max limit of loops that will be executed.\\n   */\\n  function getLesserAndGreaterOfAddressThatIncreasedValue(\\n    SortedLinkedList.List storage list,\\n    address group,\\n    uint256 newValue,\\n    uint256 loopLimit\\n  )\\n      public\\n      view\\n      returns (address previous, address next)\\n  {\\n      (, previous, next) = get(list, group);\\n\\n      while (next != address(0) && loopLimit != 0 && newValue > getValue(list, next)) {\\n          previous = next;\\n          (, , next) = get(list, previous);\\n          loopLimit--;\\n      }\\n\\n      if (loopLimit == 0) {\\n          return (address(0), address(0));\\n      }\\n  }\\n\\n   /**\\n   * @notice Gets lesser and greater for address that has decreased it's value.\\n   * @param list A storage pointer to the underlying list.\\n   * @param group The original address.\\n   * @param newValue New value that has to be smaller or equal than the previous one.\\n   * @param loopLimit The max limit of loops that will be executed.\\n   */\\n  function getLesserAndGreaterOfAddressThatDecreasedValue(\\n    SortedLinkedList.List storage list,\\n    address group,\\n    uint256 newValue,\\n    uint256 loopLimit\\n  )\\n      public\\n      view\\n      returns (address previous, address next)\\n  {\\n      (, previous, next) = get(list, group);\\n      while (previous != address(0) && loopLimit != 0 && newValue < getValue(list, previous)) {\\n          next = previous;\\n          (, previous, ) = get(list, next);\\n          loopLimit--;\\n      }\\n      if (loopLimit == 0) {\\n          return (address(0), address(0));\\n      }\\n  }\\n\\n  function toBytes(address a) public pure returns (bytes32) {\\n    return bytes32(uint256(uint160(a)) << 96);\\n  }\\n\\n  function toAddress(bytes32 b) public pure returns (address) {\\n    return address(uint160(uint256(b) >> 96));\\n  }\\n\\n  /**\\n   * @notice Returns Element based on key.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return exists Whether or not the key exists.\\n   * @return previousKey Previous key.\\n   * @return nextKey Next key.\\n   */\\n  function get(SortedLinkedList.List storage list, address key) \\n    internal view returns (bool exists, address previousKey, address nextKey) {\\n    LinkedList.Element memory element = list.get(toBytes(key));\\n    exists = element.exists;\\n    if (element.exists) {\\n      previousKey = toAddress(element.previousKey);\\n      nextKey = toAddress(element.nextKey);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x70c1aca89734488501fa38db50812b61f2dfeeb0570ce44cf7cbbdf23bd8c53f\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/linkedlists/LinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Maintains a doubly linked list keyed by bytes32.\\n * @dev Following the `next` pointers will lead you to the head, rather than the tail.\\n */\\nlibrary LinkedList {\\n\\n  struct Element {\\n    bytes32 previousKey;\\n    bytes32 nextKey;\\n    bool exists;\\n  }\\n\\n  struct List {\\n    bytes32 head;\\n    bytes32 tail;\\n    uint256 numElements;\\n    mapping(bytes32 => Element) elements;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param previousKey The key of the element that comes before the element to insert.\\n   * @param nextKey The key of the element that comes after the element to insert.\\n   */\\n  function insert(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(key != bytes32(0), \\\"Key must be defined\\\");\\n    require(!contains(list, key), \\\"Can't insert an existing element\\\");\\n    require(\\n      previousKey != key && nextKey != key,\\n      \\\"Key cannot be the same as previousKey or nextKey\\\"\\n    );\\n\\n    Element storage element = list.elements[key];\\n    element.exists = true;\\n\\n    if (list.numElements == 0) {\\n      list.tail = key;\\n      list.head = key;\\n    } else {\\n      require(\\n        previousKey != bytes32(0) || nextKey != bytes32(0),\\n        \\\"Either previousKey or nextKey must be defined\\\"\\n      );\\n\\n      element.previousKey = previousKey;\\n      element.nextKey = nextKey;\\n\\n      if (previousKey != bytes32(0)) {\\n        require(\\n          contains(list, previousKey),\\n          \\\"If previousKey is defined, it must exist in the list\\\"\\n        );\\n        Element storage previousElement = list.elements[previousKey];\\n        require(previousElement.nextKey == nextKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        previousElement.nextKey = key;\\n      } else {\\n        list.tail = key;\\n      }\\n\\n      if (nextKey != bytes32(0)) {\\n        require(contains(list, nextKey), \\\"If nextKey is defined, it must exist in the list\\\");\\n        Element storage nextElement = list.elements[nextKey];\\n        require(nextElement.previousKey == previousKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        nextElement.previousKey = key;\\n      } else {\\n        list.head = key;\\n      }\\n    }\\n\\n    list.numElements = list.numElements + 1;\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, bytes32(0), list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    Element storage element = list.elements[key];\\n    require(key != bytes32(0) && contains(list, key), \\\"key not in list\\\");\\n    if (element.previousKey != bytes32(0)) {\\n      Element storage previousElement = list.elements[element.previousKey];\\n      previousElement.nextKey = element.nextKey;\\n    } else {\\n      list.tail = element.nextKey;\\n    }\\n\\n    if (element.nextKey != bytes32(0)) {\\n      Element storage nextElement = list.elements[element.nextKey];\\n      nextElement.previousKey = element.previousKey;\\n    } else {\\n      list.head = element.previousKey;\\n    }\\n\\n    delete list.elements[key];\\n    list.numElements = list.numElements - 1;\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param previousKey The key of the element that comes before the updated element.\\n   * @param nextKey The key of the element that comes after the updated element.\\n   */\\n  function update(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(\\n      key != bytes32(0) && key != previousKey && key != nextKey && contains(list, key),\\n      \\\"key on in list\\\"\\n    );\\n    remove(list, key);\\n    insert(list, key, previousKey, nextKey);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.elements[key].exists;\\n  }\\n\\n  /**\\n   * @notice Returns Element based on key.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function get(List storage list, bytes32 key) internal view returns (Element memory) {\\n    return list.elements[key];\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the N elements at the head of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the N elements at the head of the list.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    require(n <= list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    bytes32 key = list.head;\\n    for (uint256 i = 0; i < n; i = i + 1) {\\n      keys[i] = key;\\n      key = list.elements[key].previousKey;\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return headN(list, list.numElements);\\n  }\\n}\\n\",\"keccak256\":\"0x32c8aa1d656220a07ca3be5cc3d2ff6670b764e9519968d81f54d047e5d86820\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/linkedlists/SortedLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n\\nimport \\\"./LinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by bytes32.\\n */\\nlibrary SortedLinkedList {\\n  using LinkedList for LinkedList.List;\\n\\n  struct List {\\n    LinkedList.List list;\\n    mapping(bytes32 => uint256) values;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    require(\\n      key != bytes32(0) && key != lesserKey && key != greaterKey && !contains(list, key),\\n      \\\"invalid key\\\"\\n    );\\n    require(\\n      (lesserKey != bytes32(0) || greaterKey != bytes32(0)) || list.list.numElements == 0,\\n      \\\"greater and lesser key zero\\\"\\n    );\\n    require(contains(list, lesserKey) || lesserKey == bytes32(0), \\\"invalid lesser key\\\");\\n    require(contains(list, greaterKey) || greaterKey == bytes32(0), \\\"invalid greater key\\\");\\n    (lesserKey, greaterKey) = getLesserAndGreater(list, value, lesserKey, greaterKey);\\n    list.list.insert(key, lesserKey, greaterKey);\\n    list.values[key] = value;\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    list.list.remove(key);\\n    list.values[key] = 0;\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    remove(list, key);\\n    insert(list, key, value, lesserKey, greaterKey);\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, 0, bytes32(0), list.list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes N elements from the head of the list and returns their keys.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to pop.\\n   * @return The keys of the popped elements.\\n   */\\n  function popN(List storage list, uint256 n) internal returns (bytes32[] memory) {\\n    require(n <= list.list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    for (uint256 i = 0; i < n; i = i + 1) {\\n      bytes32 key = list.list.head;\\n      keys[i] = key;\\n      remove(list, key);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.list.contains(key);\\n  }\\n\\n  /**\\n   * @notice Returns Element based on key.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function get(List storage list, bytes32 key) internal view returns (LinkedList.Element memory) {\\n    return list.list.get(key);\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(List storage list, bytes32 key) internal view returns (uint256) {\\n    return list.values[key];\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   */\\n  function getElements(List storage list)\\n    internal\\n    view\\n    returns (bytes32[] memory, uint256[] memory)\\n  {\\n    bytes32[] memory keys = getKeys(list);\\n    uint256[] memory values = new uint256[](keys.length);\\n    for (uint256 i = 0; i < keys.length; i = i + 1) {\\n      values[i] = list.values[keys[i]];\\n    }\\n    return (keys, values);\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return list.list.getKeys();\\n  }\\n\\n  /**\\n   * @notice Returns first N greatest elements of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the first n elements.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    return list.list.headN(n);\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the elements greaterKey than and less than the provided value.\\n   * @param list A storage pointer to the underlying list.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element which could be just left of the new value.\\n   * @param greaterKey The key of the element which could be just right of the new value.\\n   * @return The correct lesserKey keys.\\n   * @return The correct greaterKey keys.\\n   */\\n  function getLesserAndGreater(\\n    List storage list,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) private view returns (bytes32, bytes32) {\\n    // Check for one of the following conditions and fail if none are met:\\n    //   1. The value is less than the current lowest value\\n    //   2. The value is greater than the current greatest value\\n    //   3. The value is just greater than the value for `lesserKey`\\n    //   4. The value is just less than the value for `greaterKey`\\n    if (lesserKey == bytes32(0) && isValueBetween(list, value, lesserKey, list.list.tail)) {\\n      return (lesserKey, list.list.tail);\\n    } else if (\\n      greaterKey == bytes32(0) && isValueBetween(list, value, list.list.head, greaterKey)\\n    ) {\\n      return (list.list.head, greaterKey);\\n    } else if (\\n      lesserKey != bytes32(0) &&\\n      isValueBetween(list, value, lesserKey, list.list.elements[lesserKey].nextKey)\\n    ) {\\n      return (lesserKey, list.list.elements[lesserKey].nextKey);\\n    } else if (\\n      greaterKey != bytes32(0) &&\\n      isValueBetween(list, value, list.list.elements[greaterKey].previousKey, greaterKey)\\n    ) {\\n      return (list.list.elements[greaterKey].previousKey, greaterKey);\\n    } \\n\\n    require(false, \\\"get lesser and greater failure\\\");\\n    return (0, 0);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a given element is between two other elements.\\n   * @param list A storage pointer to the underlying list.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element whose value should be lesserKey.\\n   * @param greaterKey The key of the element whose value should be greaterKey.\\n   * @return True if the given element is between the two other elements.\\n   */\\n  function isValueBetween(List storage list, uint256 value, bytes32 lesserKey, bytes32 greaterKey)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool isLesser = lesserKey == bytes32(0) || list.values[lesserKey] <= value;\\n    bool isGreater = greaterKey == bytes32(0) || list.values[greaterKey] >= value;\\n    return isLesser && isGreater;\\n  }\\n}\\n\",\"keccak256\":\"0xfa2f1ff6b97589669809ca6f48bf6c2b019df4e1a0472842fe6c8ce925bbf669\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccount {\\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\\n\\n    function scheduleTransfer(\\n        address[] calldata fromGroups,\\n        uint256[] calldata fromVotes,\\n        address[] calldata toGroups,\\n        uint256[] calldata toVotess\\n    ) external;\\n\\n    function scheduleWithdrawals(\\n        address beneficiary,\\n        address[] calldata group,\\n        uint256[] calldata withdrawals\\n    ) external;\\n\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external;\\n\\n    function getTotalCelo() external view returns (uint256);\\n\\n    function getCeloForGroup(address) external view returns (uint256);\\n\\n    function scheduledVotesForGroup(address group) external view returns (uint256);\\n\\n    function scheduledRevokeForGroup(address group) external view returns (uint256);\\n\\n    function scheduledWithdrawalsForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x88cffcc9e6200c2ce1e6ecca97ddde0abde976268314bcd7da451d1fc104c44f\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccounts.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccounts {\\n    function isAccount(address) external view returns (bool);\\n\\n    function voteSignerToAccount(address) external view returns (address);\\n\\n    function validatorSignerToAccount(address) external view returns (address);\\n\\n    function attestationSignerToAccount(address) external view returns (address);\\n\\n    function signerToAccount(address) external view returns (address);\\n\\n    function getAttestationSigner(address) external view returns (address);\\n\\n    function getValidatorSigner(address) external view returns (address);\\n\\n    function getVoteSigner(address) external view returns (address);\\n\\n    function hasAuthorizedVoteSigner(address) external view returns (bool);\\n\\n    function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n\\n    function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n    function setAccountDataEncryptionKey(bytes calldata) external;\\n\\n    function setMetadataURL(string calldata) external;\\n\\n    function setName(string calldata) external;\\n\\n    function setWalletAddress(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function setAccount(\\n        string calldata,\\n        bytes calldata,\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function getDataEncryptionKey(address) external view returns (bytes memory);\\n\\n    function getWalletAddress(address) external view returns (address);\\n\\n    function getMetadataURL(address) external view returns (string memory);\\n\\n    function batchGetMetadataURL(address[] calldata)\\n        external\\n        view\\n        returns (uint256[] memory, bytes memory);\\n\\n    function getName(address) external view returns (string memory);\\n\\n    function authorizeVoteSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function authorizeValidatorSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function authorizeValidatorSignerWithPublicKey(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32,\\n        bytes calldata\\n    ) external;\\n\\n    function authorizeValidatorSignerWithKeys(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32,\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external;\\n\\n    function authorizeAttestationSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function createAccount() external returns (bool);\\n}\\n\",\"keccak256\":\"0x661b5c89e143c166a8667ea927d787939c27a59bd52e12c94d67d7377003e734\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IElection.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IElection {\\n    function vote(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function activate(address) external returns (bool);\\n\\n    function activateForAccount(address, address) external returns (bool);\\n\\n    function revokeActive(\\n        address,\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function revokeAllActive(\\n        address,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function revokePending(\\n        address,\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function markGroupIneligible(address) external;\\n\\n    function markGroupEligible(\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function forceDecrementVotes(\\n        address,\\n        uint256,\\n        address[] calldata,\\n        address[] calldata,\\n        uint256[] calldata\\n    ) external returns (uint256);\\n\\n    // only owner\\n    function setElectableValidators(uint256, uint256) external returns (bool);\\n\\n    function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n\\n    function setElectabilityThreshold(uint256) external returns (bool);\\n\\n    // only VM\\n    function distributeEpochRewards(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external;\\n\\n    function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n\\n    function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n    // view functions\\n    function electValidatorSigners() external view returns (address[] memory);\\n\\n    function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n\\n    function getElectableValidators() external view returns (uint256, uint256);\\n\\n    function getElectabilityThreshold() external view returns (uint256);\\n\\n    function getNumVotesReceivable(address) external view returns (uint256);\\n\\n    function getTotalVotes() external view returns (uint256);\\n\\n    function getActiveVotes() external view returns (uint256);\\n\\n    function getTotalVotesByAccount(address) external view returns (uint256);\\n\\n    function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getTotalVotesForGroup(address) external view returns (uint256);\\n\\n    function getActiveVotesForGroup(address) external view returns (uint256);\\n\\n    function getPendingVotesForGroup(address) external view returns (uint256);\\n\\n    function getGroupEligibility(address) external view returns (bool);\\n\\n    function getGroupEpochRewards(\\n        address,\\n        uint256,\\n        uint256[] calldata\\n    ) external view returns (uint256);\\n\\n    function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n\\n    function getEligibleValidatorGroups() external view returns (address[] memory);\\n\\n    function getTotalVotesForEligibleValidatorGroups()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    function getCurrentValidatorSigners() external view returns (address[] memory);\\n\\n    function canReceiveVotes(address, uint256) external view returns (bool);\\n\\n    function hasActivatablePendingVotes(address, address) external view returns (bool);\\n\\n    function maxNumGroupsVotedFor() external view returns (uint256);\\n\\n    function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n\\n    function numberValidatorsInCurrentSet() external view returns (uint256);\\n\\n    function getEpochNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdb5870e4b37333b3ba2932b6adc14b86404d3f9e785061f85517c5558f6f217f\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGoldToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGoldToken {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferWithComment(\\n        address to,\\n        uint256 value,\\n        string calldata comment\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\\n\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x230bde369f53b4c36033c7b5465637d706873bf684f732afa7e083636d7c9d68\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGovernance {\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external returns (bool);\\n\\n    function getProposal(uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            string memory\\n        );\\n\\n    function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x21958f1d6595964dd706b5dc17455e59d7f1fc21a8f5c76b47b528e17f7f7d96\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGroupHealth.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGroupHealth {\\n    function isGroupValid(address group) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb38a5b01fae32670a6727bef4d74f88b19e3d6b6dd2bd9e5c9142b2c0d11a400\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ILockedGold.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface ILockedGold {\\n    function unlockingPeriod() external view returns (uint256);\\n\\n    function incrementNonvotingAccountBalance(address, uint256) external;\\n\\n    function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n    function getAccountTotalLockedGold(address) external view returns (uint256);\\n\\n    function getTotalLockedGold() external view returns (uint256);\\n\\n    function getPendingWithdrawal(address, uint256) external view returns (uint256, uint256);\\n\\n    function getSlashingWhitelist() external view returns (bytes32[] memory);\\n\\n    function getPendingWithdrawals(address)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getTotalPendingWithdrawals(address) external view returns (uint256);\\n\\n    function lock() external payable;\\n\\n    function unlock(uint256) external;\\n\\n    function relock(uint256, uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function slash(\\n        address account,\\n        uint256 penalty,\\n        address reporter,\\n        uint256 reward,\\n        address[] calldata lessers,\\n        address[] calldata greaters,\\n        uint256[] calldata indices\\n    ) external;\\n\\n    function isSlasher(address) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x62bdefa4681c4cf5e197ca9c01d036e1569ea72da6b659f89af58b945a298866\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IManager {\\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\\n        external\\n        returns (uint256);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function transferBetweenStrategies(\\n        address fromStrategy,\\n        address toStrategy,\\n        uint256 stCeloAmount\\n    ) external;\\n\\n    function scheduleTransferWithinStrategy(\\n        address[] calldata fromGroups,\\n        address[] calldata toGroups,\\n        uint256[] calldata fromVotes,\\n        uint256[] calldata toVotes\\n    ) external;\\n\\n    function toCelo(uint256 stCeloAmount) external view returns (uint256);\\n\\n    function toStakedCelo(uint256 celoAmount) external view returns (uint256);\\n\\n    function getReceivableVotesForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6f2ac34aed1a1cf2c2a179091715db28b4bb280205a0637b6e583702cf77c5d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IRegistry {\\n    function setAddressFor(string calldata, address) external;\\n\\n    function getAddressForOrDie(bytes32) external view returns (address);\\n\\n    function getAddressFor(bytes32) external view returns (address);\\n\\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n\\n    function getAddressForString(string calldata identifier) external view returns (address);\\n\\n    function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x15c870de545b84dea2aa846e91f15ab50f6e5090cec02bbf3b7cc085d23fc2eb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISpecificGroupStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface ISpecificGroupStrategy {\\n    function calculateAndUpdateForWithdrawal(\\n        address strategy,\\n        uint256 celoWithdrawalAmount,\\n        uint256 stCeloWithdrawalAmount\\n    ) external returns (address[] memory groups, uint256[] memory votes);\\n\\n    function calculateAndUpdateForWithdrawalTransfer(\\n        address strategy,\\n        uint256 celoWithdrawalAmount,\\n        uint256 stCeloWithdrawalAmount\\n    ) external returns (address[] memory groups, uint256[] memory votes);\\n\\n    function blockStrategy(address group) external returns (uint256);\\n\\n    function generateGroupVotesToDistributeTo(\\n        address strategy,\\n        uint256 votes,\\n        uint256 stCeloAmount\\n    ) external returns (address[] memory finalGroups, uint256[] memory finalVotes);\\n\\n    function isStrategy(address strategy) external view returns (bool);\\n\\n    function isBlockedStrategy(address strategy) external view returns (bool);\\n\\n    function getStCeloInStrategy(address strategy)\\n        external\\n        view\\n        returns (uint256 total, uint256 overflow);\\n\\n    function totalStCeloLocked() external view returns (uint256);\\n\\n    function totalStCeloOverflow() external view returns (uint256);\\n\\n    function stCeloInStrategy(address strategy) external view returns (uint256);\\n\\n    function getNumberOfStrategies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1db70b186a19f80d860dd54eb26fae8e61aa2f946e8d6f53df2adcded6067ca9\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IValidators.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.11;\\n\\ninterface IValidators {\\n    function registerValidator(\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function deregisterValidator(uint256) external returns (bool);\\n\\n    function affiliate(address) external returns (bool);\\n\\n    function deaffiliate() external returns (bool);\\n\\n    function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n\\n    function registerValidatorGroup(uint256) external returns (bool);\\n\\n    function deregisterValidatorGroup(uint256) external returns (bool);\\n\\n    function addMember(address) external returns (bool);\\n\\n    function addFirstMember(\\n        address,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function removeMember(address) external returns (bool);\\n\\n    function reorderMember(\\n        address,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function updateCommission() external;\\n\\n    function setNextCommissionUpdate(uint256) external;\\n\\n    function resetSlashingMultiplier() external;\\n\\n    // only owner\\n    function setCommissionUpdateDelay(uint256) external;\\n\\n    function setMaxGroupSize(uint256) external returns (bool);\\n\\n    function setMembershipHistoryLength(uint256) external returns (bool);\\n\\n    function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n\\n    function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n\\n    function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n\\n    function setSlashingMultiplierResetPeriod(uint256) external;\\n\\n    // view functions\\n    function getMaxGroupSize() external view returns (uint256);\\n\\n    function getCommissionUpdateDelay() external view returns (uint256);\\n\\n    function getValidatorScoreParameters() external view returns (uint256, uint256);\\n\\n    function getMembershipHistory(address)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            address[] memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function calculateEpochScore(uint256) external view returns (uint256);\\n\\n    function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n\\n    function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n\\n    function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n\\n    function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n\\n    function getValidator(address account)\\n        external\\n        view\\n        returns (\\n            bytes memory,\\n            bytes memory,\\n            address,\\n            uint256,\\n            address\\n        );\\n\\n    function getValidatorGroup(address)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getGroupNumMembers(address) external view returns (uint256);\\n\\n    function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n\\n    function getGroupsNumMembers(address[] calldata accounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getNumRegisteredValidators() external view returns (uint256);\\n\\n    function groupMembershipInEpoch(\\n        address,\\n        uint256,\\n        uint256\\n    ) external view returns (address);\\n\\n    // only registered contract\\n    function updateEcdsaPublicKey(\\n        address,\\n        address,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function updatePublicKeys(\\n        address,\\n        address,\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n\\n    function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n\\n    function getRegisteredValidators() external view returns (address[] memory);\\n\\n    function getRegisteredValidatorSigners() external view returns (address[] memory);\\n\\n    function getRegisteredValidatorGroups() external view returns (address[] memory);\\n\\n    function isValidatorGroup(address) external view returns (bool);\\n\\n    function isValidator(address) external view returns (bool);\\n\\n    function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n\\n    function getMembershipInLastEpoch(address) external view returns (address);\\n\\n    function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n\\n    // only VM\\n    function updateValidatorScoreFromSigner(address, uint256) external;\\n\\n    function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n    // only slasher\\n    function forceDeaffiliateIfValidator(address) external;\\n\\n    function halveSlashingMultiplier(address) external;\\n}\\n\",\"keccak256\":\"0x8aa4b70dab85380f94c0d7d2538268988d7153060660e48afece5a9c2f92fa6e\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c8063885640db1161010d578063c0c53b8b116100a0578063d0ebdbe71161006f578063d0ebdbe71461071e578063d2a2ce5d14610747578063dcdab02a14610772578063eccacf7f1461079b578063f2fde38b146107c6576101f9565b8063c0c53b8b14610673578063c1fa411a1461069c578063c5728c83146106c7578063cf009f7a146106f3576101f9565b8063a3f16ef1116100dc578063a3f16ef1146105b8578063afc97578146105e3578063b52d326c1461060c578063be982c3114610635576101f9565b8063885640db146104fe5780638da5cb5b1461052757806393739a93146105525780639f8a13d71461057b576101f9565b80634fc517eb116101905780636fe958d81161015f5780636fe958d81461042a578063715018a614610453578063724e61d01461046a5780637b1039991461049657806385a92cb7146104c1576101f9565b80634fc517eb1461037d5780635145b0ad146103a857806354255be0146103d15780635dab2420146103ff576101f9565b80632de2c5ac116101cc5780632de2c5ac146102e25780633659cfe61461030d578063481c6a75146103365780634f1ef28614610361576101f9565b80630c29aab2146101fe5780630f8f0fcc1461022957806320e92e59146102665780632863f68c146102a4575b600080fd5b34801561020a57600080fd5b506102136107ef565b6040516102209190614804565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b919061485f565b6107f5565b60405161025d91906148cd565b60405180910390f35b34801561027257600080fd5b5061028d6004803603810190610288919061494c565b610812565b60405161029b929190614b1b565b60405180910390f35b3480156102b057600080fd5b506102cb60048036038101906102c69190614b52565b610931565b6040516102d9929190614b7f565b60405180910390f35b3480156102ee57600080fd5b506102f7610958565b6040516103049190614bb7565b60405180910390f35b34801561031957600080fd5b50610334600480360381019061032f9190614b52565b61096b565b005b34801561034257600080fd5b5061034b610af4565b60405161035891906148cd565b60405180910390f35b61037b60048036038101906103769190614d18565b610b1a565b005b34801561038957600080fd5b50610392610c57565b60405161039f9190614804565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca9190614d74565b610c5d565b005b3480156103dd57600080fd5b506103e6610de6565b6040516103f69493929190614dc7565b60405180910390f35b34801561040b57600080fd5b50610414610e00565b6040516104219190614e6b565b60405180910390f35b34801561043657600080fd5b50610451600480360381019061044c9190614e86565b610e26565b005b34801561045f57600080fd5b5061046861112d565b005b34801561047657600080fd5b5061047f6111b5565b60405161048d929190614b7f565b60405180910390f35b3480156104a257600080fd5b506104ab611255565b6040516104b89190614ee7565b60405180910390f35b3480156104cd57600080fd5b506104e860048036038101906104e39190614b52565b61127b565b6040516104f59190614804565b60405180910390f35b34801561050a57600080fd5b5061052560048036038101906105209190614f02565b611293565b005b34801561053357600080fd5b5061053c611329565b60405161054991906148cd565b60405180910390f35b34801561055e57600080fd5b5061057960048036038101906105749190614b52565b611353565b005b34801561058757600080fd5b506105a2600480360381019061059d9190614b52565b6113db565b6040516105af9190614bb7565b60405180910390f35b3480156105c457600080fd5b506105cd611461565b6040516105da9190614f76565b60405180910390f35b3480156105ef57600080fd5b5061060a60048036038101906106059190614d74565b611487565b005b34801561061857600080fd5b50610633600480360381019061062e9190614d74565b611964565b005b34801561064157600080fd5b5061065c60048036038101906106579190614b52565b611bf8565b60405161066a929190614f91565b60405180910390f35b34801561067f57600080fd5b5061069a60048036038101906106959190614d74565b611db3565b005b3480156106a857600080fd5b506106b1611f2e565b6040516106be9190614804565b60405180910390f35b3480156106d357600080fd5b506106dc611fb0565b6040516106ea929190614b7f565b60405180910390f35b3480156106ff57600080fd5b50610708612051565b6040516107159190614fdb565b60405180910390f35b34801561072a57600080fd5b5061074560048036038101906107409190614b52565b612077565b005b34801561075357600080fd5b5061075c6120ff565b6040516107699190614804565b60405180910390f35b34801561077e57600080fd5b5061079960048036038101906107949190614b52565b612110565b005b3480156107a757600080fd5b506107b06121fa565b6040516107bd9190614804565b60405180910390f35b3480156107d257600080fd5b506107ed60048036038101906107e89190614b52565b612200565b005b60725481565b600061080b8260756122f890919063ffffffff16565b9050919050565b6060803373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156108c157503373ffffffffffffffffffffffffffffffffffffffff16606e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561090357336040517f79eaeb2b0000000000000000000000000000000000000000000000000000000081526004016108fa91906148cd565b60405180910390fd5b84610917576109128484612312565b610921565b61092084612ad1565b5b8092508193505050935093915050565b60008061094883606761330890919063ffffffff16565b9091508092508193505050915091565b607460009054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190615079565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a39613363565b73ffffffffffffffffffffffffffffffffffffffff1614610a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a869061510b565b60405180910390fd5b610a98816133ba565b610af181600067ffffffffffffffff811115610ab757610ab6614bed565b5b6040519080825280601f01601f191660200182016040528015610ae95781602001600182028036833780820191505090505b506000613439565b50565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba090615079565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610be8613363565b73ffffffffffffffffffffffffffffffffffffffff1614610c3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c359061510b565b60405180910390fd5b610c47826133ba565b610c5382826001613439565b5050565b60705481565b610c7183607561360a90919063ffffffff16565b610ca7576040517f0a1f2c0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606773__$18085dca7c6a2f09a309a1b54006aa0b25$__63cab455ae909185606f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486866040518663ffffffff1660e01b8152600401610d28959493929190615150565b60006040518083038186803b158015610d4057600080fd5b505af4158015610d54573d6000803e3d6000fd5b50505050610d6c83607561363a90919063ffffffff16565b506000610d79607561366a565b1415610de1576001607460006101000a81548160ff0219169083151502179055507fb930683f0749189780c4016ec37d019eb0cbbf6550ce7374fac5cfbae93909a7607460009054906101000a900460ff16604051610dd89190614bb7565b60405180910390a15b505050565b600080600080600180600080935093509350935090919293565b606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6302f130289091846040518363ffffffff1660e01b8152600401610e629291906151a3565b602060405180830381865af4158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea391906151e1565b610ee457816040517fdc1b434d000000000000000000000000000000000000000000000000000000008152600401610edb91906148cd565b60405180910390fd5b606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6302f130289091836040518363ffffffff1660e01b8152600401610f209291906151a3565b602060405180830381865af4158015610f3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6191906151e1565b610fa257806040517f5a081584000000000000000000000000000000000000000000000000000000008152600401610f9991906148cd565b60405180910390fd5b600080610fae84611bf8565b91509150818111610ffa578381836040517f8b0123bf000000000000000000000000000000000000000000000000000000008152600401610ff19392919061520e565b60405180910390fd5b60008061100685611bf8565b91509150818110611052578481836040517f845286390000000000000000000000000000000000000000000000000000000081526004016110499392919061520e565b60405180910390fd5b600061107485856110639190615274565b838561106f9190615274565b61367f565b905061108287826000613698565b61108e86826001613698565b6110d987606f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000613787565b61112486606f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546001613787565b50505050505050565b611135613a3b565b73ffffffffffffffffffffffffffffffffffffffff16611153611329565b73ffffffffffffffffffffffffffffffffffffffff16146111a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a0906152f4565b60405180910390fd5b6111b36000613a43565b565b600080606773__$18085dca7c6a2f09a309a1b54006aa0b25$__630c8f298790916040518263ffffffff1660e01b81526004016111f29190615314565b602060405180830381865af415801561120f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112339190615344565b915061124982606761330890919063ffffffff16565b90915050809150509091565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606f6020528060005260406000206000915090505481565b61129b613a3b565b73ffffffffffffffffffffffffffffffffffffffff166112b9611329565b73ffffffffffffffffffffffffffffffffffffffff161461130f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611306906152f4565b60405180910390fd5b826070819055508160718190555080607381905550505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61135b613a3b565b73ffffffffffffffffffffffffffffffffffffffff16611379611329565b73ffffffffffffffffffffffffffffffffffffffff16146113cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c6906152f4565b60405180910390fd5b6113d881613b09565b50565b6000606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6302f130289091846040518363ffffffff1660e01b81526004016114199291906151a3565b602060405180830381865af4158015611436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145a91906151e1565b9050919050565b606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61148f613a3b565b73ffffffffffffffffffffffffffffffffffffffff166114ad611329565b73ffffffffffffffffffffffffffffffffffffffff1614611503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fa906152f4565b60405180910390fd5b606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425846040518263ffffffff1660e01b815260040161155e91906148cd565b602060405180830381865afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f91906151e1565b6115e057826040517f10a7bc6b0000000000000000000000000000000000000000000000000000000081526004016115d791906148cd565b60405180910390fd5b606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6302f130289091856040518363ffffffff1660e01b815260040161161c9291906151a3565b602060405180830381865af4158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d91906151e1565b1561169f57826040517fbd133eee00000000000000000000000000000000000000000000000000000000815260040161169691906148cd565b60405180910390fd5b600080606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acd201d0886040518263ffffffff1660e01b815260040161173b91906148cd565b602060405180830381865afa158015611758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177c9190615386565b6040518263ffffffff1660e01b81526004016117989190614804565b602060405180830381865afa1580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d99190615386565b9050600081146118a8576000606e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304744470876040518263ffffffff1660e01b815260040161184091906148cd565b602060405180830381865afa15801561185d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118819190615386565b905061188d828261367f565b826118989190615274565b92506118a686846001613698565b505b606773__$18085dca7c6a2f09a309a1b54006aa0b25$__632dedbbf09091878588886040518663ffffffff1660e01b81526004016118ea959493929190615150565b60006040518083038186803b15801561190257600080fd5b505af4158015611916573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f0503b4748a47435f2432d46ef300e0e2dc47baa0e5f04bb3bd8a355ee1e1dbe660405160405180910390a25050505050565b61196c613a3b565b73ffffffffffffffffffffffffffffffffffffffff1661198a611329565b73ffffffffffffffffffffffffffffffffffffffff16146119e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d7906152f4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a47906153ff565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab79061546b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b27906154d7565b60405180910390fd5b81606c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000806000606773__$18085dca7c6a2f09a309a1b54006aa0b25$__630c8f298790916040518263ffffffff1660e01b8152600401611c379190615314565b602060405180830381865af4158015611c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c789190615344565b90506000606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b8152600401611cb69190615314565b602060405180830381865af4158015611cd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf79190615386565b905080607254611d079190615526565b93508173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611d6a5760008185611d4b9190615557565b607254611d589190615274565b90508085611d6691906155b1565b9450505b606f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505050915091565b600060019054906101000a900460ff16611ddb5760008054906101000a900460ff1615611de4565b611de3613fd4565b5b611e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1a90615679565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e73576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611e7c83613a43565b611e8584613fe5565b611e8e826140f6565b60086070819055506008607181905550600a6073819055506001607460006101000a81548160ff0219169083151502179055507fb930683f0749189780c4016ec37d019eb0cbbf6550ce7374fac5cfbae93909a7607460009054906101000a900460ff16604051611eff9190614bb7565b60405180910390a18015611f285760008060016101000a81548160ff0219169083151502179055505b50505050565b6000606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b8152600401611f6a9190615314565b602060405180830381865af4158015611f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fab9190615386565b905090565b600080606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6349923bff90916040518263ffffffff1660e01b8152600401611fed9190615314565b602060405180830381865af415801561200a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202e9190615344565b915061204482606761330890919063ffffffff16565b9091509050809150509091565b606e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61207f613a3b565b73ffffffffffffffffffffffffffffffffffffffff1661209d611329565b73ffffffffffffffffffffffffffffffffffffffff16146120f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ea906152f4565b60405180910390fd5b6120fc81614151565b50565b600061210b607561366a565b905090565b606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b815260040161216b91906148cd565b602060405180830381865afa158015612188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ac91906151e1565b156121ee57806040517fe3bd013b0000000000000000000000000000000000000000000000000000000081526004016121e591906148cd565b60405180910390fd5b6121f781613b09565b50565b60715481565b612208613a3b565b73ffffffffffffffffffffffffffffffffffffffff16612226611329565b73ffffffffffffffffffffffffffffffffffffffff161461227c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612273906152f4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e39061570b565b60405180910390fd5b6122f581613a43565b50565b6000612307836000018361423f565b60001c905092915050565b6060806000606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b81526004016123519190615314565b602060405180830381865af415801561236e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123929190615386565b14156123ca576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612452607054606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b815260040161240c9190615314565b602060405180830381865af4158015612429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244d9190615386565b61367f565b905060008167ffffffffffffffff8111156124705761246f614bed565b5b60405190808252806020026020018201604052801561249e5781602001602082028036833780820191505090505b50905060008267ffffffffffffffff8111156124bd576124bc614bed565b5b6040519080825280602002602001820160405280156124eb5781602001602082028036833780820191505090505b5090506000606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6349923bff90916040518263ffffffff1660e01b815260040161252a9190615314565b602060405180830381865af4158015612547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256b9190615344565b905060005b8481108015612580575060008914155b80156125b95750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15612934576000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058846040518263ffffffff1660e01b815260040161261b91906148cd565b602060405180830381865afa158015612638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265c9190615386565b90508873ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806126985750600081145b156126c0576126b183606761330890919063ffffffff16565b90915090508093505050612570565b6126ca818b61367f565b8483815181106126dd576126dc61572b565b5b602002602001018181525050828583815181106126fd576126fc61572b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083828151811061274a5761274961572b565b5b60200260200101518a61275d9190615274565b995061282083606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e8786815181106127b4576127b361572b565b5b60200260200101516040518263ffffffff1660e01b81526004016127d89190614804565b602060405180830381865afa1580156127f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128199190615386565b6001613698565b61286b83606f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546001613787565b607460009054906101000a900460ff161561290257606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6349923bff90916040518263ffffffff1660e01b81526004016128ba9190615314565b602060405180830381865af41580156128d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fb9190615344565b9250612920565b61291683606761330890919063ffffffff16565b9091509050809350505b818061292b9061575a565b92505050612570565b6000891461296e576040517f2e6c1bf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8067ffffffffffffffff81111561298857612987614bed565b5b6040519080825280602002602001820160405280156129b65781602001602082028036833780820191505090505b5096508067ffffffffffffffff8111156129d3576129d2614bed565b5b604051908082528060200260200182016040528015612a015781602001602082028036833780820191505090505b50955060005b81811015612ac457848181518110612a2257612a2161572b565b5b6020026020010151888281518110612a3d57612a3c61572b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838181518110612a8a57612a8961572b565b5b6020026020010151878281518110612aa557612aa461572b565b5b6020026020010181815250508080612abc9061575a565b915050612a07565b5050505050509250929050565b6060806000606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b8152600401612b109190615314565b602060405180830381865af4158015612b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b519190615386565b1415612b89576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612c11607154606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b8152600401612bcb9190615314565b602060405180830381865af4158015612be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0c9190615386565b61367f565b905060008167ffffffffffffffff811115612c2f57612c2e614bed565b5b604051908082528060200260200182016040528015612c5d5781602001602082028036833780820191505090505b50905060008267ffffffffffffffff811115612c7c57612c7b614bed565b5b604051908082528060200260200182016040528015612caa5781602001602082028036833780820191505090505b5090506000606773__$18085dca7c6a2f09a309a1b54006aa0b25$__630c8f298790916040518263ffffffff1660e01b8152600401612ce99190615314565b602060405180830381865af4158015612d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2a9190615344565b905060005b8481108015612d3f575060008814155b8015612d785750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561316d57612f05612eff606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acd201d0856040518263ffffffff1660e01b8152600401612dde91906148cd565b602060405180830381865afa158015612dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1f9190615386565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f606f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b8152600401612eb99190614804565b602060405180830381865afa158015612ed6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efa9190615386565b61367f565b8961367f565b838281518110612f1857612f1761572b565b5b60200260200101818152505081848281518110612f3857612f3761572b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828181518110612f8557612f8461572b565b5b602002602001015188612f989190615274565b975061305b82606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e868581518110612fef57612fee61572b565b5b60200260200101516040518263ffffffff1660e01b81526004016130139190614804565b602060405180830381865afa158015613030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130549190615386565b6000613698565b6130a682606f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000613787565b607460009054906101000a900460ff161561313d57606773__$18085dca7c6a2f09a309a1b54006aa0b25$__630c8f298790916040518263ffffffff1660e01b81526004016130f59190615314565b602060405180830381865af4158015613112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131369190615344565b915061315a565b61315182606761330890919063ffffffff16565b90915050809250505b80806131659061575a565b915050612d2f565b600088146131a7576040517f2e6c1bf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8067ffffffffffffffff8111156131c1576131c0614bed565b5b6040519080825280602002602001820160405280156131ef5781602001602082028036833780820191505090505b5096508067ffffffffffffffff81111561320c5761320b614bed565b5b60405190808252806020026020018201604052801561323a5781602001602082028036833780820191505090505b50955060005b818110156132fd5784818151811061325b5761325a61572b565b5b60200260200101518882815181106132765761327561572b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381815181106132c3576132c261572b565b5b60200260200101518782815181106132de576132dd61572b565b5b60200260200101818152505080806132f59061575a565b915050613240565b505050505050915091565b60008060008061332961331a8661426a565b8761429190919063ffffffff16565b90508060400151935080604001511561335b5761334981600001516142b7565b925061335881602001516142b7565b91505b509250925092565b60006133917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6142c8565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6133c2613a3b565b73ffffffffffffffffffffffffffffffffffffffff166133e0611329565b73ffffffffffffffffffffffffffffffffffffffff1614613436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161342d906152f4565b60405180910390fd5b50565b6000613443613363565b905061344e846142d2565b60008351118061345b5750815b1561346c5761346a848461438b565b505b600061349a7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6143b8565b90508060000160009054906101000a900460ff166136035760018160000160006101000a81548160ff02191690831515021790555061356685836040516024016134e491906148cd565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061438b565b5060008160000160006101000a81548160ff02191690831515021790555061358c613363565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146135f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135f090615815565b60405180910390fd5b613602856143c2565b5b5050505050565b6000613632836000018373ffffffffffffffffffffffffffffffffffffffff1660001b614411565b905092915050565b6000613662836000018373ffffffffffffffffffffffffffffffffffffffff1660001b614434565b905092915050565b600061367882600001614548565b9050919050565b600081831061368e5781613690565b825b905092915050565b80156137125781606f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546136ed91906155b1565b92505081905550816072600082825461370691906155b1565b92505081905550613782565b81606f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546137619190615274565b92505081905550816072600082825461377a9190615274565b925050819055505b505050565b61379b83607561360a90919063ffffffff16565b156137a557613a36565b6000808261383457606773__$18085dca7c6a2f09a309a1b54006aa0b25$__63a4aadfcc909187876073546040518563ffffffff1660e01b81526004016137ef9493929190615835565b6040805180830381865af415801561380b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061382f919061587a565b6138b7565b606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6399f68a39909187876073546040518563ffffffff1660e01b81526004016138769493929190615835565b6040805180830381865af4158015613892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b6919061587a565b5b915091508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158061397057506001606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b815260040161392d9190615314565b602060405180830381865af415801561394a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396e9190615386565b145b156139ec57606773__$18085dca7c6a2f09a309a1b54006aa0b25$__63cab455ae9091878786866040518663ffffffff1660e01b81526004016139b7959493929190615150565b60006040518083038186803b1580156139cf57600080fd5b505af41580156139e3573d6000803e3d6000fd5b50505050613a33565b607460009054906101000a900460ff1615613a1d576000607460006101000a81548160ff0219169083151502179055505b613a3185607561455990919063ffffffff16565b505b50505b505050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606773__$18085dca7c6a2f09a309a1b54006aa0b25$__6302f130289091836040518363ffffffff1660e01b8152600401613b459291906151a3565b602060405180830381865af4158015613b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b8691906151e1565b613bc757806040517f1adbb153000000000000000000000000000000000000000000000000000000008152600401613bbe91906148cd565b60405180910390fd5b606773__$18085dca7c6a2f09a309a1b54006aa0b25$__63281359299091836040518363ffffffff1660e01b8152600401613c039291906151a3565b60006040518083038186803b158015613c1b57600080fd5b505af4158015613c2f573d6000803e3d6000fd5b50505050613c4781607561363a90919063ffffffff16565b506000606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115613f8d57613ca182826000613698565b6000600167ffffffffffffffff811115613cbe57613cbd614bed565b5b604051908082528060200260200182016040528015613cec5781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff811115613d0c57613d0b614bed565b5b604051908082528060200260200182016040528015613d3a5781602001602082028036833780820191505090505b5090508382600081518110613d5257613d5161572b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f846040518263ffffffff1660e01b8152600401613de79190614804565b602060405180830381865afa158015613e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e289190615386565b81600081518110613e3c57613e3b61572b565b5b602002602001018181525050600080613ef1606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f876040518263ffffffff1660e01b8152600401613ea99190614804565b602060405180830381865afa158015613ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eea9190615386565b6000612312565b91509150606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c4d4e40858486856040518563ffffffff1660e01b8152600401613f5694939291906158ba565b600060405180830381600087803b158015613f7057600080fd5b505af1158015613f84573d6000803e3d6000fd5b50505050505050505b8173ffffffffffffffffffffffffffffffffffffffff167fa78a88a551e130ce9732be17784bdff12f72ab4a2c833fb2dcb3ef0818956b0360405160405180910390a25050565b6000613fdf30614589565b15905090565b600060019054906101000a900460ff16614034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161402b9061598d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156140b15761ce10606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506140f3565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600060019054906101000a900460ff16614145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161413c9061598d565b60405180910390fd5b61414e81614151565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156141b8576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b60008260000182815481106142575761425661572b565b5b9060005260206000200154905092915050565b600060608273ffffffffffffffffffffffffffffffffffffffff16901b60001b9050919050565b6142996147c2565b6142af82846000016145ac90919063ffffffff16565b905092915050565b600060608260001c901c9050919050565b6000819050919050565b6142db8161460b565b61431a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161431190615a1f565b60405180910390fd5b806143477f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6142c8565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606143b08383604051806060016040528060278152602001615bf86027913961461e565b905092915050565b6000819050919050565b6143cb816142d2565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461453c5760006001826144669190615274565b905060006001866000018054905061447e9190615274565b90508181146144ed57600086600001828154811061449f5761449e61572b565b5b90600052602060002001549050808760000184815481106144c3576144c261572b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061450157614500615a3f565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050614542565b60009150505b92915050565b600081600001805490509050919050565b6000614581836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6146eb565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6145b46147c2565b82600301600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905092915050565b600080823b905060008111915050919050565b60606146298461460b565b614668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161465f90615ae0565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516146909190615b7a565b600060405180830381855af49150503d80600081146146cb576040519150601f19603f3d011682016040523d82523d6000602084013e6146d0565b606091505b50915091506146e082828661475b565b925050509392505050565b60006146f78383614411565b614750578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050614755565b600090505b92915050565b6060831561476b578290506147bb565b60008351111561477e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016147b29190615bd5565b60405180910390fd5b9392505050565b604051806060016040528060008019168152602001600080191681526020016000151581525090565b6000819050919050565b6147fe816147eb565b82525050565b600060208201905061481960008301846147f5565b92915050565b6000604051905090565b600080fd5b600080fd5b61483c816147eb565b811461484757600080fd5b50565b60008135905061485981614833565b92915050565b60006020828403121561487557614874614829565b5b60006148838482850161484a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006148b78261488c565b9050919050565b6148c7816148ac565b82525050565b60006020820190506148e260008301846148be565b92915050565b60008115159050919050565b6148fd816148e8565b811461490857600080fd5b50565b60008135905061491a816148f4565b92915050565b614929816148ac565b811461493457600080fd5b50565b60008135905061494681614920565b92915050565b60008060006060848603121561496557614964614829565b5b60006149738682870161490b565b93505060206149848682870161484a565b925050604061499586828701614937565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6149d4816148ac565b82525050565b60006149e683836149cb565b60208301905092915050565b6000602082019050919050565b6000614a0a8261499f565b614a1481856149aa565b9350614a1f836149bb565b8060005b83811015614a50578151614a3788826149da565b9750614a42836149f2565b925050600181019050614a23565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614a92816147eb565b82525050565b6000614aa48383614a89565b60208301905092915050565b6000602082019050919050565b6000614ac882614a5d565b614ad28185614a68565b9350614add83614a79565b8060005b83811015614b0e578151614af58882614a98565b9750614b0083614ab0565b925050600181019050614ae1565b5085935050505092915050565b60006040820190508181036000830152614b3581856149ff565b90508181036020830152614b498184614abd565b90509392505050565b600060208284031215614b6857614b67614829565b5b6000614b7684828501614937565b91505092915050565b6000604082019050614b9460008301856148be565b614ba160208301846148be565b9392505050565b614bb1816148e8565b82525050565b6000602082019050614bcc6000830184614ba8565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614c2582614bdc565b810181811067ffffffffffffffff82111715614c4457614c43614bed565b5b80604052505050565b6000614c5761481f565b9050614c638282614c1c565b919050565b600067ffffffffffffffff821115614c8357614c82614bed565b5b614c8c82614bdc565b9050602081019050919050565b82818337600083830152505050565b6000614cbb614cb684614c68565b614c4d565b905082815260208101848484011115614cd757614cd6614bd7565b5b614ce2848285614c99565b509392505050565b600082601f830112614cff57614cfe614bd2565b5b8135614d0f848260208601614ca8565b91505092915050565b60008060408385031215614d2f57614d2e614829565b5b6000614d3d85828601614937565b925050602083013567ffffffffffffffff811115614d5e57614d5d61482e565b5b614d6a85828601614cea565b9150509250929050565b600080600060608486031215614d8d57614d8c614829565b5b6000614d9b86828701614937565b9350506020614dac86828701614937565b9250506040614dbd86828701614937565b9150509250925092565b6000608082019050614ddc60008301876147f5565b614de960208301866147f5565b614df660408301856147f5565b614e0360608301846147f5565b95945050505050565b6000819050919050565b6000614e31614e2c614e278461488c565b614e0c565b61488c565b9050919050565b6000614e4382614e16565b9050919050565b6000614e5582614e38565b9050919050565b614e6581614e4a565b82525050565b6000602082019050614e806000830184614e5c565b92915050565b60008060408385031215614e9d57614e9c614829565b5b6000614eab85828601614937565b9250506020614ebc85828601614937565b9150509250929050565b6000614ed182614e38565b9050919050565b614ee181614ec6565b82525050565b6000602082019050614efc6000830184614ed8565b92915050565b600080600060608486031215614f1b57614f1a614829565b5b6000614f298682870161484a565b9350506020614f3a8682870161484a565b9250506040614f4b8682870161484a565b9150509250925092565b6000614f6082614e38565b9050919050565b614f7081614f55565b82525050565b6000602082019050614f8b6000830184614f67565b92915050565b6000604082019050614fa660008301856147f5565b614fb360208301846147f5565b9392505050565b6000614fc582614e38565b9050919050565b614fd581614fba565b82525050565b6000602082019050614ff06000830184614fcc565b92915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000615063602c83614ff6565b915061506e82615007565b604082019050919050565b6000602082019050818103600083015261509281615056565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006150f5602c83614ff6565b915061510082615099565b604082019050919050565b60006020820190508181036000830152615124816150e8565b9050919050565b8082525050565b61513b816148ac565b82525050565b61514a816147eb565b82525050565b600060a082019050615165600083018861512b565b6151726020830187615132565b61517f6040830186615141565b61518c6060830185615132565b6151996080830184615132565b9695505050505050565b60006040820190506151b8600083018561512b565b6151c56020830184615132565b9392505050565b6000815190506151db816148f4565b92915050565b6000602082840312156151f7576151f6614829565b5b6000615205848285016151cc565b91505092915050565b600060608201905061522360008301866148be565b61523060208301856147f5565b61523d60408301846147f5565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061527f826147eb565b915061528a836147eb565b92508282101561529d5761529c615245565b5b828203905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006152de602083614ff6565b91506152e9826152a8565b602082019050919050565b6000602082019050818103600083015261530d816152d1565b9050919050565b6000602082019050615329600083018461512b565b92915050565b60008151905061533e81614920565b92915050565b60006020828403121561535a57615359614829565b5b60006153688482850161532f565b91505092915050565b60008151905061538081614833565b92915050565b60006020828403121561539c5761539b614829565b5b60006153aa84828501615371565b91505092915050565b7f4163636f756e74206e756c6c0000000000000000000000000000000000000000600082015250565b60006153e9600c83614ff6565b91506153f4826153b3565b602082019050919050565b60006020820190508181036000830152615418816153dc565b9050919050565b7f47726f75704865616c7468206e756c6c00000000000000000000000000000000600082015250565b6000615455601083614ff6565b91506154608261541f565b602082019050919050565b6000602082019050818103600083015261548481615448565b9050919050565b7f537065636966696347726f75705374726174656779206e756c6c000000000000600082015250565b60006154c1601a83614ff6565b91506154cc8261548b565b602082019050919050565b600060208201905081810360008301526154f0816154b4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615531826147eb565b915061553c836147eb565b92508261554c5761554b6154f7565b5b828204905092915050565b6000615562826147eb565b915061556d836147eb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156155a6576155a5615245565b5b828202905092915050565b60006155bc826147eb565b91506155c7836147eb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156155fc576155fb615245565b5b828201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000615663602e83614ff6565b915061566e82615607565b604082019050919050565b6000602082019050818103600083015261569281615656565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006156f5602683614ff6565b915061570082615699565b604082019050919050565b60006020820190508181036000830152615724816156e8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000615765826147eb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561579857615797615245565b5b600182019050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b60006157ff602f83614ff6565b915061580a826157a3565b604082019050919050565b6000602082019050818103600083015261582e816157f2565b9050919050565b600060808201905061584a600083018761512b565b6158576020830186615132565b6158646040830185615141565b6158716060830184615141565b95945050505050565b6000806040838503121561589157615890614829565b5b600061589f8582860161532f565b92505060206158b08582860161532f565b9150509250929050565b600060808201905081810360008301526158d481876149ff565b905081810360208301526158e881866149ff565b905081810360408301526158fc8185614abd565b905081810360608301526159108184614abd565b905095945050505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615977602b83614ff6565b91506159828261591b565b604082019050919050565b600060208201905081810360008301526159a68161596a565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000615a09602d83614ff6565b9150615a14826159ad565b604082019050919050565b60006020820190508181036000830152615a38816159fc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000615aca602683614ff6565b9150615ad582615a6e565b604082019050919050565b60006020820190508181036000830152615af981615abd565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015615b34578082015181840152602081019050615b19565b83811115615b43576000848401525b50505050565b6000615b5482615b00565b615b5e8185615b0b565b9350615b6e818560208601615b16565b80840191505092915050565b6000615b868284615b49565b915081905092915050565b600081519050919050565b6000615ba782615b91565b615bb18185614ff6565b9350615bc1818560208601615b16565b615bca81614bdc565b840191505092915050565b60006020820190508181036000830152615bef8184615b9c565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202d7808329291608399ff360ce9e47c28f48210a99b1b8e668c2ebae762ccf9ae64736f6c634300080b0033",
  "libraries": {
    "AddressSortedLinkedList": "0xEc660B5c5bAC0699C2061b047fc6729e302039E7"
  },
  "devdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "params": {
            "caller": "`msg.sender` that called the function."
          }
        }
      ],
      "CallerNotManagerNorStrategy(address)": [
        {
          "params": {
            "caller": "`msg.sender` that called the function."
          }
        }
      ],
      "GroupAlreadyAdded(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupNotActive(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupNotEligible(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "HealthyGroup(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "InvalidFromGroup(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "InvalidToGroup(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "RebalanceEnoughStCelo(address,uint256,uint256)": [
        {
          "params": {
            "actualCelo": "The actual stCELO value.",
            "expectedCelo": "The expected stCELO value.",
            "group": "The group's address."
          }
        }
      ],
      "RebalanceNoExtraStCelo(address,uint256,uint256)": [
        {
          "params": {
            "actualCelo": "The actual stCELO value.",
            "expectedCelo": "The expected stCELO value.",
            "group": "The group's address."
          }
        }
      ]
    },
    "events": {
      "GroupActivated(address)": {
        "params": {
          "group": "The group's address."
        }
      },
      "GroupRemoved(address)": {
        "params": {
          "group": "The group's address."
        }
      },
      "SortedFlagUpdated(bool)": {
        "params": {
          "update": "The new value."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "activateGroup(address,address,address)": {
        "params": {
          "greater": "The group receiving more votes (in default strategy) than `group`,  or 0 if `group` has the most votes of any validator group.",
          "group": "The address of the group to add to the set of votable groups.",
          "lesser": "The group receiving fewer votes (in default strategy) than `group`, or 0 if `group` has the fewest votes of any validator group."
        }
      },
      "deactivateGroup(address)": {
        "params": {
          "group": "The group to deactivated."
        }
      },
      "deactivateUnhealthyGroup(address)": {
        "params": {
          "group": "The group to deactivate if unhealthy."
        }
      },
      "generateVoteDistribution(bool,uint256,address)": {
        "params": {
          "celoAmount": "The amount of votes to distribute.",
          "depositGroupToIgnore": "The group that will not be used for deposit",
          "withdraw": "Whether to withdraw or deposit."
        },
        "returns": {
          "finalGroups": "The groups that were chosen for distribution.",
          "finalVotes": "The votes of chosen finalGroups."
        }
      },
      "getExpectedAndActualStCeloForGroup(address)": {
        "params": {
          "group": "The group."
        },
        "returns": {
          "actualStCelo": "The amount of stCELO which is currently assigned to group in the strategy.",
          "expectedStCelo": "The amount of stCELO that group should have. (The total amount of stCELO in the default strategy divided by the number of active groups.)"
        }
      },
      "getGroupPreviousAndNext(address)": {
        "params": {
          "group": "The group address."
        },
        "returns": {
          "nextAddress": "The next address.",
          "previousAddress": "The previous address."
        }
      },
      "getGroupsHead()": {
        "returns": {
          "head": "The address of the sorted group with most votes.",
          "previousAddress": "The previous address from head."
        }
      },
      "getGroupsTail()": {
        "returns": {
          "nextAddress": "The next address after tail.",
          "tail": "The address of the sorted group with least votes."
        }
      },
      "getNumberOfGroups()": {
        "returns": {
          "_0": "The number of active groups."
        }
      },
      "getNumberOfUnsortedGroups()": {
        "returns": {
          "_0": "The number of unsorted groups."
        }
      },
      "getUnsortedGroupAt(uint256)": {
        "params": {
          "index": "The index to look up."
        },
        "returns": {
          "_0": "The group."
        }
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "Storage version of the contract.",
          "_1": "Major version of the contract.",
          "_2": "Minor version of the contract.",
          "_3": "Patch version of the contract."
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "_manager": "The address of the Manager contract.",
          "_owner": "The address of the contract owner.",
          "_registry": "The address of the Celo Registry."
        }
      },
      "isActive(address)": {
        "returns": {
          "_0": "Whether or not the given group is active."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rebalance(address,address)": {
        "params": {
          "fromGroup": "The from group.",
          "toGroup": "The to group."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDependencies(address,address,address)": {
        "params": {
          "_account": "The address of the Account contract.",
          "_groupHealth": "The address of the GroupHealth contract.",
          "_specificGroupStrategy": "The address of the SpecificGroupStrategy contract."
        }
      },
      "setManager(address)": {
        "params": {
          "_manager": "The new manager address."
        }
      },
      "setSortingParams(uint256,uint256,uint256)": {
        "params": {
          "distributeTo": "Maximum number of groups that can be distributed to.",
          "loopLimit": "The sorting loop limit while sorting active groups on chain.",
          "withdrawFrom": "Maximum number of groups that can be withdrawn from."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateActiveGroupOrder(address,address,address)": {
        "params": {
          "greaterKey": "The key of the group greater than the group to update.",
          "group": "The group address.",
          "lesserKey": "The key of the group less than the group to update."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "DefaultStrategy is responsible for handling any deposit/withdrawal for accounts without any specific strategy.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "notice": "Used when an `onlyManager` function is called by a non-manager."
        }
      ],
      "CallerNotManagerNorStrategy(address)": [
        {
          "notice": "Used when a `managerOrStrategy` function is called  by a non-manager or non-strategy."
        }
      ],
      "CantWithdrawAccordingToStrategy()": [
        {
          "notice": "Used when there isn't enough CELO voting for an account's strategy to fulfill a withdrawal."
        }
      ],
      "GroupAlreadyAdded(address)": [
        {
          "notice": "Used when attempting to activate a group that is already active."
        }
      ],
      "GroupNotActive(address)": [
        {
          "notice": "Used when attempting to deactivate a group that is not active."
        }
      ],
      "GroupNotEligible(address)": [
        {
          "notice": "Used when a group does not meet the validator group health requirements."
        }
      ],
      "HealthyGroup(address)": [
        {
          "notice": "Used when attempting to deactivate a healthy group using deactivateUnhealthyGroup()."
        }
      ],
      "InvalidFromGroup(address)": [
        {
          "notice": "Used when rebalancing from non-active group."
        }
      ],
      "InvalidToGroup(address)": [
        {
          "notice": "Used when rebalancing to a non-active group."
        }
      ],
      "NoActiveGroups()": [
        {
          "notice": "Used when attempting to deposit when there are no active groups to vote for."
        }
      ],
      "NotAbleToDistributeVotes()": [
        {
          "notice": "Used when atempting to distribute votes but validator group limit is reached."
        }
      ],
      "NotUnsortedGroup()": [
        {
          "notice": "Used when attempting sort active groups when there are no unsorted group."
        }
      ],
      "NullAddress()": [
        {
          "notice": "Used when a passed address is address(0)."
        }
      ],
      "RebalanceEnoughStCelo(address,uint256,uint256)": [
        {
          "notice": "Used when rebalancing and toGroup has enough stCELO."
        }
      ],
      "RebalanceNoExtraStCelo(address,uint256,uint256)": [
        {
          "notice": "Used when rebalancing and fromGroup doesn't have any extra stCELO."
        }
      ]
    },
    "events": {
      "GroupActivated(address)": {
        "notice": "Emitted when a new group is activated for voting."
      },
      "GroupRemoved(address)": {
        "notice": "Emitted when a group is deactivated."
      },
      "ManagerSet(address)": {
        "notice": "Emitted when the manager is initially set or later modified."
      },
      "SortedFlagUpdated(bool)": {
        "notice": "Emmited when sorted status of active groups was changed"
      }
    },
    "kind": "user",
    "methods": {
      "account()": {
        "notice": "An instance of the Account contract for the StakedCelo protocol."
      },
      "activateGroup(address,address,address)": {
        "notice": "Marks a group as votable for default strategy. It is necessary to call `updateGroupHealth` in GroupHealth smart contract first."
      },
      "deactivateGroup(address)": {
        "notice": "Deactivates group."
      },
      "deactivateUnhealthyGroup(address)": {
        "notice": "Deactivates an unhealthy group."
      },
      "generateVoteDistribution(bool,uint256,address)": {
        "notice": "Distributes votes by computing the number of votes each active group should either receive or have withdrawn."
      },
      "getExpectedAndActualStCeloForGroup(address)": {
        "notice": "Returns expected stCELO and actual stCELO for group."
      },
      "getGroupPreviousAndNext(address)": {
        "notice": "Returns previous and next address of key."
      },
      "getGroupsHead()": {
        "notice": "Returns head and previous address of head."
      },
      "getGroupsTail()": {
        "notice": "Returns tail and next address of tail."
      },
      "getNumberOfGroups()": {
        "notice": "Returns the number of active groups."
      },
      "getNumberOfUnsortedGroups()": {
        "notice": "Returns the number of unsorted groups."
      },
      "getUnsortedGroupAt(uint256)": {
        "notice": "Returns the unsorted group at index."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "groupHealth()": {
        "notice": "An instance of the GroupHealth contract for the StakedCelo protocol."
      },
      "initialize(address,address,address)": {
        "notice": "Initialize the contract with registry and owner."
      },
      "isActive(address)": {
        "notice": "Returns whether active groups contain group."
      },
      "maxGroupsToDistributeTo()": {
        "notice": "Maximum number of groups to distribute votes to."
      },
      "maxGroupsToWithdrawFrom()": {
        "notice": "Maximum number of groups to withdraw from."
      },
      "rebalance(address,address)": {
        "notice": "Rebalances CELO between groups that have an incorrect CELO-stCELO ratio. `fromGroup` is required to have more CELO than it should and `toGroup` needs to have less CELO than it should."
      },
      "registry()": {
        "notice": "The Registry."
      },
      "setDependencies(address,address,address)": {
        "notice": "Set this contract's dependencies in the StakedCelo system."
      },
      "setManager(address)": {
        "notice": "Sets the manager address."
      },
      "setSortingParams(uint256,uint256,uint256)": {
        "notice": "Set distribution/withdrawal algorithm parameters."
      },
      "sorted()": {
        "notice": "Whether or not active groups are sorted. If active groups are not sorted it is neccessary to call updateActiveGroupOrder"
      },
      "specificGroupStrategy()": {
        "notice": "An instance of the SpecificGroupStrategy for the StakedCelo protocol."
      },
      "stCeloInGroup(address)": {
        "notice": "stCELO that was cast for default group strategy, strategy => stCELO amount"
      },
      "totalStCeloInStrategy()": {
        "notice": "Total stCELO that was voted with on default strategy."
      },
      "updateActiveGroupOrder(address,address,address)": {
        "notice": "Updates group order of unsorted group. When there are no more unsorted groups it will mark active groups as sorted."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 584,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13491,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "registry",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRegistry)16523"
      },
      {
        "astId": 7073,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "manager",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 5119,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "activeGroups",
        "offset": 0,
        "slot": "103",
        "type": "t_struct(List)14813_storage"
      },
      {
        "astId": 5123,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "groupHealth",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IGroupHealth)16283"
      },
      {
        "astId": 5127,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "account",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IAccount)15504"
      },
      {
        "astId": 5131,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "specificGroupStrategy",
        "offset": 0,
        "slot": "110",
        "type": "t_contract(ISpecificGroupStrategy)16623"
      },
      {
        "astId": 5136,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "stCeloInGroup",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5139,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "maxGroupsToDistributeTo",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 5142,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "maxGroupsToWithdrawFrom",
        "offset": 0,
        "slot": "113",
        "type": "t_uint256"
      },
      {
        "astId": 5145,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "totalStCeloInStrategy",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 5148,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "sortingLoopLimit",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 5151,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "sorted",
        "offset": 0,
        "slot": "116",
        "type": "t_bool"
      },
      {
        "astId": 5155,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "unsortedGroups",
        "offset": 0,
        "slot": "117",
        "type": "t_struct(AddressSet)3257_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccount)15504": {
        "encoding": "inplace",
        "label": "contract IAccount",
        "numberOfBytes": "20"
      },
      "t_contract(IGroupHealth)16283": {
        "encoding": "inplace",
        "label": "contract IGroupHealth",
        "numberOfBytes": "20"
      },
      "t_contract(IRegistry)16523": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ISpecificGroupStrategy)16623": {
        "encoding": "inplace",
        "label": "contract ISpecificGroupStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Element)14274_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LinkedList.Element)",
        "numberOfBytes": "32",
        "value": "t_struct(Element)14274_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3257_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3256,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2956_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Element)14274_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.Element",
        "members": [
          {
            "astId": 14269,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "previousKey",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 14271,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "nextKey",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 14273,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(List)14286_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.List",
        "members": [
          {
            "astId": 14276,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "head",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 14278,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "tail",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 14280,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "numElements",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14285,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "elements",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_struct(Element)14274_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(List)14813_storage": {
        "encoding": "inplace",
        "label": "struct SortedLinkedList.List",
        "members": [
          {
            "astId": 14808,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "list",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(List)14286_storage"
          },
          {
            "astId": 14812,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "values",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)2956_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2951,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2955,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}