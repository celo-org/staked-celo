{
  "address": "0x1818c1Ef317666607807DeB5d5EA69F0461734F1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDelay",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "CannotRemoveLastOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExecutionFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "InsufficientDelay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "InvalidContractAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ownerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InvalidRequirement",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ParamLengthsMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ProposalAlreadyConfirmed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalAlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalAlreadyScheduled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ProposalNotConfirmed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalNotFullyConfirmed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalNotScheduled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalTimelockNotReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SenderMustBeMultisigWallet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CeloDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ConfirmationRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "DelayChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "TransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_OWNER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "changeDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRequired",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "confirmProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "destinations",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "initialOwners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "requiredConfirmations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_delay",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isConfirmedBy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "isFullyConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "isProposalTimelockReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "isScheduled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestampExecutable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "revokeConfirmation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "scheduleProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "destinations",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        }
      ],
      "name": "submitProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5da0a1bd4aa8ea0355ff63ab08bec7076ecc303a564b2c35c052967053de4c20",
  "receipt": {
    "to": null,
    "from": "0x5bC1C4C1D67C5E4384189302BC653A611568a788",
    "contractAddress": "0x1818c1Ef317666607807DeB5d5EA69F0461734F1",
    "transactionIndex": 0,
    "gasUsed": "3871197",
    "logsBloom": "0x
    "blockHash": "0x713ad4463647f71fa29c5bdb1085668ef3b314fd3d6c279e6aae97fdeae755d4",
    "transactionHash": "0x5da0a1bd4aa8ea0355ff63ab08bec7076ecc303a564b2c35c052967053de4c20",
    "logs": [],
    "blockNumber": 15086021,
    "cumulativeGasUsed": "3871197",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1
  ],
  "numDeployments": 2,
  "solcInputHash": "0d26545ee0477243a864c9acbc608396",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CannotRemoveLastOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"InsufficientDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"InvalidContractAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InvalidRequirement\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamLengthsMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProposalAlreadyConfirmed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalAlreadyScheduled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProposalNotConfirmed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalNotFullyConfirmed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalNotScheduled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalTimelockNotReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SenderMustBeMultisigWallet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CeloDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ConfirmationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"DelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"changeDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"confirmProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"requiredConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isConfirmedBy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isFullyConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isProposalTimelockReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestampExecutable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"scheduleProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"}],\"name\":\"submitProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Stefan George - <stefan.george@consensys.net>\",\"details\":\"NOTE: This contract has its limitations and is not viable for every multi-signature setup. On a case by case basis, evaluate whether this is the correct contract for your use case. In particular, this contract doesn't have an atomic \\\"add owners and increase requirement\\\" operation. This can be tricky, for example, in a situation where a MultiSig starts out owned by a single owner. Safely increasing the owner set and requirement at the same time is not trivial. One way to work around this situation is to first add a second address controlled by the original owner, increase the requirement, and then replace the auxillary address with the intended second owner. Again, this is just one example, in general make sure to verify this contract will support your intended usage. The goal of this contract is to offer a simple, minimal multi-signature API that's easy to understand even for novice Solidity users. Forked from github.com/celo-org/celo-monorepo/blob/master/packages/protocol/contracts/common/MultiSig.sol\",\"errors\":{\"CannotRemoveLastOwner(address)\":[{\"params\":{\"owner\":\"The last owner.\"}}],\"InsufficientDelay(uint256)\":[{\"params\":{\"delay\":\"The insufficient delay.\"}}],\"InvalidContractAddress(address)\":[{\"params\":{\"destination\":\"The invalid destination address.\"}}],\"InvalidRequirement(uint256,uint256)\":[{\"params\":{\"ownerCount\":\"The count of owners.\",\"required\":\"The number of required confirmations.\"}}],\"OwnerAlreadyExists(address)\":[{\"params\":{\"owner\":\"The address of the owner.\"}}],\"OwnerDoesNotExist(address)\":[{\"params\":{\"owner\":\"The address of the owner.\"}}],\"ProposalAlreadyConfirmed(uint256,address)\":[{\"params\":{\"owner\":\"The address of the owner which confirmed the proposal.\",\"proposalId\":\"The ID of the proposal that is already confirmed.\"}}],\"ProposalAlreadyExecuted(uint256)\":[{\"params\":{\"proposalId\":\"The ID of the proposal that is already executed.\"}}],\"ProposalAlreadyScheduled(uint256)\":[{\"params\":{\"proposalId\":\"The ID of the proposal which is already scheduled.\"}}],\"ProposalDoesNotExist(uint256)\":[{\"params\":{\"proposalId\":\"The ID of the non-existent proposal.\"}}],\"ProposalNotConfirmed(uint256,address)\":[{\"params\":{\"owner\":\"The address of the owner which did not confirm the proposal.\",\"proposalId\":\"The ID of the proposal that is not confirmed.\"}}],\"ProposalNotFullyConfirmed(uint256)\":[{\"details\":\"A proposal is fully confirmed when the `required` threshold of confirmations has been met.\",\"params\":{\"proposalId\":\"The ID of the proposal that is not fully confirmed.\"}}],\"ProposalNotScheduled(uint256)\":[{\"params\":{\"proposalId\":\"The ID of the proposal which is not scheduled.\"}}],\"ProposalTimelockNotReached(uint256)\":[{\"params\":{\"proposalId\":\"The ID of the proposal whose time lock has not been reached yet.\"}}],\"SenderMustBeMultisigWallet(address)\":[{\"params\":{\"account\":\"The sender which triggered the function.\"}}]},\"events\":{\"CeloDeposited(address,uint256)\":{\"params\":{\"sender\":\"The account which sent the CELO.\",\"value\":\"The amount of CELO sent.\"}},\"ConfirmationRevoked(address,uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\",\"sender\":\"The address of the sender.\"}},\"DelayChanged(uint256,uint256)\":{\"params\":{\"delay\":\"The current delay value.\",\"newDelay\":\"The new delay value.\"}},\"OwnerAdded(address)\":{\"params\":{\"owner\":\"The added owner.\"}},\"OwnerRemoved(address)\":{\"params\":{\"owner\":\"The removed owner.\"}},\"ProposalAdded(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal that was added.\"}},\"ProposalConfirmed(address,uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\",\"sender\":\"The address of the sender.\"}},\"ProposalExecuted(uint256,bytes)\":{\"params\":{\"proposalId\":\"The ID of the proposal that was executed.\",\"returnData\":\"The response that was recieved from the external call.\"}},\"ProposalScheduled(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal that is scheduled.\"}},\"RequirementChanged(uint256)\":{\"params\":{\"required\":\"The new required amount.\"}},\"TransactionExecuted(uint256,uint256,bytes)\":{\"params\":{\"index\":\"The index of the transaction within the proposal.\",\"proposalId\":\"The ID of the proposal.\",\"returnData\":\"The response that was recieved from the external call.\"}}},\"kind\":\"dev\",\"methods\":{\"addOwner(address)\":{\"details\":\"This call can only be made by this contract.\",\"params\":{\"owner\":\"The owner to add.\"}},\"changeDelay(uint256)\":{\"details\":\"Proposal has to be sent by wallet.\",\"params\":{\"newDelay\":\"The new delay value.\"}},\"changeRequirement(uint256)\":{\"details\":\"Proposal has to be sent by wallet.\",\"params\":{\"newRequired\":\"The new number of confirmations required.\"}},\"confirmProposal(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal to confirm.\"}},\"constructor\":{\"params\":{\"_minDelay\":\"The minimum time in seconds that must elapse before a proposal is executable.\"}},\"executeProposal(uint256)\":{\"details\":\"Any of the multisig owners can execute a given proposal, even though they may not have participated in its confirmation process.\"},\"getConfirmations(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\"},\"returns\":{\"_0\":\"The list of owner addresses.\"}},\"getOwners()\":{\"returns\":{\"_0\":\"The list of owner addresses.\"}},\"getProposal(uint256)\":{\"params\":{\"destinations\":\"The addresses at which the proposal is target at.\",\"payloads\":\"The payloads of the proposal.\",\"proposalId\":\"The ID of the proposal.\",\"values\":\"The CELO values involved in the proposal if any.\"}},\"getTimestamp(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\"},\"returns\":{\"_0\":\"The timestamp at which the proposal becomes executable.\"}},\"getVersionNumber()\":{\"returns\":{\"_0\":\"Storage version of the contract.\",\"_1\":\"Major version of the contract.\",\"_2\":\"Minor version of the contract.\",\"_3\":\"Patch version of the contract.\"}},\"initialize(address[],uint256,uint256)\":{\"details\":\"This plays the role of a typical contract constructor. Sets initial owners and required number of confirmations. The initializer modifier ensures that this function is ONLY callable once.\",\"params\":{\"_delay\":\"The delay that must elapse to be able to execute a proposal.\",\"initialOwners\":\"The list of initial owners.\",\"requiredConfirmations\":\"The number of required confirmations for a proposal to be fully confirmed.\"}},\"isConfirmedBy(uint256,address)\":{\"params\":{\"owner\":\"The address to check.\",\"proposalId\":\"The ID of the proposal to check.\"},\"returns\":{\"_0\":\"Whether or not the proposal is confirmed by the given owner.\"}},\"isFullyConfirmed(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal to check.\"},\"returns\":{\"_0\":\"Whether or not the proposal is confirmed by the minimum set of owners.\"}},\"isOwner(address)\":{\"params\":{\"owner\":\"The address to check.\"},\"returns\":{\"_0\":\"Whether or not the address is a multisig owner.\"}},\"isProposalTimelockReached(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal to check.\"},\"returns\":{\"_0\":\"Whether or not the time lock is reached.\"}},\"isScheduled(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal to check.\"},\"returns\":{\"_0\":\"Whether or not the proposal is scheduled.\"}},\"removeOwner(address)\":{\"details\":\"This call can only be made by this contract.\",\"params\":{\"owner\":\"The owner to remove.\"}},\"replaceOwner(address,address)\":{\"details\":\"This call can only be made by this contract.\",\"params\":{\"owner\":\"The owner to be replaced.\"}},\"revokeConfirmation(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal to be revoked.\"}},\"scheduleProposal(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal to confirm.\"}},\"submitProposal(address[],uint256[],bytes[])\":{\"params\":{\"destinations\":\"The addresses at which the proposal is target at.\",\"payloads\":\"The payloads of the proposal.\",\"values\":\"The CELO values involved in the proposal if any.\"},\"returns\":{\"proposalId\":\"Returns the ID of the proposal that gets generated.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Multisignature wallet - Allows multiple parties to agree on proposals before execution.\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotRemoveLastOwner(address)\":[{\"notice\":\"Used when attempting to remove the last owner.\"}],\"ExecutionFailed()\":[{\"notice\":\"Used when an execution fails.\"}],\"InsufficientDelay(uint256)\":[{\"notice\":\"Used when a provided value is less than the minimum time lock delay.\"}],\"InvalidContractAddress(address)\":[{\"notice\":\"Used when destination is not a contract.\"}],\"InvalidRequirement(uint256,uint256)\":[{\"notice\":\"Used when the set threshold values for owner and minimum required confirmations are not met.\"}],\"NullAddress()\":[{\"notice\":\"Used when a passed address is address(0).\"}],\"OwnerAlreadyExists(address)\":[{\"notice\":\"Used when attempting to add an already existing owner.\"}],\"OwnerDoesNotExist(address)\":[{\"notice\":\"Used when an owner does not exist.\"}],\"ParamLengthsMismatch()\":[{\"notice\":\"Used when the sizes of the provided arrays params do not match when submitting a proposal.\"}],\"ProposalAlreadyConfirmed(uint256,address)\":[{\"notice\":\"Used when a proposal is already confirmed by an owner.\"}],\"ProposalAlreadyExecuted(uint256)\":[{\"notice\":\"Used when a proposal has been executed.\"}],\"ProposalAlreadyScheduled(uint256)\":[{\"notice\":\"Used when attempting to schedule an already scheduled proposal.\"}],\"ProposalDoesNotExist(uint256)\":[{\"notice\":\"Used when a proposal does not exist.\"}],\"ProposalNotConfirmed(uint256,address)\":[{\"notice\":\"Used when a proposal is not confirmed by a given owner.\"}],\"ProposalNotFullyConfirmed(uint256)\":[{\"notice\":\"Used when a proposal is not fully confirmed.\"}],\"ProposalNotScheduled(uint256)\":[{\"notice\":\"Used when a proposal is not scheduled.\"}],\"ProposalTimelockNotReached(uint256)\":[{\"notice\":\"Used when a time lock delay is not reached.\"}],\"SenderMustBeMultisigWallet(address)\":[{\"notice\":\"Used when sender is not this contract in an `onlyWallet` function.\"}]},\"events\":{\"CeloDeposited(address,uint256)\":{\"notice\":\"Emitted when CELO is sent to this contract.\"},\"ConfirmationRevoked(address,uint256)\":{\"notice\":\"Used when a confirmation is successfully revoked.\"},\"DelayChanged(uint256,uint256)\":{\"notice\":\"Used when `delay` is changed.\"},\"OwnerAdded(address)\":{\"notice\":\"Emitted when an Owner is successfully added as part of the multisig.\"},\"OwnerRemoved(address)\":{\"notice\":\"Emitted when an Owner is successfully removed from the multisig.\"},\"ProposalAdded(uint256)\":{\"notice\":\"Used when a proposal is successfully added.\"},\"ProposalConfirmed(address,uint256)\":{\"notice\":\"Used when a proposal is successfully confirmed.\"},\"ProposalExecuted(uint256,bytes)\":{\"notice\":\"Emitted when a confirmed proposal is successfully executed.\"},\"ProposalScheduled(uint256)\":{\"notice\":\"Emitted when a proposal is scheduled.\"},\"RequirementChanged(uint256)\":{\"notice\":\"Emitted when the minimum amount of required confirmations is successfully changed.\"},\"TransactionExecuted(uint256,uint256,bytes)\":{\"notice\":\"Emitted when one of the transactions that make up a proposal is successfully executed.\"}},\"kind\":\"user\",\"methods\":{\"MAX_OWNER_COUNT()\":{\"notice\":\"The maximum number of multisig owners.\"},\"addOwner(address)\":{\"notice\":\"Adds a new multisig owner.\"},\"changeDelay(uint256)\":{\"notice\":\"Changes the value of the delay that must elapse before a proposal can become executable.\"},\"changeRequirement(uint256)\":{\"notice\":\"Changes the number of confirmations required to consider a proposal fully confirmed.\"},\"confirmProposal(uint256)\":{\"notice\":\"Confirms a proposal. A proposal is executed if this confirmation makes it fully confirmed.\"},\"constructor\":{\"notice\":\"Sets `initialized` to  true on implementation contracts.\"},\"delay()\":{\"notice\":\"The delay that must elapse to be able to execute a proposal.\"},\"executeProposal(uint256)\":{\"notice\":\"Executes a proposal. A proposal is only executetable if it is fully confirmed, scheduled and the set delay has elapsed.\"},\"getConfirmations(uint256)\":{\"notice\":\"Gets the list of owners' addresses which have confirmed a given proposal.\"},\"getOwners()\":{\"notice\":\"Get the list of multisig owners.\"},\"getProposal(uint256)\":{\"notice\":\"Gets the destinations, values and payloads of a proposal.\"},\"getTimestamp(uint256)\":{\"notice\":\"Returns the timestamp at which a proposal becomes executable.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"initialize(address[],uint256,uint256)\":{\"notice\":\"Bootstraps this contract with initial data.\"},\"isConfirmedBy(uint256,address)\":{\"notice\":\"Checks that a proposal is confirmed by an owner.\"},\"isFullyConfirmed(uint256)\":{\"notice\":\"Checks that a proposal has been confirmed by at least the `required` number of owners.\"},\"isOwner(address)\":{\"notice\":\"Checks that an address is a multisig owner.\"},\"isProposalTimelockReached(uint256)\":{\"notice\":\"Returns whether a proposal is executable or not. A proposal is executable if it is scheduled, the delay has elapsed and it is not yet executed.\"},\"isScheduled(uint256)\":{\"notice\":\"Returns whether a proposal is scheduled.\"},\"minDelay()\":{\"notice\":\"The minimum time in seconds that must elapse before a proposal is executable.\"},\"proposalCount()\":{\"notice\":\"The total count of proposals.\"},\"proposals(uint256)\":{\"notice\":\"Keyed by proposal ID, the Proposal record.\"},\"removeOwner(address)\":{\"notice\":\"Removes an existing owner.\"},\"replaceOwner(address,address)\":{\"notice\":\"Replaces an existing owner with a new owner.\"},\"required()\":{\"notice\":\"The amount of confirmations required for a proposal to be fully confirmed.\"},\"revokeConfirmation(uint256)\":{\"notice\":\"Void a confirmation for a previously confirmed proposal.\"},\"scheduleProposal(uint256)\":{\"notice\":\"Schedules a proposal with a time lock.\"},\"submitProposal(address[],uint256[],bytes[])\":{\"notice\":\"Creates a proposal and triggers the first confirmation on behalf of the proposal creator.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/MultiSig.sol\":\"MultiSig\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/common/MultiSig.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../libraries/ExternalCall.sol\\\";\\n\\n/**\\n * @title Multisignature wallet - Allows multiple parties to agree on proposals before\\n * execution.\\n * @author Stefan George - <stefan.george@consensys.net>\\n * @dev NOTE: This contract has its limitations and is not viable for every\\n * multi-signature setup. On a case by case basis, evaluate whether this is the\\n * correct contract for your use case.\\n * In particular, this contract doesn't have an atomic \\\"add owners and increase\\n * requirement\\\" operation.\\n * This can be tricky, for example, in a situation where a MultiSig starts out\\n * owned by a single owner. Safely increasing the owner set and requirement at\\n * the same time is not trivial. One way to work around this situation is to\\n * first add a second address controlled by the original owner, increase the\\n * requirement, and then replace the auxillary address with the intended second\\n * owner.\\n * Again, this is just one example, in general make sure to verify this contract\\n * will support your intended usage. The goal of this contract is to offer a\\n * simple, minimal multi-signature API that's easy to understand even for novice\\n * Solidity users.\\n * Forked from\\n * github.com/celo-org/celo-monorepo/blob/master/packages/protocol/contracts/common/MultiSig.sol\\n */\\ncontract MultiSig is Initializable, UUPSUpgradeable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice The maximum number of multisig owners.\\n     */\\n    uint256 public constant MAX_OWNER_COUNT = 50;\\n\\n    /**\\n     * @notice The minimum time in seconds that must elapse before a proposal is executable.\\n     */\\n    uint256 public immutable minDelay;\\n\\n    /**\\n     * @notice The value used to mark a proposal as executed.\\n     */\\n    uint256 internal constant DONE_TIMESTAMP = uint256(1);\\n\\n    /**\\n     * @notice Used to keep track of a proposal.\\n     * @param destinations The addresses at which the proposal is directed to.\\n     * @param values The amounts of CELO involved.\\n     * @param payloads The payloads of the proposal.\\n     * @param timestampExecutable The timestamp at which a proposal becomes executable.\\n     * @dev timestampExecutable is 0 if proposal is not yet scheduled or 1 if the proposal\\n     * is executed.\\n     * @param confirmations The list of confirmations. Keyed by the address that\\n     * confirmed the proposal, whether or not the proposal is confirmed.\\n     */\\n    struct Proposal {\\n        address[] destinations;\\n        uint256[] values;\\n        bytes[] payloads;\\n        uint256 timestampExecutable;\\n        mapping(address => bool) confirmations;\\n    }\\n\\n    /**\\n     * @notice The delay that must elapse to be able to execute a proposal.\\n     */\\n    uint256 public delay;\\n\\n    /**\\n     * @notice Keyed by proposal ID, the Proposal record.\\n     */\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    /**\\n     * @notice The set of addresses which are owners of the multisig.\\n     */\\n    EnumerableSet.AddressSet private owners;\\n\\n    /**\\n     * @notice The amount of confirmations required\\n     * for a proposal to be fully confirmed.\\n     */\\n    uint256 public required;\\n\\n    /**\\n     * @notice The total count of proposals.\\n     */\\n    uint256 public proposalCount;\\n\\n    /**\\n     * @notice Used when a proposal is successfully confirmed.\\n     * @param sender The address of the sender.\\n     * @param proposalId The ID of the proposal.\\n     */\\n    event ProposalConfirmed(address indexed sender, uint256 indexed proposalId);\\n\\n    /**\\n     * @notice Used when a confirmation is successfully revoked.\\n     * @param sender The address of the sender.\\n     * @param proposalId The ID of the proposal.\\n     */\\n    event ConfirmationRevoked(address indexed sender, uint256 indexed proposalId);\\n\\n    /**\\n     * @notice Used when a proposal is successfully added.\\n     * @param proposalId The ID of the proposal that was added.\\n     */\\n    event ProposalAdded(uint256 indexed proposalId);\\n\\n    /**\\n     * @notice Emitted when a confirmed proposal is successfully executed.\\n     * @param proposalId The ID of the proposal that was executed.\\n     * @param returnData The response that was recieved from the external call.\\n     */\\n    event ProposalExecuted(uint256 indexed proposalId, bytes returnData);\\n\\n    /**\\n     * @notice Emitted when one of the transactions that make up a proposal is successfully\\n     * executed.\\n     * @param index The index of the transaction within the proposal.\\n     * @param proposalId The ID of the proposal.\\n     * @param returnData The response that was recieved from the external call.\\n     */\\n    event TransactionExecuted(uint256 index, uint256 indexed proposalId, bytes returnData);\\n\\n    /**\\n     * @notice Emitted when CELO is sent to this contract.\\n     * @param sender The account which sent the CELO.\\n     * @param value The amount of CELO sent.\\n     */\\n    event CeloDeposited(address indexed sender, uint256 value);\\n\\n    /**\\n     * @notice Emitted when an Owner is successfully added as part of the multisig.\\n     * @param owner The added owner.\\n     */\\n    event OwnerAdded(address indexed owner);\\n\\n    /**\\n     * @notice Emitted when an Owner is successfully removed from the multisig.\\n     * @param owner The removed owner.\\n     */\\n    event OwnerRemoved(address indexed owner);\\n\\n    /**\\n     * @notice Emitted when the minimum amount of required confirmations is\\n     * successfully changed.\\n     * @param required The new required amount.\\n     */\\n    event RequirementChanged(uint256 required);\\n\\n    /**\\n     * @notice Emitted when a proposal is scheduled.\\n     * @param proposalId The ID of the proposal that is scheduled.\\n     */\\n    event ProposalScheduled(uint256 indexed proposalId);\\n\\n    /**\\n     * @notice Used when `delay` is changed.\\n     * @param delay The current delay value.\\n     * @param newDelay The new delay value.\\n     */\\n    event DelayChanged(uint256 delay, uint256 newDelay);\\n\\n    /**\\n     * @notice Used when sender is not this contract in an `onlyWallet` function.\\n     * @param account The sender which triggered the function.\\n     */\\n    error SenderMustBeMultisigWallet(address account);\\n\\n    /**\\n     * @notice Used when attempting to add an already existing owner.\\n     * @param owner The address of the owner.\\n     */\\n    error OwnerAlreadyExists(address owner);\\n\\n    /**\\n     * @notice Used when an owner does not exist.\\n     * @param owner The address of the owner.\\n     */\\n    error OwnerDoesNotExist(address owner);\\n\\n    /**\\n     * @notice Used when a proposal does not exist.\\n     * @param proposalId The ID of the non-existent proposal.\\n     */\\n    error ProposalDoesNotExist(uint256 proposalId);\\n\\n    /**\\n     * @notice Used when a proposal is not confirmed by a given owner.\\n     * @param proposalId The ID of the proposal that is not confirmed.\\n     * @param owner The address of the owner which did not confirm the proposal.\\n     */\\n    error ProposalNotConfirmed(uint256 proposalId, address owner);\\n\\n    /**\\n     * @notice Used when a proposal is not fully confirmed.\\n     * @dev A proposal is fully confirmed when the `required` threshold\\n     * of confirmations has been met.\\n     * @param proposalId The ID of the proposal that is not fully confirmed.\\n     */\\n    error ProposalNotFullyConfirmed(uint256 proposalId);\\n\\n    /**\\n     * @notice Used when a proposal is already confirmed by an owner.\\n     * @param proposalId The ID of the proposal that is already confirmed.\\n     * @param owner The address of the owner which confirmed the proposal.\\n     */\\n    error ProposalAlreadyConfirmed(uint256 proposalId, address owner);\\n\\n    /**\\n     * @notice Used when a proposal has been executed.\\n     * @param proposalId The ID of the proposal that is already executed.\\n     */\\n    error ProposalAlreadyExecuted(uint256 proposalId);\\n\\n    /**\\n     * @notice Used when a passed address is address(0).\\n     */\\n    error NullAddress();\\n\\n    /**\\n     * @notice Used when the set threshold values for owner and minimum\\n     * required confirmations are not met.\\n     * @param ownerCount The count of owners.\\n     * @param required The number of required confirmations.\\n     */\\n    error InvalidRequirement(uint256 ownerCount, uint256 required);\\n\\n    /**\\n     * @notice Used when attempting to remove the last owner.\\n     * @param owner The last owner.\\n     */\\n    error CannotRemoveLastOwner(address owner);\\n\\n    /**\\n     * @notice Used when attempting to schedule an already scheduled proposal.\\n     * @param proposalId The ID of the proposal which is already scheduled.\\n     */\\n    error ProposalAlreadyScheduled(uint256 proposalId);\\n\\n    /**\\n     * @notice Used when a proposal is not scheduled.\\n     * @param proposalId The ID of the proposal which is not scheduled.\\n     */\\n    error ProposalNotScheduled(uint256 proposalId);\\n\\n    /**\\n     * @notice Used when a time lock delay is not reached.\\n     * @param proposalId The ID of the proposal whose time lock has not been reached yet.\\n     */\\n    error ProposalTimelockNotReached(uint256 proposalId);\\n\\n    /**\\n     * @notice Used when a provided value is less than the minimum time lock delay.\\n     * @param delay The insufficient delay.\\n     */\\n    error InsufficientDelay(uint256 delay);\\n\\n    /**\\n     * @notice Used when the sizes of the provided arrays params do not match\\n     * when submitting a proposal.\\n     */\\n    error ParamLengthsMismatch();\\n\\n    /**\\n     * @notice Checks that only the multisig contract can execute a function.\\n     */\\n    modifier onlyWallet() {\\n        if (msg.sender != address(this)) {\\n            revert SenderMustBeMultisigWallet(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that an address is not a multisig owner.\\n     * @param owner The address to check.\\n     */\\n    modifier ownerDoesNotExist(address owner) {\\n        if (owners.contains(owner)) {\\n            revert OwnerAlreadyExists(owner);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that an address is a multisig owner.\\n     * @param owner The address to check.\\n     */\\n    modifier ownerExists(address owner) {\\n        if (!owners.contains(owner)) {\\n            revert OwnerDoesNotExist(owner);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that a proposal exists.\\n     * @param proposalId The proposal ID to check.\\n     */\\n    modifier proposalExists(uint256 proposalId) {\\n        if (proposals[proposalId].destinations.length == 0) {\\n            revert ProposalDoesNotExist(proposalId);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that a proposal has been confirmed by a multisig owner.\\n     * @param proposalId The proposal ID to check.\\n     * @param owner The owner to check.\\n     */\\n    modifier confirmed(uint256 proposalId, address owner) {\\n        if (!proposals[proposalId].confirmations[owner]) {\\n            revert ProposalNotConfirmed(proposalId, owner);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that a proposal has not been confirmed by a multisig owner.\\n     * @param proposalId The proposal ID to check.\\n     * @param owner The owner to check.\\n     */\\n    modifier notConfirmed(uint256 proposalId, address owner) {\\n        if (proposals[proposalId].confirmations[owner]) {\\n            revert ProposalAlreadyConfirmed(proposalId, owner);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that a proposal has not been executed.\\n     * @dev A proposal can only be executed after it is fully confirmed.\\n     * @param proposalId The proposal ID to check.\\n     */\\n    modifier notExecuted(uint256 proposalId) {\\n        if (proposals[proposalId].timestampExecutable == DONE_TIMESTAMP) {\\n            revert ProposalAlreadyExecuted(proposalId);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that an address is not address(0).\\n     * @param addr The address to check.\\n     */\\n    modifier notNull(address addr) {\\n        if (addr == address(0)) {\\n            revert NullAddress();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that each address in a batch of addresses are not address(0).\\n     * @param _addresses The addresses to check.\\n     */\\n    modifier notNullBatch(address[] memory _addresses) {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert NullAddress();\\n            }\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that the values passed for number of multisig owners and required\\n     * confirmation are valid in comparison with the configured thresholds.\\n     * @param ownerCount The owners count to check.\\n     * @param requiredConfirmations The minimum number of confirmations required to consider\\n     * a proposal as fully confirmed.\\n     */\\n    modifier validRequirement(uint256 ownerCount, uint256 requiredConfirmations) {\\n        if (\\n            ownerCount > MAX_OWNER_COUNT ||\\n            requiredConfirmations > ownerCount ||\\n            requiredConfirmations == 0 ||\\n            ownerCount == 0\\n        ) {\\n            revert InvalidRequirement(ownerCount, requiredConfirmations);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that a proposal is scheduled.\\n     * @param proposalId The ID of the proposal to check.\\n     */\\n    modifier scheduled(uint256 proposalId) {\\n        if (!isScheduled(proposalId)) {\\n            revert ProposalNotScheduled(proposalId);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that a proposal is not scheduled.\\n     * @param proposalId The ID of the proposal to check.\\n     */\\n    modifier notScheduled(uint256 proposalId) {\\n        if (isScheduled(proposalId)) {\\n            revert ProposalAlreadyScheduled(proposalId);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that a proposal's time lock has elapsed.\\n     * @param proposalId The ID of the proposal to check.\\n     */\\n    modifier timeLockReached(uint256 proposalId) {\\n        if (!isProposalTimelockReached(proposalId)) {\\n            revert ProposalTimelockNotReached(proposalId);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that a proposal is fully confirmed.\\n     * @param proposalId The ID of the proposal to check.\\n     */\\n    modifier fullyConfirmed(uint256 proposalId) {\\n        if (!isFullyConfirmed(proposalId)) {\\n            revert ProposalNotFullyConfirmed(proposalId);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets `initialized` to  true on implementation contracts.\\n     * @param _minDelay The minimum time in seconds that must elapse before a\\n     * proposal is executable.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(uint256 _minDelay) initializer {\\n        minDelay = _minDelay;\\n    }\\n\\n    receive() external payable {\\n        if (msg.value > 0) {\\n            emit CeloDeposited(msg.sender, msg.value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Bootstraps this contract with initial data.\\n     * @dev This plays the role of a typical contract constructor. Sets initial owners and\\n     * required number of confirmations. The initializer modifier ensures that this function\\n     * is ONLY callable once.\\n     * @param initialOwners The list of initial owners.\\n     * @param requiredConfirmations The number of required confirmations for a proposal\\n     * to be fully confirmed.\\n     * @param _delay The delay that must elapse to be able to execute a proposal.\\n     */\\n    function initialize(\\n        address[] calldata initialOwners,\\n        uint256 requiredConfirmations,\\n        uint256 _delay\\n    ) external initializer validRequirement(initialOwners.length, requiredConfirmations) {\\n        for (uint256 i = 0; i < initialOwners.length; i++) {\\n            if (owners.contains(initialOwners[i])) {\\n                revert OwnerAlreadyExists(initialOwners[i]);\\n            }\\n\\n            if (initialOwners[i] == address(0)) {\\n                revert NullAddress();\\n            }\\n\\n            owners.add(initialOwners[i]);\\n            emit OwnerAdded(initialOwners[i]);\\n        }\\n        _changeRequirement(requiredConfirmations);\\n        _changeDelay(_delay);\\n    }\\n\\n    /**\\n     * @notice Adds a new multisig owner.\\n     * @dev This call can only be made by this contract.\\n     * @param owner The owner to add.\\n     */\\n    function addOwner(address owner)\\n        external\\n        onlyWallet\\n        ownerDoesNotExist(owner)\\n        notNull(owner)\\n        validRequirement(owners.length() + 1, required)\\n    {\\n        owners.add(owner);\\n        emit OwnerAdded(owner);\\n    }\\n\\n    /**\\n     * @notice Removes an existing owner.\\n     * @dev This call can only be made by this contract.\\n     * @param owner The owner to remove.\\n     */\\n    function removeOwner(address owner) external onlyWallet ownerExists(owner) {\\n        if (owners.length() == 1) {\\n            revert CannotRemoveLastOwner(owner);\\n        }\\n\\n        owners.remove(owner);\\n\\n        if (required > owners.length()) {\\n            // Readjust the required amount, since the list of total owners has reduced.\\n            changeRequirement(owners.length());\\n        }\\n        emit OwnerRemoved(owner);\\n    }\\n\\n    /**\\n     * @notice Replaces an existing owner with a new owner.\\n     * @dev This call can only be made by this contract.\\n     * @param owner The owner to be replaced.\\n     */\\n    function replaceOwner(address owner, address newOwner)\\n        external\\n        onlyWallet\\n        ownerExists(owner)\\n        notNull(newOwner)\\n        ownerDoesNotExist(newOwner)\\n    {\\n        owners.remove(owner);\\n        owners.add(newOwner);\\n        emit OwnerRemoved(owner);\\n        emit OwnerAdded(newOwner);\\n    }\\n\\n    /**\\n     * @notice Void a confirmation for a previously confirmed proposal.\\n     * @param proposalId The ID of the proposal to be revoked.\\n     */\\n    function revokeConfirmation(uint256 proposalId)\\n        external\\n        ownerExists(msg.sender)\\n        confirmed(proposalId, msg.sender)\\n        notExecuted(proposalId)\\n    {\\n        proposals[proposalId].confirmations[msg.sender] = false;\\n        emit ConfirmationRevoked(msg.sender, proposalId);\\n    }\\n\\n    /**\\n     * @notice Creates a proposal and triggers the first confirmation on behalf of the\\n     * proposal creator.\\n     * @param destinations The addresses at which the proposal is target at.\\n     * @param values The CELO values involved in the proposal if any.\\n     * @param payloads The payloads of the proposal.\\n     * @return proposalId Returns the ID of the proposal that gets generated.\\n     */\\n    function submitProposal(\\n        address[] calldata destinations,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads\\n    ) external returns (uint256 proposalId) {\\n        if (destinations.length != values.length) {\\n            revert ParamLengthsMismatch();\\n        }\\n\\n        if (destinations.length != payloads.length) {\\n            revert ParamLengthsMismatch();\\n        }\\n        proposalId = addProposal(destinations, values, payloads);\\n        confirmProposal(proposalId);\\n    }\\n\\n    /**\\n     * @notice Get the list of multisig owners.\\n     * @return The list of owner addresses.\\n     */\\n    function getOwners() external view returns (address[] memory) {\\n        return owners.values();\\n    }\\n\\n    /**\\n     * @notice Gets the list of owners' addresses which have confirmed a given proposal.\\n     * @param proposalId The ID of the proposal.\\n     * @return The list of owner addresses.\\n     */\\n    function getConfirmations(uint256 proposalId) external view returns (address[] memory) {\\n        address[] memory confirmationsTemp = new address[](owners.length());\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < owners.length(); i++) {\\n            if (proposals[proposalId].confirmations[owners.at(i)]) {\\n                confirmationsTemp[count] = owners.at(i);\\n                count++;\\n            }\\n        }\\n        address[] memory confirmingOwners = new address[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            confirmingOwners[i] = confirmationsTemp[i];\\n        }\\n        return confirmingOwners;\\n    }\\n\\n    /**\\n     * @notice Gets the destinations, values and payloads of a proposal.\\n     * @param proposalId The ID of the proposal.\\n     * @param destinations The addresses at which the proposal is target at.\\n     * @param values The CELO values involved in the proposal if any.\\n     * @param payloads The payloads of the proposal.\\n     */\\n    function getProposal(uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            address[] memory destinations,\\n            uint256[] memory values,\\n            bytes[] memory payloads\\n        )\\n    {\\n        Proposal storage proposal = proposals[proposalId];\\n        return (proposal.destinations, proposal.values, proposal.payloads);\\n    }\\n\\n    /**\\n     * @notice Changes the number of confirmations required to consider a proposal\\n     * fully confirmed.\\n     * @dev Proposal has to be sent by wallet.\\n     * @param newRequired The new number of confirmations required.\\n     */\\n    function changeRequirement(uint256 newRequired)\\n        public\\n        onlyWallet\\n        validRequirement(owners.length(), newRequired)\\n    {\\n        _changeRequirement(newRequired);\\n    }\\n\\n    /**\\n     * @notice Changes the value of the delay that must\\n     * elapse before a proposal can become executable.\\n     * @dev Proposal has to be sent by wallet.\\n     * @param newDelay The new delay value.\\n     */\\n    function changeDelay(uint256 newDelay) public onlyWallet {\\n        _changeDelay(newDelay);\\n    }\\n\\n    /**\\n     * @notice Confirms a proposal. A proposal is executed if this confirmation\\n     * makes it fully confirmed.\\n     * @param proposalId The ID of the proposal to confirm.\\n     */\\n    function confirmProposal(uint256 proposalId)\\n        public\\n        ownerExists(msg.sender)\\n        proposalExists(proposalId)\\n        notConfirmed(proposalId, msg.sender)\\n    {\\n        proposals[proposalId].confirmations[msg.sender] = true;\\n        emit ProposalConfirmed(msg.sender, proposalId);\\n        if (isFullyConfirmed(proposalId)) {\\n            scheduleProposal(proposalId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Schedules a proposal with a time lock.\\n     * @param proposalId The ID of the proposal to confirm.\\n     */\\n    function scheduleProposal(uint256 proposalId)\\n        public\\n        ownerExists(msg.sender)\\n        notExecuted(proposalId)\\n    {\\n        schedule(proposalId);\\n        emit ProposalScheduled(proposalId);\\n    }\\n\\n    /**\\n     * @notice Executes a proposal. A proposal is only executetable if it is fully confirmed,\\n     * scheduled and the set delay has elapsed.\\n     * @dev Any of the multisig owners can execute a given proposal, even though they may\\n     * not have participated in its confirmation process.\\n     */\\n    function executeProposal(uint256 proposalId)\\n        public\\n        ownerExists(msg.sender)\\n        scheduled(proposalId)\\n        notExecuted(proposalId)\\n        timeLockReached(proposalId)\\n    {\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.timestampExecutable = DONE_TIMESTAMP;\\n\\n        for (uint256 i = 0; i < proposals[proposalId].destinations.length; i++) {\\n            bytes memory returnData = ExternalCall.execute(\\n                proposal.destinations[i],\\n                proposal.values[i],\\n                proposal.payloads[i]\\n            );\\n            emit TransactionExecuted(i, proposalId, returnData);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the timestamp at which a proposal becomes executable.\\n     * @param proposalId The ID of the proposal.\\n     * @return The timestamp at which the proposal becomes executable.\\n     */\\n    function getTimestamp(uint256 proposalId) public view returns (uint256) {\\n        return proposals[proposalId].timestampExecutable;\\n    }\\n\\n    /**\\n     * @notice Returns whether a proposal is scheduled.\\n     * @param proposalId The ID of the proposal to check.\\n     * @return Whether or not the proposal is scheduled.\\n     */\\n    function isScheduled(uint256 proposalId) public view returns (bool) {\\n        return getTimestamp(proposalId) > DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @notice Returns whether a proposal is executable or not.\\n     * A proposal is executable if it is scheduled, the delay has elapsed\\n     * and it is not yet executed.\\n     * @param proposalId The ID of the proposal to check.\\n     * @return Whether or not the time lock is reached.\\n     */\\n    function isProposalTimelockReached(uint256 proposalId) public view returns (bool) {\\n        uint256 timestamp = getTimestamp(proposalId);\\n        return\\n            timestamp <= block.timestamp &&\\n            proposals[proposalId].timestampExecutable > DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @notice Checks that a proposal has been confirmed by at least the `required`\\n     * number of owners.\\n     * @param proposalId The ID of the proposal to check.\\n     * @return Whether or not the proposal is confirmed by the minimum set of owners.\\n     */\\n    function isFullyConfirmed(uint256 proposalId) public view returns (bool) {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < owners.length(); i++) {\\n            if (proposals[proposalId].confirmations[owners.at(i)]) {\\n                count++;\\n            }\\n            if (count == required) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Checks that a proposal is confirmed by an owner.\\n     * @param proposalId The ID of the proposal to check.\\n     * @param owner The address to check.\\n     * @return Whether or not the proposal is confirmed by the given owner.\\n     */\\n    function isConfirmedBy(uint256 proposalId, address owner) public view returns (bool) {\\n        return proposals[proposalId].confirmations[owner];\\n    }\\n\\n    /**\\n     * @notice Checks that an address is a multisig owner.\\n     * @param owner The address to check.\\n     * @return Whether or not the address is a multisig owner.\\n     */\\n    function isOwner(address owner) public view returns (bool) {\\n        return owners.contains(owner);\\n    }\\n\\n    /**\\n     * @notice Adds a new proposal to the proposals list.\\n     * @param destinations The addresses at which the proposal is directed to.\\n     * @param values The CELO valuse involved in the proposal if any.\\n     * @param payloads The payloads of the proposal.\\n     * @return proposalId Returns the ID of the proposal that gets generated.\\n     */\\n    function addProposal(\\n        address[] memory destinations,\\n        uint256[] memory values,\\n        bytes[] memory payloads\\n    ) internal notNullBatch(destinations) returns (uint256 proposalId) {\\n        proposalId = proposalCount;\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        proposal.destinations = destinations;\\n        proposal.values = values;\\n        proposal.payloads = payloads;\\n\\n        proposalCount++;\\n        emit ProposalAdded(proposalId);\\n    }\\n\\n    /**\\n     * @notice Schedules a proposal with a time lock.\\n     * @param proposalId The ID of the proposal to schedule.\\n     */\\n    function schedule(uint256 proposalId)\\n        internal\\n        notScheduled(proposalId)\\n        fullyConfirmed(proposalId)\\n    {\\n        proposals[proposalId].timestampExecutable = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @notice Changes the value of the delay that must\\n     * elapse before a proposal can become executable.\\n     * @param newDelay The new delay value.\\n     */\\n    function _changeDelay(uint256 newDelay) internal {\\n        if (newDelay < minDelay) {\\n            revert InsufficientDelay(newDelay);\\n        }\\n\\n        delay = newDelay;\\n        emit DelayChanged(delay, newDelay);\\n    }\\n\\n    /**\\n     * @notice Changes the number of confirmations required to consider a proposal\\n     * fully confirmed.\\n     * @dev This method does not do any validation, see `changeRequirement`\\n     * for how it is used with the requirement validation modifier.\\n     * @param newRequired The new number of confirmations required.\\n     */\\n    function _changeRequirement(uint256 newRequired) internal {\\n        required = newRequired;\\n        emit RequirementChanged(newRequired);\\n    }\\n\\n    /**\\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\\n     * adds the onlyWallet modifer.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyWallet {}\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 1, 1, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x2ce23f95e5db682a0ccd3cb08b26f626b679c13f5b73f93084df0b6f752a7129\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ExternalCall.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary ExternalCall {\\n    /**\\n     * @notice Used when destination is not a contract.\\n     * @param destination The invalid destination address.\\n     */\\n    error InvalidContractAddress(address destination);\\n\\n    /**\\n     * @notice Used when an execution fails.\\n     */\\n    error ExecutionFailed();\\n\\n    /**\\n     * @notice Executes external call.\\n     * @param destination The address to call.\\n     * @param value The CELO value to be sent.\\n     * @param data The data to be sent.\\n     * @return The call return value.\\n     */\\n    function execute(\\n        address destination,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        if (data.length > 0) {\\n            if (!Address.isContract(destination)) {\\n                revert InvalidContractAddress(destination);\\n            }\\n        }\\n\\n        bool success;\\n        bytes memory returnData;\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success, returnData) = destination.call{value: value}(data);\\n        if (!success) {\\n            revert ExecutionFailed();\\n        }\\n\\n        return returnData;\\n    }\\n}\\n\",\"keccak256\":\"0xb6071cf4b20f6266416e017e25f62c0637e068b4b3f8f1d6627c565a2fea92b9\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60c06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50604051620047d5380380620047d583398181016040528101906200006a9190620001db565b600060019054906101000a900460ff16620000945760008054906101000a900460ff1615620000a5565b620000a46200016a60201b60201c565b5b620000e7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000de9062000294565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000138576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8160a081815250508015620001625760008060016101000a81548160ff0219169083151502179055505b5050620002b6565b600062000182306200018860201b620024ea1760201c565b15905090565b600080823b905060008111915050919050565b600080fd5b6000819050919050565b620001b581620001a0565b8114620001c157600080fd5b50565b600081519050620001d581620001aa565b92915050565b600060208284031215620001f457620001f36200019b565b5b60006200020484828501620001c4565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006200027c602e836200020d565b915062000289826200021e565b604082019050919050565b60006020820190508181036000830152620002af816200026d565b9050919050565b60805160a0516144dd620002f860003960008181611d7e015261291e015260008181610e7d01528181610f0c0152818161104201526110d101526144dd6000f3fe6080604052600436106101c65760003560e01c80637065cb48116100f7578063c63c4e9b11610095578063dc8452cd11610064578063dc8452cd146106f7578063df5aa6b114610722578063e20056e61461074b578063f4a4f4d21461077457610225565b8063c63c4e9b14610637578063c7f758a814610662578063d74f8edd146106a1578063da35c664146106cc57610225565b8063a42606e3116100d1578063a42606e314610557578063b5dc40c314610594578063b633620c146105d1578063ba51a6df1461060e57610225565b80637065cb48146104c65780638a8e784c146104ef578063a0e67e2b1461052c57610225565b80634f1ef2861161016457806354255be01161013e57806354255be0146104075780635eae7959146104355780636a42b8f81461045e5780636e7afa341461048957610225565b80634f1ef286146103855780635037ec62146103a157806352745014146103ca57610225565b806320ea8d86116101a057806320ea8d86146102b95780632f54bf6e146102e25780633659cfe61461031f57806339a08f011461034857610225565b8063013cf08b1461022a5780630d61b51914610267578063173825d91461029057610225565b36610225576000341115610223573373ffffffffffffffffffffffffffffffffffffffff167fb3bcfe4f408c657ba1ce2fc1c3235d37903cb674e54269bfe562874af3fc0f143460405161021a91906133b3565b60405180910390a25b005b600080fd5b34801561023657600080fd5b50610251600480360381019061024c919061340e565b61079d565b60405161025e91906133b3565b60405180910390f35b34801561027357600080fd5b5061028e6004803603810190610289919061340e565b6107bb565b005b34801561029c57600080fd5b506102b760048036038101906102b29190613499565b610ab7565b005b3480156102c557600080fd5b506102e060048036038101906102db919061340e565b610c4e565b005b3480156102ee57600080fd5b5061030960048036038101906103049190613499565b610e5e565b60405161031691906134e1565b60405180910390f35b34801561032b57600080fd5b5061034660048036038101906103419190613499565b610e7b565b005b34801561035457600080fd5b5061036f600480360381019061036a919061340e565b611004565b60405161037c91906134e1565b60405180910390f35b61039f600480360381019061039a9190613642565b611040565b005b3480156103ad57600080fd5b506103c860048036038101906103c3919061340e565b61117d565b005b3480156103d657600080fd5b506103f160048036038101906103ec91906137aa565b6111f9565b6040516103fe91906133b3565b60405180910390f35b34801561041357600080fd5b5061041c611327565b60405161042c949392919061385e565b60405180910390f35b34801561044157600080fd5b5061045c600480360381019061045791906138a3565b611342565b005b34801561046a57600080fd5b506104736116a5565b60405161048091906133b3565b60405180910390f35b34801561049557600080fd5b506104b060048036038101906104ab919061340e565b6116ab565b6040516104bd91906134e1565b60405180910390f35b3480156104d257600080fd5b506104ed60048036038101906104e89190613499565b611782565b005b3480156104fb57600080fd5b5061051660048036038101906105119190613917565b611991565b60405161052391906134e1565b60405180910390f35b34801561053857600080fd5b506105416119fc565b60405161054e9190613a15565b60405180910390f35b34801561056357600080fd5b5061057e6004803603810190610579919061340e565b611a0d565b60405161058b91906134e1565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b6919061340e565b611a22565b6040516105c89190613a15565b60405180910390f35b3480156105dd57600080fd5b506105f860048036038101906105f3919061340e565b611c6b565b60405161060591906133b3565b60405180910390f35b34801561061a57600080fd5b506106356004803603810190610630919061340e565b611c8b565b005b34801561064357600080fd5b5061064c611d7c565b60405161065991906133b3565b60405180910390f35b34801561066e57600080fd5b506106896004803603810190610684919061340e565b611da0565b60405161069893929190613c3f565b60405180910390f35b3480156106ad57600080fd5b506106b6611f83565b6040516106c391906133b3565b60405180910390f35b3480156106d857600080fd5b506106e1611f88565b6040516106ee91906133b3565b60405180910390f35b34801561070357600080fd5b5061070c611f8e565b60405161071991906133b3565b60405180910390f35b34801561072e57600080fd5b506107496004803603810190610744919061340e565b611f94565b005b34801561075757600080fd5b50610772600480360381019061076d9190613c8b565b612082565b005b34801561078057600080fd5b5061079b6004803603810190610796919061340e565b6122be565b005b60026020528060005260406000206000915090508060030154905081565b336107d08160036124fd90919063ffffffff16565b61081157806040517f531e21ce0000000000000000000000000000000000000000000000000000000081526004016108089190613cda565b60405180910390fd5b8161081b81611a0d565b61085c57806040517ffc8f7d5500000000000000000000000000000000000000000000000000000000815260040161085391906133b3565b60405180910390fd5b826001600260008381526020019081526020016000206003015414156108b957806040517f4eec80e60000000000000000000000000000000000000000000000000000000081526004016108b091906133b3565b60405180910390fd5b836108c381611004565b61090457806040517f676790790000000000000000000000000000000000000000000000000000000081526004016108fb91906133b3565b60405180910390fd5b60006002600087815260200190815260200160002090506001816003018190555060005b6002600088815260200190815260200160002060000180549050811015610aae576000610a5e83600001838154811061096457610963613cf5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460010184815481106109a5576109a4613cf5565b5b90600052602060002001548560020185815481106109c6576109c5613cf5565b5b9060005260206000200180546109db90613d53565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0790613d53565b8015610a545780601f10610a2957610100808354040283529160200191610a54565b820191906000526020600020905b815481529060010190602001808311610a3757829003601f168201915b505050505061252d565b9050877f8c24081880749c0e4b467d98c335531022b2e7b74f6e264405138daf13d31e3c8383604051610a92929190613dcf565b60405180910390a2508080610aa690613e2e565b915050610928565b50505050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b2757336040517f03f2b1fd000000000000000000000000000000000000000000000000000000008152600401610b1e9190613cda565b60405180910390fd5b80610b3c8160036124fd90919063ffffffff16565b610b7d57806040517f531e21ce000000000000000000000000000000000000000000000000000000008152600401610b749190613cda565b60405180910390fd5b6001610b89600361263c565b1415610bcc57816040517fb1722f41000000000000000000000000000000000000000000000000000000008152600401610bc39190613cda565b60405180910390fd5b610be082600361265190919063ffffffff16565b50610beb600361263c565b6005541115610c0757610c06610c01600361263c565b611c8b565b5b8173ffffffffffffffffffffffffffffffffffffffff167f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da60405160405180910390a25050565b33610c638160036124fd90919063ffffffff16565b610ca457806040517f531e21ce000000000000000000000000000000000000000000000000000000008152600401610c9b9190613cda565b60405180910390fd5b81336002600083815260200190815260200160002060040160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d4a5781816040517f36308e83000000000000000000000000000000000000000000000000000000008152600401610d41929190613e77565b60405180910390fd5b83600160026000838152602001908152602001600020600301541415610da757806040517f4eec80e6000000000000000000000000000000000000000000000000000000008152600401610d9e91906133b3565b60405180910390fd5b60006002600087815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167f795394da21278ca39d59bb3ca00efeebdc0679acc420916c7385c2c5d942656f60405160405180910390a35050505050565b6000610e748260036124fd90919063ffffffff16565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610f0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0190613f23565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f49612681565b73ffffffffffffffffffffffffffffffffffffffff1614610f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9690613fb5565b60405180910390fd5b610fa8816126d8565b61100181600067ffffffffffffffff811115610fc757610fc6613517565b5b6040519080825280601f01601f191660200182016040528015610ff95781602001600182028036833780820191505090505b50600061274b565b50565b60008061101083611c6b565b9050428111158015611038575060016002600085815260200190815260200160002060030154115b915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c690613f23565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661110e612681565b73ffffffffffffffffffffffffffffffffffffffff1614611164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115b90613fb5565b60405180910390fd5b61116d826126d8565b6111798282600161274b565b5050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111ed57336040517f03f2b1fd0000000000000000000000000000000000000000000000000000000081526004016111e49190613cda565b60405180910390fd5b6111f68161291c565b50565b600084849050878790501461123a576040517f98a8185a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828290508787905014611279576040517f98a8185a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611312878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505085859061130d9190614088565b6129c6565b905061131d816122be565b9695505050505050565b60008060008060018060016000935093509350935090919293565b600060019054906101000a900460ff1661136a5760008054906101000a900460ff1615611373565b611372612b1f565b5b6113b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a99061410f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611402576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8484905083603282118061141557508181115b806114205750600081145b8061142b5750600082145b1561146f5781816040517f3507718800000000000000000000000000000000000000000000000000000000815260040161146692919061412f565b60405180910390fd5b60005b87879050811015611668576114b888888381811061149357611492613cf5565b5b90506020020160208101906114a89190613499565b60036124fd90919063ffffffff16565b15611521578787828181106114d0576114cf613cf5565b5b90506020020160208101906114e59190613499565b6040517f5ba0cba40000000000000000000000000000000000000000000000000000000081526004016115189190613cda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1688888381811061154c5761154b613cf5565b5b90506020020160208101906115619190613499565b73ffffffffffffffffffffffffffffffffffffffff1614156115af576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115ea8888838181106115c5576115c4613cf5565b5b90506020020160208101906115da9190613499565b6003612b3090919063ffffffff16565b508787828181106115fe576115fd613cf5565b5b90506020020160208101906116139190613499565b73ffffffffffffffffffffffffffffffffffffffff167f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c360405160405180910390a2808061166090613e2e565b915050611472565b5061167285612b60565b61167b8461291c565b5050801561169e5760008060016101000a81548160ff0219169083151502179055505b5050505050565b60015481565b6000806000905060005b6116bf600361263c565b811015611776576002600085815260200190815260200160002060040160006116f2836003612ba190919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561174e57818061174a90613e2e565b9250505b6005548214156117635760019250505061177d565b808061176e90613e2e565b9150506116b5565b5060009150505b919050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117f257336040517f03f2b1fd0000000000000000000000000000000000000000000000000000000081526004016117e99190613cda565b60405180910390fd5b806118078160036124fd90919063ffffffff16565b1561184957806040517f5ba0cba40000000000000000000000000000000000000000000000000000000081526004016118409190613cda565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118b1576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016118bd600361263c565b6118c79190614158565b60055460328211806118d857508181115b806118e35750600081145b806118ee5750600082145b156119325781816040517f3507718800000000000000000000000000000000000000000000000000000000815260040161192992919061412f565b60405180910390fd5b611946856003612b3090919063ffffffff16565b508473ffffffffffffffffffffffffffffffffffffffff167f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c360405160405180910390a25050505050565b60006002600084815260200190815260200160002060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060611a086003612bbb565b905090565b60006001611a1a83611c6b565b119050919050565b60606000611a30600361263c565b67ffffffffffffffff811115611a4957611a48613517565b5b604051908082528060200260200182016040528015611a775781602001602082028036833780820191505090505b5090506000805b611a88600361263c565b811015611b8b57600260008681526020019081526020016000206004016000611abb836003612ba190919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611b7857611b1c816003612ba190919063ffffffff16565b838381518110611b2f57611b2e613cf5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180611b7490613e2e565b9250505b8080611b8390613e2e565b915050611a7e565b5060008167ffffffffffffffff811115611ba857611ba7613517565b5b604051908082528060200260200182016040528015611bd65781602001602082028036833780820191505090505b50905060005b82811015611c5f57838181518110611bf757611bf6613cf5565b5b6020026020010151828281518110611c1257611c11613cf5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080611c5790613e2e565b915050611bdc565b50809350505050919050565b600060026000838152602001908152602001600020600301549050919050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cfb57336040517f03f2b1fd000000000000000000000000000000000000000000000000000000008152600401611cf29190613cda565b60405180910390fd5b611d05600361263c565b816032821180611d1457508181115b80611d1f5750600081145b80611d2a5750600082145b15611d6e5781816040517f35077188000000000000000000000000000000000000000000000000000000008152600401611d6592919061412f565b60405180910390fd5b611d7783612b60565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060806060600060026000868152602001908152602001600020905080600001816001018260020182805480602002602001604051908101604052809291908181526020018280548015611e4957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611dff575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015611e9b57602002820191906000526020600020905b815481526020019060010190808311611e87575b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015611f6f578382906000526020600020018054611ee290613d53565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0e90613d53565b8015611f5b5780601f10611f3057610100808354040283529160200191611f5b565b820191906000526020600020905b815481529060010190602001808311611f3e57829003601f168201915b505050505081526020019060010190611ec3565b505050509050935093509350509193909250565b603281565b60065481565b60055481565b33611fa98160036124fd90919063ffffffff16565b611fea57806040517f531e21ce000000000000000000000000000000000000000000000000000000008152600401611fe19190613cda565b60405180910390fd5b8160016002600083815260200190815260200160002060030154141561204757806040517f4eec80e600000000000000000000000000000000000000000000000000000000815260040161203e91906133b3565b60405180910390fd5b61205083612bdc565b827f8b9c2cfee0d20895490bae51f33d88197032bb221b15e360155508136257569a60405160405180910390a2505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120f257336040517f03f2b1fd0000000000000000000000000000000000000000000000000000000081526004016120e99190613cda565b60405180910390fd5b816121078160036124fd90919063ffffffff16565b61214857806040517f531e21ce00000000000000000000000000000000000000000000000000000000815260040161213f9190613cda565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121b0576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826121c58160036124fd90919063ffffffff16565b1561220757806040517f5ba0cba40000000000000000000000000000000000000000000000000000000081526004016121fe9190613cda565b60405180910390fd5b61221b85600361265190919063ffffffff16565b50612230846003612b3090919063ffffffff16565b508473ffffffffffffffffffffffffffffffffffffffff167f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da60405160405180910390a28373ffffffffffffffffffffffffffffffffffffffff167f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c360405160405180910390a25050505050565b336122d38160036124fd90919063ffffffff16565b61231457806040517f531e21ce00000000000000000000000000000000000000000000000000000000815260040161230b9190613cda565b60405180910390fd5b8160006002600083815260200190815260200160002060000180549050141561237457806040517f4f01742000000000000000000000000000000000000000000000000000000000815260040161236b91906133b3565b60405180910390fd5b82336002600083815260200190815260200160002060040160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561241b5781816040517f3d5ba205000000000000000000000000000000000000000000000000000000008152600401612412929190613e77565b60405180910390fd5b60016002600087815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167f03c76756bd7402ca4b074fa11dfd2a209452c67f6f414cff1d8e9795d291421760405160405180910390a36124d4856116ab565b156124e3576124e285611f94565b5b5050505050565b600080823b905060008111915050919050565b6000612525836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612ca0565b905092915050565b606060008251111561258457612542846124ea565b61258357836040517f19bb402900000000000000000000000000000000000000000000000000000000815260040161257a9190613cda565b60405180910390fd5b5b600060608573ffffffffffffffffffffffffffffffffffffffff1685856040516125ae91906141ea565b60006040518083038185875af1925050503d80600081146125eb576040519150601f19603f3d011682016040523d82523d6000602084013e6125f0565b606091505b50809250819350505081612630576040517facfdb44400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80925050509392505050565b600061264a82600001612cc3565b9050919050565b6000612679836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612cd4565b905092915050565b60006126af7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612de8565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461274857336040517f03f2b1fd00000000000000000000000000000000000000000000000000000000815260040161273f9190613cda565b60405180910390fd5b50565b6000612755612681565b905061276084612df2565b60008351118061276d5750815b1561277e5761277c8484612eab565b505b60006127ac7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612ed8565b90508060000160009054906101000a900460ff166129155760018160000160006101000a81548160ff02191690831515021790555061287885836040516024016127f69190613cda565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612eab565b5060008160000160006101000a81548160ff02191690831515021790555061289e612681565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461290b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290290614273565b60405180910390fd5b61291485612ee2565b5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081101561298157806040517f08462b5c00000000000000000000000000000000000000000000000000000000815260040161297891906133b3565b60405180910390fd5b806001819055507fe238f342cc2d86b842f1511bd768de5dbea53639f6b5335c5d877543bc355c71600154826040516129bb92919061412f565b60405180910390a150565b60008360005b8151811015612a6957600073ffffffffffffffffffffffffffffffffffffffff16828281518110612a00576129ff613cf5565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415612a56576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8080612a6190613e2e565b9150506129cc565b506006549150600060026000848152602001908152602001600020905085816000019080519060200190612a9e92919061315c565b5084816001019080519060200190612ab79291906131e6565b5083816002019080519060200190612ad0929190613233565b5060066000815480929190612ae490613e2e565b9190505550827f3f802220982dbddc337f1811180e73513e775b18380401997927fd1454cfd0bd60405160405180910390a250509392505050565b6000612b2a306124ea565b15905090565b6000612b58836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612f31565b905092915050565b806005819055507facbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da81604051612b9691906133b3565b60405180910390a150565b6000612bb08360000183612fa1565b60001c905092915050565b60606000612bcb83600001612fcc565b905060608190508092505050919050565b80612be681611a0d565b15612c2857806040517fd61102f5000000000000000000000000000000000000000000000000000000008152600401612c1f91906133b3565b60405180910390fd5b81612c32816116ab565b612c7357806040517f4e59425a000000000000000000000000000000000000000000000000000000008152600401612c6a91906133b3565b60405180910390fd5b60015442612c819190614158565b6002600085815260200190815260200160002060030181905550505050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b60008083600101600084815260200190815260200160002054905060008114612ddc576000600182612d069190614293565b9050600060018660000180549050612d1e9190614293565b9050818114612d8d576000866000018281548110612d3f57612d3e613cf5565b5b9060005260206000200154905080876000018481548110612d6357612d62613cf5565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612da157612da06142c7565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612de2565b60009150505b92915050565b6000819050919050565b612dfb816124ea565b612e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3190614368565b60405180910390fd5b80612e677f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612de8565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060612ed0838360405180606001604052806027815260200161448160279139613028565b905092915050565b6000819050919050565b612eeb81612df2565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6000612f3d8383612ca0565b612f96578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612f9b565b600090505b92915050565b6000826000018281548110612fb957612fb8613cf5565b5b9060005260206000200154905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561301c57602002820191906000526020600020905b815481526020019060010190808311613008575b50505050509050919050565b6060613033846124ea565b613072576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613069906143fa565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161309a91906141ea565b600060405180830381855af49150503d80600081146130d5576040519150601f19603f3d011682016040523d82523d6000602084013e6130da565b606091505b50915091506130ea8282866130f5565b925050509392505050565b6060831561310557829050613155565b6000835111156131185782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161314c919061445e565b60405180910390fd5b9392505050565b8280548282559060005260206000209081019282156131d5579160200282015b828111156131d45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061317c565b5b5090506131e29190613293565b5090565b828054828255906000526020600020908101928215613222579160200282015b82811115613221578251825591602001919060010190613206565b5b50905061322f9190613293565b5090565b828054828255906000526020600020908101928215613282579160200282015b828111156132815782518290805190602001906132719291906132b0565b5091602001919060010190613253565b5b50905061328f9190613336565b5090565b5b808211156132ac576000816000905550600101613294565b5090565b8280546132bc90613d53565b90600052602060002090601f0160209004810192826132de5760008555613325565b82601f106132f757805160ff1916838001178555613325565b82800160010185558215613325579182015b82811115613324578251825591602001919060010190613309565b5b5090506133329190613293565b5090565b5b80821115613356576000818161334d919061335a565b50600101613337565b5090565b50805461336690613d53565b6000825580601f106133785750613397565b601f0160209004906000526020600020908101906133969190613293565b5b50565b6000819050919050565b6133ad8161339a565b82525050565b60006020820190506133c860008301846133a4565b92915050565b6000604051905090565b600080fd5b600080fd5b6133eb8161339a565b81146133f657600080fd5b50565b600081359050613408816133e2565b92915050565b600060208284031215613424576134236133d8565b5b6000613432848285016133f9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134668261343b565b9050919050565b6134768161345b565b811461348157600080fd5b50565b6000813590506134938161346d565b92915050565b6000602082840312156134af576134ae6133d8565b5b60006134bd84828501613484565b91505092915050565b60008115159050919050565b6134db816134c6565b82525050565b60006020820190506134f660008301846134d2565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61354f82613506565b810181811067ffffffffffffffff8211171561356e5761356d613517565b5b80604052505050565b60006135816133ce565b905061358d8282613546565b919050565b600067ffffffffffffffff8211156135ad576135ac613517565b5b6135b682613506565b9050602081019050919050565b82818337600083830152505050565b60006135e56135e084613592565b613577565b90508281526020810184848401111561360157613600613501565b5b61360c8482856135c3565b509392505050565b600082601f830112613629576136286134fc565b5b81356136398482602086016135d2565b91505092915050565b60008060408385031215613659576136586133d8565b5b600061366785828601613484565b925050602083013567ffffffffffffffff811115613688576136876133dd565b5b61369485828601613614565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126136be576136bd6134fc565b5b8235905067ffffffffffffffff8111156136db576136da61369e565b5b6020830191508360208202830111156136f7576136f66136a3565b5b9250929050565b60008083601f840112613714576137136134fc565b5b8235905067ffffffffffffffff8111156137315761373061369e565b5b60208301915083602082028301111561374d5761374c6136a3565b5b9250929050565b60008083601f84011261376a576137696134fc565b5b8235905067ffffffffffffffff8111156137875761378661369e565b5b6020830191508360208202830111156137a3576137a26136a3565b5b9250929050565b600080600080600080606087890312156137c7576137c66133d8565b5b600087013567ffffffffffffffff8111156137e5576137e46133dd565b5b6137f189828a016136a8565b9650965050602087013567ffffffffffffffff811115613814576138136133dd565b5b61382089828a016136fe565b9450945050604087013567ffffffffffffffff811115613843576138426133dd565b5b61384f89828a01613754565b92509250509295509295509295565b600060808201905061387360008301876133a4565b61388060208301866133a4565b61388d60408301856133a4565b61389a60608301846133a4565b95945050505050565b600080600080606085870312156138bd576138bc6133d8565b5b600085013567ffffffffffffffff8111156138db576138da6133dd565b5b6138e7878288016136a8565b945094505060206138fa878288016133f9565b925050604061390b878288016133f9565b91505092959194509250565b6000806040838503121561392e5761392d6133d8565b5b600061393c858286016133f9565b925050602061394d85828601613484565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61398c8161345b565b82525050565b600061399e8383613983565b60208301905092915050565b6000602082019050919050565b60006139c282613957565b6139cc8185613962565b93506139d783613973565b8060005b83811015613a085781516139ef8882613992565b97506139fa836139aa565b9250506001810190506139db565b5085935050505092915050565b60006020820190508181036000830152613a2f81846139b7565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613a6c8161339a565b82525050565b6000613a7e8383613a63565b60208301905092915050565b6000602082019050919050565b6000613aa282613a37565b613aac8185613a42565b9350613ab783613a53565b8060005b83811015613ae8578151613acf8882613a72565b9750613ada83613a8a565b925050600181019050613abb565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b5b578082015181840152602081019050613b40565b83811115613b6a576000848401525b50505050565b6000613b7b82613b21565b613b858185613b2c565b9350613b95818560208601613b3d565b613b9e81613506565b840191505092915050565b6000613bb58383613b70565b905092915050565b6000602082019050919050565b6000613bd582613af5565b613bdf8185613b00565b935083602082028501613bf185613b11565b8060005b85811015613c2d5784840389528151613c0e8582613ba9565b9450613c1983613bbd565b925060208a01995050600181019050613bf5565b50829750879550505050505092915050565b60006060820190508181036000830152613c5981866139b7565b90508181036020830152613c6d8185613a97565b90508181036040830152613c818184613bca565b9050949350505050565b60008060408385031215613ca257613ca16133d8565b5b6000613cb085828601613484565b9250506020613cc185828601613484565b9150509250929050565b613cd48161345b565b82525050565b6000602082019050613cef6000830184613ccb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613d6b57607f821691505b60208210811415613d7f57613d7e613d24565b5b50919050565b600082825260208201905092915050565b6000613da182613b21565b613dab8185613d85565b9350613dbb818560208601613b3d565b613dc481613506565b840191505092915050565b6000604082019050613de460008301856133a4565b8181036020830152613df68184613d96565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613e398261339a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e6c57613e6b613dff565b5b600182019050919050565b6000604082019050613e8c60008301856133a4565b613e996020830184613ccb565b9392505050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613f0d602c83613ea0565b9150613f1882613eb1565b604082019050919050565b60006020820190508181036000830152613f3c81613f00565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613f9f602c83613ea0565b9150613faa82613f43565b604082019050919050565b60006020820190508181036000830152613fce81613f92565b9050919050565b600067ffffffffffffffff821115613ff057613fef613517565b5b602082029050602081019050919050565b600061401461400f84613fd5565b613577565b90508083825260208201905060208402830185811115614037576140366136a3565b5b835b8181101561407e57803567ffffffffffffffff81111561405c5761405b6134fc565b5b8086016140698982613614565b85526020850194505050602081019050614039565b5050509392505050565b6000614095368484614001565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006140f9602e83613ea0565b91506141048261409d565b604082019050919050565b60006020820190508181036000830152614128816140ec565b9050919050565b600060408201905061414460008301856133a4565b61415160208301846133a4565b9392505050565b60006141638261339a565b915061416e8361339a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156141a3576141a2613dff565b5b828201905092915050565b600081905092915050565b60006141c482613b21565b6141ce81856141ae565b93506141de818560208601613b3d565b80840191505092915050565b60006141f682846141b9565b915081905092915050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b600061425d602f83613ea0565b915061426882614201565b604082019050919050565b6000602082019050818103600083015261428c81614250565b9050919050565b600061429e8261339a565b91506142a98361339a565b9250828210156142bc576142bb613dff565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614352602d83613ea0565b915061435d826142f6565b604082019050919050565b6000602082019050818103600083015261438181614345565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006143e4602683613ea0565b91506143ef82614388565b604082019050919050565b60006020820190508181036000830152614413816143d7565b9050919050565b600081519050919050565b60006144308261441a565b61443a8185613ea0565b935061444a818560208601613b3d565b61445381613506565b840191505092915050565b600060208201905081810360008301526144788184614425565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fdb250088c8954af51c60fd437a113e7b0ddf9a80ebd03256a96dec7135264f764736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c80637065cb48116100f7578063c63c4e9b11610095578063dc8452cd11610064578063dc8452cd146106f7578063df5aa6b114610722578063e20056e61461074b578063f4a4f4d21461077457610225565b8063c63c4e9b14610637578063c7f758a814610662578063d74f8edd146106a1578063da35c664146106cc57610225565b8063a42606e3116100d1578063a42606e314610557578063b5dc40c314610594578063b633620c146105d1578063ba51a6df1461060e57610225565b80637065cb48146104c65780638a8e784c146104ef578063a0e67e2b1461052c57610225565b80634f1ef2861161016457806354255be01161013e57806354255be0146104075780635eae7959146104355780636a42b8f81461045e5780636e7afa341461048957610225565b80634f1ef286146103855780635037ec62146103a157806352745014146103ca57610225565b806320ea8d86116101a057806320ea8d86146102b95780632f54bf6e146102e25780633659cfe61461031f57806339a08f011461034857610225565b8063013cf08b1461022a5780630d61b51914610267578063173825d91461029057610225565b36610225576000341115610223573373ffffffffffffffffffffffffffffffffffffffff167fb3bcfe4f408c657ba1ce2fc1c3235d37903cb674e54269bfe562874af3fc0f143460405161021a91906133b3565b60405180910390a25b005b600080fd5b34801561023657600080fd5b50610251600480360381019061024c919061340e565b61079d565b60405161025e91906133b3565b60405180910390f35b34801561027357600080fd5b5061028e6004803603810190610289919061340e565b6107bb565b005b34801561029c57600080fd5b506102b760048036038101906102b29190613499565b610ab7565b005b3480156102c557600080fd5b506102e060048036038101906102db919061340e565b610c4e565b005b3480156102ee57600080fd5b5061030960048036038101906103049190613499565b610e5e565b60405161031691906134e1565b60405180910390f35b34801561032b57600080fd5b5061034660048036038101906103419190613499565b610e7b565b005b34801561035457600080fd5b5061036f600480360381019061036a919061340e565b611004565b60405161037c91906134e1565b60405180910390f35b61039f600480360381019061039a9190613642565b611040565b005b3480156103ad57600080fd5b506103c860048036038101906103c3919061340e565b61117d565b005b3480156103d657600080fd5b506103f160048036038101906103ec91906137aa565b6111f9565b6040516103fe91906133b3565b60405180910390f35b34801561041357600080fd5b5061041c611327565b60405161042c949392919061385e565b60405180910390f35b34801561044157600080fd5b5061045c600480360381019061045791906138a3565b611342565b005b34801561046a57600080fd5b506104736116a5565b60405161048091906133b3565b60405180910390f35b34801561049557600080fd5b506104b060048036038101906104ab919061340e565b6116ab565b6040516104bd91906134e1565b60405180910390f35b3480156104d257600080fd5b506104ed60048036038101906104e89190613499565b611782565b005b3480156104fb57600080fd5b5061051660048036038101906105119190613917565b611991565b60405161052391906134e1565b60405180910390f35b34801561053857600080fd5b506105416119fc565b60405161054e9190613a15565b60405180910390f35b34801561056357600080fd5b5061057e6004803603810190610579919061340e565b611a0d565b60405161058b91906134e1565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b6919061340e565b611a22565b6040516105c89190613a15565b60405180910390f35b3480156105dd57600080fd5b506105f860048036038101906105f3919061340e565b611c6b565b60405161060591906133b3565b60405180910390f35b34801561061a57600080fd5b506106356004803603810190610630919061340e565b611c8b565b005b34801561064357600080fd5b5061064c611d7c565b60405161065991906133b3565b60405180910390f35b34801561066e57600080fd5b506106896004803603810190610684919061340e565b611da0565b60405161069893929190613c3f565b60405180910390f35b3480156106ad57600080fd5b506106b6611f83565b6040516106c391906133b3565b60405180910390f35b3480156106d857600080fd5b506106e1611f88565b6040516106ee91906133b3565b60405180910390f35b34801561070357600080fd5b5061070c611f8e565b60405161071991906133b3565b60405180910390f35b34801561072e57600080fd5b506107496004803603810190610744919061340e565b611f94565b005b34801561075757600080fd5b50610772600480360381019061076d9190613c8b565b612082565b005b34801561078057600080fd5b5061079b6004803603810190610796919061340e565b6122be565b005b60026020528060005260406000206000915090508060030154905081565b336107d08160036124fd90919063ffffffff16565b61081157806040517f531e21ce0000000000000000000000000000000000000000000000000000000081526004016108089190613cda565b60405180910390fd5b8161081b81611a0d565b61085c57806040517ffc8f7d5500000000000000000000000000000000000000000000000000000000815260040161085391906133b3565b60405180910390fd5b826001600260008381526020019081526020016000206003015414156108b957806040517f4eec80e60000000000000000000000000000000000000000000000000000000081526004016108b091906133b3565b60405180910390fd5b836108c381611004565b61090457806040517f676790790000000000000000000000000000000000000000000000000000000081526004016108fb91906133b3565b60405180910390fd5b60006002600087815260200190815260200160002090506001816003018190555060005b6002600088815260200190815260200160002060000180549050811015610aae576000610a5e83600001838154811061096457610963613cf5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460010184815481106109a5576109a4613cf5565b5b90600052602060002001548560020185815481106109c6576109c5613cf5565b5b9060005260206000200180546109db90613d53565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0790613d53565b8015610a545780601f10610a2957610100808354040283529160200191610a54565b820191906000526020600020905b815481529060010190602001808311610a3757829003601f168201915b505050505061252d565b9050877f8c24081880749c0e4b467d98c335531022b2e7b74f6e264405138daf13d31e3c8383604051610a92929190613dcf565b60405180910390a2508080610aa690613e2e565b915050610928565b50505050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b2757336040517f03f2b1fd000000000000000000000000000000000000000000000000000000008152600401610b1e9190613cda565b60405180910390fd5b80610b3c8160036124fd90919063ffffffff16565b610b7d57806040517f531e21ce000000000000000000000000000000000000000000000000000000008152600401610b749190613cda565b60405180910390fd5b6001610b89600361263c565b1415610bcc57816040517fb1722f41000000000000000000000000000000000000000000000000000000008152600401610bc39190613cda565b60405180910390fd5b610be082600361265190919063ffffffff16565b50610beb600361263c565b6005541115610c0757610c06610c01600361263c565b611c8b565b5b8173ffffffffffffffffffffffffffffffffffffffff167f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da60405160405180910390a25050565b33610c638160036124fd90919063ffffffff16565b610ca457806040517f531e21ce000000000000000000000000000000000000000000000000000000008152600401610c9b9190613cda565b60405180910390fd5b81336002600083815260200190815260200160002060040160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d4a5781816040517f36308e83000000000000000000000000000000000000000000000000000000008152600401610d41929190613e77565b60405180910390fd5b83600160026000838152602001908152602001600020600301541415610da757806040517f4eec80e6000000000000000000000000000000000000000000000000000000008152600401610d9e91906133b3565b60405180910390fd5b60006002600087815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167f795394da21278ca39d59bb3ca00efeebdc0679acc420916c7385c2c5d942656f60405160405180910390a35050505050565b6000610e748260036124fd90919063ffffffff16565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610f0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0190613f23565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f49612681565b73ffffffffffffffffffffffffffffffffffffffff1614610f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9690613fb5565b60405180910390fd5b610fa8816126d8565b61100181600067ffffffffffffffff811115610fc757610fc6613517565b5b6040519080825280601f01601f191660200182016040528015610ff95781602001600182028036833780820191505090505b50600061274b565b50565b60008061101083611c6b565b9050428111158015611038575060016002600085815260200190815260200160002060030154115b915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c690613f23565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661110e612681565b73ffffffffffffffffffffffffffffffffffffffff1614611164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115b90613fb5565b60405180910390fd5b61116d826126d8565b6111798282600161274b565b5050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111ed57336040517f03f2b1fd0000000000000000000000000000000000000000000000000000000081526004016111e49190613cda565b60405180910390fd5b6111f68161291c565b50565b600084849050878790501461123a576040517f98a8185a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828290508787905014611279576040517f98a8185a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611312878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505085859061130d9190614088565b6129c6565b905061131d816122be565b9695505050505050565b60008060008060018060016000935093509350935090919293565b600060019054906101000a900460ff1661136a5760008054906101000a900460ff1615611373565b611372612b1f565b5b6113b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a99061410f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611402576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8484905083603282118061141557508181115b806114205750600081145b8061142b5750600082145b1561146f5781816040517f3507718800000000000000000000000000000000000000000000000000000000815260040161146692919061412f565b60405180910390fd5b60005b87879050811015611668576114b888888381811061149357611492613cf5565b5b90506020020160208101906114a89190613499565b60036124fd90919063ffffffff16565b15611521578787828181106114d0576114cf613cf5565b5b90506020020160208101906114e59190613499565b6040517f5ba0cba40000000000000000000000000000000000000000000000000000000081526004016115189190613cda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1688888381811061154c5761154b613cf5565b5b90506020020160208101906115619190613499565b73ffffffffffffffffffffffffffffffffffffffff1614156115af576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115ea8888838181106115c5576115c4613cf5565b5b90506020020160208101906115da9190613499565b6003612b3090919063ffffffff16565b508787828181106115fe576115fd613cf5565b5b90506020020160208101906116139190613499565b73ffffffffffffffffffffffffffffffffffffffff167f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c360405160405180910390a2808061166090613e2e565b915050611472565b5061167285612b60565b61167b8461291c565b5050801561169e5760008060016101000a81548160ff0219169083151502179055505b5050505050565b60015481565b6000806000905060005b6116bf600361263c565b811015611776576002600085815260200190815260200160002060040160006116f2836003612ba190919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561174e57818061174a90613e2e565b9250505b6005548214156117635760019250505061177d565b808061176e90613e2e565b9150506116b5565b5060009150505b919050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117f257336040517f03f2b1fd0000000000000000000000000000000000000000000000000000000081526004016117e99190613cda565b60405180910390fd5b806118078160036124fd90919063ffffffff16565b1561184957806040517f5ba0cba40000000000000000000000000000000000000000000000000000000081526004016118409190613cda565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118b1576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016118bd600361263c565b6118c79190614158565b60055460328211806118d857508181115b806118e35750600081145b806118ee5750600082145b156119325781816040517f3507718800000000000000000000000000000000000000000000000000000000815260040161192992919061412f565b60405180910390fd5b611946856003612b3090919063ffffffff16565b508473ffffffffffffffffffffffffffffffffffffffff167f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c360405160405180910390a25050505050565b60006002600084815260200190815260200160002060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060611a086003612bbb565b905090565b60006001611a1a83611c6b565b119050919050565b60606000611a30600361263c565b67ffffffffffffffff811115611a4957611a48613517565b5b604051908082528060200260200182016040528015611a775781602001602082028036833780820191505090505b5090506000805b611a88600361263c565b811015611b8b57600260008681526020019081526020016000206004016000611abb836003612ba190919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611b7857611b1c816003612ba190919063ffffffff16565b838381518110611b2f57611b2e613cf5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180611b7490613e2e565b9250505b8080611b8390613e2e565b915050611a7e565b5060008167ffffffffffffffff811115611ba857611ba7613517565b5b604051908082528060200260200182016040528015611bd65781602001602082028036833780820191505090505b50905060005b82811015611c5f57838181518110611bf757611bf6613cf5565b5b6020026020010151828281518110611c1257611c11613cf5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080611c5790613e2e565b915050611bdc565b50809350505050919050565b600060026000838152602001908152602001600020600301549050919050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cfb57336040517f03f2b1fd000000000000000000000000000000000000000000000000000000008152600401611cf29190613cda565b60405180910390fd5b611d05600361263c565b816032821180611d1457508181115b80611d1f5750600081145b80611d2a5750600082145b15611d6e5781816040517f35077188000000000000000000000000000000000000000000000000000000008152600401611d6592919061412f565b60405180910390fd5b611d7783612b60565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060806060600060026000868152602001908152602001600020905080600001816001018260020182805480602002602001604051908101604052809291908181526020018280548015611e4957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611dff575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015611e9b57602002820191906000526020600020905b815481526020019060010190808311611e87575b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015611f6f578382906000526020600020018054611ee290613d53565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0e90613d53565b8015611f5b5780601f10611f3057610100808354040283529160200191611f5b565b820191906000526020600020905b815481529060010190602001808311611f3e57829003601f168201915b505050505081526020019060010190611ec3565b505050509050935093509350509193909250565b603281565b60065481565b60055481565b33611fa98160036124fd90919063ffffffff16565b611fea57806040517f531e21ce000000000000000000000000000000000000000000000000000000008152600401611fe19190613cda565b60405180910390fd5b8160016002600083815260200190815260200160002060030154141561204757806040517f4eec80e600000000000000000000000000000000000000000000000000000000815260040161203e91906133b3565b60405180910390fd5b61205083612bdc565b827f8b9c2cfee0d20895490bae51f33d88197032bb221b15e360155508136257569a60405160405180910390a2505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120f257336040517f03f2b1fd0000000000000000000000000000000000000000000000000000000081526004016120e99190613cda565b60405180910390fd5b816121078160036124fd90919063ffffffff16565b61214857806040517f531e21ce00000000000000000000000000000000000000000000000000000000815260040161213f9190613cda565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121b0576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826121c58160036124fd90919063ffffffff16565b1561220757806040517f5ba0cba40000000000000000000000000000000000000000000000000000000081526004016121fe9190613cda565b60405180910390fd5b61221b85600361265190919063ffffffff16565b50612230846003612b3090919063ffffffff16565b508473ffffffffffffffffffffffffffffffffffffffff167f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da60405160405180910390a28373ffffffffffffffffffffffffffffffffffffffff167f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c360405160405180910390a25050505050565b336122d38160036124fd90919063ffffffff16565b61231457806040517f531e21ce00000000000000000000000000000000000000000000000000000000815260040161230b9190613cda565b60405180910390fd5b8160006002600083815260200190815260200160002060000180549050141561237457806040517f4f01742000000000000000000000000000000000000000000000000000000000815260040161236b91906133b3565b60405180910390fd5b82336002600083815260200190815260200160002060040160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561241b5781816040517f3d5ba205000000000000000000000000000000000000000000000000000000008152600401612412929190613e77565b60405180910390fd5b60016002600087815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167f03c76756bd7402ca4b074fa11dfd2a209452c67f6f414cff1d8e9795d291421760405160405180910390a36124d4856116ab565b156124e3576124e285611f94565b5b5050505050565b600080823b905060008111915050919050565b6000612525836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612ca0565b905092915050565b606060008251111561258457612542846124ea565b61258357836040517f19bb402900000000000000000000000000000000000000000000000000000000815260040161257a9190613cda565b60405180910390fd5b5b600060608573ffffffffffffffffffffffffffffffffffffffff1685856040516125ae91906141ea565b60006040518083038185875af1925050503d80600081146125eb576040519150601f19603f3d011682016040523d82523d6000602084013e6125f0565b606091505b50809250819350505081612630576040517facfdb44400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80925050509392505050565b600061264a82600001612cc3565b9050919050565b6000612679836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612cd4565b905092915050565b60006126af7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612de8565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461274857336040517f03f2b1fd00000000000000000000000000000000000000000000000000000000815260040161273f9190613cda565b60405180910390fd5b50565b6000612755612681565b905061276084612df2565b60008351118061276d5750815b1561277e5761277c8484612eab565b505b60006127ac7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612ed8565b90508060000160009054906101000a900460ff166129155760018160000160006101000a81548160ff02191690831515021790555061287885836040516024016127f69190613cda565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612eab565b5060008160000160006101000a81548160ff02191690831515021790555061289e612681565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461290b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290290614273565b60405180910390fd5b61291485612ee2565b5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081101561298157806040517f08462b5c00000000000000000000000000000000000000000000000000000000815260040161297891906133b3565b60405180910390fd5b806001819055507fe238f342cc2d86b842f1511bd768de5dbea53639f6b5335c5d877543bc355c71600154826040516129bb92919061412f565b60405180910390a150565b60008360005b8151811015612a6957600073ffffffffffffffffffffffffffffffffffffffff16828281518110612a00576129ff613cf5565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415612a56576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8080612a6190613e2e565b9150506129cc565b506006549150600060026000848152602001908152602001600020905085816000019080519060200190612a9e92919061315c565b5084816001019080519060200190612ab79291906131e6565b5083816002019080519060200190612ad0929190613233565b5060066000815480929190612ae490613e2e565b9190505550827f3f802220982dbddc337f1811180e73513e775b18380401997927fd1454cfd0bd60405160405180910390a250509392505050565b6000612b2a306124ea565b15905090565b6000612b58836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612f31565b905092915050565b806005819055507facbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da81604051612b9691906133b3565b60405180910390a150565b6000612bb08360000183612fa1565b60001c905092915050565b60606000612bcb83600001612fcc565b905060608190508092505050919050565b80612be681611a0d565b15612c2857806040517fd61102f5000000000000000000000000000000000000000000000000000000008152600401612c1f91906133b3565b60405180910390fd5b81612c32816116ab565b612c7357806040517f4e59425a000000000000000000000000000000000000000000000000000000008152600401612c6a91906133b3565b60405180910390fd5b60015442612c819190614158565b6002600085815260200190815260200160002060030181905550505050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b60008083600101600084815260200190815260200160002054905060008114612ddc576000600182612d069190614293565b9050600060018660000180549050612d1e9190614293565b9050818114612d8d576000866000018281548110612d3f57612d3e613cf5565b5b9060005260206000200154905080876000018481548110612d6357612d62613cf5565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612da157612da06142c7565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612de2565b60009150505b92915050565b6000819050919050565b612dfb816124ea565b612e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3190614368565b60405180910390fd5b80612e677f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612de8565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060612ed0838360405180606001604052806027815260200161448160279139613028565b905092915050565b6000819050919050565b612eeb81612df2565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6000612f3d8383612ca0565b612f96578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612f9b565b600090505b92915050565b6000826000018281548110612fb957612fb8613cf5565b5b9060005260206000200154905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561301c57602002820191906000526020600020905b815481526020019060010190808311613008575b50505050509050919050565b6060613033846124ea565b613072576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613069906143fa565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161309a91906141ea565b600060405180830381855af49150503d80600081146130d5576040519150601f19603f3d011682016040523d82523d6000602084013e6130da565b606091505b50915091506130ea8282866130f5565b925050509392505050565b6060831561310557829050613155565b6000835111156131185782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161314c919061445e565b60405180910390fd5b9392505050565b8280548282559060005260206000209081019282156131d5579160200282015b828111156131d45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061317c565b5b5090506131e29190613293565b5090565b828054828255906000526020600020908101928215613222579160200282015b82811115613221578251825591602001919060010190613206565b5b50905061322f9190613293565b5090565b828054828255906000526020600020908101928215613282579160200282015b828111156132815782518290805190602001906132719291906132b0565b5091602001919060010190613253565b5b50905061328f9190613336565b5090565b5b808211156132ac576000816000905550600101613294565b5090565b8280546132bc90613d53565b90600052602060002090601f0160209004810192826132de5760008555613325565b82601f106132f757805160ff1916838001178555613325565b82800160010185558215613325579182015b82811115613324578251825591602001919060010190613309565b5b5090506133329190613293565b5090565b5b80821115613356576000818161334d919061335a565b50600101613337565b5090565b50805461336690613d53565b6000825580601f106133785750613397565b601f0160209004906000526020600020908101906133969190613293565b5b50565b6000819050919050565b6133ad8161339a565b82525050565b60006020820190506133c860008301846133a4565b92915050565b6000604051905090565b600080fd5b600080fd5b6133eb8161339a565b81146133f657600080fd5b50565b600081359050613408816133e2565b92915050565b600060208284031215613424576134236133d8565b5b6000613432848285016133f9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134668261343b565b9050919050565b6134768161345b565b811461348157600080fd5b50565b6000813590506134938161346d565b92915050565b6000602082840312156134af576134ae6133d8565b5b60006134bd84828501613484565b91505092915050565b60008115159050919050565b6134db816134c6565b82525050565b60006020820190506134f660008301846134d2565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61354f82613506565b810181811067ffffffffffffffff8211171561356e5761356d613517565b5b80604052505050565b60006135816133ce565b905061358d8282613546565b919050565b600067ffffffffffffffff8211156135ad576135ac613517565b5b6135b682613506565b9050602081019050919050565b82818337600083830152505050565b60006135e56135e084613592565b613577565b90508281526020810184848401111561360157613600613501565b5b61360c8482856135c3565b509392505050565b600082601f830112613629576136286134fc565b5b81356136398482602086016135d2565b91505092915050565b60008060408385031215613659576136586133d8565b5b600061366785828601613484565b925050602083013567ffffffffffffffff811115613688576136876133dd565b5b61369485828601613614565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126136be576136bd6134fc565b5b8235905067ffffffffffffffff8111156136db576136da61369e565b5b6020830191508360208202830111156136f7576136f66136a3565b5b9250929050565b60008083601f840112613714576137136134fc565b5b8235905067ffffffffffffffff8111156137315761373061369e565b5b60208301915083602082028301111561374d5761374c6136a3565b5b9250929050565b60008083601f84011261376a576137696134fc565b5b8235905067ffffffffffffffff8111156137875761378661369e565b5b6020830191508360208202830111156137a3576137a26136a3565b5b9250929050565b600080600080600080606087890312156137c7576137c66133d8565b5b600087013567ffffffffffffffff8111156137e5576137e46133dd565b5b6137f189828a016136a8565b9650965050602087013567ffffffffffffffff811115613814576138136133dd565b5b61382089828a016136fe565b9450945050604087013567ffffffffffffffff811115613843576138426133dd565b5b61384f89828a01613754565b92509250509295509295509295565b600060808201905061387360008301876133a4565b61388060208301866133a4565b61388d60408301856133a4565b61389a60608301846133a4565b95945050505050565b600080600080606085870312156138bd576138bc6133d8565b5b600085013567ffffffffffffffff8111156138db576138da6133dd565b5b6138e7878288016136a8565b945094505060206138fa878288016133f9565b925050604061390b878288016133f9565b91505092959194509250565b6000806040838503121561392e5761392d6133d8565b5b600061393c858286016133f9565b925050602061394d85828601613484565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61398c8161345b565b82525050565b600061399e8383613983565b60208301905092915050565b6000602082019050919050565b60006139c282613957565b6139cc8185613962565b93506139d783613973565b8060005b83811015613a085781516139ef8882613992565b97506139fa836139aa565b9250506001810190506139db565b5085935050505092915050565b60006020820190508181036000830152613a2f81846139b7565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613a6c8161339a565b82525050565b6000613a7e8383613a63565b60208301905092915050565b6000602082019050919050565b6000613aa282613a37565b613aac8185613a42565b9350613ab783613a53565b8060005b83811015613ae8578151613acf8882613a72565b9750613ada83613a8a565b925050600181019050613abb565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b5b578082015181840152602081019050613b40565b83811115613b6a576000848401525b50505050565b6000613b7b82613b21565b613b858185613b2c565b9350613b95818560208601613b3d565b613b9e81613506565b840191505092915050565b6000613bb58383613b70565b905092915050565b6000602082019050919050565b6000613bd582613af5565b613bdf8185613b00565b935083602082028501613bf185613b11565b8060005b85811015613c2d5784840389528151613c0e8582613ba9565b9450613c1983613bbd565b925060208a01995050600181019050613bf5565b50829750879550505050505092915050565b60006060820190508181036000830152613c5981866139b7565b90508181036020830152613c6d8185613a97565b90508181036040830152613c818184613bca565b9050949350505050565b60008060408385031215613ca257613ca16133d8565b5b6000613cb085828601613484565b9250506020613cc185828601613484565b9150509250929050565b613cd48161345b565b82525050565b6000602082019050613cef6000830184613ccb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613d6b57607f821691505b60208210811415613d7f57613d7e613d24565b5b50919050565b600082825260208201905092915050565b6000613da182613b21565b613dab8185613d85565b9350613dbb818560208601613b3d565b613dc481613506565b840191505092915050565b6000604082019050613de460008301856133a4565b8181036020830152613df68184613d96565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613e398261339a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e6c57613e6b613dff565b5b600182019050919050565b6000604082019050613e8c60008301856133a4565b613e996020830184613ccb565b9392505050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613f0d602c83613ea0565b9150613f1882613eb1565b604082019050919050565b60006020820190508181036000830152613f3c81613f00565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613f9f602c83613ea0565b9150613faa82613f43565b604082019050919050565b60006020820190508181036000830152613fce81613f92565b9050919050565b600067ffffffffffffffff821115613ff057613fef613517565b5b602082029050602081019050919050565b600061401461400f84613fd5565b613577565b90508083825260208201905060208402830185811115614037576140366136a3565b5b835b8181101561407e57803567ffffffffffffffff81111561405c5761405b6134fc565b5b8086016140698982613614565b85526020850194505050602081019050614039565b5050509392505050565b6000614095368484614001565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006140f9602e83613ea0565b91506141048261409d565b604082019050919050565b60006020820190508181036000830152614128816140ec565b9050919050565b600060408201905061414460008301856133a4565b61415160208301846133a4565b9392505050565b60006141638261339a565b915061416e8361339a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156141a3576141a2613dff565b5b828201905092915050565b600081905092915050565b60006141c482613b21565b6141ce81856141ae565b93506141de818560208601613b3d565b80840191505092915050565b60006141f682846141b9565b915081905092915050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b600061425d602f83613ea0565b915061426882614201565b604082019050919050565b6000602082019050818103600083015261428c81614250565b9050919050565b600061429e8261339a565b91506142a98361339a565b9250828210156142bc576142bb613dff565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614352602d83613ea0565b915061435d826142f6565b604082019050919050565b6000602082019050818103600083015261438181614345565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006143e4602683613ea0565b91506143ef82614388565b604082019050919050565b60006020820190508181036000830152614413816143d7565b9050919050565b600081519050919050565b60006144308261441a565b61443a8185613ea0565b935061444a818560208601613b3d565b61445381613506565b840191505092915050565b600060208201905081810360008301526144788184614425565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fdb250088c8954af51c60fd437a113e7b0ddf9a80ebd03256a96dec7135264f764736f6c634300080b0033",
  "devdoc": {
    "author": "Stefan George - <stefan.george@consensys.net>",
    "details": "NOTE: This contract has its limitations and is not viable for every multi-signature setup. On a case by case basis, evaluate whether this is the correct contract for your use case. In particular, this contract doesn't have an atomic \"add owners and increase requirement\" operation. This can be tricky, for example, in a situation where a MultiSig starts out owned by a single owner. Safely increasing the owner set and requirement at the same time is not trivial. One way to work around this situation is to first add a second address controlled by the original owner, increase the requirement, and then replace the auxillary address with the intended second owner. Again, this is just one example, in general make sure to verify this contract will support your intended usage. The goal of this contract is to offer a simple, minimal multi-signature API that's easy to understand even for novice Solidity users. Forked from github.com/celo-org/celo-monorepo/blob/master/packages/protocol/contracts/common/MultiSig.sol",
    "errors": {
      "CannotRemoveLastOwner(address)": [
        {
          "params": {
            "owner": "The last owner."
          }
        }
      ],
      "InsufficientDelay(uint256)": [
        {
          "params": {
            "delay": "The insufficient delay."
          }
        }
      ],
      "InvalidContractAddress(address)": [
        {
          "params": {
            "destination": "The invalid destination address."
          }
        }
      ],
      "InvalidRequirement(uint256,uint256)": [
        {
          "params": {
            "ownerCount": "The count of owners.",
            "required": "The number of required confirmations."
          }
        }
      ],
      "OwnerAlreadyExists(address)": [
        {
          "params": {
            "owner": "The address of the owner."
          }
        }
      ],
      "OwnerDoesNotExist(address)": [
        {
          "params": {
            "owner": "The address of the owner."
          }
        }
      ],
      "ProposalAlreadyConfirmed(uint256,address)": [
        {
          "params": {
            "owner": "The address of the owner which confirmed the proposal.",
            "proposalId": "The ID of the proposal that is already confirmed."
          }
        }
      ],
      "ProposalAlreadyExecuted(uint256)": [
        {
          "params": {
            "proposalId": "The ID of the proposal that is already executed."
          }
        }
      ],
      "ProposalAlreadyScheduled(uint256)": [
        {
          "params": {
            "proposalId": "The ID of the proposal which is already scheduled."
          }
        }
      ],
      "ProposalDoesNotExist(uint256)": [
        {
          "params": {
            "proposalId": "The ID of the non-existent proposal."
          }
        }
      ],
      "ProposalNotConfirmed(uint256,address)": [
        {
          "params": {
            "owner": "The address of the owner which did not confirm the proposal.",
            "proposalId": "The ID of the proposal that is not confirmed."
          }
        }
      ],
      "ProposalNotFullyConfirmed(uint256)": [
        {
          "details": "A proposal is fully confirmed when the `required` threshold of confirmations has been met.",
          "params": {
            "proposalId": "The ID of the proposal that is not fully confirmed."
          }
        }
      ],
      "ProposalNotScheduled(uint256)": [
        {
          "params": {
            "proposalId": "The ID of the proposal which is not scheduled."
          }
        }
      ],
      "ProposalTimelockNotReached(uint256)": [
        {
          "params": {
            "proposalId": "The ID of the proposal whose time lock has not been reached yet."
          }
        }
      ],
      "SenderMustBeMultisigWallet(address)": [
        {
          "params": {
            "account": "The sender which triggered the function."
          }
        }
      ]
    },
    "events": {
      "CeloDeposited(address,uint256)": {
        "params": {
          "sender": "The account which sent the CELO.",
          "value": "The amount of CELO sent."
        }
      },
      "ConfirmationRevoked(address,uint256)": {
        "params": {
          "proposalId": "The ID of the proposal.",
          "sender": "The address of the sender."
        }
      },
      "DelayChanged(uint256,uint256)": {
        "params": {
          "delay": "The current delay value.",
          "newDelay": "The new delay value."
        }
      },
      "OwnerAdded(address)": {
        "params": {
          "owner": "The added owner."
        }
      },
      "OwnerRemoved(address)": {
        "params": {
          "owner": "The removed owner."
        }
      },
      "ProposalAdded(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal that was added."
        }
      },
      "ProposalConfirmed(address,uint256)": {
        "params": {
          "proposalId": "The ID of the proposal.",
          "sender": "The address of the sender."
        }
      },
      "ProposalExecuted(uint256,bytes)": {
        "params": {
          "proposalId": "The ID of the proposal that was executed.",
          "returnData": "The response that was recieved from the external call."
        }
      },
      "ProposalScheduled(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal that is scheduled."
        }
      },
      "RequirementChanged(uint256)": {
        "params": {
          "required": "The new required amount."
        }
      },
      "TransactionExecuted(uint256,uint256,bytes)": {
        "params": {
          "index": "The index of the transaction within the proposal.",
          "proposalId": "The ID of the proposal.",
          "returnData": "The response that was recieved from the external call."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addOwner(address)": {
        "details": "This call can only be made by this contract.",
        "params": {
          "owner": "The owner to add."
        }
      },
      "changeDelay(uint256)": {
        "details": "Proposal has to be sent by wallet.",
        "params": {
          "newDelay": "The new delay value."
        }
      },
      "changeRequirement(uint256)": {
        "details": "Proposal has to be sent by wallet.",
        "params": {
          "newRequired": "The new number of confirmations required."
        }
      },
      "confirmProposal(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal to confirm."
        }
      },
      "constructor": {
        "params": {
          "_minDelay": "The minimum time in seconds that must elapse before a proposal is executable."
        }
      },
      "executeProposal(uint256)": {
        "details": "Any of the multisig owners can execute a given proposal, even though they may not have participated in its confirmation process."
      },
      "getConfirmations(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal."
        },
        "returns": {
          "_0": "The list of owner addresses."
        }
      },
      "getOwners()": {
        "returns": {
          "_0": "The list of owner addresses."
        }
      },
      "getProposal(uint256)": {
        "params": {
          "destinations": "The addresses at which the proposal is target at.",
          "payloads": "The payloads of the proposal.",
          "proposalId": "The ID of the proposal.",
          "values": "The CELO values involved in the proposal if any."
        }
      },
      "getTimestamp(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal."
        },
        "returns": {
          "_0": "The timestamp at which the proposal becomes executable."
        }
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "Storage version of the contract.",
          "_1": "Major version of the contract.",
          "_2": "Minor version of the contract.",
          "_3": "Patch version of the contract."
        }
      },
      "initialize(address[],uint256,uint256)": {
        "details": "This plays the role of a typical contract constructor. Sets initial owners and required number of confirmations. The initializer modifier ensures that this function is ONLY callable once.",
        "params": {
          "_delay": "The delay that must elapse to be able to execute a proposal.",
          "initialOwners": "The list of initial owners.",
          "requiredConfirmations": "The number of required confirmations for a proposal to be fully confirmed."
        }
      },
      "isConfirmedBy(uint256,address)": {
        "params": {
          "owner": "The address to check.",
          "proposalId": "The ID of the proposal to check."
        },
        "returns": {
          "_0": "Whether or not the proposal is confirmed by the given owner."
        }
      },
      "isFullyConfirmed(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal to check."
        },
        "returns": {
          "_0": "Whether or not the proposal is confirmed by the minimum set of owners."
        }
      },
      "isOwner(address)": {
        "params": {
          "owner": "The address to check."
        },
        "returns": {
          "_0": "Whether or not the address is a multisig owner."
        }
      },
      "isProposalTimelockReached(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal to check."
        },
        "returns": {
          "_0": "Whether or not the time lock is reached."
        }
      },
      "isScheduled(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal to check."
        },
        "returns": {
          "_0": "Whether or not the proposal is scheduled."
        }
      },
      "removeOwner(address)": {
        "details": "This call can only be made by this contract.",
        "params": {
          "owner": "The owner to remove."
        }
      },
      "replaceOwner(address,address)": {
        "details": "This call can only be made by this contract.",
        "params": {
          "owner": "The owner to be replaced."
        }
      },
      "revokeConfirmation(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal to be revoked."
        }
      },
      "scheduleProposal(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal to confirm."
        }
      },
      "submitProposal(address[],uint256[],bytes[])": {
        "params": {
          "destinations": "The addresses at which the proposal is target at.",
          "payloads": "The payloads of the proposal.",
          "values": "The CELO values involved in the proposal if any."
        },
        "returns": {
          "proposalId": "Returns the ID of the proposal that gets generated."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Multisignature wallet - Allows multiple parties to agree on proposals before execution.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotRemoveLastOwner(address)": [
        {
          "notice": "Used when attempting to remove the last owner."
        }
      ],
      "ExecutionFailed()": [
        {
          "notice": "Used when an execution fails."
        }
      ],
      "InsufficientDelay(uint256)": [
        {
          "notice": "Used when a provided value is less than the minimum time lock delay."
        }
      ],
      "InvalidContractAddress(address)": [
        {
          "notice": "Used when destination is not a contract."
        }
      ],
      "InvalidRequirement(uint256,uint256)": [
        {
          "notice": "Used when the set threshold values for owner and minimum required confirmations are not met."
        }
      ],
      "NullAddress()": [
        {
          "notice": "Used when a passed address is address(0)."
        }
      ],
      "OwnerAlreadyExists(address)": [
        {
          "notice": "Used when attempting to add an already existing owner."
        }
      ],
      "OwnerDoesNotExist(address)": [
        {
          "notice": "Used when an owner does not exist."
        }
      ],
      "ParamLengthsMismatch()": [
        {
          "notice": "Used when the sizes of the provided arrays params do not match when submitting a proposal."
        }
      ],
      "ProposalAlreadyConfirmed(uint256,address)": [
        {
          "notice": "Used when a proposal is already confirmed by an owner."
        }
      ],
      "ProposalAlreadyExecuted(uint256)": [
        {
          "notice": "Used when a proposal has been executed."
        }
      ],
      "ProposalAlreadyScheduled(uint256)": [
        {
          "notice": "Used when attempting to schedule an already scheduled proposal."
        }
      ],
      "ProposalDoesNotExist(uint256)": [
        {
          "notice": "Used when a proposal does not exist."
        }
      ],
      "ProposalNotConfirmed(uint256,address)": [
        {
          "notice": "Used when a proposal is not confirmed by a given owner."
        }
      ],
      "ProposalNotFullyConfirmed(uint256)": [
        {
          "notice": "Used when a proposal is not fully confirmed."
        }
      ],
      "ProposalNotScheduled(uint256)": [
        {
          "notice": "Used when a proposal is not scheduled."
        }
      ],
      "ProposalTimelockNotReached(uint256)": [
        {
          "notice": "Used when a time lock delay is not reached."
        }
      ],
      "SenderMustBeMultisigWallet(address)": [
        {
          "notice": "Used when sender is not this contract in an `onlyWallet` function."
        }
      ]
    },
    "events": {
      "CeloDeposited(address,uint256)": {
        "notice": "Emitted when CELO is sent to this contract."
      },
      "ConfirmationRevoked(address,uint256)": {
        "notice": "Used when a confirmation is successfully revoked."
      },
      "DelayChanged(uint256,uint256)": {
        "notice": "Used when `delay` is changed."
      },
      "OwnerAdded(address)": {
        "notice": "Emitted when an Owner is successfully added as part of the multisig."
      },
      "OwnerRemoved(address)": {
        "notice": "Emitted when an Owner is successfully removed from the multisig."
      },
      "ProposalAdded(uint256)": {
        "notice": "Used when a proposal is successfully added."
      },
      "ProposalConfirmed(address,uint256)": {
        "notice": "Used when a proposal is successfully confirmed."
      },
      "ProposalExecuted(uint256,bytes)": {
        "notice": "Emitted when a confirmed proposal is successfully executed."
      },
      "ProposalScheduled(uint256)": {
        "notice": "Emitted when a proposal is scheduled."
      },
      "RequirementChanged(uint256)": {
        "notice": "Emitted when the minimum amount of required confirmations is successfully changed."
      },
      "TransactionExecuted(uint256,uint256,bytes)": {
        "notice": "Emitted when one of the transactions that make up a proposal is successfully executed."
      }
    },
    "kind": "user",
    "methods": {
      "MAX_OWNER_COUNT()": {
        "notice": "The maximum number of multisig owners."
      },
      "addOwner(address)": {
        "notice": "Adds a new multisig owner."
      },
      "changeDelay(uint256)": {
        "notice": "Changes the value of the delay that must elapse before a proposal can become executable."
      },
      "changeRequirement(uint256)": {
        "notice": "Changes the number of confirmations required to consider a proposal fully confirmed."
      },
      "confirmProposal(uint256)": {
        "notice": "Confirms a proposal. A proposal is executed if this confirmation makes it fully confirmed."
      },
      "constructor": {
        "notice": "Sets `initialized` to  true on implementation contracts."
      },
      "delay()": {
        "notice": "The delay that must elapse to be able to execute a proposal."
      },
      "executeProposal(uint256)": {
        "notice": "Executes a proposal. A proposal is only executetable if it is fully confirmed, scheduled and the set delay has elapsed."
      },
      "getConfirmations(uint256)": {
        "notice": "Gets the list of owners' addresses which have confirmed a given proposal."
      },
      "getOwners()": {
        "notice": "Get the list of multisig owners."
      },
      "getProposal(uint256)": {
        "notice": "Gets the destinations, values and payloads of a proposal."
      },
      "getTimestamp(uint256)": {
        "notice": "Returns the timestamp at which a proposal becomes executable."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "initialize(address[],uint256,uint256)": {
        "notice": "Bootstraps this contract with initial data."
      },
      "isConfirmedBy(uint256,address)": {
        "notice": "Checks that a proposal is confirmed by an owner."
      },
      "isFullyConfirmed(uint256)": {
        "notice": "Checks that a proposal has been confirmed by at least the `required` number of owners."
      },
      "isOwner(address)": {
        "notice": "Checks that an address is a multisig owner."
      },
      "isProposalTimelockReached(uint256)": {
        "notice": "Returns whether a proposal is executable or not. A proposal is executable if it is scheduled, the delay has elapsed and it is not yet executed."
      },
      "isScheduled(uint256)": {
        "notice": "Returns whether a proposal is scheduled."
      },
      "minDelay()": {
        "notice": "The minimum time in seconds that must elapse before a proposal is executable."
      },
      "proposalCount()": {
        "notice": "The total count of proposals."
      },
      "proposals(uint256)": {
        "notice": "Keyed by proposal ID, the Proposal record."
      },
      "removeOwner(address)": {
        "notice": "Removes an existing owner."
      },
      "replaceOwner(address,address)": {
        "notice": "Replaces an existing owner with a new owner."
      },
      "required()": {
        "notice": "The amount of confirmations required for a proposal to be fully confirmed."
      },
      "revokeConfirmation(uint256)": {
        "notice": "Void a confirmation for a previously confirmed proposal."
      },
      "scheduleProposal(uint256)": {
        "notice": "Schedules a proposal with a time lock."
      },
      "submitProposal(address[],uint256[],bytes[])": {
        "notice": "Creates a proposal and triggers the first confirmation on behalf of the proposal creator."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1669,
        "contract": "contracts/common/MultiSig.sol:MultiSig",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1672,
        "contract": "contracts/common/MultiSig.sol:MultiSig",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9287,
        "contract": "contracts/common/MultiSig.sol:MultiSig",
        "label": "delay",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9293,
        "contract": "contracts/common/MultiSig.sol:MultiSig",
        "label": "proposals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Proposal)9284_storage)"
      },
      {
        "astId": 9297,
        "contract": "contracts/common/MultiSig.sol:MultiSig",
        "label": "owners",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3765_storage"
      },
      {
        "astId": 9300,
        "contract": "contracts/common/MultiSig.sol:MultiSig",
        "label": "required",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9303,
        "contract": "contracts/common/MultiSig.sol:MultiSig",
        "label": "proposalCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)9284_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiSig.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)9284_storage"
      },
      "t_struct(AddressSet)3765_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3764,
            "contract": "contracts/common/MultiSig.sol:MultiSig",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3464_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Proposal)9284_storage": {
        "encoding": "inplace",
        "label": "struct MultiSig.Proposal",
        "members": [
          {
            "astId": 9271,
            "contract": "contracts/common/MultiSig.sol:MultiSig",
            "label": "destinations",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9274,
            "contract": "contracts/common/MultiSig.sol:MultiSig",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9277,
            "contract": "contracts/common/MultiSig.sol:MultiSig",
            "label": "payloads",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 9279,
            "contract": "contracts/common/MultiSig.sol:MultiSig",
            "label": "timestampExecutable",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9283,
            "contract": "contracts/common/MultiSig.sol:MultiSig",
            "label": "confirmations",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)3464_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3459,
            "contract": "contracts/common/MultiSig.sol:MultiSig",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3463,
            "contract": "contracts/common/MultiSig.sol:MultiSig",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}