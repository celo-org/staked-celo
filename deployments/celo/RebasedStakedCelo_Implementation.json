{
  "address": "0x58fc5556DFb1A1b23e32B395F6522aA86C14713C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZeroNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FailedDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FailedWithdrawal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InputLargerThanTotalAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        }
      ],
      "name": "PauserSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakedCeloDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakedCeloWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAUSED_POSITION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_POSITION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stCeloAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakedCelo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedCeloBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stCeloAmount",
          "type": "uint256"
        }
      ],
      "name": "toRebasedStakedCelo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rstCeloAmount",
          "type": "uint256"
        }
      ],
      "name": "toStakedCelo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stCeloAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd959eed6ae6a183ff172dc4e3154a57c045422bc3e28f8579c76376176aa684b",
  "receipt": {
    "to": null,
    "from": "0x5bC1C4C1D67C5E4384189302BC653A611568a788",
    "contractAddress": "0x58fc5556DFb1A1b23e32B395F6522aA86C14713C",
    "transactionIndex": 0,
    "gasUsed": "3336414",
    "logsBloom": "0x
    "blockHash": "0x1162d5169b45e4b4086a9336311dfa9a4555216b342213a32ece3d119a34322a",
    "transactionHash": "0xd959eed6ae6a183ff172dc4e3154a57c045422bc3e28f8579c76376176aa684b",
    "logs": [],
    "blockNumber": 25159315,
    "cumulativeGasUsed": "3336414",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "bc5d8aac7d0c7b5a1cef2b494d304103",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZeroNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedWithdrawal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputLargerThanTotalAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"PauserSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakedCeloDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakedCeloWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAUSED_POSITION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_POSITION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stCeloAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedCelo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedCeloBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stCeloAmount\",\"type\":\"uint256\"}],\"name\":\"toRebasedStakedCelo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rstCeloAmount\",\"type\":\"uint256\"}],\"name\":\"toStakedCelo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stCeloAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract depends on the Account and StakedCelo contracts to calculate the amount of rstCELO held by depositors.\",\"errors\":{\"FailedDeposit(address,uint256)\":[{\"params\":{\"amount\":\"The amount of stCELO the depositor attempted to deposit.\",\"depositor\":\"The address of the depositor.\"}}],\"FailedWithdrawal(address,uint256)\":[{\"params\":{\"amount\":\"The amount of stCELO the withdrawer attempted to withdraw.\",\"withdrawer\":\"The address of the withdrawer.\"}}],\"InsufficientBalance(uint256)\":[{\"params\":{\"amount\":\"The amount of stCELO that is insufficient.\"}}]},\"events\":{\"StakedCeloDeposited(address,uint256)\":{\"params\":{\"amount\":\"The amount of stCELO deposited.\",\"depositor\":\"The address of the depositor.\"}},\"StakedCeloWithdrawn(address,uint256)\":{\"params\":{\"amount\":\"The amount of stCELO withdrawn.\",\"withdrawer\":\"The address of the withdrawer.\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"params\":{\"_account\":\"The address of interest.\"},\"returns\":{\"_0\":\"The amount of rstCELO owned by the address.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"details\":\"Although rstCELO is never minted to any account, the rstCELO balance is calculated based on the account's deposited stCELO. See `balanceOf()` function below.\",\"params\":{\"stCeloAmount\":\"The Amount of stCELO to be deposited.\"}},\"getVersionNumber()\":{\"returns\":{\"_0\":\"Storage version of the contract.\",\"_1\":\"Major version of the contract.\",\"_2\":\"Minor version of the contract.\",\"_3\":\"Patch version of the contract.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,address,address)\":{\"params\":{\"_account\":\"The address of the Account contract.\",\"_owner\":\"The address of the contract owner.\",\"_stakedCelo\":\"The address of the StakedCelo contract.\"}},\"isPaused()\":{\"returns\":{\"_0\":\"`true` if the contract is paused, `false` otherwise.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"toRebasedStakedCelo(uint256)\":{\"params\":{\"stCeloAmount\":\"The amount of stCELO.\"},\"returns\":{\"_0\":\"The amount of rstCELO represented by stCELO.\"}},\"toStakedCelo(uint256)\":{\"params\":{\"rstCeloAmount\":\"The amount of rstCELO.\"},\"returns\":{\"_0\":\"The amount of stCELO represented by rstCELO.\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The calculated total supply of rstCELO.\"}},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint256)\":{\"params\":{\"stCeloAmount\":\"The amount of stCELO to withdraw.\"}}},\"title\":\"An ERC-20 wrapper contract that receives stCELO and represents the underlying voted LockedGold in the StakedCelo system.\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressZeroNotAllowed()\":[{\"notice\":\"Used when attempting to pass in address zero where not allowed.\"}],\"FailedDeposit(address,uint256)\":[{\"notice\":\"Used when deposit fails.\"}],\"FailedWithdrawal(address,uint256)\":[{\"notice\":\"Used when withdrawal fails.\"}],\"InputLargerThanTotalAmount()\":[{\"notice\":\"Used when input amount of token is greater than total token amount.\"}],\"InsufficientBalance(uint256)\":[{\"notice\":\"Used when a balance is too low.\"}],\"OnlyPauser()\":[{\"notice\":\"Used when an `onlyPauser` function is called with a different address.\"}],\"Paused()\":[{\"notice\":\"Used when an `onlyWhenNotPaused` function is called while the contract is paused.\"}],\"ZeroAmount()\":[{\"notice\":\"Used when the deposit amount is zero.\"}]},\"events\":{\"ContractPaused()\":{\"notice\":\"Emitted when this contract is paused.\"},\"ContractUnpaused()\":{\"notice\":\"Emitted when this contract is unpaused.\"},\"PauserSet(address)\":{\"notice\":\"Emitted when the address authorized to pause/unpause the contract is changed.\"},\"StakedCeloDeposited(address,uint256)\":{\"notice\":\"Used when a deposit is successfuly completed.\"},\"StakedCeloWithdrawn(address,uint256)\":{\"notice\":\"Used when a withdrawal is successfully completed.\"}},\"kind\":\"user\",\"methods\":{\"PAUSED_POSITION()\":{\"notice\":\"The storage slot under which we store a boolean representing whether or not the contract is currently paused.\"},\"PAUSER_POSITION()\":{\"notice\":\"The storage slot under which we store an address representing the address permissioned to pause/unpause this contract.\"},\"balanceOf(address)\":{\"notice\":\"Used to query the rstCELO balance of an address.\"},\"constructor\":{\"notice\":\"Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized.\"},\"deposit(uint256)\":{\"notice\":\"Deposit stCELO in return for rstCELO.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"initialize(address,address,address)\":{\"notice\":\"Replaces the constructor for proxy implementation.\"},\"isPaused()\":{\"notice\":\"Returns whether or not the contract is paused.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"pauser()\":{\"notice\":\"Returns the address permissioned to pause/unpause this contract.\"},\"setPauser()\":{\"notice\":\"Sets that address permissioned to pause/unpause this contract to the owner of this contract.\"},\"stakedCeloBalance(address)\":{\"notice\":\"Keyed by depositor address, the amount of stCELO deposited.\"},\"toRebasedStakedCelo(uint256)\":{\"notice\":\"Computes the amount of rstCELO that is represented by an amount of stCELO.\"},\"toStakedCelo(uint256)\":{\"notice\":\"Computes the amount of stCELO that is represented by an amount of rstCELO.\"},\"totalDeposit()\":{\"notice\":\"Total amount of stCELO deposited in this contract.\"},\"totalSupply()\":{\"notice\":\"Used to query the total supply of rstCELO.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws stCELO. This function transfers back some or all of sender's previously deposited stCELO amount.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RebasedStakedCelo.sol\":\"RebasedStakedCelo\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"contracts/Managed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title Used via inheritance to grant special access control to the Manager\\n * contract.\\n */\\nabstract contract Managed is Errors, Initializable, OwnableUpgradeable {\\n    address public manager;\\n\\n    /**\\n     * @notice Emitted when the manager is initially set or later modified.\\n     * @param manager The new managing account address.\\n     */\\n    event ManagerSet(address indexed manager);\\n\\n    /**\\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManager(address caller);\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        if (manager != msg.sender) {\\n            revert CallerNotManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function setManager(address _manager) external onlyOwner {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract in an upgradable context.\\n     * @param _manager The initial managing address.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Managed_init(address _manager) internal onlyInitializing {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function _setManager(address _manager) internal {\\n        if (_manager == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xdc8295fafa6b34f9ee48868045a6c01c4844bb3a596e3b25b8d6bb29dce15617\",\"license\":\"LGPL-3.0-only\"},\"contracts/Pausable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IPausable.sol\\\";\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title A helper contract to add pasuing functionality to a contract.\\n * @notice Used to prevent/mitigate damage in case an exploit is found in the\\n * extending contract.\\n */\\nabstract contract Pausable is Errors, IPausable {\\n    /**\\n     * @notice The storage slot under which we store a boolean representing\\n     * whether or not the contract is currently paused.\\n     */\\n    bytes32 public constant PAUSED_POSITION =\\n        bytes32(uint256(keccak256(\\\"staked-celo.pausable.paused\\\")) - 1);\\n    /**\\n     * @notice The storage slot under which we store an address representing the\\n     * address permissioned to pause/unpause this contract.\\n     */\\n    bytes32 public constant PAUSER_POSITION =\\n        bytes32(uint256(keccak256(\\\"staked-celo.pausable.pauser\\\")) - 1);\\n\\n    /**\\n     * Emitted when this contract is paused.\\n     */\\n    event ContractPaused();\\n\\n    /**\\n     * Emitted when this contract is unpaused.\\n     */\\n    event ContractUnpaused();\\n\\n    /**\\n     * @notice Emitted when the address authorized to pause/unpause the contract is\\n     * changed.\\n     * @param pauser THe new pauser.\\n     */\\n    event PauserSet(address pauser);\\n\\n    /**\\n     * @notice Used when an `onlyWhenNotPaused` function is called while the\\n     * contract is paused.\\n     */\\n    error Paused();\\n\\n    /**\\n     * @notice Used when an `onlyPauser` function is called with a different\\n     * address.\\n     */\\n    error OnlyPauser();\\n\\n    /**\\n     * @notice Reverts if the contract is paused.\\n     */\\n    modifier onlyWhenNotPaused() {\\n        if (isPaused()) {\\n            revert Paused();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the caller is not the pauser.\\n     */\\n    modifier onlyPauser() {\\n        if (msg.sender != pauser()) {\\n            revert OnlyPauser();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Pauses the contract.\\n     */\\n    function pause() public onlyPauser {\\n        _setPaused(true);\\n        emit ContractPaused();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract.\\n     */\\n    function unpause() public onlyPauser {\\n        _setPaused(false);\\n        emit ContractUnpaused();\\n    }\\n\\n    /**\\n     * @notice Returns whether or not the contract is paused.\\n     * @return `true` if the contract is paused, `false` otherwise.\\n     */\\n    function isPaused() public view returns (bool) {\\n        bool paused;\\n        bytes32 pausedPosition = PAUSED_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            paused := sload(pausedPosition)\\n        }\\n        return paused;\\n    }\\n\\n    /**\\n     * @notice Returns the address permissioned to pause/unpause this contract.\\n     */\\n    function pauser() public view returns (address) {\\n        address pauserAddress;\\n        bytes32 pauserPosition = PAUSER_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pauserAddress := sload(pauserPosition)\\n        }\\n        return pauserAddress;\\n    }\\n\\n    /**\\n     * @notice Sets the contract's paused state.\\n     * @param paused `true` for paused, `false` for unpaused.\\n     */\\n    function _setPaused(bool paused) internal {\\n        bytes32 pausedPosition = PAUSED_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(pausedPosition, paused)\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the address permissioned to pause this contract.\\n     * @param _pauser The new pauser.\\n     * @dev This should be wrapped by the inheriting contract, likely in a\\n     * permissioned function like `onlyOwner`.\\n     */\\n    function _setPauser(address _pauser) internal {\\n        if (_pauser == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n        bytes32 pauserPosition = PAUSER_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(pauserPosition, _pauser)\\n        }\\n        emit PauserSet(_pauser);\\n    }\\n}\\n\",\"keccak256\":\"0x86570b00c8fb2b23bf310237c81029a64b89b5b060b89e49c5085182d4b00d9e\",\"license\":\"LGPL-3.0-only\"},\"contracts/RebasedStakedCelo.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"./common/ERC20Upgradeable.sol\\\";\\nimport \\\"./common/UUPSOwnableUpgradeable.sol\\\";\\nimport \\\"./Managed.sol\\\";\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/IStakedCelo.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title An ERC-20 wrapper contract that receives stCELO\\n * and represents the underlying voted LockedGold in the StakedCelo system.\\n * @dev This contract depends on the Account and StakedCelo contracts\\n * to calculate the amount of rstCELO held by depositors.\\n */\\ncontract RebasedStakedCelo is Errors, ERC20Upgradeable, UUPSOwnableUpgradeable, Pausable {\\n    /**\\n     * @notice Total amount of stCELO deposited in this contract.\\n     */\\n    uint256 public totalDeposit;\\n\\n    /**\\n     * @notice Keyed by depositor address, the amount of stCELO deposited.\\n     */\\n    mapping(address => uint256) public stakedCeloBalance;\\n\\n    /**\\n     * @notice An instance of the StakedCelo contract.\\n     */\\n    IStakedCelo internal stakedCelo;\\n\\n    /**\\n     * @notice An instance of the Account contract.\\n     */\\n    IAccount internal account;\\n\\n    /**\\n     * @notice Used when a deposit is successfuly completed.\\n     * @param depositor The address of the depositor.\\n     * @param amount The amount of stCELO deposited.\\n     */\\n    event StakedCeloDeposited(address indexed depositor, uint256 amount);\\n\\n    /**\\n     * @notice Used when a withdrawal is successfully completed.\\n     * @param withdrawer The address of the withdrawer.\\n     * @param amount The amount of stCELO withdrawn.\\n     */\\n    event StakedCeloWithdrawn(address indexed withdrawer, uint256 amount);\\n\\n    /**\\n     * @notice Used when the deposit amount is zero.\\n     */\\n    error ZeroAmount();\\n\\n    /**\\n     * @notice Used when a balance is too low.\\n     * @param amount The amount of stCELO that is insufficient.\\n     */\\n    error InsufficientBalance(uint256 amount);\\n\\n    /**\\n     * @notice Used when deposit fails.\\n     * @param depositor The address of the depositor.\\n     * @param amount The amount of stCELO the depositor attempted to deposit.\\n     */\\n    error FailedDeposit(address depositor, uint256 amount);\\n\\n    /**\\n     * @notice Used when withdrawal fails.\\n     * @param withdrawer The address of the withdrawer.\\n     * @param amount The amount of stCELO the withdrawer attempted to withdraw.\\n     */\\n    error FailedWithdrawal(address withdrawer, uint256 amount);\\n\\n    /**\\n     * Used when input amount of token is greater than total token amount.\\n     */\\n    error InputLargerThanTotalAmount();\\n\\n    /**\\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\\n     * implementation gets initialized.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() initializer {}\\n\\n    /**\\n     * @notice Replaces the constructor for proxy implementation.\\n     * @param _stakedCelo The address of the StakedCelo contract.\\n     * @param _account The address of the Account contract.\\n     * @param _owner The address of the contract owner.\\n     */\\n    function initialize(\\n        address _stakedCelo,\\n        address _account,\\n        address _owner\\n    ) external initializer {\\n        __ERC20_init(\\\"Rebased Staked CELO\\\", \\\"rstCELO\\\");\\n        _transferOwnership(_owner);\\n        stakedCelo = IStakedCelo(_stakedCelo);\\n        account = IAccount(_account);\\n    }\\n\\n    /**\\n     * @notice Sets that address permissioned to pause/unpause this contract to\\n     * the owner of this contract.\\n     */\\n    function setPauser() external onlyOwner {\\n        _setPauser(owner());\\n    }\\n\\n    /**\\n     * @notice Deposit stCELO in return for rstCELO.\\n     * @dev Although rstCELO is never minted to any account, the rstCELO balance\\n     * is calculated based on the account's deposited stCELO. See `balanceOf()` function below.\\n     * @param stCeloAmount The Amount of stCELO to be deposited.\\n     */\\n    function deposit(uint256 stCeloAmount) external onlyWhenNotPaused {\\n        if (stCeloAmount == 0) {\\n            revert ZeroAmount();\\n        }\\n\\n        totalDeposit += stCeloAmount;\\n\\n        stakedCeloBalance[msg.sender] += stCeloAmount;\\n\\n        emit StakedCeloDeposited(msg.sender, stCeloAmount);\\n\\n        if (!stakedCelo.transferFrom(msg.sender, address(this), stCeloAmount)) {\\n            revert FailedDeposit(msg.sender, stCeloAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws stCELO. This function transfers back some or all of sender's\\n     * previously deposited stCELO amount.\\n     * @param stCeloAmount The amount of stCELO to withdraw.\\n     */\\n    function withdraw(uint256 stCeloAmount) external onlyWhenNotPaused {\\n        if (stCeloAmount > stakedCeloBalance[msg.sender]) {\\n            revert InsufficientBalance(stCeloAmount);\\n        }\\n\\n        totalDeposit -= stCeloAmount;\\n\\n        unchecked {\\n            stakedCeloBalance[msg.sender] -= stCeloAmount;\\n        }\\n        emit StakedCeloWithdrawn(msg.sender, stCeloAmount);\\n\\n        if (!stakedCelo.transfer(msg.sender, stCeloAmount)) {\\n            revert FailedWithdrawal(msg.sender, stCeloAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 1, 2, 0);\\n    }\\n\\n    /**\\n     * @notice Used to query the total supply of rstCELO.\\n     * @return The calculated total supply of rstCELO.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return toRebasedStakedCelo(totalDeposit);\\n    }\\n\\n    /**\\n     * @notice Used to query the rstCELO balance of an address.\\n     * @param _account The address of interest.\\n     * @return The amount of rstCELO owned by the address.\\n     */\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        return toRebasedStakedCelo(stakedCeloBalance[_account]);\\n    }\\n\\n    /**\\n     * @notice Computes the amount of stCELO that is represented by an amount of rstCELO.\\n     * @param rstCeloAmount The amount of rstCELO.\\n     * @return The amount of stCELO represented by rstCELO.\\n     */\\n    function toStakedCelo(uint256 rstCeloAmount) public view returns (uint256) {\\n        uint256 stCeloSupply = stakedCelo.totalSupply();\\n        uint256 celoBalance = account.getTotalCelo();\\n\\n        uint256 rstSupply = totalSupply();\\n        if (rstSupply < rstCeloAmount) {\\n            revert InputLargerThanTotalAmount();\\n        }\\n\\n        if (stCeloSupply == 0 || celoBalance == 0) {\\n            return rstCeloAmount;\\n        }\\n\\n        return (rstCeloAmount * stCeloSupply) / celoBalance;\\n    }\\n\\n    /**\\n     * @notice Computes the amount of rstCELO that is represented by an amount of stCELO.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @return The amount of rstCELO represented by stCELO.\\n     */\\n    function toRebasedStakedCelo(uint256 stCeloAmount) public view returns (uint256) {\\n        uint256 stCeloSupply = stakedCelo.totalSupply();\\n        uint256 celoBalance = account.getTotalCelo();\\n\\n        if (stCeloSupply < stCeloAmount) {\\n            revert InputLargerThanTotalAmount();\\n        }\\n\\n        if (stCeloSupply == 0 || celoBalance == 0) {\\n            return stCeloAmount;\\n        }\\n\\n        return (stCeloAmount * celoBalance) / stCeloSupply;\\n    }\\n\\n    /**\\n     * @notice Moves `amount` of rstCELO from `sender` to `recipient`.\\n     * @param from The address of the sender.\\n     * @param to The address of the receiver.\\n     * @param amount The amount of rstCELO to transfer.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override onlyWhenNotPaused {\\n        if (from == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n        if (to == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n\\n        uint256 fromBalance = stakedCeloBalance[from];\\n        uint256 equivalentStakedCeloAmount = toStakedCelo(amount);\\n        if (fromBalance < equivalentStakedCeloAmount) {\\n            revert InsufficientBalance(amount);\\n        }\\n\\n        unchecked {\\n            stakedCeloBalance[from] = fromBalance - equivalentStakedCeloAmount;\\n        }\\n        stakedCeloBalance[to] += equivalentStakedCeloAmount;\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    function _approve(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override onlyWhenNotPaused {\\n        super._approve(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc48f987d30d4d7153ab90eb2e38e3b6472c4831f16f1f35e36a6bc5f8479323a\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// Only change is in that _balances have internal modifier instead of private modifier\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    IERC20Upgradeable,\\n    IERC20MetadataUpgradeable\\n{\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\\n        internal\\n        onlyInitializing\\n    {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        // solhint-disable-next-line reason-string\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solhint-disable-next-line reason-string\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        // solhint-disable-next-line reason-string\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        // solhint-disable-next-line reason-string\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        // solhint-disable-next-line reason-string\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        // solhint-disable-next-line reason-string\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        // solhint-disable-next-line reason-string\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        // solhint-disable-next-line reason-string\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to\\n     * xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to\\n     * xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xe9a6d7e5d89751f362993cd1484c843f5a37ad47d8eb21375291e07f5146b25d\",\"license\":\"MIT\"},\"contracts/common/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Provides some common general errors.\\n */\\nabstract contract Errors {\\n    /**\\n     * @notice Used when attempting to pass in address zero where not allowed.\\n     */\\n    error AddressZeroNotAllowed();\\n}\\n\",\"keccak256\":\"0xf05b0cd54af69df277819c986819d7ab9d475a6ff955fbaf1d26ec61d9e44b00\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UUPSOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\\n */\\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\\n    /**\\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\\n     * adds the onlyOwner modifer.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x5dbad350c6ae75b9d15c2080b1de6f02d8b7f32a71a6bcf775c9731820d115ec\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccount {\\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\\n\\n    function scheduleTransfer(\\n        address[] calldata fromGroups,\\n        uint256[] calldata fromVotes,\\n        address[] calldata toGroups,\\n        uint256[] calldata toVotess\\n    ) external;\\n\\n    function scheduleWithdrawals(\\n        address beneficiary,\\n        address[] calldata group,\\n        uint256[] calldata withdrawals\\n    ) external;\\n\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external;\\n\\n    function getTotalCelo() external view returns (uint256);\\n\\n    function getCeloForGroup(address) external view returns (uint256);\\n\\n    function scheduledVotesForGroup(address group) external view returns (uint256);\\n\\n    function scheduledRevokeForGroup(address group) external view returns (uint256);\\n\\n    function scheduledWithdrawalsForGroup(address group) external view returns (uint256);\\n\\n    function votesForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfa2177635a152beb7313aa9af9a3494a9f760e233a04b980f20ac1748dde1377\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function isPaused() external returns (bool);\\n}\\n\",\"keccak256\":\"0x09a0bc3c0f05fa42f8fdc22ca85217a732c1a676e292866bc4a08ba6f4947ee1\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IStakedCelo.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IStakedCelo {\\n    function totalSupply() external view returns (uint256);\\n\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function lockVoteBalance(address account, uint256 amount) external;\\n\\n    function unlockVoteBalance(address account) external;\\n\\n    function lockedVoteBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3df273715b94f5dd3db16f1439d4ab8f53e9ee6cd52eaf4dcd3fdfd8ba679518\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50600060019054906101000a900460ff166200006f5760008054906101000a900460ff161562000080565b6200007f6200013c60201b60201c565b5b620000c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b99062000204565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000113576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620001355760008060016101000a81548160ff0219169083151502179055505b5062000226565b600062000154306200015a60201b62001caf1760201c565b15905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000620001ec602e836200017d565b9150620001f9826200018e565b604082019050919050565b600060208201905081810360008301526200021f81620001dd565b9050919050565b608051613b2a6200025760003960008181610abe01528181610b4d01528181610dcb0152610e5a0152613b2a6000f3fe6080604052600436106101d85760003560e01c80637c0d530f11610102578063b187bd2611610095578063db7168a911610064578063db7168a914610692578063dd62ed3e146106cf578063f2fde38b1461070c578063f6153ccd14610735576101d8565b8063b187bd26146105d8578063b6b55f2514610603578063c0c53b8b1461062c578063c494ec1e14610655576101d8565b806395d89b41116100d157806395d89b41146105085780639fd0506d14610533578063a457c2d71461055e578063a9059cbb1461059b576101d8565b80637c0d530f146104845780638456cb591461049b5780638da5cb5b146104b25780639468ba0e146104dd576101d8565b8063395093511161017a57806354255be01161014957806354255be0146103c5578063653c98e7146103f357806370a0823114610430578063715018a61461046d576101d8565b8063395093511461032a5780633cbf5872146103675780633f4ba83a146103925780634f1ef286146103a9576101d8565b806323b872dd116101b657806323b872dd146102705780632e1a7d4d146102ad578063313ce567146102d65780633659cfe614610301576101d8565b806306fdde03146101dd578063095ea7b31461020857806318160ddd14610245575b600080fd5b3480156101e957600080fd5b506101f2610760565b6040516101ff9190612b6d565b60405180910390f35b34801561021457600080fd5b5061022f600480360381019061022a9190612c37565b6107f2565b60405161023c9190612c92565b60405180910390f35b34801561025157600080fd5b5061025a610815565b6040516102679190612cbc565b60405180910390f35b34801561027c57600080fd5b5061029760048036038101906102929190612cd7565b610827565b6040516102a49190612c92565b60405180910390f35b3480156102b957600080fd5b506102d460048036038101906102cf9190612d2a565b610856565b005b3480156102e257600080fd5b506102eb610ab3565b6040516102f89190612d73565b60405180910390f35b34801561030d57600080fd5b5061032860048036038101906103239190612d8e565b610abc565b005b34801561033657600080fd5b50610351600480360381019061034c9190612c37565b610c45565b60405161035e9190612c92565b60405180910390f35b34801561037357600080fd5b5061037c610cef565b6040516103899190612dd4565b60405180910390f35b34801561039e57600080fd5b506103a7610d25565b005b6103c360048036038101906103be9190612f24565b610dc9565b005b3480156103d157600080fd5b506103da610f06565b6040516103ea9493929190612f80565b60405180910390f35b3480156103ff57600080fd5b5061041a60048036038101906104159190612d8e565b610f21565b6040516104279190612cbc565b60405180910390f35b34801561043c57600080fd5b5061045760048036038101906104529190612d8e565b610f39565b6040516104649190612cbc565b60405180910390f35b34801561047957600080fd5b50610482610f8a565b005b34801561049057600080fd5b50610499611012565b005b3480156104a757600080fd5b506104b06110a0565b005b3480156104be57600080fd5b506104c7611144565b6040516104d49190612fd4565b60405180910390f35b3480156104e957600080fd5b506104f261116e565b6040516104ff9190612dd4565b60405180910390f35b34801561051457600080fd5b5061051d6111a4565b60405161052a9190612b6d565b60405180910390f35b34801561053f57600080fd5b50610548611236565b6040516105559190612fd4565b60405180910390f35b34801561056a57600080fd5b5061058560048036038101906105809190612c37565b61127c565b6040516105929190612c92565b60405180910390f35b3480156105a757600080fd5b506105c260048036038101906105bd9190612c37565b611366565b6040516105cf9190612c92565b60405180910390f35b3480156105e457600080fd5b506105ed611389565b6040516105fa9190612c92565b60405180910390f35b34801561060f57600080fd5b5061062a60048036038101906106259190612d2a565b6113cf565b005b34801561063857600080fd5b50610653600480360381019061064e9190612fef565b6115ee565b005b34801561066157600080fd5b5061067c60048036038101906106779190612d2a565b6117d4565b6040516106899190612cbc565b60405180910390f35b34801561069e57600080fd5b506106b960048036038101906106b49190612d2a565b611986565b6040516106c69190612cbc565b60405180910390f35b3480156106db57600080fd5b506106f660048036038101906106f19190613042565b611b2a565b6040516107039190612cbc565b60405180910390f35b34801561071857600080fd5b50610733600480360381019061072e9190612d8e565b611bb1565b005b34801561074157600080fd5b5061074a611ca9565b6040516107579190612cbc565b60405180910390f35b60606036805461076f906130b1565b80601f016020809104026020016040519081016040528092919081815260200182805461079b906130b1565b80156107e85780601f106107bd576101008083540402835291602001916107e8565b820191906000526020600020905b8154815290600101906020018083116107cb57829003601f168201915b5050505050905090565b6000806107fd611cd2565b905061080a818585611cda565b600191505092915050565b6000610822609754611986565b905090565b600080610832611cd2565b905061083f858285611d29565b61084a858585611db5565b60019150509392505050565b61085e611389565b15610895576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561091957806040517f926653510000000000000000000000000000000000000000000000000000000081526004016109109190612cbc565b60405180910390fd5b806097600082825461092b9190613112565b9250508190555080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fbd16c4c02914d26f044cfa096a64853d87c047db6db9425cefae21488477c58f826040516109c59190612cbc565b60405180910390a2609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610a2a929190613146565b6020604051808303816000875af1158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d919061319b565b610ab05733816040517f55a67458000000000000000000000000000000000000000000000000000000008152600401610aa7929190613146565b60405180910390fd5b50565b60006012905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b429061323a565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610b8a612060565b73ffffffffffffffffffffffffffffffffffffffff1614610be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd7906132cc565b60405180910390fd5b610be9816120b7565b610c4281600067ffffffffffffffff811115610c0857610c07612df9565b5b6040519080825280601f01601f191660200182016040528015610c3a5781602001600182028036833780820191505090505b506000612136565b50565b600080610c50611cd2565b9050610ce4818585603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cdf91906132ec565b611cda565b600191505092915050565b60017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c610d1f9190613112565b60001b81565b610d2d611236565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d91576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d9b6000612307565b7f0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f9460405160405180910390a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4f9061323a565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e97612060565b73ffffffffffffffffffffffffffffffffffffffff1614610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee4906132cc565b60405180910390fd5b610ef6826120b7565b610f0282826001612136565b5050565b60008060008060018060026000935093509350935090919293565b60986020528060005260406000206000915090505481565b6000610f83609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611986565b9050919050565b610f92611cd2565b73ffffffffffffffffffffffffffffffffffffffff16610fb0611144565b73ffffffffffffffffffffffffffffffffffffffff1614611006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffd9061338e565b60405180910390fd5b6110106000612345565b565b61101a611cd2565b73ffffffffffffffffffffffffffffffffffffffff16611038611144565b73ffffffffffffffffffffffffffffffffffffffff161461108e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110859061338e565b60405180910390fd5b61109e611099611144565b61240b565b565b6110a8611236565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110c576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111166001612307565b7fab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d26760405160405180910390a1565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c61119e9190613112565b60001b81565b6060603780546111b3906130b1565b80601f01602080910402602001604051908101604052809291908181526020018280546111df906130b1565b801561122c5780601f106112015761010080835404028352916020019161122c565b820191906000526020600020905b81548152906001019060200180831161120f57829003601f168201915b5050505050905090565b600080600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c61126b9190613112565b60001b905080549150819250505090565b600080611287611cd2565b90506000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561134d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134490613420565b60405180910390fd5b61135a8286868403611cda565b60019250505092915050565b600080611371611cd2565b905061137e818585611db5565b600191505092915050565b600080600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c6113be9190613112565b60001b905080549150819250505090565b6113d7611389565b1561140e576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811415611449576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806097600082825461145b91906132ec565b9250508190555080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b191906132ec565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f8a7b48923ed32d7cb785f2c884f5a4c04e14793b439c0b96d3906c667cdf95ab826040516114fe9190612cbc565b60405180910390a2609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161156593929190613440565b6020604051808303816000875af1158015611584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a8919061319b565b6115eb5733816040517f8ab2d93d0000000000000000000000000000000000000000000000000000000081526004016115e2929190613146565b60405180910390fd5b50565b600060019054906101000a900460ff166116165760008054906101000a900460ff161561161f565b61161e6124e7565b5b61165e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611655906134e9565b60405180910390fd5b60008060019054906101000a900460ff1615905080156116ae576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6117226040518060400160405280601381526020017f52656261736564205374616b65642043454c4f000000000000000000000000008152506040518060400160405280600781526020017f72737443454c4f000000000000000000000000000000000000000000000000008152506124f8565b61172b82612345565b83609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156117ce5760008060016101000a81548160ff0219169083151502179055505b50505050565b600080609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611844573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611868919061351e565b90506000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fd919061351e565b90506000611909610815565b905084811015611945576040517fb6921ecb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008314806119545750600082145b1561196457849350505050611981565b818386611971919061354b565b61197b91906135d4565b93505050505b919050565b600080609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1a919061351e565b90506000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaf919061351e565b905083821015611aeb576040517fb6921ecb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000821480611afa5750600081145b15611b09578392505050611b25565b818185611b16919061354b565b611b2091906135d4565b925050505b919050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611bb9611cd2565b73ffffffffffffffffffffffffffffffffffffffff16611bd7611144565b73ffffffffffffffffffffffffffffffffffffffff1614611c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c249061338e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9490613677565b60405180910390fd5b611ca681612345565b50565b60975481565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b611ce2611389565b15611d19576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d24838383612555565b505050565b6000611d358484611b2a565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611daf5781811015611da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d98906136e3565b60405180910390fd5b611dae8484848403611cda565b5b50505050565b611dbd611389565b15611df4576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e5b576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ec2576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000611f11836117d4565b905080821015611f5857826040517f92665351000000000000000000000000000000000000000000000000000000008152600401611f4f9190612cbc565b60405180910390fd5b808203609860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fed91906132ec565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516120519190612cbc565b60405180910390a35050505050565b600061208e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612720565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6120bf611cd2565b73ffffffffffffffffffffffffffffffffffffffff166120dd611144565b73ffffffffffffffffffffffffffffffffffffffff1614612133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212a9061338e565b60405180910390fd5b50565b6000612140612060565b905061214b8461272a565b6000835111806121585750815b156121695761216784846127e3565b505b60006121977f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612810565b90508060000160009054906101000a900460ff166123005760018160000160006101000a81548160ff02191690831515021790555061226385836040516024016121e19190612fd4565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127e3565b5060008160000160006101000a81548160ff021916908315150217905550612289612060565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146122f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ed90613775565b60405180910390fd5b6122ff8561281a565b5b5050505050565b600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c6123399190613112565b60001b90508181555050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612472576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c6124a49190613112565b60001b90508181557fd11d57c2c7468878b1035df11c670bcd0091aa840bf8aa166365397622237bea826040516124db9190612fd4565b60405180910390a15050565b60006124f230611caf565b15905090565b600060019054906101000a900460ff16612547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253e90613807565b60405180910390fd5b6125518282612869565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156125c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125bc90613899565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262c9061392b565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516127139190612cbc565b60405180910390a3505050565b6000819050919050565b612733816128ea565b612772576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612769906139bd565b60405180910390fd5b8061279f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612720565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606128088383604051806060016040528060278152602001613ace602791396128fd565b905092915050565b6000819050919050565b6128238161272a565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600060019054906101000a900460ff166128b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128af90613807565b60405180910390fd5b81603690805190602001906128ce929190612a31565b5080603790805190602001906128e5929190612a31565b505050565b600080823b905060008111915050919050565b6060612908846128ea565b612947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293e90613a4f565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161296f9190613ab6565b600060405180830381855af49150503d80600081146129aa576040519150601f19603f3d011682016040523d82523d6000602084013e6129af565b606091505b50915091506129bf8282866129ca565b925050509392505050565b606083156129da57829050612a2a565b6000835111156129ed5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a219190612b6d565b60405180910390fd5b9392505050565b828054612a3d906130b1565b90600052602060002090601f016020900481019282612a5f5760008555612aa6565b82601f10612a7857805160ff1916838001178555612aa6565b82800160010185558215612aa6579182015b82811115612aa5578251825591602001919060010190612a8a565b5b509050612ab39190612ab7565b5090565b5b80821115612ad0576000816000905550600101612ab8565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b0e578082015181840152602081019050612af3565b83811115612b1d576000848401525b50505050565b6000601f19601f8301169050919050565b6000612b3f82612ad4565b612b498185612adf565b9350612b59818560208601612af0565b612b6281612b23565b840191505092915050565b60006020820190508181036000830152612b878184612b34565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bce82612ba3565b9050919050565b612bde81612bc3565b8114612be957600080fd5b50565b600081359050612bfb81612bd5565b92915050565b6000819050919050565b612c1481612c01565b8114612c1f57600080fd5b50565b600081359050612c3181612c0b565b92915050565b60008060408385031215612c4e57612c4d612b99565b5b6000612c5c85828601612bec565b9250506020612c6d85828601612c22565b9150509250929050565b60008115159050919050565b612c8c81612c77565b82525050565b6000602082019050612ca76000830184612c83565b92915050565b612cb681612c01565b82525050565b6000602082019050612cd16000830184612cad565b92915050565b600080600060608486031215612cf057612cef612b99565b5b6000612cfe86828701612bec565b9350506020612d0f86828701612bec565b9250506040612d2086828701612c22565b9150509250925092565b600060208284031215612d4057612d3f612b99565b5b6000612d4e84828501612c22565b91505092915050565b600060ff82169050919050565b612d6d81612d57565b82525050565b6000602082019050612d886000830184612d64565b92915050565b600060208284031215612da457612da3612b99565b5b6000612db284828501612bec565b91505092915050565b6000819050919050565b612dce81612dbb565b82525050565b6000602082019050612de96000830184612dc5565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612e3182612b23565b810181811067ffffffffffffffff82111715612e5057612e4f612df9565b5b80604052505050565b6000612e63612b8f565b9050612e6f8282612e28565b919050565b600067ffffffffffffffff821115612e8f57612e8e612df9565b5b612e9882612b23565b9050602081019050919050565b82818337600083830152505050565b6000612ec7612ec284612e74565b612e59565b905082815260208101848484011115612ee357612ee2612df4565b5b612eee848285612ea5565b509392505050565b600082601f830112612f0b57612f0a612def565b5b8135612f1b848260208601612eb4565b91505092915050565b60008060408385031215612f3b57612f3a612b99565b5b6000612f4985828601612bec565b925050602083013567ffffffffffffffff811115612f6a57612f69612b9e565b5b612f7685828601612ef6565b9150509250929050565b6000608082019050612f956000830187612cad565b612fa26020830186612cad565b612faf6040830185612cad565b612fbc6060830184612cad565b95945050505050565b612fce81612bc3565b82525050565b6000602082019050612fe96000830184612fc5565b92915050565b60008060006060848603121561300857613007612b99565b5b600061301686828701612bec565b935050602061302786828701612bec565b925050604061303886828701612bec565b9150509250925092565b6000806040838503121561305957613058612b99565b5b600061306785828601612bec565b925050602061307885828601612bec565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806130c957607f821691505b602082108114156130dd576130dc613082565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061311d82612c01565b915061312883612c01565b92508282101561313b5761313a6130e3565b5b828203905092915050565b600060408201905061315b6000830185612fc5565b6131686020830184612cad565b9392505050565b61317881612c77565b811461318357600080fd5b50565b6000815190506131958161316f565b92915050565b6000602082840312156131b1576131b0612b99565b5b60006131bf84828501613186565b91505092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613224602c83612adf565b915061322f826131c8565b604082019050919050565b6000602082019050818103600083015261325381613217565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006132b6602c83612adf565b91506132c18261325a565b604082019050919050565b600060208201905081810360008301526132e5816132a9565b9050919050565b60006132f782612c01565b915061330283612c01565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613337576133366130e3565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613378602083612adf565b915061338382613342565b602082019050919050565b600060208201905081810360008301526133a78161336b565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061340a602583612adf565b9150613415826133ae565b604082019050919050565b60006020820190508181036000830152613439816133fd565b9050919050565b60006060820190506134556000830186612fc5565b6134626020830185612fc5565b61346f6040830184612cad565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006134d3602e83612adf565b91506134de82613477565b604082019050919050565b60006020820190508181036000830152613502816134c6565b9050919050565b60008151905061351881612c0b565b92915050565b60006020828403121561353457613533612b99565b5b600061354284828501613509565b91505092915050565b600061355682612c01565b915061356183612c01565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561359a576135996130e3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006135df82612c01565b91506135ea83612c01565b9250826135fa576135f96135a5565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613661602683612adf565b915061366c82613605565b604082019050919050565b6000602082019050818103600083015261369081613654565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006136cd601d83612adf565b91506136d882613697565b602082019050919050565b600060208201905081810360008301526136fc816136c0565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b600061375f602f83612adf565b915061376a82613703565b604082019050919050565b6000602082019050818103600083015261378e81613752565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006137f1602b83612adf565b91506137fc82613795565b604082019050919050565b60006020820190508181036000830152613820816137e4565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613883602483612adf565b915061388e82613827565b604082019050919050565b600060208201905081810360008301526138b281613876565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613915602283612adf565b9150613920826138b9565b604082019050919050565b6000602082019050818103600083015261394481613908565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006139a7602d83612adf565b91506139b28261394b565b604082019050919050565b600060208201905081810360008301526139d68161399a565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000613a39602683612adf565b9150613a44826139dd565b604082019050919050565b60006020820190508181036000830152613a6881613a2c565b9050919050565b600081519050919050565b600081905092915050565b6000613a9082613a6f565b613a9a8185613a7a565b9350613aaa818560208601612af0565b80840191505092915050565b6000613ac28284613a85565b91508190509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ed89f83061585dbbf2a8c4cc424b6fabb3742d7562b441d9d479a42fb79a55a364736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80637c0d530f11610102578063b187bd2611610095578063db7168a911610064578063db7168a914610692578063dd62ed3e146106cf578063f2fde38b1461070c578063f6153ccd14610735576101d8565b8063b187bd26146105d8578063b6b55f2514610603578063c0c53b8b1461062c578063c494ec1e14610655576101d8565b806395d89b41116100d157806395d89b41146105085780639fd0506d14610533578063a457c2d71461055e578063a9059cbb1461059b576101d8565b80637c0d530f146104845780638456cb591461049b5780638da5cb5b146104b25780639468ba0e146104dd576101d8565b8063395093511161017a57806354255be01161014957806354255be0146103c5578063653c98e7146103f357806370a0823114610430578063715018a61461046d576101d8565b8063395093511461032a5780633cbf5872146103675780633f4ba83a146103925780634f1ef286146103a9576101d8565b806323b872dd116101b657806323b872dd146102705780632e1a7d4d146102ad578063313ce567146102d65780633659cfe614610301576101d8565b806306fdde03146101dd578063095ea7b31461020857806318160ddd14610245575b600080fd5b3480156101e957600080fd5b506101f2610760565b6040516101ff9190612b6d565b60405180910390f35b34801561021457600080fd5b5061022f600480360381019061022a9190612c37565b6107f2565b60405161023c9190612c92565b60405180910390f35b34801561025157600080fd5b5061025a610815565b6040516102679190612cbc565b60405180910390f35b34801561027c57600080fd5b5061029760048036038101906102929190612cd7565b610827565b6040516102a49190612c92565b60405180910390f35b3480156102b957600080fd5b506102d460048036038101906102cf9190612d2a565b610856565b005b3480156102e257600080fd5b506102eb610ab3565b6040516102f89190612d73565b60405180910390f35b34801561030d57600080fd5b5061032860048036038101906103239190612d8e565b610abc565b005b34801561033657600080fd5b50610351600480360381019061034c9190612c37565b610c45565b60405161035e9190612c92565b60405180910390f35b34801561037357600080fd5b5061037c610cef565b6040516103899190612dd4565b60405180910390f35b34801561039e57600080fd5b506103a7610d25565b005b6103c360048036038101906103be9190612f24565b610dc9565b005b3480156103d157600080fd5b506103da610f06565b6040516103ea9493929190612f80565b60405180910390f35b3480156103ff57600080fd5b5061041a60048036038101906104159190612d8e565b610f21565b6040516104279190612cbc565b60405180910390f35b34801561043c57600080fd5b5061045760048036038101906104529190612d8e565b610f39565b6040516104649190612cbc565b60405180910390f35b34801561047957600080fd5b50610482610f8a565b005b34801561049057600080fd5b50610499611012565b005b3480156104a757600080fd5b506104b06110a0565b005b3480156104be57600080fd5b506104c7611144565b6040516104d49190612fd4565b60405180910390f35b3480156104e957600080fd5b506104f261116e565b6040516104ff9190612dd4565b60405180910390f35b34801561051457600080fd5b5061051d6111a4565b60405161052a9190612b6d565b60405180910390f35b34801561053f57600080fd5b50610548611236565b6040516105559190612fd4565b60405180910390f35b34801561056a57600080fd5b5061058560048036038101906105809190612c37565b61127c565b6040516105929190612c92565b60405180910390f35b3480156105a757600080fd5b506105c260048036038101906105bd9190612c37565b611366565b6040516105cf9190612c92565b60405180910390f35b3480156105e457600080fd5b506105ed611389565b6040516105fa9190612c92565b60405180910390f35b34801561060f57600080fd5b5061062a60048036038101906106259190612d2a565b6113cf565b005b34801561063857600080fd5b50610653600480360381019061064e9190612fef565b6115ee565b005b34801561066157600080fd5b5061067c60048036038101906106779190612d2a565b6117d4565b6040516106899190612cbc565b60405180910390f35b34801561069e57600080fd5b506106b960048036038101906106b49190612d2a565b611986565b6040516106c69190612cbc565b60405180910390f35b3480156106db57600080fd5b506106f660048036038101906106f19190613042565b611b2a565b6040516107039190612cbc565b60405180910390f35b34801561071857600080fd5b50610733600480360381019061072e9190612d8e565b611bb1565b005b34801561074157600080fd5b5061074a611ca9565b6040516107579190612cbc565b60405180910390f35b60606036805461076f906130b1565b80601f016020809104026020016040519081016040528092919081815260200182805461079b906130b1565b80156107e85780601f106107bd576101008083540402835291602001916107e8565b820191906000526020600020905b8154815290600101906020018083116107cb57829003601f168201915b5050505050905090565b6000806107fd611cd2565b905061080a818585611cda565b600191505092915050565b6000610822609754611986565b905090565b600080610832611cd2565b905061083f858285611d29565b61084a858585611db5565b60019150509392505050565b61085e611389565b15610895576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561091957806040517f926653510000000000000000000000000000000000000000000000000000000081526004016109109190612cbc565b60405180910390fd5b806097600082825461092b9190613112565b9250508190555080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fbd16c4c02914d26f044cfa096a64853d87c047db6db9425cefae21488477c58f826040516109c59190612cbc565b60405180910390a2609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610a2a929190613146565b6020604051808303816000875af1158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d919061319b565b610ab05733816040517f55a67458000000000000000000000000000000000000000000000000000000008152600401610aa7929190613146565b60405180910390fd5b50565b60006012905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b429061323a565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610b8a612060565b73ffffffffffffffffffffffffffffffffffffffff1614610be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd7906132cc565b60405180910390fd5b610be9816120b7565b610c4281600067ffffffffffffffff811115610c0857610c07612df9565b5b6040519080825280601f01601f191660200182016040528015610c3a5781602001600182028036833780820191505090505b506000612136565b50565b600080610c50611cd2565b9050610ce4818585603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cdf91906132ec565b611cda565b600191505092915050565b60017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c610d1f9190613112565b60001b81565b610d2d611236565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d91576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d9b6000612307565b7f0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f9460405160405180910390a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4f9061323a565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e97612060565b73ffffffffffffffffffffffffffffffffffffffff1614610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee4906132cc565b60405180910390fd5b610ef6826120b7565b610f0282826001612136565b5050565b60008060008060018060026000935093509350935090919293565b60986020528060005260406000206000915090505481565b6000610f83609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611986565b9050919050565b610f92611cd2565b73ffffffffffffffffffffffffffffffffffffffff16610fb0611144565b73ffffffffffffffffffffffffffffffffffffffff1614611006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffd9061338e565b60405180910390fd5b6110106000612345565b565b61101a611cd2565b73ffffffffffffffffffffffffffffffffffffffff16611038611144565b73ffffffffffffffffffffffffffffffffffffffff161461108e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110859061338e565b60405180910390fd5b61109e611099611144565b61240b565b565b6110a8611236565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110c576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111166001612307565b7fab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d26760405160405180910390a1565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c61119e9190613112565b60001b81565b6060603780546111b3906130b1565b80601f01602080910402602001604051908101604052809291908181526020018280546111df906130b1565b801561122c5780601f106112015761010080835404028352916020019161122c565b820191906000526020600020905b81548152906001019060200180831161120f57829003601f168201915b5050505050905090565b600080600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c61126b9190613112565b60001b905080549150819250505090565b600080611287611cd2565b90506000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561134d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134490613420565b60405180910390fd5b61135a8286868403611cda565b60019250505092915050565b600080611371611cd2565b905061137e818585611db5565b600191505092915050565b600080600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c6113be9190613112565b60001b905080549150819250505090565b6113d7611389565b1561140e576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811415611449576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806097600082825461145b91906132ec565b9250508190555080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b191906132ec565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f8a7b48923ed32d7cb785f2c884f5a4c04e14793b439c0b96d3906c667cdf95ab826040516114fe9190612cbc565b60405180910390a2609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161156593929190613440565b6020604051808303816000875af1158015611584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a8919061319b565b6115eb5733816040517f8ab2d93d0000000000000000000000000000000000000000000000000000000081526004016115e2929190613146565b60405180910390fd5b50565b600060019054906101000a900460ff166116165760008054906101000a900460ff161561161f565b61161e6124e7565b5b61165e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611655906134e9565b60405180910390fd5b60008060019054906101000a900460ff1615905080156116ae576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6117226040518060400160405280601381526020017f52656261736564205374616b65642043454c4f000000000000000000000000008152506040518060400160405280600781526020017f72737443454c4f000000000000000000000000000000000000000000000000008152506124f8565b61172b82612345565b83609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156117ce5760008060016101000a81548160ff0219169083151502179055505b50505050565b600080609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611844573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611868919061351e565b90506000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fd919061351e565b90506000611909610815565b905084811015611945576040517fb6921ecb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008314806119545750600082145b1561196457849350505050611981565b818386611971919061354b565b61197b91906135d4565b93505050505b919050565b600080609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1a919061351e565b90506000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301d2b6ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaf919061351e565b905083821015611aeb576040517fb6921ecb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000821480611afa5750600081145b15611b09578392505050611b25565b818185611b16919061354b565b611b2091906135d4565b925050505b919050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611bb9611cd2565b73ffffffffffffffffffffffffffffffffffffffff16611bd7611144565b73ffffffffffffffffffffffffffffffffffffffff1614611c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c249061338e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9490613677565b60405180910390fd5b611ca681612345565b50565b60975481565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b611ce2611389565b15611d19576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d24838383612555565b505050565b6000611d358484611b2a565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611daf5781811015611da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d98906136e3565b60405180910390fd5b611dae8484848403611cda565b5b50505050565b611dbd611389565b15611df4576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e5b576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ec2576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000611f11836117d4565b905080821015611f5857826040517f92665351000000000000000000000000000000000000000000000000000000008152600401611f4f9190612cbc565b60405180910390fd5b808203609860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fed91906132ec565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516120519190612cbc565b60405180910390a35050505050565b600061208e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612720565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6120bf611cd2565b73ffffffffffffffffffffffffffffffffffffffff166120dd611144565b73ffffffffffffffffffffffffffffffffffffffff1614612133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212a9061338e565b60405180910390fd5b50565b6000612140612060565b905061214b8461272a565b6000835111806121585750815b156121695761216784846127e3565b505b60006121977f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612810565b90508060000160009054906101000a900460ff166123005760018160000160006101000a81548160ff02191690831515021790555061226385836040516024016121e19190612fd4565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127e3565b5060008160000160006101000a81548160ff021916908315150217905550612289612060565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146122f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ed90613775565b60405180910390fd5b6122ff8561281a565b5b5050505050565b600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c6123399190613112565b60001b90508181555050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612472576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c6124a49190613112565b60001b90508181557fd11d57c2c7468878b1035df11c670bcd0091aa840bf8aa166365397622237bea826040516124db9190612fd4565b60405180910390a15050565b60006124f230611caf565b15905090565b600060019054906101000a900460ff16612547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253e90613807565b60405180910390fd5b6125518282612869565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156125c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125bc90613899565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262c9061392b565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516127139190612cbc565b60405180910390a3505050565b6000819050919050565b612733816128ea565b612772576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612769906139bd565b60405180910390fd5b8061279f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612720565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606128088383604051806060016040528060278152602001613ace602791396128fd565b905092915050565b6000819050919050565b6128238161272a565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600060019054906101000a900460ff166128b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128af90613807565b60405180910390fd5b81603690805190602001906128ce929190612a31565b5080603790805190602001906128e5929190612a31565b505050565b600080823b905060008111915050919050565b6060612908846128ea565b612947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293e90613a4f565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161296f9190613ab6565b600060405180830381855af49150503d80600081146129aa576040519150601f19603f3d011682016040523d82523d6000602084013e6129af565b606091505b50915091506129bf8282866129ca565b925050509392505050565b606083156129da57829050612a2a565b6000835111156129ed5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a219190612b6d565b60405180910390fd5b9392505050565b828054612a3d906130b1565b90600052602060002090601f016020900481019282612a5f5760008555612aa6565b82601f10612a7857805160ff1916838001178555612aa6565b82800160010185558215612aa6579182015b82811115612aa5578251825591602001919060010190612a8a565b5b509050612ab39190612ab7565b5090565b5b80821115612ad0576000816000905550600101612ab8565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b0e578082015181840152602081019050612af3565b83811115612b1d576000848401525b50505050565b6000601f19601f8301169050919050565b6000612b3f82612ad4565b612b498185612adf565b9350612b59818560208601612af0565b612b6281612b23565b840191505092915050565b60006020820190508181036000830152612b878184612b34565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bce82612ba3565b9050919050565b612bde81612bc3565b8114612be957600080fd5b50565b600081359050612bfb81612bd5565b92915050565b6000819050919050565b612c1481612c01565b8114612c1f57600080fd5b50565b600081359050612c3181612c0b565b92915050565b60008060408385031215612c4e57612c4d612b99565b5b6000612c5c85828601612bec565b9250506020612c6d85828601612c22565b9150509250929050565b60008115159050919050565b612c8c81612c77565b82525050565b6000602082019050612ca76000830184612c83565b92915050565b612cb681612c01565b82525050565b6000602082019050612cd16000830184612cad565b92915050565b600080600060608486031215612cf057612cef612b99565b5b6000612cfe86828701612bec565b9350506020612d0f86828701612bec565b9250506040612d2086828701612c22565b9150509250925092565b600060208284031215612d4057612d3f612b99565b5b6000612d4e84828501612c22565b91505092915050565b600060ff82169050919050565b612d6d81612d57565b82525050565b6000602082019050612d886000830184612d64565b92915050565b600060208284031215612da457612da3612b99565b5b6000612db284828501612bec565b91505092915050565b6000819050919050565b612dce81612dbb565b82525050565b6000602082019050612de96000830184612dc5565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612e3182612b23565b810181811067ffffffffffffffff82111715612e5057612e4f612df9565b5b80604052505050565b6000612e63612b8f565b9050612e6f8282612e28565b919050565b600067ffffffffffffffff821115612e8f57612e8e612df9565b5b612e9882612b23565b9050602081019050919050565b82818337600083830152505050565b6000612ec7612ec284612e74565b612e59565b905082815260208101848484011115612ee357612ee2612df4565b5b612eee848285612ea5565b509392505050565b600082601f830112612f0b57612f0a612def565b5b8135612f1b848260208601612eb4565b91505092915050565b60008060408385031215612f3b57612f3a612b99565b5b6000612f4985828601612bec565b925050602083013567ffffffffffffffff811115612f6a57612f69612b9e565b5b612f7685828601612ef6565b9150509250929050565b6000608082019050612f956000830187612cad565b612fa26020830186612cad565b612faf6040830185612cad565b612fbc6060830184612cad565b95945050505050565b612fce81612bc3565b82525050565b6000602082019050612fe96000830184612fc5565b92915050565b60008060006060848603121561300857613007612b99565b5b600061301686828701612bec565b935050602061302786828701612bec565b925050604061303886828701612bec565b9150509250925092565b6000806040838503121561305957613058612b99565b5b600061306785828601612bec565b925050602061307885828601612bec565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806130c957607f821691505b602082108114156130dd576130dc613082565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061311d82612c01565b915061312883612c01565b92508282101561313b5761313a6130e3565b5b828203905092915050565b600060408201905061315b6000830185612fc5565b6131686020830184612cad565b9392505050565b61317881612c77565b811461318357600080fd5b50565b6000815190506131958161316f565b92915050565b6000602082840312156131b1576131b0612b99565b5b60006131bf84828501613186565b91505092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613224602c83612adf565b915061322f826131c8565b604082019050919050565b6000602082019050818103600083015261325381613217565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006132b6602c83612adf565b91506132c18261325a565b604082019050919050565b600060208201905081810360008301526132e5816132a9565b9050919050565b60006132f782612c01565b915061330283612c01565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613337576133366130e3565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613378602083612adf565b915061338382613342565b602082019050919050565b600060208201905081810360008301526133a78161336b565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061340a602583612adf565b9150613415826133ae565b604082019050919050565b60006020820190508181036000830152613439816133fd565b9050919050565b60006060820190506134556000830186612fc5565b6134626020830185612fc5565b61346f6040830184612cad565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006134d3602e83612adf565b91506134de82613477565b604082019050919050565b60006020820190508181036000830152613502816134c6565b9050919050565b60008151905061351881612c0b565b92915050565b60006020828403121561353457613533612b99565b5b600061354284828501613509565b91505092915050565b600061355682612c01565b915061356183612c01565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561359a576135996130e3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006135df82612c01565b91506135ea83612c01565b9250826135fa576135f96135a5565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613661602683612adf565b915061366c82613605565b604082019050919050565b6000602082019050818103600083015261369081613654565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006136cd601d83612adf565b91506136d882613697565b602082019050919050565b600060208201905081810360008301526136fc816136c0565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b600061375f602f83612adf565b915061376a82613703565b604082019050919050565b6000602082019050818103600083015261378e81613752565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006137f1602b83612adf565b91506137fc82613795565b604082019050919050565b60006020820190508181036000830152613820816137e4565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613883602483612adf565b915061388e82613827565b604082019050919050565b600060208201905081810360008301526138b281613876565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613915602283612adf565b9150613920826138b9565b604082019050919050565b6000602082019050818103600083015261394481613908565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006139a7602d83612adf565b91506139b28261394b565b604082019050919050565b600060208201905081810360008301526139d68161399a565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000613a39602683612adf565b9150613a44826139dd565b604082019050919050565b60006020820190508181036000830152613a6881613a2c565b9050919050565b600081519050919050565b600081905092915050565b6000613a9082613a6f565b613a9a8185613a7a565b9350613aaa818560208601612af0565b80840191505092915050565b6000613ac28284613a85565b91508190509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ed89f83061585dbbf2a8c4cc424b6fabb3742d7562b441d9d479a42fb79a55a364736f6c634300080b0033",
  "devdoc": {
    "details": "This contract depends on the Account and StakedCelo contracts to calculate the amount of rstCELO held by depositors.",
    "errors": {
      "FailedDeposit(address,uint256)": [
        {
          "params": {
            "amount": "The amount of stCELO the depositor attempted to deposit.",
            "depositor": "The address of the depositor."
          }
        }
      ],
      "FailedWithdrawal(address,uint256)": [
        {
          "params": {
            "amount": "The amount of stCELO the withdrawer attempted to withdraw.",
            "withdrawer": "The address of the withdrawer."
          }
        }
      ],
      "InsufficientBalance(uint256)": [
        {
          "params": {
            "amount": "The amount of stCELO that is insufficient."
          }
        }
      ]
    },
    "events": {
      "StakedCeloDeposited(address,uint256)": {
        "params": {
          "amount": "The amount of stCELO deposited.",
          "depositor": "The address of the depositor."
        }
      },
      "StakedCeloWithdrawn(address,uint256)": {
        "params": {
          "amount": "The amount of stCELO withdrawn.",
          "withdrawer": "The address of the withdrawer."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "params": {
          "_account": "The address of interest."
        },
        "returns": {
          "_0": "The amount of rstCELO owned by the address."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "details": "Although rstCELO is never minted to any account, the rstCELO balance is calculated based on the account's deposited stCELO. See `balanceOf()` function below.",
        "params": {
          "stCeloAmount": "The Amount of stCELO to be deposited."
        }
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "Storage version of the contract.",
          "_1": "Major version of the contract.",
          "_2": "Minor version of the contract.",
          "_3": "Patch version of the contract."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,address,address)": {
        "params": {
          "_account": "The address of the Account contract.",
          "_owner": "The address of the contract owner.",
          "_stakedCelo": "The address of the StakedCelo contract."
        }
      },
      "isPaused()": {
        "returns": {
          "_0": "`true` if the contract is paused, `false` otherwise."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "toRebasedStakedCelo(uint256)": {
        "params": {
          "stCeloAmount": "The amount of stCELO."
        },
        "returns": {
          "_0": "The amount of rstCELO represented by stCELO."
        }
      },
      "toStakedCelo(uint256)": {
        "params": {
          "rstCeloAmount": "The amount of rstCELO."
        },
        "returns": {
          "_0": "The amount of stCELO represented by rstCELO."
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "The calculated total supply of rstCELO."
        }
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint256)": {
        "params": {
          "stCeloAmount": "The amount of stCELO to withdraw."
        }
      }
    },
    "title": "An ERC-20 wrapper contract that receives stCELO and represents the underlying voted LockedGold in the StakedCelo system.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressZeroNotAllowed()": [
        {
          "notice": "Used when attempting to pass in address zero where not allowed."
        }
      ],
      "FailedDeposit(address,uint256)": [
        {
          "notice": "Used when deposit fails."
        }
      ],
      "FailedWithdrawal(address,uint256)": [
        {
          "notice": "Used when withdrawal fails."
        }
      ],
      "InputLargerThanTotalAmount()": [
        {
          "notice": "Used when input amount of token is greater than total token amount."
        }
      ],
      "InsufficientBalance(uint256)": [
        {
          "notice": "Used when a balance is too low."
        }
      ],
      "OnlyPauser()": [
        {
          "notice": "Used when an `onlyPauser` function is called with a different address."
        }
      ],
      "Paused()": [
        {
          "notice": "Used when an `onlyWhenNotPaused` function is called while the contract is paused."
        }
      ],
      "ZeroAmount()": [
        {
          "notice": "Used when the deposit amount is zero."
        }
      ]
    },
    "events": {
      "ContractPaused()": {
        "notice": "Emitted when this contract is paused."
      },
      "ContractUnpaused()": {
        "notice": "Emitted when this contract is unpaused."
      },
      "PauserSet(address)": {
        "notice": "Emitted when the address authorized to pause/unpause the contract is changed."
      },
      "StakedCeloDeposited(address,uint256)": {
        "notice": "Used when a deposit is successfuly completed."
      },
      "StakedCeloWithdrawn(address,uint256)": {
        "notice": "Used when a withdrawal is successfully completed."
      }
    },
    "kind": "user",
    "methods": {
      "PAUSED_POSITION()": {
        "notice": "The storage slot under which we store a boolean representing whether or not the contract is currently paused."
      },
      "PAUSER_POSITION()": {
        "notice": "The storage slot under which we store an address representing the address permissioned to pause/unpause this contract."
      },
      "balanceOf(address)": {
        "notice": "Used to query the rstCELO balance of an address."
      },
      "constructor": {
        "notice": "Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized."
      },
      "deposit(uint256)": {
        "notice": "Deposit stCELO in return for rstCELO."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "initialize(address,address,address)": {
        "notice": "Replaces the constructor for proxy implementation."
      },
      "isPaused()": {
        "notice": "Returns whether or not the contract is paused."
      },
      "pause()": {
        "notice": "Pauses the contract."
      },
      "pauser()": {
        "notice": "Returns the address permissioned to pause/unpause this contract."
      },
      "setPauser()": {
        "notice": "Sets that address permissioned to pause/unpause this contract to the owner of this contract."
      },
      "stakedCeloBalance(address)": {
        "notice": "Keyed by depositor address, the amount of stCELO deposited."
      },
      "toRebasedStakedCelo(uint256)": {
        "notice": "Computes the amount of rstCELO that is represented by an amount of stCELO."
      },
      "toStakedCelo(uint256)": {
        "notice": "Computes the amount of stCELO that is represented by an amount of rstCELO."
      },
      "totalDeposit()": {
        "notice": "Total amount of stCELO deposited in this contract."
      },
      "totalSupply()": {
        "notice": "Used to query the total supply of rstCELO."
      },
      "unpause()": {
        "notice": "Unpauses the contract."
      },
      "withdraw(uint256)": {
        "notice": "Withdraws stCELO. This function transfers back some or all of sender's previously deposited stCELO amount."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 584,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12209,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12215,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 12217,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 12219,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 12221,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 12802,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8989,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "totalDeposit",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 8994,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "stakedCeloBalance",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8998,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "stakedCelo",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IStakedCelo)17891"
      },
      {
        "astId": 9002,
        "contract": "contracts/RebasedStakedCelo.sol:RebasedStakedCelo",
        "label": "account",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(IAccount)16729"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccount)16729": {
        "encoding": "inplace",
        "label": "contract IAccount",
        "numberOfBytes": "20"
      },
      "t_contract(IStakedCelo)17891": {
        "encoding": "inplace",
        "label": "contract IStakedCelo",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}