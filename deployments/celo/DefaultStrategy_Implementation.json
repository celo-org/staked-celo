{
  "address": "0xf0B67Ab98DD5725565cF96496B5eDA455622F7Ff",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZeroNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotManager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotManagerNorStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupNotEligible",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "HealthyGroup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "InvalidFromGroup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "InvalidToGroup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveGroups",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAbleToDistributeVotes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotUnsortedGroup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualCelo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedCelo",
          "type": "uint256"
        }
      ],
      "name": "RebalanceEnoughStCelo",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualCelo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedCelo",
          "type": "uint256"
        }
      ],
      "name": "RebalanceNoExtraStCelo",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "GroupRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "update",
          "type": "bool"
        }
      ],
      "name": "SortedFlagUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "account",
      "outputs": [
        {
          "internalType": "contract IAccount",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lesser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greater",
          "type": "address"
        }
      ],
      "name": "activateGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "deactivateGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "deactivateUnhealthyGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "celoAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositGroupToIgnore",
          "type": "address"
        }
      ],
      "name": "generateDepositVoteDistribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "finalGroups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "finalVotes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "celoAmount",
          "type": "uint256"
        }
      ],
      "name": "generateWithdrawalVoteDistribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "finalGroups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "finalVotes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getExpectedAndActualStCeloForGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expectedStCelo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actualStCelo",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getGroupPreviousAndNext",
      "outputs": [
        {
          "internalType": "address",
          "name": "previousAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nextAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGroupsHead",
      "outputs": [
        {
          "internalType": "address",
          "name": "head",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "previousAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGroupsTail",
      "outputs": [
        {
          "internalType": "address",
          "name": "tail",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nextAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfUnsortedGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUnsortedGroupAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "groupHealth",
      "outputs": [
        {
          "internalType": "contract IGroupHealth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGroupsToDistributeTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGroupsToWithdrawFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromGroup",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toGroup",
          "type": "address"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_groupHealth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_specificGroupStrategy",
          "type": "address"
        }
      ],
      "name": "setDependencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "distributeTo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loopLimit",
          "type": "uint256"
        }
      ],
      "name": "setSortingParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sorted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "specificGroupStrategy",
      "outputs": [
        {
          "internalType": "contract ISpecificGroupStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stCeloInGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStCeloInStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lesserKey",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greaterKey",
          "type": "address"
        }
      ],
      "name": "updateActiveGroupOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb94856c8b0ddb1748a618c200e7d89c7df3a46a0d35f5594472f276db56eac05",
  "receipt": {
    "to": null,
    "from": "0x5bC1C4C1D67C5E4384189302BC653A611568a788",
    "contractAddress": "0xf0B67Ab98DD5725565cF96496B5eDA455622F7Ff",
    "transactionIndex": 15,
    "gasUsed": "5050458",
    "logsBloom": "0x
    "blockHash": "0x9d63338f3b96f1d8a4a3958d26255740f19deae021dbfbb42e9db8a5ddd4db44",
    "transactionHash": "0xb94856c8b0ddb1748a618c200e7d89c7df3a46a0d35f5594472f276db56eac05",
    "logs": [],
    "blockNumber": 19918406,
    "cumulativeGasUsed": "6563503",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "853b55223846d02fedd45ce1ad0ec6ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZeroNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotManagerNorStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupNotEligible\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"HealthyGroup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"InvalidFromGroup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"InvalidToGroup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveGroups\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAbleToDistributeVotes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotUnsortedGroup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualCelo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedCelo\",\"type\":\"uint256\"}],\"name\":\"RebalanceEnoughStCelo\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualCelo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedCelo\",\"type\":\"uint256\"}],\"name\":\"RebalanceNoExtraStCelo\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"GroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"SortedFlagUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"account\",\"outputs\":[{\"internalType\":\"contract IAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lesser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greater\",\"type\":\"address\"}],\"name\":\"activateGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"deactivateGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"deactivateUnhealthyGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"celoAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositGroupToIgnore\",\"type\":\"address\"}],\"name\":\"generateDepositVoteDistribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"finalGroups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"finalVotes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"celoAmount\",\"type\":\"uint256\"}],\"name\":\"generateWithdrawalVoteDistribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"finalGroups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"finalVotes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getExpectedAndActualStCeloForGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedStCelo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualStCelo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getGroupPreviousAndNext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nextAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGroupsHead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"head\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGroupsTail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tail\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nextAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfUnsortedGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUnsortedGroupAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupHealth\",\"outputs\":[{\"internalType\":\"contract IGroupHealth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGroupsToDistributeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGroupsToWithdrawFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromGroup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toGroup\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_groupHealth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_specificGroupStrategy\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distributeTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loopLimit\",\"type\":\"uint256\"}],\"name\":\"setSortingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sorted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specificGroupStrategy\",\"outputs\":[{\"internalType\":\"contract ISpecificGroupStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stCeloInGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStCeloInStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lesserKey\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greaterKey\",\"type\":\"address\"}],\"name\":\"updateActiveGroupOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"params\":{\"caller\":\"`msg.sender` that called the function.\"}}],\"CallerNotManagerNorStrategy(address)\":[{\"params\":{\"caller\":\"`msg.sender` that called the function.\"}}],\"GroupAlreadyAdded(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupNotActive(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"GroupNotEligible(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"HealthyGroup(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"InvalidFromGroup(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"InvalidToGroup(address)\":[{\"params\":{\"group\":\"The group's address.\"}}],\"RebalanceEnoughStCelo(address,uint256,uint256)\":[{\"params\":{\"actualCelo\":\"The actual stCELO value.\",\"expectedCelo\":\"The expected stCELO value.\",\"group\":\"The group's address.\"}}],\"RebalanceNoExtraStCelo(address,uint256,uint256)\":[{\"params\":{\"actualCelo\":\"The actual stCELO value.\",\"expectedCelo\":\"The expected stCELO value.\",\"group\":\"The group's address.\"}}]},\"events\":{\"GroupActivated(address)\":{\"params\":{\"group\":\"The group's address.\"}},\"GroupRemoved(address)\":{\"params\":{\"group\":\"The group's address.\"}},\"SortedFlagUpdated(bool)\":{\"params\":{\"update\":\"The new value.\"}}},\"kind\":\"dev\",\"methods\":{\"activateGroup(address,address,address)\":{\"params\":{\"greater\":\"The group receiving more votes (in default strategy) than `group`,  or 0 if `group` has the most votes of any validator group.\",\"group\":\"The address of the group to add to the set of votable groups.\",\"lesser\":\"The group receiving fewer votes (in default strategy) than `group`, or 0 if `group` has the fewest votes of any validator group.\"}},\"deactivateGroup(address)\":{\"params\":{\"group\":\"The group to deactivated.\"}},\"deactivateUnhealthyGroup(address)\":{\"params\":{\"group\":\"The group to deactivate if unhealthy.\"}},\"generateDepositVoteDistribution(uint256,address)\":{\"params\":{\"celoAmount\":\"The amount of votes to distribute.\",\"depositGroupToIgnore\":\"The group that will not be used for deposit.\"},\"returns\":{\"finalGroups\":\"The groups that were chosen for distribution.\",\"finalVotes\":\"The votes of chosen finalGroups.\"}},\"generateWithdrawalVoteDistribution(uint256)\":{\"params\":{\"celoAmount\":\"The amount of votes to subtract.\"},\"returns\":{\"finalGroups\":\"The groups that were chosen for subtraction.\",\"finalVotes\":\"The votes of chosen finalGroups.\"}},\"getExpectedAndActualStCeloForGroup(address)\":{\"params\":{\"group\":\"The group.\"},\"returns\":{\"actualStCelo\":\"The amount of stCELO which is currently assigned to group in the strategy.\",\"expectedStCelo\":\"The amount of stCELO that group should have. (The total amount of stCELO in the default strategy divided by the number of active groups.)\"}},\"getGroupPreviousAndNext(address)\":{\"params\":{\"group\":\"The group address.\"},\"returns\":{\"nextAddress\":\"The next address.\",\"previousAddress\":\"The previous address.\"}},\"getGroupsHead()\":{\"returns\":{\"head\":\"The address of the sorted group with most votes.\",\"previousAddress\":\"The previous address from head.\"}},\"getGroupsTail()\":{\"returns\":{\"nextAddress\":\"The next address after tail.\",\"tail\":\"The address of the sorted group with least votes.\"}},\"getNumberOfGroups()\":{\"returns\":{\"_0\":\"The number of active groups.\"}},\"getNumberOfUnsortedGroups()\":{\"returns\":{\"_0\":\"The number of unsorted groups.\"}},\"getUnsortedGroupAt(uint256)\":{\"params\":{\"index\":\"The index to look up.\"},\"returns\":{\"_0\":\"The group.\"}},\"getVersionNumber()\":{\"returns\":{\"_0\":\"Storage version of the contract.\",\"_1\":\"Major version of the contract.\",\"_2\":\"Minor version of the contract.\",\"_3\":\"Patch version of the contract.\"}},\"initialize(address,address)\":{\"params\":{\"_manager\":\"The address of the Manager contract.\",\"_owner\":\"The address of the contract owner.\"}},\"isActive(address)\":{\"returns\":{\"_0\":\"Whether or not the given group is active.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rebalance(address,address)\":{\"params\":{\"fromGroup\":\"The from group.\",\"toGroup\":\"The to group.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDependencies(address,address,address)\":{\"params\":{\"_account\":\"The address of the Account contract.\",\"_groupHealth\":\"The address of the GroupHealth contract.\",\"_specificGroupStrategy\":\"The address of the SpecificGroupStrategy contract.\"}},\"setManager(address)\":{\"params\":{\"_manager\":\"The new manager address.\"}},\"setSortingParams(uint256,uint256,uint256)\":{\"params\":{\"distributeTo\":\"Maximum number of groups that can be distributed to.\",\"loopLimit\":\"The sorting loop limit while sorting active groups on chain.\",\"withdrawFrom\":\"Maximum number of groups that can be withdrawn from.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateActiveGroupOrder(address,address,address)\":{\"params\":{\"greaterKey\":\"The key of the group greater than the group to update.\",\"group\":\"The group address.\",\"lesserKey\":\"The key of the group less than the group to update.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"DefaultStrategy is responsible for handling any deposit/withdrawal for accounts without any specific strategy.\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressZeroNotAllowed()\":[{\"notice\":\"Used when attempting to pass in address zero where not allowed.\"}],\"CallerNotManager(address)\":[{\"notice\":\"Used when an `onlyManager` function is called by a non-manager.\"}],\"CallerNotManagerNorStrategy(address)\":[{\"notice\":\"Used when a `managerOrStrategy` function is called  by a non-manager or non-strategy.\"}],\"GroupAlreadyAdded(address)\":[{\"notice\":\"Used when attempting to activate a group that is already active.\"}],\"GroupNotActive(address)\":[{\"notice\":\"Used when attempting to deactivate a group that is not active.\"}],\"GroupNotEligible(address)\":[{\"notice\":\"Used when a group does not meet the validator group health requirements.\"}],\"HealthyGroup(address)\":[{\"notice\":\"Used when attempting to deactivate a healthy group using deactivateUnhealthyGroup().\"}],\"InvalidFromGroup(address)\":[{\"notice\":\"Used when rebalancing from non-active group.\"}],\"InvalidToGroup(address)\":[{\"notice\":\"Used when rebalancing to a non-active group.\"}],\"NoActiveGroups()\":[{\"notice\":\"Used when attempting to deposit when there are no active groups to vote for.\"}],\"NotAbleToDistributeVotes()\":[{\"notice\":\"Used when atempting to distribute votes but validator group limit is reached.\"}],\"NotUnsortedGroup()\":[{\"notice\":\"Used when attempting sort active groups when there are no unsorted group.\"}],\"NullAddress()\":[{\"notice\":\"Used when a passed address is address(0).\"}],\"RebalanceEnoughStCelo(address,uint256,uint256)\":[{\"notice\":\"Used when rebalancing and `toGroup` has enough stCELO.\"}],\"RebalanceNoExtraStCelo(address,uint256,uint256)\":[{\"notice\":\"Used when rebalancing and `fromGroup` doesn't have any extra stCELO.\"}]},\"events\":{\"GroupActivated(address)\":{\"notice\":\"Emitted when a new group is activated for voting.\"},\"GroupRemoved(address)\":{\"notice\":\"Emitted when a group is deactivated.\"},\"ManagerSet(address)\":{\"notice\":\"Emitted when the manager is initially set or later modified.\"},\"SortedFlagUpdated(bool)\":{\"notice\":\"Emmited when sorted status of active groups was changed.\"}},\"kind\":\"user\",\"methods\":{\"account()\":{\"notice\":\"An instance of the Account contract for the StakedCelo protocol.\"},\"activateGroup(address,address,address)\":{\"notice\":\"Marks a group as votable for default strategy. It is necessary to call `updateGroupHealth` in GroupHealth smart contract first.\"},\"constructor\":{\"notice\":\"Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized.\"},\"deactivateGroup(address)\":{\"notice\":\"Deactivates group.\"},\"deactivateUnhealthyGroup(address)\":{\"notice\":\"Deactivates an unhealthy group.\"},\"generateDepositVoteDistribution(uint256,address)\":{\"notice\":\"Distributes votes by computing the number of votes each active group should receive.\"},\"generateWithdrawalVoteDistribution(uint256)\":{\"notice\":\"Distributes votes by computing the number of votes to be subtracted from each active group.\"},\"getExpectedAndActualStCeloForGroup(address)\":{\"notice\":\"Returns expected stCELO and actual stCELO for group.\"},\"getGroupPreviousAndNext(address)\":{\"notice\":\"Returns previous and next address of key.\"},\"getGroupsHead()\":{\"notice\":\"Returns head and previous address of head.\"},\"getGroupsTail()\":{\"notice\":\"Returns tail and next address of tail.\"},\"getNumberOfGroups()\":{\"notice\":\"Returns the number of active groups.\"},\"getNumberOfUnsortedGroups()\":{\"notice\":\"Returns the number of unsorted groups.\"},\"getUnsortedGroupAt(uint256)\":{\"notice\":\"Returns the unsorted group at index.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"groupHealth()\":{\"notice\":\"An instance of the GroupHealth contract for the StakedCelo protocol.\"},\"initialize(address,address)\":{\"notice\":\"Initialize the contract with registry and owner.\"},\"isActive(address)\":{\"notice\":\"Returns whether active groups contain group.\"},\"maxGroupsToDistributeTo()\":{\"notice\":\"Maximum number of groups to distribute votes to.\"},\"maxGroupsToWithdrawFrom()\":{\"notice\":\"Maximum number of groups to withdraw from.\"},\"rebalance(address,address)\":{\"notice\":\"Rebalances CELO between groups that have an incorrect CELO-stCELO ratio. `fromGroup` is required to have more CELO than it should and `toGroup` needs to have less CELO than it should.\"},\"setDependencies(address,address,address)\":{\"notice\":\"Set this contract's dependencies in the StakedCelo system.\"},\"setManager(address)\":{\"notice\":\"Sets the manager address.\"},\"setSortingParams(uint256,uint256,uint256)\":{\"notice\":\"Set distribution/withdrawal algorithm parameters.\"},\"sorted()\":{\"notice\":\"Whether or not active groups are sorted. If active groups are not sorted it is neccessary to call updateActiveGroupOrder.\"},\"specificGroupStrategy()\":{\"notice\":\"An instance of the SpecificGroupStrategy for the StakedCelo protocol.\"},\"stCeloInGroup(address)\":{\"notice\":\"StCELO that was cast for default group strategy, strategy => stCELO amount.\"},\"totalStCeloInStrategy()\":{\"notice\":\"Total stCELO that was voted with on default strategy.\"},\"updateActiveGroupOrder(address,address,address)\":{\"notice\":\"Updates group order of unsorted group. When there are no more unsorted groups it will mark active groups as sorted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DefaultStrategy.sol\":\"DefaultStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/DefaultStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./common/UUPSOwnableUpgradeable.sol\\\";\\nimport \\\"./common/linkedlists/AddressSortedLinkedList.sol\\\";\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/IGroupHealth.sol\\\";\\nimport \\\"./interfaces/IManager.sol\\\";\\nimport \\\"./interfaces/ISpecificGroupStrategy.sol\\\";\\nimport \\\"./Managed.sol\\\";\\n\\n/**\\n * @title DefaultStrategy is responsible for handling any deposit/withdrawal\\n * for accounts without any specific strategy.\\n */\\ncontract DefaultStrategy is UUPSOwnableUpgradeable, Managed {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using AddressSortedLinkedList for SortedLinkedList.List;\\n\\n    /**\\n     * @notice Holds a group's address and votes.\\n     * @param group The address of the group.\\n     * @param votes The votes assigned to the group.\\n     */\\n    struct GroupWithVotes {\\n        address group;\\n        uint256 votes;\\n    }\\n\\n    /**\\n     * @notice The set of currently active groups that will be voted for with\\n     * new deposits.\\n     */\\n    SortedLinkedList.List private activeGroups;\\n\\n    /**\\n     * @notice An instance of the GroupHealth contract for the StakedCelo protocol.\\n     */\\n    IGroupHealth public groupHealth;\\n\\n    /**\\n     * @notice An instance of the Account contract for the StakedCelo protocol.\\n     */\\n    IAccount public account;\\n\\n    /**\\n     * @notice An instance of the SpecificGroupStrategy for the StakedCelo protocol.\\n     */\\n    ISpecificGroupStrategy public specificGroupStrategy;\\n\\n    /**\\n     * @notice StCELO that was cast for default group strategy,\\n     * strategy => stCELO amount.\\n     */\\n    mapping(address => uint256) public stCeloInGroup;\\n\\n    /**\\n     * @notice Maximum number of groups to distribute votes to.\\n     */\\n    uint256 public maxGroupsToDistributeTo;\\n\\n    /**\\n     * @notice Maximum number of groups to withdraw from.\\n     */\\n    uint256 public maxGroupsToWithdrawFrom;\\n\\n    /**\\n     * @notice Total stCELO that was voted with on default strategy.\\n     */\\n    uint256 public totalStCeloInStrategy;\\n\\n    /**\\n     * @notice Loop limit while sorting active groups on chain.\\n     */\\n    uint256 private sortingLoopLimit;\\n\\n    /**\\n     * @notice Whether or not active groups are sorted.\\n     * If active groups are not sorted it is neccessary to call updateActiveGroupOrder.\\n     */\\n    bool public sorted;\\n\\n    /**\\n     * @notice Groups that need to be sorted.\\n     */\\n    EnumerableSet.AddressSet private unsortedGroups;\\n\\n    /**\\n     * @notice Emitted when a group is deactivated.\\n     * @param group The group's address.\\n     */\\n    event GroupRemoved(address indexed group);\\n\\n    /**\\n     * @notice Emitted when a new group is activated for voting.\\n     * @param group The group's address.\\n     */\\n    event GroupActivated(address indexed group);\\n\\n    /**\\n     * Emmited when sorted status of active groups was changed.\\n     * @param update The new value.\\n     */\\n    event SortedFlagUpdated(bool update);\\n\\n    /**\\n     * @notice Used when attempting to activate a group that is already active.\\n     * @param group The group's address.\\n     */\\n    error GroupAlreadyAdded(address group);\\n\\n    /**\\n     * @notice Used when a group does not meet the validator group health requirements.\\n     * @param group The group's address.\\n     */\\n    error GroupNotEligible(address group);\\n\\n    /**\\n     * @notice Used when attempting to deactivate a group that is not active.\\n     * @param group The group's address.\\n     */\\n    error GroupNotActive(address group);\\n\\n    /**\\n     * @notice Used when attempting to deactivate a healthy group using deactivateUnhealthyGroup().\\n     * @param group The group's address.\\n     */\\n    error HealthyGroup(address group);\\n\\n    /**\\n     * @notice Used when attempting to deposit when there are no active groups\\n     * to vote for.\\n     */\\n    error NoActiveGroups();\\n\\n    /**\\n     * @notice Used when atempting to distribute votes but validator group limit is reached.\\n     */\\n    error NotAbleToDistributeVotes();\\n\\n    /**\\n     * @notice Used when attempting sort active groups when there are no unsorted group.\\n     */\\n    error NotUnsortedGroup();\\n\\n    /**\\n     * @notice Used when rebalancing to a non-active group.\\n     * @param group The group's address.\\n     */\\n    error InvalidToGroup(address group);\\n\\n    /**\\n     * @notice Used when rebalancing from non-active group.\\n     * @param group The group's address.\\n     */\\n    error InvalidFromGroup(address group);\\n\\n    /**\\n     * @notice Used when rebalancing and `fromGroup` doesn't have any extra stCELO.\\n     * @param group The group's address.\\n     * @param actualCelo The actual stCELO value.\\n     * @param expectedCelo The expected stCELO value.\\n     */\\n    error RebalanceNoExtraStCelo(address group, uint256 actualCelo, uint256 expectedCelo);\\n\\n    /**\\n     * @notice Used when rebalancing and `toGroup` has enough stCELO.\\n     * @param group The group's address.\\n     * @param actualCelo The actual stCELO value.\\n     * @param expectedCelo The expected stCELO value.\\n     */\\n    error RebalanceEnoughStCelo(address group, uint256 actualCelo, uint256 expectedCelo);\\n\\n    /**\\n     * @notice Used when attempting to pass in address zero where not allowed.\\n     */\\n    error AddressZeroNotAllowed();\\n\\n    /**\\n     *  @notice Used when a `managerOrStrategy` function is called\\n     *  by a non-manager or non-strategy.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManagerNorStrategy(address caller);\\n\\n    /**\\n     * @notice Checks that only the manager or strategy contract can execute a function.\\n     */\\n    modifier managerOrStrategy() {\\n        if (manager != msg.sender && address(specificGroupStrategy) != msg.sender) {\\n            revert CallerNotManagerNorStrategy(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\\n     * implementation gets initialized.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() initializer {}\\n\\n    /**\\n     * @notice Initialize the contract with registry and owner.\\n     * @param _owner The address of the contract owner.\\n     * @param _manager The address of the Manager contract.\\n     */\\n    function initialize(address _owner, address _manager) external initializer {\\n        _transferOwnership(_owner);\\n        __Managed_init(_manager);\\n        maxGroupsToDistributeTo = 8;\\n        maxGroupsToWithdrawFrom = 8;\\n        sortingLoopLimit = 10;\\n        sorted = true;\\n        emit SortedFlagUpdated(sorted);\\n    }\\n\\n    /**\\n     * @notice Set this contract's dependencies in the StakedCelo system.\\n     * @param _account The address of the Account contract.\\n     * @param _groupHealth The address of the GroupHealth contract.\\n     * @param _specificGroupStrategy The address of the SpecificGroupStrategy contract.\\n     */\\n    function setDependencies(\\n        address _account,\\n        address _groupHealth,\\n        address _specificGroupStrategy\\n    ) external onlyOwner {\\n        if (\\n            _account == address(0) ||\\n            _groupHealth == address(0) ||\\n            _specificGroupStrategy == address(0)\\n        ) {\\n            revert AddressZeroNotAllowed();\\n        }\\n\\n        groupHealth = IGroupHealth(_groupHealth);\\n        specificGroupStrategy = ISpecificGroupStrategy(_specificGroupStrategy);\\n        account = IAccount(_account);\\n    }\\n\\n    /**\\n     * @notice Set distribution/withdrawal algorithm parameters.\\n     * @param distributeTo Maximum number of groups that can be distributed to.\\n     * @param withdrawFrom Maximum number of groups that can be withdrawn from.\\n     * @param loopLimit The sorting loop limit while sorting active groups on chain.\\n     */\\n    function setSortingParams(\\n        uint256 distributeTo,\\n        uint256 withdrawFrom,\\n        uint256 loopLimit\\n    ) external onlyOwner {\\n        maxGroupsToDistributeTo = distributeTo;\\n        maxGroupsToWithdrawFrom = withdrawFrom;\\n        sortingLoopLimit = loopLimit;\\n    }\\n\\n    /**\\n     * @notice Distributes votes by computing the number of votes each active\\n     * group should receive.\\n     * @param celoAmount The amount of votes to distribute.\\n     * @param depositGroupToIgnore The group that will not be used for deposit.\\n     * @return finalGroups The groups that were chosen for distribution.\\n     * @return finalVotes The votes of chosen finalGroups.\\n     */\\n    function generateDepositVoteDistribution(uint256 celoAmount, address depositGroupToIgnore)\\n        external\\n        managerOrStrategy\\n        returns (address[] memory finalGroups, uint256[] memory finalVotes)\\n    {\\n        return _generateDepositVoteDistribution(celoAmount, depositGroupToIgnore);\\n    }\\n\\n    /**\\n     * @notice Updates group order of unsorted group. When there are no more unsorted groups\\n     * it will mark active groups as sorted.\\n     * @param group The group address.\\n     * @param lesserKey The key of the group less than the group to update.\\n     * @param greaterKey The key of the group greater than the group to update.\\n     */\\n    function updateActiveGroupOrder(\\n        address group,\\n        address lesserKey,\\n        address greaterKey\\n    ) external {\\n        if (!unsortedGroups.contains(group)) {\\n            revert NotUnsortedGroup();\\n        }\\n\\n        activeGroups.update(group, stCeloInGroup[group], lesserKey, greaterKey);\\n        unsortedGroups.remove(group);\\n        if (unsortedGroups.length() == 0) {\\n            sorted = true;\\n            emit SortedFlagUpdated(sorted);\\n        }\\n    }\\n\\n    /**\\n     * @notice Marks a group as votable for default strategy.\\n     * It is necessary to call `updateGroupHealth` in GroupHealth smart contract first.\\n     * @param group The address of the group to add to the set of votable\\n     * groups.\\n     * @param lesser The group receiving fewer votes (in default strategy) than `group`,\\n     * or 0 if `group` has the fewest votes of any validator group.\\n     * @param greater The group receiving more votes (in default strategy) than `group`,\\n     *  or 0 if `group` has the most votes of any validator group.\\n     */\\n    function activateGroup(\\n        address group,\\n        address lesser,\\n        address greater\\n    ) external onlyOwner {\\n        if (!groupHealth.isGroupValid(group)) {\\n            revert GroupNotEligible(group);\\n        }\\n\\n        if (activeGroups.contains(group)) {\\n            revert GroupAlreadyAdded(group);\\n        }\\n\\n        // For migration purposes between V1 and V2. It can be removed once migrated to V2.\\n        uint256 currentStCelo = 0;\\n        uint256 stCeloForWholeGroup = IManager(manager).toStakedCelo(\\n            account.getCeloForGroup(group)\\n        );\\n\\n        if (stCeloForWholeGroup != 0) {\\n            (uint256 specificGroupTotalStCelo, , ) = specificGroupStrategy.getStCeloInGroup(group);\\n            currentStCelo =\\n                stCeloForWholeGroup -\\n                Math.min(stCeloForWholeGroup, specificGroupTotalStCelo);\\n            updateGroupStCelo(group, currentStCelo, true);\\n        }\\n\\n        activeGroups.insert(group, currentStCelo, lesser, greater);\\n\\n        emit GroupActivated(group);\\n    }\\n\\n    /**\\n     * @notice Rebalances CELO between groups that have an incorrect CELO-stCELO ratio.\\n     * `fromGroup` is required to have more CELO than it should and `toGroup` needs\\n     * to have less CELO than it should.\\n     * @param fromGroup The from group.\\n     * @param toGroup The to group.\\n     */\\n    function rebalance(address fromGroup, address toGroup) external {\\n        if (!activeGroups.contains(fromGroup)) {\\n            revert InvalidFromGroup(fromGroup);\\n        }\\n\\n        if (!activeGroups.contains(toGroup)) {\\n            revert InvalidToGroup(toGroup);\\n        }\\n\\n        (uint256 expectedFromStCelo, uint256 actualFromStCelo) = getExpectedAndActualStCeloForGroup(\\n            fromGroup\\n        );\\n        if (actualFromStCelo <= expectedFromStCelo) {\\n            // fromGroup needs to have more stCELO than it should\\n            revert RebalanceNoExtraStCelo(fromGroup, actualFromStCelo, expectedFromStCelo);\\n        }\\n\\n        (uint256 expectedToStCelo, uint256 actualToStCelo) = getExpectedAndActualStCeloForGroup(\\n            toGroup\\n        );\\n\\n        if (actualToStCelo >= expectedToStCelo) {\\n            // toGroup needs to have less stCELO than it should\\n            revert RebalanceEnoughStCelo(toGroup, actualToStCelo, expectedToStCelo);\\n        }\\n\\n        uint256 toMove = Math.min(\\n            actualFromStCelo - expectedFromStCelo,\\n            expectedToStCelo - actualToStCelo\\n        );\\n\\n        updateGroupStCelo(fromGroup, toMove, false);\\n        updateGroupStCelo(toGroup, toMove, true);\\n\\n        trySort(fromGroup, stCeloInGroup[fromGroup], false);\\n        trySort(toGroup, stCeloInGroup[toGroup], true);\\n    }\\n\\n    /**\\n     * @notice Distributes votes by computing the number of votes to be subtracted\\n     * from each active group.\\n     * @param celoAmount The amount of votes to subtract.\\n     * @return finalGroups The groups that were chosen for subtraction.\\n     * @return finalVotes The votes of chosen finalGroups.\\n     */\\n    function generateWithdrawalVoteDistribution(uint256 celoAmount)\\n        external\\n        managerOrStrategy\\n        returns (address[] memory finalGroups, uint256[] memory finalVotes)\\n    {\\n        if (activeGroups.getNumElements() == 0) {\\n            revert NoActiveGroups();\\n        }\\n\\n        uint256 maxGroupCount = Math.min(maxGroupsToWithdrawFrom, activeGroups.getNumElements());\\n\\n        address[] memory groups = new address[](maxGroupCount);\\n        uint256[] memory votes = new uint256[](maxGroupCount);\\n\\n        address votedGroup = activeGroups.getHead();\\n        uint256 groupsIndex;\\n\\n        while (groupsIndex < maxGroupCount && celoAmount != 0 && votedGroup != address(0)) {\\n            votes[groupsIndex] = Math.min(\\n                Math.min(\\n                    account.getCeloForGroup(votedGroup),\\n                    IManager(manager).toCelo(stCeloInGroup[votedGroup])\\n                ),\\n                celoAmount\\n            );\\n\\n            groups[groupsIndex] = votedGroup;\\n            celoAmount -= votes[groupsIndex];\\n            updateGroupStCelo(\\n                votedGroup,\\n                IManager(manager).toStakedCelo(votes[groupsIndex]),\\n                false\\n            );\\n            trySort(votedGroup, stCeloInGroup[votedGroup], false);\\n\\n            if (sorted) {\\n                votedGroup = activeGroups.getHead();\\n            } else {\\n                (, votedGroup, ) = activeGroups.get(votedGroup);\\n            }\\n\\n            groupsIndex++;\\n        }\\n\\n        if (celoAmount != 0) {\\n            revert NotAbleToDistributeVotes();\\n        }\\n\\n        finalGroups = new address[](groupsIndex);\\n        finalVotes = new uint256[](groupsIndex);\\n\\n        for (uint256 i = 0; i < groupsIndex; i++) {\\n            finalGroups[i] = groups[i];\\n            finalVotes[i] = votes[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Deactivates group.\\n     * @param group The group to deactivated.\\n     */\\n    function deactivateGroup(address group) external onlyOwner {\\n        _deactivateGroup(group);\\n    }\\n\\n    /**\\n     * @notice Deactivates an unhealthy group.\\n     * @param group The group to deactivate if unhealthy.\\n     */\\n    function deactivateUnhealthyGroup(address group) external {\\n        if (groupHealth.isGroupValid(group)) {\\n            revert HealthyGroup(group);\\n        }\\n        _deactivateGroup((group));\\n    }\\n\\n    /**\\n     * @notice Returns the number of active groups.\\n     * @return The number of active groups.\\n     */\\n    function getNumberOfGroups() external view returns (uint256) {\\n        return activeGroups.getNumElements();\\n    }\\n\\n    /**\\n     * @notice Returns previous and next address of key.\\n     * @param group The group address.\\n     * @return previousAddress The previous address.\\n     * @return nextAddress The next address.\\n     */\\n    function getGroupPreviousAndNext(address group)\\n        external\\n        view\\n        returns (address previousAddress, address nextAddress)\\n    {\\n        (, previousAddress, nextAddress) = activeGroups.get(group);\\n    }\\n\\n    /**\\n     * @notice Returns head and previous address of head.\\n     * @return head The address of the sorted group with most votes.\\n     * @return previousAddress The previous address from head.\\n     */\\n    function getGroupsHead() external view returns (address head, address previousAddress) {\\n        head = activeGroups.getHead();\\n        (, previousAddress, ) = activeGroups.get(head);\\n    }\\n\\n    /**\\n     * @notice Returns tail and next address of tail.\\n     * @return tail The address of the sorted group with least votes.\\n     * @return nextAddress The next address after tail.\\n     */\\n    function getGroupsTail() external view returns (address tail, address nextAddress) {\\n        tail = activeGroups.getTail();\\n        (, , nextAddress) = activeGroups.get(tail);\\n    }\\n\\n    /**\\n     * @notice Returns whether active groups contain group.\\n     * @return Whether or not the given group is active.\\n     */\\n    function isActive(address group) external view returns (bool) {\\n        return activeGroups.contains(group);\\n    }\\n\\n    /**\\n     * @notice Returns the number of unsorted groups.\\n     * @return The number of unsorted groups.\\n     */\\n    function getNumberOfUnsortedGroups() external view returns (uint256) {\\n        return unsortedGroups.length();\\n    }\\n\\n    /**\\n     * @notice Returns the unsorted group at index.\\n     * @param index The index to look up.\\n     * @return The group.\\n     */\\n    function getUnsortedGroupAt(uint256 index) external view returns (address) {\\n        return unsortedGroups.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 1, 0, 0);\\n    }\\n\\n    /**\\n     * @notice Returns expected stCELO and actual stCELO for group.\\n     * @param group The group.\\n     * @return expectedStCelo The amount of stCELO that group should have.\\n     * (The total amount of stCELO in the default strategy divided by the number of active groups.)\\n     * @return actualStCelo The amount of stCELO which is currently\\n     * assigned to group in the strategy.\\n     */\\n    function getExpectedAndActualStCeloForGroup(address group)\\n        public\\n        view\\n        returns (uint256 expectedStCelo, uint256 actualStCelo)\\n    {\\n        address head = activeGroups.getHead();\\n        uint256 numberOfActiveGroups = activeGroups.getNumElements();\\n        expectedStCelo = totalStCeloInStrategy / numberOfActiveGroups;\\n        if (group == head) {\\n            uint256 divisionResidue = totalStCeloInStrategy -\\n                (expectedStCelo * numberOfActiveGroups);\\n            expectedStCelo += divisionResidue;\\n        }\\n\\n        actualStCelo = stCeloInGroup[group];\\n    }\\n\\n    /**\\n     * @notice Adds/substracts value to totals of group and\\n     * total stCELO in default strategy.\\n     * @param group The validator group that we are updating.\\n     * @param stCeloAmount The amount of stCELO.\\n     * @param add Whether to add or substract.\\n     */\\n    function updateGroupStCelo(\\n        address group,\\n        uint256 stCeloAmount,\\n        bool add\\n    ) internal {\\n        if (add) {\\n            stCeloInGroup[group] += stCeloAmount;\\n            totalStCeloInStrategy += stCeloAmount;\\n        } else {\\n            stCeloInGroup[group] -= stCeloAmount;\\n            totalStCeloInStrategy -= stCeloAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Deactivates group.\\n     * @param group The group to deactivated.\\n     */\\n    function _deactivateGroup(address group) private {\\n        if (!activeGroups.contains(group)) {\\n            revert GroupNotActive(group);\\n        }\\n        activeGroups.remove(group);\\n        unsortedGroups.remove(group);\\n\\n        uint256 groupTotalStCeloVotes = stCeloInGroup[group];\\n\\n        if (groupTotalStCeloVotes > 0) {\\n            updateGroupStCelo(group, groupTotalStCeloVotes, false);\\n            address[] memory fromGroups = new address[](1);\\n            uint256[] memory fromVotes = new uint256[](1);\\n            fromGroups[0] = group;\\n            fromVotes[0] = IManager(manager).toCelo(groupTotalStCeloVotes);\\n            (\\n                address[] memory toGroups,\\n                uint256[] memory toVotes\\n            ) = _generateDepositVoteDistribution(\\n                    IManager(manager).toCelo(groupTotalStCeloVotes),\\n                    address(0)\\n                );\\n            IManager(manager).scheduleTransferWithinStrategy(\\n                fromGroups,\\n                toGroups,\\n                fromVotes,\\n                toVotes\\n            );\\n        }\\n\\n        emit GroupRemoved(group);\\n    }\\n\\n    /**\\n     * @notice Distributes votes by computing the number of votes each active\\n     * group should receive.\\n     * @param celoAmount The amount of votes to distribute.\\n     * @param depositGroupToIgnore The group that will not be used for deposit.\\n     * @return finalGroups The groups that were chosen for distribution.\\n     * @return finalVotes The votes of chosen finalGroups.\\n     */\\n    function _generateDepositVoteDistribution(uint256 celoAmount, address depositGroupToIgnore)\\n        private\\n        returns (address[] memory finalGroups, uint256[] memory finalVotes)\\n    {\\n        if (activeGroups.getNumElements() == 0) {\\n            revert NoActiveGroups();\\n        }\\n\\n        uint256 maxGroupCount = Math.min(maxGroupsToDistributeTo, activeGroups.getNumElements());\\n\\n        address[] memory groups = new address[](maxGroupCount);\\n        uint256[] memory votes = new uint256[](maxGroupCount);\\n\\n        address votedGroup = activeGroups.getTail();\\n        uint256 groupsIndex;\\n\\n        while (groupsIndex < maxGroupCount && celoAmount != 0 && votedGroup != address(0)) {\\n            uint256 receivableVotes = IManager(manager).getReceivableVotesForGroup(votedGroup);\\n            if (votedGroup == depositGroupToIgnore || receivableVotes == 0) {\\n                (, , votedGroup) = activeGroups.get(votedGroup);\\n                continue;\\n            }\\n\\n            votes[groupsIndex] = Math.min(receivableVotes, celoAmount);\\n            groups[groupsIndex] = votedGroup;\\n            celoAmount -= votes[groupsIndex];\\n            updateGroupStCelo(votedGroup, IManager(manager).toStakedCelo(votes[groupsIndex]), true);\\n            trySort(votedGroup, stCeloInGroup[votedGroup], true);\\n\\n            if (sorted) {\\n                votedGroup = activeGroups.getTail();\\n            } else {\\n                (, , votedGroup) = activeGroups.get(votedGroup);\\n            }\\n            groupsIndex++;\\n        }\\n\\n        if (celoAmount != 0) {\\n            revert NotAbleToDistributeVotes();\\n        }\\n\\n        finalGroups = new address[](groupsIndex);\\n        finalVotes = new uint256[](groupsIndex);\\n\\n        for (uint256 i = 0; i < groupsIndex; i++) {\\n            finalGroups[i] = groups[i];\\n            finalVotes[i] = votes[i];\\n        }\\n    }\\n\\n    /**\\n     * Try to sort group in active groups based on new value.\\n     * @param group The group address.\\n     * @param newValue The new value of group.\\n     * @param valueIncreased Whether value increased/decreased compared to original value.\\n     */\\n    function trySort(\\n        address group,\\n        uint256 newValue,\\n        bool valueIncreased\\n    ) private {\\n        if (unsortedGroups.contains(group)) {\\n            return;\\n        }\\n\\n        (address lesserKey, address greaterKey) = valueIncreased\\n            ? activeGroups.getLesserAndGreaterOfAddressThatIncreasedValue(\\n                group,\\n                newValue,\\n                sortingLoopLimit\\n            )\\n            : activeGroups.getLesserAndGreaterOfAddressThatDecreasedValue(\\n                group,\\n                newValue,\\n                sortingLoopLimit\\n            );\\n        if (lesserKey != greaterKey || activeGroups.getNumElements() == 1) {\\n            activeGroups.update(group, newValue, lesserKey, greaterKey);\\n        } else {\\n            if (sorted) {\\n                sorted = false;\\n            }\\n            unsortedGroups.add(group);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60f1bfaa4496e2c8ac6e6a49ddda6f03946226811e3cf31d3e1bd90995195876\",\"license\":\"LGPL-3.0-only\"},\"contracts/Managed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Used via inheritance to grant special access control to the Manager\\n * contract.\\n */\\nabstract contract Managed is Initializable, OwnableUpgradeable {\\n    address public manager;\\n\\n    /**\\n     * @notice Emitted when the manager is initially set or later modified.\\n     * @param manager The new managing account address.\\n     */\\n    event ManagerSet(address indexed manager);\\n\\n    /**\\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManager(address caller);\\n\\n    /**\\n     * @notice Used when a passed address is address(0).\\n     */\\n    error NullAddress();\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        if (manager != msg.sender) {\\n            revert CallerNotManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function setManager(address _manager) external onlyOwner {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract in an upgradable context.\\n     * @param _manager The initial managing address.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Managed_init(address _manager) internal onlyInitializing {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function _setManager(address _manager) internal {\\n        if (_manager == address(0)) {\\n            revert NullAddress();\\n        }\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xb378cf0f0b77e80291f24b4320f22d6c4213849bd1d2f854370c79837f1081d6\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UUPSOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\\n */\\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\\n    /**\\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\\n     * adds the onlyOwner modifer.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x5dbad350c6ae75b9d15c2080b1de6f02d8b7f32a71a6bcf775c9731820d115ec\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/linkedlists/AddressSortedLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./SortedLinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by address.\\n */\\nlibrary AddressSortedLinkedList {\\n  using SortedLinkedList for SortedLinkedList.List;\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    SortedLinkedList.List storage list,\\n    address key,\\n    uint256 value,\\n    address lesserKey,\\n    address greaterKey\\n  ) public {\\n    list.insert(toBytes(key), value, toBytes(lesserKey), toBytes(greaterKey));\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(SortedLinkedList.List storage list, address key) public {\\n    list.remove(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    SortedLinkedList.List storage list,\\n    address key,\\n    uint256 value,\\n    address lesserKey,\\n    address greaterKey\\n  ) public {\\n    list.update(toBytes(key), value, toBytes(lesserKey), toBytes(greaterKey));\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(SortedLinkedList.List storage list, address key) public view returns (bool) {\\n    return list.contains(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(SortedLinkedList.List storage list, address key) public view returns (uint256) {\\n    return list.getValue(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   */\\n  function getElements(SortedLinkedList.List storage list)\\n    public\\n    view\\n    returns (address[] memory, uint256[] memory)\\n  {\\n    bytes32[] memory byteKeys = list.getKeys();\\n    address[] memory keys = new address[](byteKeys.length);\\n    uint256[] memory values = new uint256[](byteKeys.length);\\n    for (uint256 i = 0; i < byteKeys.length; i = i + 1) {\\n      keys[i] = toAddress(byteKeys[i]);\\n      values[i] = list.values[byteKeys[i]];\\n    }\\n    return (keys, values);\\n  }\\n\\n  /**\\n   * @notice Returns the minimum of `max` and the  number of elements in the list > threshold.\\n   * @param list A storage pointer to the underlying list.\\n   * @param threshold The number that the element must exceed to be included.\\n   * @param max The maximum number returned by this function.\\n   * @return The minimum of `max` and the  number of elements in the list > threshold.\\n   */\\n  function numElementsGreaterThan(\\n    SortedLinkedList.List storage list,\\n    uint256 threshold,\\n    uint256 max\\n  ) public view returns (uint256) {\\n    uint256 revisedMax = Math.min(max, list.list.numElements);\\n    bytes32 key = list.list.head;\\n    for (uint256 i = 0; i < revisedMax; i = i + 1) {\\n      if (list.getValue(key) < threshold) {\\n        return i;\\n      }\\n      key = list.list.elements[key].previousKey;\\n    }\\n    return revisedMax;\\n  }\\n\\n  /**\\n   * @notice Returns the N greatest elements of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the greatest elements.\\n   */\\n  function headN(SortedLinkedList.List storage list, uint256 n)\\n    public\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory byteKeys = list.headN(n);\\n    address[] memory keys = new address[](n);\\n    for (uint256 i = 0; i < n; i = i + 1) {\\n      keys[i] = toAddress(byteKeys[i]);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(SortedLinkedList.List storage list) public view returns (address[] memory) {\\n    return headN(list, list.list.numElements);\\n  }\\n\\n  /**\\n   * @notice Returns the number of elements in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The number of elements in the list.\\n   */\\n  function getNumElements(SortedLinkedList.List storage list) public view returns (uint256) {\\n    return list.list.numElements;\\n  }\\n\\n  /**\\n   * @notice Returns the key of the first element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The key of the first element in the list.\\n   */\\n  function getHead(SortedLinkedList.List storage list) public view returns (address) {\\n    return toAddress(list.list.head);\\n  }\\n\\n  /**\\n   * @notice Returns the key of the last element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The key of the last element in the list.\\n   */\\n  function getTail(SortedLinkedList.List storage list) public view returns (address) {\\n    return toAddress(list.list.tail);\\n  }\\n\\n  /**\\n   * @notice Gets lesser and greater for address that has increased it's value.\\n   * @param list A storage pointer to the underlying list.\\n   * @param group The original address.\\n   * @param newValue New value that has to be bigger or equal than the previous one.\\n   * @param loopLimit The max limit of loops that will be executed.\\n   */\\n  function getLesserAndGreaterOfAddressThatIncreasedValue(\\n    SortedLinkedList.List storage list,\\n    address group,\\n    uint256 newValue,\\n    uint256 loopLimit\\n  )\\n      public\\n      view\\n      returns (address previous, address next)\\n  {\\n      (, previous, next) = get(list, group);\\n\\n      while (next != address(0) && loopLimit != 0 && newValue > getValue(list, next)) {\\n          previous = next;\\n          (, , next) = get(list, previous);\\n          loopLimit--;\\n      }\\n\\n      if (loopLimit == 0) {\\n          return (address(0), address(0));\\n      }\\n  }\\n\\n   /**\\n   * @notice Gets lesser and greater for address that has decreased it's value.\\n   * @param list A storage pointer to the underlying list.\\n   * @param group The original address.\\n   * @param newValue New value that has to be smaller or equal than the previous one.\\n   * @param loopLimit The max limit of loops that will be executed.\\n   */\\n  function getLesserAndGreaterOfAddressThatDecreasedValue(\\n    SortedLinkedList.List storage list,\\n    address group,\\n    uint256 newValue,\\n    uint256 loopLimit\\n  )\\n      public\\n      view\\n      returns (address previous, address next)\\n  {\\n      (, previous, next) = get(list, group);\\n      while (previous != address(0) && loopLimit != 0 && newValue < getValue(list, previous)) {\\n          next = previous;\\n          (, previous, ) = get(list, next);\\n          loopLimit--;\\n      }\\n      if (loopLimit == 0) {\\n          return (address(0), address(0));\\n      }\\n  }\\n\\n  function toBytes(address a) public pure returns (bytes32) {\\n    return bytes32(uint256(uint160(a)) << 96);\\n  }\\n\\n  function toAddress(bytes32 b) public pure returns (address) {\\n    return address(uint160(uint256(b) >> 96));\\n  }\\n\\n  /**\\n   * @notice Returns Element based on key.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return exists Whether or not the key exists.\\n   * @return previousKey Previous key.\\n   * @return nextKey Next key.\\n   */\\n  function get(SortedLinkedList.List storage list, address key) \\n    internal view returns (bool exists, address previousKey, address nextKey) {\\n    LinkedList.Element memory element = list.get(toBytes(key));\\n    exists = element.exists;\\n    if (element.exists) {\\n      previousKey = toAddress(element.previousKey);\\n      nextKey = toAddress(element.nextKey);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x70c1aca89734488501fa38db50812b61f2dfeeb0570ce44cf7cbbdf23bd8c53f\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/linkedlists/LinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Maintains a doubly linked list keyed by bytes32.\\n * @dev Following the `next` pointers will lead you to the head, rather than the tail.\\n */\\nlibrary LinkedList {\\n\\n  struct Element {\\n    bytes32 previousKey;\\n    bytes32 nextKey;\\n    bool exists;\\n  }\\n\\n  struct List {\\n    bytes32 head;\\n    bytes32 tail;\\n    uint256 numElements;\\n    mapping(bytes32 => Element) elements;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param previousKey The key of the element that comes before the element to insert.\\n   * @param nextKey The key of the element that comes after the element to insert.\\n   */\\n  function insert(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(key != bytes32(0), \\\"Key must be defined\\\");\\n    require(!contains(list, key), \\\"Can't insert an existing element\\\");\\n    require(\\n      previousKey != key && nextKey != key,\\n      \\\"Key cannot be the same as previousKey or nextKey\\\"\\n    );\\n\\n    Element storage element = list.elements[key];\\n    element.exists = true;\\n\\n    if (list.numElements == 0) {\\n      list.tail = key;\\n      list.head = key;\\n    } else {\\n      require(\\n        previousKey != bytes32(0) || nextKey != bytes32(0),\\n        \\\"Either previousKey or nextKey must be defined\\\"\\n      );\\n\\n      element.previousKey = previousKey;\\n      element.nextKey = nextKey;\\n\\n      if (previousKey != bytes32(0)) {\\n        require(\\n          contains(list, previousKey),\\n          \\\"If previousKey is defined, it must exist in the list\\\"\\n        );\\n        Element storage previousElement = list.elements[previousKey];\\n        require(previousElement.nextKey == nextKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        previousElement.nextKey = key;\\n      } else {\\n        list.tail = key;\\n      }\\n\\n      if (nextKey != bytes32(0)) {\\n        require(contains(list, nextKey), \\\"If nextKey is defined, it must exist in the list\\\");\\n        Element storage nextElement = list.elements[nextKey];\\n        require(nextElement.previousKey == previousKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        nextElement.previousKey = key;\\n      } else {\\n        list.head = key;\\n      }\\n    }\\n\\n    list.numElements = list.numElements + 1;\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, bytes32(0), list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    Element storage element = list.elements[key];\\n    require(key != bytes32(0) && contains(list, key), \\\"key not in list\\\");\\n    if (element.previousKey != bytes32(0)) {\\n      Element storage previousElement = list.elements[element.previousKey];\\n      previousElement.nextKey = element.nextKey;\\n    } else {\\n      list.tail = element.nextKey;\\n    }\\n\\n    if (element.nextKey != bytes32(0)) {\\n      Element storage nextElement = list.elements[element.nextKey];\\n      nextElement.previousKey = element.previousKey;\\n    } else {\\n      list.head = element.previousKey;\\n    }\\n\\n    delete list.elements[key];\\n    list.numElements = list.numElements - 1;\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param previousKey The key of the element that comes before the updated element.\\n   * @param nextKey The key of the element that comes after the updated element.\\n   */\\n  function update(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(\\n      key != bytes32(0) && key != previousKey && key != nextKey && contains(list, key),\\n      \\\"key on in list\\\"\\n    );\\n    remove(list, key);\\n    insert(list, key, previousKey, nextKey);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.elements[key].exists;\\n  }\\n\\n  /**\\n   * @notice Returns Element based on key.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function get(List storage list, bytes32 key) internal view returns (Element memory) {\\n    return list.elements[key];\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the N elements at the head of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the N elements at the head of the list.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    require(n <= list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    bytes32 key = list.head;\\n    for (uint256 i = 0; i < n; i = i + 1) {\\n      keys[i] = key;\\n      key = list.elements[key].previousKey;\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return headN(list, list.numElements);\\n  }\\n}\\n\",\"keccak256\":\"0x32c8aa1d656220a07ca3be5cc3d2ff6670b764e9519968d81f54d047e5d86820\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/linkedlists/SortedLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n\\nimport \\\"./LinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by bytes32.\\n */\\nlibrary SortedLinkedList {\\n  using LinkedList for LinkedList.List;\\n\\n  struct List {\\n    LinkedList.List list;\\n    mapping(bytes32 => uint256) values;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    require(\\n      key != bytes32(0) && key != lesserKey && key != greaterKey && !contains(list, key),\\n      \\\"invalid key\\\"\\n    );\\n    require(\\n      (lesserKey != bytes32(0) || greaterKey != bytes32(0)) || list.list.numElements == 0,\\n      \\\"greater and lesser key zero\\\"\\n    );\\n    require(contains(list, lesserKey) || lesserKey == bytes32(0), \\\"invalid lesser key\\\");\\n    require(contains(list, greaterKey) || greaterKey == bytes32(0), \\\"invalid greater key\\\");\\n    (lesserKey, greaterKey) = getLesserAndGreater(list, value, lesserKey, greaterKey);\\n    list.list.insert(key, lesserKey, greaterKey);\\n    list.values[key] = value;\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    list.list.remove(key);\\n    list.values[key] = 0;\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    remove(list, key);\\n    insert(list, key, value, lesserKey, greaterKey);\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, 0, bytes32(0), list.list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes N elements from the head of the list and returns their keys.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to pop.\\n   * @return The keys of the popped elements.\\n   */\\n  function popN(List storage list, uint256 n) internal returns (bytes32[] memory) {\\n    require(n <= list.list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    for (uint256 i = 0; i < n; i = i + 1) {\\n      bytes32 key = list.list.head;\\n      keys[i] = key;\\n      remove(list, key);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.list.contains(key);\\n  }\\n\\n  /**\\n   * @notice Returns Element based on key.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function get(List storage list, bytes32 key) internal view returns (LinkedList.Element memory) {\\n    return list.list.get(key);\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(List storage list, bytes32 key) internal view returns (uint256) {\\n    return list.values[key];\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   */\\n  function getElements(List storage list)\\n    internal\\n    view\\n    returns (bytes32[] memory, uint256[] memory)\\n  {\\n    bytes32[] memory keys = getKeys(list);\\n    uint256[] memory values = new uint256[](keys.length);\\n    for (uint256 i = 0; i < keys.length; i = i + 1) {\\n      values[i] = list.values[keys[i]];\\n    }\\n    return (keys, values);\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return list.list.getKeys();\\n  }\\n\\n  /**\\n   * @notice Returns first N greatest elements of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the first n elements.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    return list.list.headN(n);\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the elements greaterKey than and less than the provided value.\\n   * @param list A storage pointer to the underlying list.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element which could be just left of the new value.\\n   * @param greaterKey The key of the element which could be just right of the new value.\\n   * @return The correct lesserKey keys.\\n   * @return The correct greaterKey keys.\\n   */\\n  function getLesserAndGreater(\\n    List storage list,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) private view returns (bytes32, bytes32) {\\n    // Check for one of the following conditions and fail if none are met:\\n    //   1. The value is less than the current lowest value\\n    //   2. The value is greater than the current greatest value\\n    //   3. The value is just greater than the value for `lesserKey`\\n    //   4. The value is just less than the value for `greaterKey`\\n    if (lesserKey == bytes32(0) && isValueBetween(list, value, lesserKey, list.list.tail)) {\\n      return (lesserKey, list.list.tail);\\n    } else if (\\n      greaterKey == bytes32(0) && isValueBetween(list, value, list.list.head, greaterKey)\\n    ) {\\n      return (list.list.head, greaterKey);\\n    } else if (\\n      lesserKey != bytes32(0) &&\\n      isValueBetween(list, value, lesserKey, list.list.elements[lesserKey].nextKey)\\n    ) {\\n      return (lesserKey, list.list.elements[lesserKey].nextKey);\\n    } else if (\\n      greaterKey != bytes32(0) &&\\n      isValueBetween(list, value, list.list.elements[greaterKey].previousKey, greaterKey)\\n    ) {\\n      return (list.list.elements[greaterKey].previousKey, greaterKey);\\n    } \\n\\n    require(false, \\\"get lesser and greater failure\\\");\\n    return (0, 0);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a given element is between two other elements.\\n   * @param list A storage pointer to the underlying list.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element whose value should be lesserKey.\\n   * @param greaterKey The key of the element whose value should be greaterKey.\\n   * @return True if the given element is between the two other elements.\\n   */\\n  function isValueBetween(List storage list, uint256 value, bytes32 lesserKey, bytes32 greaterKey)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool isLesser = lesserKey == bytes32(0) || list.values[lesserKey] <= value;\\n    bool isGreater = greaterKey == bytes32(0) || list.values[greaterKey] >= value;\\n    return isLesser && isGreater;\\n  }\\n}\\n\",\"keccak256\":\"0xfa2f1ff6b97589669809ca6f48bf6c2b019df4e1a0472842fe6c8ce925bbf669\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccount {\\n    function scheduleVotes(address[] calldata group, uint256[] calldata votes) external payable;\\n\\n    function scheduleTransfer(\\n        address[] calldata fromGroups,\\n        uint256[] calldata fromVotes,\\n        address[] calldata toGroups,\\n        uint256[] calldata toVotess\\n    ) external;\\n\\n    function scheduleWithdrawals(\\n        address beneficiary,\\n        address[] calldata group,\\n        uint256[] calldata withdrawals\\n    ) external;\\n\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external;\\n\\n    function getTotalCelo() external view returns (uint256);\\n\\n    function getCeloForGroup(address) external view returns (uint256);\\n\\n    function scheduledVotesForGroup(address group) external view returns (uint256);\\n\\n    function scheduledRevokeForGroup(address group) external view returns (uint256);\\n\\n    function scheduledWithdrawalsForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x88cffcc9e6200c2ce1e6ecca97ddde0abde976268314bcd7da451d1fc104c44f\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGroupHealth.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGroupHealth {\\n    function isGroupValid(address group) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb38a5b01fae32670a6727bef4d74f88b19e3d6b6dd2bd9e5c9142b2c0d11a400\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IManager {\\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\\n        external\\n        returns (uint256);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function scheduleTransferWithinStrategy(\\n        address[] calldata fromGroups,\\n        address[] calldata toGroups,\\n        uint256[] calldata fromVotes,\\n        uint256[] calldata toVotes\\n    ) external;\\n\\n    function toCelo(uint256 stCeloAmount) external view returns (uint256);\\n\\n    function toStakedCelo(uint256 celoAmount) external view returns (uint256);\\n\\n    function getReceivableVotesForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae2e3dc80238a25d5d402dbb696c5c78445a6e9ac2676b0c25e33a45c7fbbbeb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISpecificGroupStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface ISpecificGroupStrategy {\\n    function generateDepositVoteDistribution(\\n        address group,\\n        uint256 votes,\\n        uint256 stCeloAmount\\n    ) external returns (address[] memory finalGroups, uint256[] memory finalVotes);\\n\\n    function generateWithdrawalVoteDistribution(\\n        address group,\\n        uint256 celoWithdrawalAmount,\\n        uint256 stCeloWithdrawalAmount,\\n        bool isTransfer\\n    ) external returns (address[] memory groups, uint256[] memory votes);\\n\\n    function isVotedGroup(address group) external view returns (bool);\\n\\n    function isBlockedGroup(address group) external view returns (bool);\\n\\n    function getStCeloInGroup(address group)\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 overflow,\\n            uint256 unhealthy\\n        );\\n\\n    function totalStCeloLocked() external view returns (uint256);\\n\\n    function totalStCeloOverflow() external view returns (uint256);\\n\\n    function getNumberOfVotedGroups() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x005809683507090cf9d97f3ea38af118b644dcb4c91c71edc805eabc1872b362\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c8063885640db1161010d578063c1fa411a116100a0578063d2a2ce5d1161006f578063d2a2ce5d1461071c578063dcdab02a14610747578063e0cd8d2714610770578063eccacf7f146107ae578063f2fde38b146107d9576101f9565b8063c1fa411a14610671578063c5728c831461069c578063cf009f7a146106c8578063d0ebdbe7146106f3576101f9565b8063a3f16ef1116100dc578063a3f16ef1146105b6578063afc97578146105e1578063b52d326c1461060a578063be982c3114610633576101f9565b8063885640db146104fc5780638da5cb5b1461052557806393739a93146105505780639f8a13d714610579576101f9565b80634f1ef286116101905780635dab24201161015f5780635dab2420146104285780636fe958d814610453578063715018a61461047c578063724e61d01461049357806385a92cb7146104bf576101f9565b80634f1ef2861461038a5780634fc517eb146103a65780635145b0ad146103d157806354255be0146103fa576101f9565b80633659cfe6116101cc5780633659cfe6146102cf57806336691a41146102f8578063481c6a7514610336578063485cc95514610361576101f9565b80630c29aab2146101fe5780630f8f0fcc146102295780632863f68c146102665780632de2c5ac146102a4575b600080fd5b34801561020a57600080fd5b50610213610802565b6040516102209190614732565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b919061478d565b610808565b60405161025d91906147fb565b60405180910390f35b34801561027257600080fd5b5061028d60048036038101906102889190614842565b610825565b60405161029b92919061486f565b60405180910390f35b3480156102b057600080fd5b506102b961084c565b6040516102c691906148b3565b60405180910390f35b3480156102db57600080fd5b506102f660048036038101906102f19190614842565b61085f565b005b34801561030457600080fd5b5061031f600480360381019061031a919061478d565b6109e8565b60405161032d929190614a4a565b60405180910390f35b34801561034257600080fd5b5061034b61130d565b60405161035891906147fb565b60405180910390f35b34801561036d57600080fd5b5061038860048036038101906103839190614a81565b611333565b005b6103a4600480360381019061039f9190614c07565b6114a4565b005b3480156103b257600080fd5b506103bb6115e1565b6040516103c89190614732565b60405180910390f35b3480156103dd57600080fd5b506103f860048036038101906103f39190614c63565b6115e7565b005b34801561040657600080fd5b5061040f611770565b60405161041f9493929190614cb6565b60405180910390f35b34801561043457600080fd5b5061043d61178a565b60405161044a9190614d5a565b60405180910390f35b34801561045f57600080fd5b5061047a60048036038101906104759190614a81565b6117b0565b005b34801561048857600080fd5b50610491611ab7565b005b34801561049f57600080fd5b506104a8611b3f565b6040516104b692919061486f565b60405180910390f35b3480156104cb57600080fd5b506104e660048036038101906104e19190614842565b611bdf565b6040516104f39190614732565b60405180910390f35b34801561050857600080fd5b50610523600480360381019061051e9190614d75565b611bf7565b005b34801561053157600080fd5b5061053a611c8d565b60405161054791906147fb565b60405180910390f35b34801561055c57600080fd5b5061057760048036038101906105729190614842565b611cb7565b005b34801561058557600080fd5b506105a0600480360381019061059b9190614842565b611d3f565b6040516105ad91906148b3565b60405180910390f35b3480156105c257600080fd5b506105cb611dc5565b6040516105d89190614de9565b60405180910390f35b3480156105ed57600080fd5b5061060860048036038101906106039190614c63565b611deb565b005b34801561061657600080fd5b50610631600480360381019061062c9190614c63565b6122ca565b005b34801561063f57600080fd5b5061065a60048036038101906106559190614842565b6124e3565b604051610668929190614e04565b60405180910390f35b34801561067d57600080fd5b5061068661269e565b6040516106939190614732565b60405180910390f35b3480156106a857600080fd5b506106b1612720565b6040516106bf92919061486f565b60405180910390f35b3480156106d457600080fd5b506106dd6127c1565b6040516106ea9190614e4e565b60405180910390f35b3480156106ff57600080fd5b5061071a60048036038101906107159190614842565b6127e7565b005b34801561072857600080fd5b5061073161286f565b60405161073e9190614732565b60405180910390f35b34801561075357600080fd5b5061076e60048036038101906107699190614842565b612880565b005b34801561077c57600080fd5b5061079760048036038101906107929190614e69565b61296a565b6040516107a5929190614a4a565b60405180910390f35b3480156107ba57600080fd5b506107c3612a70565b6040516107d09190614732565b60405180910390f35b3480156107e557600080fd5b5061080060048036038101906107fb9190614842565b612a76565b005b60715481565b600061081e826074612b9190919063ffffffff16565b9050919050565b60008061083c836066612bab90919063ffffffff16565b9091508092508193505050915091565b607360009054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e590614f2c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661092d612c06565b73ffffffffffffffffffffffffffffffffffffffff1614610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097a90614fbe565b60405180910390fd5b61098c81612c5d565b6109e581600067ffffffffffffffff8111156109ab576109aa614adc565b5b6040519080825280601f01601f1916602001820160405280156109dd5781602001600182028036833780820191505090505b506000612cdc565b50565b6060803373ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610a9757503373ffffffffffffffffffffffffffffffffffffffff16606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610ad957336040517f79eaeb2b000000000000000000000000000000000000000000000000000000008152600401610ad091906147fb565b60405180910390fd5b6000606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b8152600401610b159190614fe5565b602060405180830381865af4158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b569190615015565b1415610b8e576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610c16607054606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b8152600401610bd09190614fe5565b602060405180830381865af4158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c119190615015565b612ead565b905060008167ffffffffffffffff811115610c3457610c33614adc565b5b604051908082528060200260200182016040528015610c625781602001602082028036833780820191505090505b50905060008267ffffffffffffffff811115610c8157610c80614adc565b5b604051908082528060200260200182016040528015610caf5781602001602082028036833780820191505090505b5090506000606673__$18085dca7c6a2f09a309a1b54006aa0b25$__630c8f298790916040518263ffffffff1660e01b8152600401610cee9190614fe5565b602060405180830381865af4158015610d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2f9190615057565b905060005b8481108015610d44575060008814155b8015610d7d5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561117257610f0a610f04606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acd201d0856040518263ffffffff1660e01b8152600401610de391906147fb565b602060405180830381865afa158015610e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e249190615015565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f606e60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b8152600401610ebe9190614732565b602060405180830381865afa158015610edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff9190615015565b612ead565b89612ead565b838281518110610f1d57610f1c615084565b5b60200260200101818152505081848281518110610f3d57610f3c615084565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828181518110610f8a57610f89615084565b5b602002602001015188610f9d91906150e2565b975061106082606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e868581518110610ff457610ff3615084565b5b60200260200101516040518263ffffffff1660e01b81526004016110189190614732565b602060405180830381865afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110599190615015565b6000612ec6565b6110ab82606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000612fb5565b607360009054906101000a900460ff161561114257606673__$18085dca7c6a2f09a309a1b54006aa0b25$__630c8f298790916040518263ffffffff1660e01b81526004016110fa9190614fe5565b602060405180830381865af4158015611117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113b9190615057565b915061115f565b611156826066612bab90919063ffffffff16565b90915050809250505b808061116a90615116565b915050610d34565b600088146111ac576040517f2e6c1bf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8067ffffffffffffffff8111156111c6576111c5614adc565b5b6040519080825280602002602001820160405280156111f45781602001602082028036833780820191505090505b5096508067ffffffffffffffff81111561121157611210614adc565b5b60405190808252806020026020018201604052801561123f5781602001602082028036833780820191505090505b50955060005b81811015611302578481815181106112605761125f615084565b5b602002602001015188828151811061127b5761127a615084565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381815181106112c8576112c7615084565b5b60200260200101518782815181106112e3576112e2615084565b5b60200260200101818152505080806112fa90615116565b915050611245565b505050505050915091565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff1661135b5760008054906101000a900460ff1615611364565b611363613269565b5b6113a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139a906151d1565b60405180910390fd5b60008060019054906101000a900460ff1615905080156113f3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6113fc8361327a565b61140582613340565b6008606f819055506008607081905550600a6072819055506001607360006101000a81548160ff0219169083151502179055507fb930683f0749189780c4016ec37d019eb0cbbf6550ce7374fac5cfbae93909a7607360009054906101000a900460ff1660405161147691906148b3565b60405180910390a1801561149f5760008060016101000a81548160ff0219169083151502179055505b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415611533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152a90614f2c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611572612c06565b73ffffffffffffffffffffffffffffffffffffffff16146115c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bf90614fbe565b60405180910390fd5b6115d182612c5d565b6115dd82826001612cdc565b5050565b606f5481565b6115fb83607461339b90919063ffffffff16565b611631576040517f0a1f2c0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606673__$18085dca7c6a2f09a309a1b54006aa0b25$__63cab455ae909185606e60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486866040518663ffffffff1660e01b81526004016116b295949392919061520f565b60006040518083038186803b1580156116ca57600080fd5b505af41580156116de573d6000803e3d6000fd5b505050506116f68360746133cb90919063ffffffff16565b50600061170360746133fb565b141561176b576001607360006101000a81548160ff0219169083151502179055507fb930683f0749189780c4016ec37d019eb0cbbf6550ce7374fac5cfbae93909a7607360009054906101000a900460ff1660405161176291906148b3565b60405180910390a15b505050565b600080600080600180600080935093509350935090919293565b606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6302f130289091846040518363ffffffff1660e01b81526004016117ec929190615262565b602060405180830381865af4158015611809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182d91906152b7565b61186e57816040517fdc1b434d00000000000000000000000000000000000000000000000000000000815260040161186591906147fb565b60405180910390fd5b606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6302f130289091836040518363ffffffff1660e01b81526004016118aa929190615262565b602060405180830381865af41580156118c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118eb91906152b7565b61192c57806040517f5a08158400000000000000000000000000000000000000000000000000000000815260040161192391906147fb565b60405180910390fd5b600080611938846124e3565b91509150818111611984578381836040517f8b0123bf00000000000000000000000000000000000000000000000000000000815260040161197b939291906152e4565b60405180910390fd5b600080611990856124e3565b915091508181106119dc578481836040517f845286390000000000000000000000000000000000000000000000000000000081526004016119d3939291906152e4565b60405180910390fd5b60006119fe85856119ed91906150e2565b83856119f991906150e2565b612ead565b9050611a0c87826000612ec6565b611a1886826001612ec6565b611a6387606e60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000612fb5565b611aae86606e60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546001612fb5565b50505050505050565b611abf613410565b73ffffffffffffffffffffffffffffffffffffffff16611add611c8d565b73ffffffffffffffffffffffffffffffffffffffff1614611b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2a90615367565b60405180910390fd5b611b3d600061327a565b565b600080606673__$18085dca7c6a2f09a309a1b54006aa0b25$__630c8f298790916040518263ffffffff1660e01b8152600401611b7c9190614fe5565b602060405180830381865af4158015611b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbd9190615057565b9150611bd3826066612bab90919063ffffffff16565b90915050809150509091565b606e6020528060005260406000206000915090505481565b611bff613410565b73ffffffffffffffffffffffffffffffffffffffff16611c1d611c8d565b73ffffffffffffffffffffffffffffffffffffffff1614611c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6a90615367565b60405180910390fd5b82606f819055508160708190555080607281905550505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611cbf613410565b73ffffffffffffffffffffffffffffffffffffffff16611cdd611c8d565b73ffffffffffffffffffffffffffffffffffffffff1614611d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2a90615367565b60405180910390fd5b611d3c81613418565b50565b6000606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6302f130289091846040518363ffffffff1660e01b8152600401611d7d929190615262565b602060405180830381865af4158015611d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbe91906152b7565b9050919050565b606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611df3613410565b73ffffffffffffffffffffffffffffffffffffffff16611e11611c8d565b73ffffffffffffffffffffffffffffffffffffffff1614611e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5e90615367565b60405180910390fd5b606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425846040518263ffffffff1660e01b8152600401611ec291906147fb565b602060405180830381865afa158015611edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0391906152b7565b611f4457826040517f10a7bc6b000000000000000000000000000000000000000000000000000000008152600401611f3b91906147fb565b60405180910390fd5b606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6302f130289091856040518363ffffffff1660e01b8152600401611f80929190615262565b602060405180830381865af4158015611f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc191906152b7565b1561200357826040517fbd133eee000000000000000000000000000000000000000000000000000000008152600401611ffa91906147fb565b60405180910390fd5b600080606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acd201d0886040518263ffffffff1660e01b815260040161209f91906147fb565b602060405180830381865afa1580156120bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e09190615015565b6040518263ffffffff1660e01b81526004016120fc9190614732565b602060405180830381865afa158015612119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213d9190615015565b90506000811461220e576000606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356ab819f876040518263ffffffff1660e01b81526004016121a491906147fb565b606060405180830381865afa1580156121c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e59190615387565b505090506121f38282612ead565b826121fe91906150e2565b925061220c86846001612ec6565b505b606673__$18085dca7c6a2f09a309a1b54006aa0b25$__632dedbbf09091878588886040518663ffffffff1660e01b815260040161225095949392919061520f565b60006040518083038186803b15801561226857600080fd5b505af415801561227c573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f0503b4748a47435f2432d46ef300e0e2dc47baa0e5f04bb3bd8a355ee1e1dbe660405160405180910390a25050505050565b6122d2613410565b73ffffffffffffffffffffffffffffffffffffffff166122f0611c8d565b73ffffffffffffffffffffffffffffffffffffffff1614612346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233d90615367565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806123ad5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806123e45750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1561241b576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81606b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000806000606673__$18085dca7c6a2f09a309a1b54006aa0b25$__630c8f298790916040518263ffffffff1660e01b81526004016125229190614fe5565b602060405180830381865af415801561253f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125639190615057565b90506000606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b81526004016125a19190614fe5565b602060405180830381865af41580156125be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e29190615015565b9050806071546125f29190615409565b93508173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156126555760008185612636919061543a565b60715461264391906150e2565b905080856126519190615494565b9450505b606e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505050915091565b6000606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b81526004016126da9190614fe5565b602060405180830381865af41580156126f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271b9190615015565b905090565b600080606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6349923bff90916040518263ffffffff1660e01b815260040161275d9190614fe5565b602060405180830381865af415801561277a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279e9190615057565b91506127b4826066612bab90919063ffffffff16565b9091509050809150509091565b606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6127ef613410565b73ffffffffffffffffffffffffffffffffffffffff1661280d611c8d565b73ffffffffffffffffffffffffffffffffffffffff1614612863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285a90615367565b60405180910390fd5b61286c816138e3565b50565b600061287b60746133fb565b905090565b606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8f4425826040518263ffffffff1660e01b81526004016128db91906147fb565b602060405180830381865afa1580156128f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291c91906152b7565b1561295e57806040517fe3bd013b00000000000000000000000000000000000000000000000000000000815260040161295591906147fb565b60405180910390fd5b61296781613418565b50565b6060803373ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015612a1957503373ffffffffffffffffffffffffffffffffffffffff16606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15612a5b57336040517f79eaeb2b000000000000000000000000000000000000000000000000000000008152600401612a5291906147fb565b60405180910390fd5b612a6584846139d1565b915091509250929050565b60705481565b612a7e613410565b73ffffffffffffffffffffffffffffffffffffffff16612a9c611c8d565b73ffffffffffffffffffffffffffffffffffffffff1614612af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae990615367565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b599061555c565b60405180910390fd5b612b6b8161327a565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000612ba08360000183614190565b60001c905092915050565b600080600080612bcc612bbd866141bb565b876141e290919063ffffffff16565b905080604001519350806040015115612bfe57612bec8160000151614208565b9250612bfb8160200151614208565b91505b509250925092565b6000612c347f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b614219565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612c65613410565b73ffffffffffffffffffffffffffffffffffffffff16612c83611c8d565b73ffffffffffffffffffffffffffffffffffffffff1614612cd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd090615367565b60405180910390fd5b50565b6000612ce6612c06565b9050612cf184614223565b600083511180612cfe5750815b15612d0f57612d0d84846142dc565b505b6000612d3d7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b614309565b90508060000160009054906101000a900460ff16612ea65760018160000160006101000a81548160ff021916908315150217905550612e098583604051602401612d8791906147fb565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506142dc565b5060008160000160006101000a81548160ff021916908315150217905550612e2f612c06565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612e9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e93906155ee565b60405180910390fd5b612ea585614313565b5b5050505050565b6000818310612ebc5781612ebe565b825b905092915050565b8015612f405781606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f1b9190615494565b925050819055508160716000828254612f349190615494565b92505081905550612fb0565b81606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f8f91906150e2565b925050819055508160716000828254612fa891906150e2565b925050819055505b505050565b612fc983607461339b90919063ffffffff16565b15612fd357613264565b6000808261306257606673__$18085dca7c6a2f09a309a1b54006aa0b25$__63a4aadfcc909187876072546040518563ffffffff1660e01b815260040161301d949392919061560e565b6040805180830381865af4158015613039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305d9190615653565b6130e5565b606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6399f68a39909187876072546040518563ffffffff1660e01b81526004016130a4949392919061560e565b6040805180830381865af41580156130c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e49190615653565b5b915091508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158061319e57506001606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b815260040161315b9190614fe5565b602060405180830381865af4158015613178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319c9190615015565b145b1561321a57606673__$18085dca7c6a2f09a309a1b54006aa0b25$__63cab455ae9091878786866040518663ffffffff1660e01b81526004016131e595949392919061520f565b60006040518083038186803b1580156131fd57600080fd5b505af4158015613211573d6000803e3d6000fd5b50505050613261565b607360009054906101000a900460ff161561324b576000607360006101000a81548160ff0219169083151502179055505b61325f85607461436290919063ffffffff16565b505b50505b505050565b600061327430612b6e565b15905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1661338f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338690615705565b60405180910390fd5b613398816138e3565b50565b60006133c3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b614392565b905092915050565b60006133f3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6143b5565b905092915050565b6000613409826000016144c9565b9050919050565b600033905090565b606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6302f130289091836040518363ffffffff1660e01b8152600401613454929190615262565b602060405180830381865af4158015613471573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349591906152b7565b6134d657806040517f1adbb1530000000000000000000000000000000000000000000000000000000081526004016134cd91906147fb565b60405180910390fd5b606673__$18085dca7c6a2f09a309a1b54006aa0b25$__63281359299091836040518363ffffffff1660e01b8152600401613512929190615262565b60006040518083038186803b15801561352a57600080fd5b505af415801561353e573d6000803e3d6000fd5b505050506135568160746133cb90919063ffffffff16565b506000606e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561389c576135b082826000612ec6565b6000600167ffffffffffffffff8111156135cd576135cc614adc565b5b6040519080825280602002602001820160405280156135fb5781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff81111561361b5761361a614adc565b5b6040519080825280602002602001820160405280156136495781602001602082028036833780820191505090505b509050838260008151811061366157613660615084565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f846040518263ffffffff1660e01b81526004016136f69190614732565b602060405180830381865afa158015613713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137379190615015565b8160008151811061374b5761374a615084565b5b602002602001018181525050600080613800606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630567847f876040518263ffffffff1660e01b81526004016137b89190614732565b602060405180830381865afa1580156137d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f99190615015565b60006139d1565b91509150606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c4d4e40858486856040518563ffffffff1660e01b81526004016138659493929190615725565b600060405180830381600087803b15801561387f57600080fd5b505af1158015613893573d6000803e3d6000fd5b50505050505050505b8173ffffffffffffffffffffffffffffffffffffffff167fa78a88a551e130ce9732be17784bdff12f72ab4a2c833fb2dcb3ef0818956b0360405160405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561394a576040517fe99d5ac500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b6060806000606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b8152600401613a109190614fe5565b602060405180830381865af4158015613a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a519190615015565b1415613a89576040517f7818a60e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613b11606f54606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6365da149690916040518263ffffffff1660e01b8152600401613acb9190614fe5565b602060405180830381865af4158015613ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0c9190615015565b612ead565b905060008167ffffffffffffffff811115613b2f57613b2e614adc565b5b604051908082528060200260200182016040528015613b5d5781602001602082028036833780820191505090505b50905060008267ffffffffffffffff811115613b7c57613b7b614adc565b5b604051908082528060200260200182016040528015613baa5781602001602082028036833780820191505090505b5090506000606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6349923bff90916040518263ffffffff1660e01b8152600401613be99190614fe5565b602060405180830381865af4158015613c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2a9190615057565b905060005b8481108015613c3f575060008914155b8015613c785750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15613ff3576000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c431058846040518263ffffffff1660e01b8152600401613cda91906147fb565b602060405180830381865afa158015613cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d1b9190615015565b90508873ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480613d575750600081145b15613d7f57613d70836066612bab90919063ffffffff16565b90915090508093505050613c2f565b613d89818b612ead565b848381518110613d9c57613d9b615084565b5b60200260200101818152505082858381518110613dbc57613dbb615084565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838281518110613e0957613e08615084565b5b60200260200101518a613e1c91906150e2565b9950613edf83606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c494ec1e878681518110613e7357613e72615084565b5b60200260200101516040518263ffffffff1660e01b8152600401613e979190614732565b602060405180830381865afa158015613eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed89190615015565b6001612ec6565b613f2a83606e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546001612fb5565b607360009054906101000a900460ff1615613fc157606673__$18085dca7c6a2f09a309a1b54006aa0b25$__6349923bff90916040518263ffffffff1660e01b8152600401613f799190614fe5565b602060405180830381865af4158015613f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fba9190615057565b9250613fdf565b613fd5836066612bab90919063ffffffff16565b9091509050809350505b8180613fea90615116565b92505050613c2f565b6000891461402d576040517f2e6c1bf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8067ffffffffffffffff81111561404757614046614adc565b5b6040519080825280602002602001820160405280156140755781602001602082028036833780820191505090505b5096508067ffffffffffffffff81111561409257614091614adc565b5b6040519080825280602002602001820160405280156140c05781602001602082028036833780820191505090505b50955060005b81811015614183578481815181106140e1576140e0615084565b5b60200260200101518882815181106140fc576140fb615084565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083818151811061414957614148615084565b5b602002602001015187828151811061416457614163615084565b5b602002602001018181525050808061417b90615116565b9150506140c6565b5050505050509250929050565b60008260000182815481106141a8576141a7615084565b5b9060005260206000200154905092915050565b600060608273ffffffffffffffffffffffffffffffffffffffff16901b60001b9050919050565b6141ea6146f0565b61420082846000016144da90919063ffffffff16565b905092915050565b600060608260001c901c9050919050565b6000819050919050565b61422c81614539565b61426b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614262906157f8565b60405180910390fd5b806142987f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b614219565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061430183836040518060600160405280602781526020016159d16027913961454c565b905092915050565b6000819050919050565b61431c81614223565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600061438a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b614619565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836001016000848152602001908152602001600020549050600081146144bd5760006001826143e791906150e2565b90506000600186600001805490506143ff91906150e2565b905081811461446e5760008660000182815481106144205761441f615084565b5b906000526020600020015490508087600001848154811061444457614443615084565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061448257614481615818565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506144c3565b60009150505b92915050565b600081600001805490509050919050565b6144e26146f0565b82600301600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905092915050565b600080823b905060008111915050919050565b606061455784614539565b614596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161458d906158b9565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516145be9190615953565b600060405180830381855af49150503d80600081146145f9576040519150601f19603f3d011682016040523d82523d6000602084013e6145fe565b606091505b509150915061460e828286614689565b925050509392505050565b60006146258383614392565b61467e578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050614683565b600090505b92915050565b60608315614699578290506146e9565b6000835111156146ac5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146e091906159ae565b60405180910390fd5b9392505050565b604051806060016040528060008019168152602001600080191681526020016000151581525090565b6000819050919050565b61472c81614719565b82525050565b60006020820190506147476000830184614723565b92915050565b6000604051905090565b600080fd5b600080fd5b61476a81614719565b811461477557600080fd5b50565b60008135905061478781614761565b92915050565b6000602082840312156147a3576147a2614757565b5b60006147b184828501614778565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006147e5826147ba565b9050919050565b6147f5816147da565b82525050565b600060208201905061481060008301846147ec565b92915050565b61481f816147da565b811461482a57600080fd5b50565b60008135905061483c81614816565b92915050565b60006020828403121561485857614857614757565b5b60006148668482850161482d565b91505092915050565b600060408201905061488460008301856147ec565b61489160208301846147ec565b9392505050565b60008115159050919050565b6148ad81614898565b82525050565b60006020820190506148c860008301846148a4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614903816147da565b82525050565b600061491583836148fa565b60208301905092915050565b6000602082019050919050565b6000614939826148ce565b61494381856148d9565b935061494e836148ea565b8060005b8381101561497f5781516149668882614909565b975061497183614921565b925050600181019050614952565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6149c181614719565b82525050565b60006149d383836149b8565b60208301905092915050565b6000602082019050919050565b60006149f78261498c565b614a018185614997565b9350614a0c836149a8565b8060005b83811015614a3d578151614a2488826149c7565b9750614a2f836149df565b925050600181019050614a10565b5085935050505092915050565b60006040820190508181036000830152614a64818561492e565b90508181036020830152614a7881846149ec565b90509392505050565b60008060408385031215614a9857614a97614757565b5b6000614aa68582860161482d565b9250506020614ab78582860161482d565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614b1482614acb565b810181811067ffffffffffffffff82111715614b3357614b32614adc565b5b80604052505050565b6000614b4661474d565b9050614b528282614b0b565b919050565b600067ffffffffffffffff821115614b7257614b71614adc565b5b614b7b82614acb565b9050602081019050919050565b82818337600083830152505050565b6000614baa614ba584614b57565b614b3c565b905082815260208101848484011115614bc657614bc5614ac6565b5b614bd1848285614b88565b509392505050565b600082601f830112614bee57614bed614ac1565b5b8135614bfe848260208601614b97565b91505092915050565b60008060408385031215614c1e57614c1d614757565b5b6000614c2c8582860161482d565b925050602083013567ffffffffffffffff811115614c4d57614c4c61475c565b5b614c5985828601614bd9565b9150509250929050565b600080600060608486031215614c7c57614c7b614757565b5b6000614c8a8682870161482d565b9350506020614c9b8682870161482d565b9250506040614cac8682870161482d565b9150509250925092565b6000608082019050614ccb6000830187614723565b614cd86020830186614723565b614ce56040830185614723565b614cf26060830184614723565b95945050505050565b6000819050919050565b6000614d20614d1b614d16846147ba565b614cfb565b6147ba565b9050919050565b6000614d3282614d05565b9050919050565b6000614d4482614d27565b9050919050565b614d5481614d39565b82525050565b6000602082019050614d6f6000830184614d4b565b92915050565b600080600060608486031215614d8e57614d8d614757565b5b6000614d9c86828701614778565b9350506020614dad86828701614778565b9250506040614dbe86828701614778565b9150509250925092565b6000614dd382614d27565b9050919050565b614de381614dc8565b82525050565b6000602082019050614dfe6000830184614dda565b92915050565b6000604082019050614e196000830185614723565b614e266020830184614723565b9392505050565b6000614e3882614d27565b9050919050565b614e4881614e2d565b82525050565b6000602082019050614e636000830184614e3f565b92915050565b60008060408385031215614e8057614e7f614757565b5b6000614e8e85828601614778565b9250506020614e9f8582860161482d565b9150509250929050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000614f16602c83614ea9565b9150614f2182614eba565b604082019050919050565b60006020820190508181036000830152614f4581614f09565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000614fa8602c83614ea9565b9150614fb382614f4c565b604082019050919050565b60006020820190508181036000830152614fd781614f9b565b9050919050565b8082525050565b6000602082019050614ffa6000830184614fde565b92915050565b60008151905061500f81614761565b92915050565b60006020828403121561502b5761502a614757565b5b600061503984828501615000565b91505092915050565b60008151905061505181614816565b92915050565b60006020828403121561506d5761506c614757565b5b600061507b84828501615042565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006150ed82614719565b91506150f883614719565b92508282101561510b5761510a6150b3565b5b828203905092915050565b600061512182614719565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615154576151536150b3565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006151bb602e83614ea9565b91506151c68261515f565b604082019050919050565b600060208201905081810360008301526151ea816151ae565b9050919050565b6151fa816147da565b82525050565b61520981614719565b82525050565b600060a0820190506152246000830188614fde565b61523160208301876151f1565b61523e6040830186615200565b61524b60608301856151f1565b61525860808301846151f1565b9695505050505050565b60006040820190506152776000830185614fde565b61528460208301846151f1565b9392505050565b61529481614898565b811461529f57600080fd5b50565b6000815190506152b18161528b565b92915050565b6000602082840312156152cd576152cc614757565b5b60006152db848285016152a2565b91505092915050565b60006060820190506152f960008301866147ec565b6153066020830185614723565b6153136040830184614723565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000615351602083614ea9565b915061535c8261531b565b602082019050919050565b6000602082019050818103600083015261538081615344565b9050919050565b6000806000606084860312156153a05761539f614757565b5b60006153ae86828701615000565b93505060206153bf86828701615000565b92505060406153d086828701615000565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061541482614719565b915061541f83614719565b92508261542f5761542e6153da565b5b828204905092915050565b600061544582614719565b915061545083614719565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615489576154886150b3565b5b828202905092915050565b600061549f82614719565b91506154aa83614719565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156154df576154de6150b3565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615546602683614ea9565b9150615551826154ea565b604082019050919050565b6000602082019050818103600083015261557581615539565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b60006155d8602f83614ea9565b91506155e38261557c565b604082019050919050565b60006020820190508181036000830152615607816155cb565b9050919050565b60006080820190506156236000830187614fde565b61563060208301866151f1565b61563d6040830185615200565b61564a6060830184615200565b95945050505050565b6000806040838503121561566a57615669614757565b5b600061567885828601615042565b925050602061568985828601615042565b9150509250929050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006156ef602b83614ea9565b91506156fa82615693565b604082019050919050565b6000602082019050818103600083015261571e816156e2565b9050919050565b6000608082019050818103600083015261573f818761492e565b90508181036020830152615753818661492e565b9050818103604083015261576781856149ec565b9050818103606083015261577b81846149ec565b905095945050505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006157e2602d83614ea9565b91506157ed82615786565b604082019050919050565b60006020820190508181036000830152615811816157d5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006158a3602683614ea9565b91506158ae82615847565b604082019050919050565b600060208201905081810360008301526158d281615896565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561590d5780820151818401526020810190506158f2565b8381111561591c576000848401525b50505050565b600061592d826158d9565b61593781856158e4565b93506159478185602086016158ef565b80840191505092915050565b600061595f8284615922565b915081905092915050565b600081519050919050565b60006159808261596a565b61598a8185614ea9565b935061599a8185602086016158ef565b6159a381614acb565b840191505092915050565b600060208201905081810360008301526159c88184615975565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a1703fc71954cbb1a1560d4385dc2ddecc730aa26a4d16d5f09db1ec2697648464736f6c634300080b0033",
  "libraries": {
    "AddressSortedLinkedList": "0x48B505F1c5b7300de070dA9c85324272FC65f187"
  },
  "devdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "params": {
            "caller": "`msg.sender` that called the function."
          }
        }
      ],
      "CallerNotManagerNorStrategy(address)": [
        {
          "params": {
            "caller": "`msg.sender` that called the function."
          }
        }
      ],
      "GroupAlreadyAdded(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupNotActive(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "GroupNotEligible(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "HealthyGroup(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "InvalidFromGroup(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "InvalidToGroup(address)": [
        {
          "params": {
            "group": "The group's address."
          }
        }
      ],
      "RebalanceEnoughStCelo(address,uint256,uint256)": [
        {
          "params": {
            "actualCelo": "The actual stCELO value.",
            "expectedCelo": "The expected stCELO value.",
            "group": "The group's address."
          }
        }
      ],
      "RebalanceNoExtraStCelo(address,uint256,uint256)": [
        {
          "params": {
            "actualCelo": "The actual stCELO value.",
            "expectedCelo": "The expected stCELO value.",
            "group": "The group's address."
          }
        }
      ]
    },
    "events": {
      "GroupActivated(address)": {
        "params": {
          "group": "The group's address."
        }
      },
      "GroupRemoved(address)": {
        "params": {
          "group": "The group's address."
        }
      },
      "SortedFlagUpdated(bool)": {
        "params": {
          "update": "The new value."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "activateGroup(address,address,address)": {
        "params": {
          "greater": "The group receiving more votes (in default strategy) than `group`,  or 0 if `group` has the most votes of any validator group.",
          "group": "The address of the group to add to the set of votable groups.",
          "lesser": "The group receiving fewer votes (in default strategy) than `group`, or 0 if `group` has the fewest votes of any validator group."
        }
      },
      "deactivateGroup(address)": {
        "params": {
          "group": "The group to deactivated."
        }
      },
      "deactivateUnhealthyGroup(address)": {
        "params": {
          "group": "The group to deactivate if unhealthy."
        }
      },
      "generateDepositVoteDistribution(uint256,address)": {
        "params": {
          "celoAmount": "The amount of votes to distribute.",
          "depositGroupToIgnore": "The group that will not be used for deposit."
        },
        "returns": {
          "finalGroups": "The groups that were chosen for distribution.",
          "finalVotes": "The votes of chosen finalGroups."
        }
      },
      "generateWithdrawalVoteDistribution(uint256)": {
        "params": {
          "celoAmount": "The amount of votes to subtract."
        },
        "returns": {
          "finalGroups": "The groups that were chosen for subtraction.",
          "finalVotes": "The votes of chosen finalGroups."
        }
      },
      "getExpectedAndActualStCeloForGroup(address)": {
        "params": {
          "group": "The group."
        },
        "returns": {
          "actualStCelo": "The amount of stCELO which is currently assigned to group in the strategy.",
          "expectedStCelo": "The amount of stCELO that group should have. (The total amount of stCELO in the default strategy divided by the number of active groups.)"
        }
      },
      "getGroupPreviousAndNext(address)": {
        "params": {
          "group": "The group address."
        },
        "returns": {
          "nextAddress": "The next address.",
          "previousAddress": "The previous address."
        }
      },
      "getGroupsHead()": {
        "returns": {
          "head": "The address of the sorted group with most votes.",
          "previousAddress": "The previous address from head."
        }
      },
      "getGroupsTail()": {
        "returns": {
          "nextAddress": "The next address after tail.",
          "tail": "The address of the sorted group with least votes."
        }
      },
      "getNumberOfGroups()": {
        "returns": {
          "_0": "The number of active groups."
        }
      },
      "getNumberOfUnsortedGroups()": {
        "returns": {
          "_0": "The number of unsorted groups."
        }
      },
      "getUnsortedGroupAt(uint256)": {
        "params": {
          "index": "The index to look up."
        },
        "returns": {
          "_0": "The group."
        }
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "Storage version of the contract.",
          "_1": "Major version of the contract.",
          "_2": "Minor version of the contract.",
          "_3": "Patch version of the contract."
        }
      },
      "initialize(address,address)": {
        "params": {
          "_manager": "The address of the Manager contract.",
          "_owner": "The address of the contract owner."
        }
      },
      "isActive(address)": {
        "returns": {
          "_0": "Whether or not the given group is active."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rebalance(address,address)": {
        "params": {
          "fromGroup": "The from group.",
          "toGroup": "The to group."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDependencies(address,address,address)": {
        "params": {
          "_account": "The address of the Account contract.",
          "_groupHealth": "The address of the GroupHealth contract.",
          "_specificGroupStrategy": "The address of the SpecificGroupStrategy contract."
        }
      },
      "setManager(address)": {
        "params": {
          "_manager": "The new manager address."
        }
      },
      "setSortingParams(uint256,uint256,uint256)": {
        "params": {
          "distributeTo": "Maximum number of groups that can be distributed to.",
          "loopLimit": "The sorting loop limit while sorting active groups on chain.",
          "withdrawFrom": "Maximum number of groups that can be withdrawn from."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateActiveGroupOrder(address,address,address)": {
        "params": {
          "greaterKey": "The key of the group greater than the group to update.",
          "group": "The group address.",
          "lesserKey": "The key of the group less than the group to update."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "DefaultStrategy is responsible for handling any deposit/withdrawal for accounts without any specific strategy.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressZeroNotAllowed()": [
        {
          "notice": "Used when attempting to pass in address zero where not allowed."
        }
      ],
      "CallerNotManager(address)": [
        {
          "notice": "Used when an `onlyManager` function is called by a non-manager."
        }
      ],
      "CallerNotManagerNorStrategy(address)": [
        {
          "notice": "Used when a `managerOrStrategy` function is called  by a non-manager or non-strategy."
        }
      ],
      "GroupAlreadyAdded(address)": [
        {
          "notice": "Used when attempting to activate a group that is already active."
        }
      ],
      "GroupNotActive(address)": [
        {
          "notice": "Used when attempting to deactivate a group that is not active."
        }
      ],
      "GroupNotEligible(address)": [
        {
          "notice": "Used when a group does not meet the validator group health requirements."
        }
      ],
      "HealthyGroup(address)": [
        {
          "notice": "Used when attempting to deactivate a healthy group using deactivateUnhealthyGroup()."
        }
      ],
      "InvalidFromGroup(address)": [
        {
          "notice": "Used when rebalancing from non-active group."
        }
      ],
      "InvalidToGroup(address)": [
        {
          "notice": "Used when rebalancing to a non-active group."
        }
      ],
      "NoActiveGroups()": [
        {
          "notice": "Used when attempting to deposit when there are no active groups to vote for."
        }
      ],
      "NotAbleToDistributeVotes()": [
        {
          "notice": "Used when atempting to distribute votes but validator group limit is reached."
        }
      ],
      "NotUnsortedGroup()": [
        {
          "notice": "Used when attempting sort active groups when there are no unsorted group."
        }
      ],
      "NullAddress()": [
        {
          "notice": "Used when a passed address is address(0)."
        }
      ],
      "RebalanceEnoughStCelo(address,uint256,uint256)": [
        {
          "notice": "Used when rebalancing and `toGroup` has enough stCELO."
        }
      ],
      "RebalanceNoExtraStCelo(address,uint256,uint256)": [
        {
          "notice": "Used when rebalancing and `fromGroup` doesn't have any extra stCELO."
        }
      ]
    },
    "events": {
      "GroupActivated(address)": {
        "notice": "Emitted when a new group is activated for voting."
      },
      "GroupRemoved(address)": {
        "notice": "Emitted when a group is deactivated."
      },
      "ManagerSet(address)": {
        "notice": "Emitted when the manager is initially set or later modified."
      },
      "SortedFlagUpdated(bool)": {
        "notice": "Emmited when sorted status of active groups was changed."
      }
    },
    "kind": "user",
    "methods": {
      "account()": {
        "notice": "An instance of the Account contract for the StakedCelo protocol."
      },
      "activateGroup(address,address,address)": {
        "notice": "Marks a group as votable for default strategy. It is necessary to call `updateGroupHealth` in GroupHealth smart contract first."
      },
      "constructor": {
        "notice": "Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized."
      },
      "deactivateGroup(address)": {
        "notice": "Deactivates group."
      },
      "deactivateUnhealthyGroup(address)": {
        "notice": "Deactivates an unhealthy group."
      },
      "generateDepositVoteDistribution(uint256,address)": {
        "notice": "Distributes votes by computing the number of votes each active group should receive."
      },
      "generateWithdrawalVoteDistribution(uint256)": {
        "notice": "Distributes votes by computing the number of votes to be subtracted from each active group."
      },
      "getExpectedAndActualStCeloForGroup(address)": {
        "notice": "Returns expected stCELO and actual stCELO for group."
      },
      "getGroupPreviousAndNext(address)": {
        "notice": "Returns previous and next address of key."
      },
      "getGroupsHead()": {
        "notice": "Returns head and previous address of head."
      },
      "getGroupsTail()": {
        "notice": "Returns tail and next address of tail."
      },
      "getNumberOfGroups()": {
        "notice": "Returns the number of active groups."
      },
      "getNumberOfUnsortedGroups()": {
        "notice": "Returns the number of unsorted groups."
      },
      "getUnsortedGroupAt(uint256)": {
        "notice": "Returns the unsorted group at index."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "groupHealth()": {
        "notice": "An instance of the GroupHealth contract for the StakedCelo protocol."
      },
      "initialize(address,address)": {
        "notice": "Initialize the contract with registry and owner."
      },
      "isActive(address)": {
        "notice": "Returns whether active groups contain group."
      },
      "maxGroupsToDistributeTo()": {
        "notice": "Maximum number of groups to distribute votes to."
      },
      "maxGroupsToWithdrawFrom()": {
        "notice": "Maximum number of groups to withdraw from."
      },
      "rebalance(address,address)": {
        "notice": "Rebalances CELO between groups that have an incorrect CELO-stCELO ratio. `fromGroup` is required to have more CELO than it should and `toGroup` needs to have less CELO than it should."
      },
      "setDependencies(address,address,address)": {
        "notice": "Set this contract's dependencies in the StakedCelo system."
      },
      "setManager(address)": {
        "notice": "Sets the manager address."
      },
      "setSortingParams(uint256,uint256,uint256)": {
        "notice": "Set distribution/withdrawal algorithm parameters."
      },
      "sorted()": {
        "notice": "Whether or not active groups are sorted. If active groups are not sorted it is neccessary to call updateActiveGroupOrder."
      },
      "specificGroupStrategy()": {
        "notice": "An instance of the SpecificGroupStrategy for the StakedCelo protocol."
      },
      "stCeloInGroup(address)": {
        "notice": "StCELO that was cast for default group strategy, strategy => stCELO amount."
      },
      "totalStCeloInStrategy()": {
        "notice": "Total stCELO that was voted with on default strategy."
      },
      "updateActiveGroupOrder(address,address,address)": {
        "notice": "Updates group order of unsorted group. When there are no more unsorted groups it will mark active groups as sorted."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 584,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5571,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "manager",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 3646,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "activeGroups",
        "offset": 0,
        "slot": "102",
        "type": "t_struct(List)9089_storage"
      },
      {
        "astId": 3650,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "groupHealth",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IGroupHealth)10502"
      },
      {
        "astId": 3654,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "account",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IAccount)9780"
      },
      {
        "astId": 3658,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "specificGroupStrategy",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(ISpecificGroupStrategy)10808"
      },
      {
        "astId": 3663,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "stCeloInGroup",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3666,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "maxGroupsToDistributeTo",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 3669,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "maxGroupsToWithdrawFrom",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 3672,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "totalStCeloInStrategy",
        "offset": 0,
        "slot": "113",
        "type": "t_uint256"
      },
      {
        "astId": 3675,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "sortingLoopLimit",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 3678,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "sorted",
        "offset": 0,
        "slot": "115",
        "type": "t_bool"
      },
      {
        "astId": 3682,
        "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
        "label": "unsortedGroups",
        "offset": 0,
        "slot": "116",
        "type": "t_struct(AddressSet)1787_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccount)9780": {
        "encoding": "inplace",
        "label": "contract IAccount",
        "numberOfBytes": "20"
      },
      "t_contract(IGroupHealth)10502": {
        "encoding": "inplace",
        "label": "contract IGroupHealth",
        "numberOfBytes": "20"
      },
      "t_contract(ISpecificGroupStrategy)10808": {
        "encoding": "inplace",
        "label": "contract ISpecificGroupStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Element)8550_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LinkedList.Element)",
        "numberOfBytes": "32",
        "value": "t_struct(Element)8550_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1787_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1786,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1486_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Element)8550_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.Element",
        "members": [
          {
            "astId": 8545,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "previousKey",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8547,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "nextKey",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8549,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(List)8562_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.List",
        "members": [
          {
            "astId": 8552,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "head",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8554,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "tail",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8556,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "numElements",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8561,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "elements",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_struct(Element)8550_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(List)9089_storage": {
        "encoding": "inplace",
        "label": "struct SortedLinkedList.List",
        "members": [
          {
            "astId": 9084,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "list",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(List)8562_storage"
          },
          {
            "astId": 9088,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "values",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)1486_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1481,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1485,
            "contract": "contracts/DefaultStrategy.sol:DefaultStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}