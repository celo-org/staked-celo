{
  "address": "0x6E17CF4e1A21125D0Ce9a1ce4A284AD7BF783B67",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZeroNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotManager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NoLockedStakedCelo",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotEnoughStCeloToLock",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NothingToUnlock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LockedStCelo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        }
      ],
      "name": "PauserSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnlockedStCelo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAUSED_POSITION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_POSITION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lockVoteBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "lockedVoteBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "unlockVoteBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9fd0a03f5a56958ad5e13e6f61f481b01f247a9fae6260780323bc114ad6613",
  "receipt": {
    "to": null,
    "from": "0x5bC1C4C1D67C5E4384189302BC653A611568a788",
    "contractAddress": "0x6E17CF4e1A21125D0Ce9a1ce4A284AD7BF783B67",
    "transactionIndex": 1,
    "gasUsed": "3672072",
    "logsBloom": "0x
    "blockHash": "0xdfc8994bc6b32e6f6c8219939f6b5bcf9738b26b5381dfbe7d061bd8144f2379",
    "transactionHash": "0xe9fd0a03f5a56958ad5e13e6f61f481b01f247a9fae6260780323bc114ad6613",
    "logs": [],
    "blockNumber": 25159305,
    "cumulativeGasUsed": "3891443",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "bc5d8aac7d0c7b5a1cef2b494d304103",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZeroNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NoLockedStakedCelo\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotEnoughStCeloToLock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NothingToUnlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStCelo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"PauserSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStCelo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAUSED_POSITION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_POSITION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockVoteBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedVoteBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"unlockVoteBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerNotManager(address)\":[{\"params\":{\"caller\":\"`msg.sender` that called the function.\"}}],\"NoLockedStakedCelo(address)\":[{\"params\":{\"account\":\"The account's address.\"}}],\"NotEnoughStCeloToLock(address)\":[{\"params\":{\"account\":\"The account's address.\"}}],\"NothingToUnlock(address)\":[{\"params\":{\"account\":\"The account's address.\"}}]},\"events\":{\"LockedStCelo(address,uint256)\":{\"params\":{\"account\":\"The owner of locked stCELO.\",\"amount\":\"The amount of locked stCELO.\"}},\"UnlockedStCelo(address,uint256)\":{\"params\":{\"account\":\"The owner of unlocked stCELO.\",\"amount\":\"The amount of unlocked stCELO.\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(address,uint256)\":{\"params\":{\"amount\":\"The amount of stCELO to burn.\",\"from\":\"The address that will have its stCELO burned.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getVersionNumber()\":{\"returns\":{\"_0\":\"Storage version of the contract.\",\"_1\":\"Major version of the contract.\",\"_2\":\"Minor version of the contract.\",\"_3\":\"Patch version of the contract.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,address)\":{\"params\":{\"_manager\":\"The address of the Manager contract.\",\"_owner\":\"The address to set as the owner.\"}},\"isPaused()\":{\"returns\":{\"_0\":\"`true` if the contract is paused, `false` otherwise.\"}},\"lockVoteBalance(address,uint256)\":{\"params\":{\"account\":\"The address that will have its stCELO balance locked.\",\"amount\":\"The amount of stCELO to lock.\"}},\"lockedVoteBalanceOf(address)\":{\"params\":{\"account\":\"The address of locked stCELO balance.\"},\"returns\":{\"_0\":\"The amount of locked stCELO.\"}},\"mint(address,uint256)\":{\"params\":{\"amount\":\"The amount of stCELO to mint.\",\"to\":\"The address that will receive the new stCELO.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setManager(address)\":{\"params\":{\"_manager\":\"The new manager address.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockVoteBalance(address)\":{\"params\":{\"beneficiary\":\"The address that will have its stCELO balance unlocked.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"An ERC-20 token that is a fungible and transferrable representation of reward-earning voted LockedGold (i.e. locked CELO).\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressZeroNotAllowed()\":[{\"notice\":\"Used when attempting to pass in address zero where not allowed.\"}],\"CallerNotManager(address)\":[{\"notice\":\"Used when an `onlyManager` function is called by a non-manager.\"}],\"NoLockedStakedCelo(address)\":[{\"notice\":\"Used when attempting to unlock stCELO when there is no locked stCELO.\"}],\"NotEnoughStCeloToLock(address)\":[{\"notice\":\"Used when attempting to lock stCELO when there is not enough stCELO.\"}],\"NothingToUnlock(address)\":[{\"notice\":\"Used when attempting to unlock stCELO when there is no stCELO to unlock.\"}],\"OnlyPauser()\":[{\"notice\":\"Used when an `onlyPauser` function is called with a different address.\"}],\"Paused()\":[{\"notice\":\"Used when an `onlyWhenNotPaused` function is called while the contract is paused.\"}]},\"events\":{\"ContractPaused()\":{\"notice\":\"Emitted when this contract is paused.\"},\"ContractUnpaused()\":{\"notice\":\"Emitted when this contract is unpaused.\"},\"LockedStCelo(address,uint256)\":{\"notice\":\"Emitted when stCELO is locked.\"},\"ManagerSet(address)\":{\"notice\":\"Emitted when the manager is initially set or later modified.\"},\"PauserSet(address)\":{\"notice\":\"Emitted when the address authorized to pause/unpause the contract is changed.\"},\"UnlockedStCelo(address,uint256)\":{\"notice\":\"Emitted when stCELO is inlocked.\"}},\"kind\":\"user\",\"methods\":{\"PAUSED_POSITION()\":{\"notice\":\"The storage slot under which we store a boolean representing whether or not the contract is currently paused.\"},\"PAUSER_POSITION()\":{\"notice\":\"The storage slot under which we store an address representing the address permissioned to pause/unpause this contract.\"},\"burn(address,uint256)\":{\"notice\":\"Burns stCELO from an address.\"},\"constructor\":{\"notice\":\"Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"initialize(address,address)\":{\"notice\":\"Initializes the contract.\"},\"isPaused()\":{\"notice\":\"Returns whether or not the contract is paused.\"},\"lockVoteBalance(address,uint256)\":{\"notice\":\"Locks vote stCELO from an address.\"},\"lockedVoteBalanceOf(address)\":{\"notice\":\"Returns vote stCELO locked balance.\"},\"mint(address,uint256)\":{\"notice\":\"Mints new stCELO to an address.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"pauser()\":{\"notice\":\"Returns the address permissioned to pause/unpause this contract.\"},\"setManager(address)\":{\"notice\":\"Sets the manager address.\"},\"setPauser()\":{\"notice\":\"Sets that address permissioned to pause/unpause this contract to the owner of this contract.\"},\"unlockVoteBalance(address)\":{\"notice\":\"Unlocks vote stCELO from an address.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakedCelo.sol\":\"StakedCelo\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"contracts/Managed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title Used via inheritance to grant special access control to the Manager\\n * contract.\\n */\\nabstract contract Managed is Errors, Initializable, OwnableUpgradeable {\\n    address public manager;\\n\\n    /**\\n     * @notice Emitted when the manager is initially set or later modified.\\n     * @param manager The new managing account address.\\n     */\\n    event ManagerSet(address indexed manager);\\n\\n    /**\\n     *  @notice Used when an `onlyManager` function is called by a non-manager.\\n     *  @param caller `msg.sender` that called the function.\\n     */\\n    error CallerNotManager(address caller);\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        if (manager != msg.sender) {\\n            revert CallerNotManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function setManager(address _manager) external onlyOwner {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract in an upgradable context.\\n     * @param _manager The initial managing address.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Managed_init(address _manager) internal onlyInitializing {\\n        _setManager(_manager);\\n    }\\n\\n    /**\\n     * @notice Sets the manager address.\\n     * @param _manager The new manager address.\\n     */\\n    function _setManager(address _manager) internal {\\n        if (_manager == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xdc8295fafa6b34f9ee48868045a6c01c4844bb3a596e3b25b8d6bb29dce15617\",\"license\":\"LGPL-3.0-only\"},\"contracts/Pausable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IPausable.sol\\\";\\nimport \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title A helper contract to add pasuing functionality to a contract.\\n * @notice Used to prevent/mitigate damage in case an exploit is found in the\\n * extending contract.\\n */\\nabstract contract Pausable is Errors, IPausable {\\n    /**\\n     * @notice The storage slot under which we store a boolean representing\\n     * whether or not the contract is currently paused.\\n     */\\n    bytes32 public constant PAUSED_POSITION =\\n        bytes32(uint256(keccak256(\\\"staked-celo.pausable.paused\\\")) - 1);\\n    /**\\n     * @notice The storage slot under which we store an address representing the\\n     * address permissioned to pause/unpause this contract.\\n     */\\n    bytes32 public constant PAUSER_POSITION =\\n        bytes32(uint256(keccak256(\\\"staked-celo.pausable.pauser\\\")) - 1);\\n\\n    /**\\n     * Emitted when this contract is paused.\\n     */\\n    event ContractPaused();\\n\\n    /**\\n     * Emitted when this contract is unpaused.\\n     */\\n    event ContractUnpaused();\\n\\n    /**\\n     * @notice Emitted when the address authorized to pause/unpause the contract is\\n     * changed.\\n     * @param pauser THe new pauser.\\n     */\\n    event PauserSet(address pauser);\\n\\n    /**\\n     * @notice Used when an `onlyWhenNotPaused` function is called while the\\n     * contract is paused.\\n     */\\n    error Paused();\\n\\n    /**\\n     * @notice Used when an `onlyPauser` function is called with a different\\n     * address.\\n     */\\n    error OnlyPauser();\\n\\n    /**\\n     * @notice Reverts if the contract is paused.\\n     */\\n    modifier onlyWhenNotPaused() {\\n        if (isPaused()) {\\n            revert Paused();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the caller is not the pauser.\\n     */\\n    modifier onlyPauser() {\\n        if (msg.sender != pauser()) {\\n            revert OnlyPauser();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Pauses the contract.\\n     */\\n    function pause() public onlyPauser {\\n        _setPaused(true);\\n        emit ContractPaused();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract.\\n     */\\n    function unpause() public onlyPauser {\\n        _setPaused(false);\\n        emit ContractUnpaused();\\n    }\\n\\n    /**\\n     * @notice Returns whether or not the contract is paused.\\n     * @return `true` if the contract is paused, `false` otherwise.\\n     */\\n    function isPaused() public view returns (bool) {\\n        bool paused;\\n        bytes32 pausedPosition = PAUSED_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            paused := sload(pausedPosition)\\n        }\\n        return paused;\\n    }\\n\\n    /**\\n     * @notice Returns the address permissioned to pause/unpause this contract.\\n     */\\n    function pauser() public view returns (address) {\\n        address pauserAddress;\\n        bytes32 pauserPosition = PAUSER_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pauserAddress := sload(pauserPosition)\\n        }\\n        return pauserAddress;\\n    }\\n\\n    /**\\n     * @notice Sets the contract's paused state.\\n     * @param paused `true` for paused, `false` for unpaused.\\n     */\\n    function _setPaused(bool paused) internal {\\n        bytes32 pausedPosition = PAUSED_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(pausedPosition, paused)\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the address permissioned to pause this contract.\\n     * @param _pauser The new pauser.\\n     * @dev This should be wrapped by the inheriting contract, likely in a\\n     * permissioned function like `onlyOwner`.\\n     */\\n    function _setPauser(address _pauser) internal {\\n        if (_pauser == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n        bytes32 pauserPosition = PAUSER_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(pauserPosition, _pauser)\\n        }\\n        emit PauserSet(_pauser);\\n    }\\n}\\n\",\"keccak256\":\"0x86570b00c8fb2b23bf310237c81029a64b89b5b060b89e49c5085182d4b00d9e\",\"license\":\"LGPL-3.0-only\"},\"contracts/StakedCelo.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./common/ERC20Upgradeable.sol\\\";\\nimport \\\"./common/UsingRegistryUpgradeable.sol\\\";\\nimport \\\"./common/UUPSOwnableUpgradeable.sol\\\";\\nimport \\\"./Managed.sol\\\";\\nimport \\\"./interfaces/IManager.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/**\\n * @title An ERC-20 token that is a fungible and transferrable representation\\n * of reward-earning voted LockedGold (i.e. locked CELO).\\n */\\ncontract StakedCelo is ERC20Upgradeable, UUPSOwnableUpgradeable, Managed, Pausable {\\n    mapping(address => uint256) private _lockedBalances;\\n\\n    /**\\n     * @notice Emitted when stCELO is locked.\\n     * @param account The owner of locked stCELO.\\n     * @param amount The amount of locked stCELO.\\n     */\\n    event LockedStCelo(address account, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when stCELO is inlocked.\\n     * @param account The owner of unlocked stCELO.\\n     * @param amount The amount of unlocked stCELO.\\n     */\\n    event UnlockedStCelo(address account, uint256 amount);\\n\\n    /**\\n     * @notice Used when attempting to unlock stCELO when there is no locked stCELO.\\n     * @param account The account's address.\\n     */\\n    error NoLockedStakedCelo(address account);\\n\\n    /**\\n     * @notice Used when attempting to lock stCELO when there is not enough stCELO.\\n     * @param account The account's address.\\n     */\\n    error NotEnoughStCeloToLock(address account);\\n\\n    /**\\n     * @notice Used when attempting to unlock stCELO when there is no stCELO to unlock.\\n     * @param account The account's address.\\n     */\\n    error NothingToUnlock(address account);\\n\\n    /**\\n     * @notice Empty constructor for proxy implementation, `initializer` modifer ensures the\\n     * implementation gets initialized.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() initializer {}\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @param _manager The address of the Manager contract.\\n     * @param _owner The address to set as the owner.\\n     */\\n    function initialize(address _manager, address _owner) external initializer {\\n        __ERC20_init(\\\"Staked CELO\\\", \\\"stCELO\\\");\\n        __Managed_init(_manager);\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Sets that address permissioned to pause/unpause this contract to\\n     * the owner of this contract.\\n     */\\n    function setPauser() external onlyOwner {\\n        _setPauser(owner());\\n    }\\n\\n    /**\\n     * @notice Mints new stCELO to an address.\\n     * @param to The address that will receive the new stCELO.\\n     * @param amount The amount of stCELO to mint.\\n     */\\n    function mint(address to, uint256 amount) external onlyManager {\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @notice Burns stCELO from an address.\\n     * @param from The address that will have its stCELO burned.\\n     * @param amount The amount of stCELO to burn.\\n     */\\n    function burn(address from, uint256 amount) external onlyManager {\\n        _burn(from, amount);\\n    }\\n\\n    /**\\n     * @notice Locks vote stCELO from an address.\\n     * @param account The address that will have its stCELO balance locked.\\n     * @param amount The amount of stCELO to lock.\\n     */\\n    function lockVoteBalance(address account, uint256 amount) external onlyManager {\\n        uint256 lockedBalance = _lockedBalances[account];\\n        if (lockedBalance < amount) {\\n            _lockedBalances[account] = amount;\\n            uint256 amountToSubtract = amount - lockedBalance;\\n            uint256 accountBalance = balanceOf(account);\\n            if (accountBalance < amountToSubtract) {\\n                revert NotEnoughStCeloToLock(account);\\n            }\\n            unchecked {\\n                _balances[account] = accountBalance - amountToSubtract;\\n            }\\n            emit LockedStCelo(account, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 1, 3, 0);\\n    }\\n\\n    /**\\n     * @notice Unlocks vote stCELO from an address.\\n     * @param beneficiary The address that will have its stCELO balance unlocked.\\n     */\\n    function unlockVoteBalance(address beneficiary) public onlyWhenNotPaused {\\n        uint256 previouslyLocked = _lockedBalances[beneficiary];\\n        if (previouslyLocked == 0) {\\n            revert NoLockedStakedCelo(beneficiary);\\n        }\\n        uint256 currentlyLocked = IManager(manager).updateHistoryAndReturnLockedStCeloInVoting(\\n            beneficiary\\n        );\\n        if (previouslyLocked <= currentlyLocked) {\\n            revert NothingToUnlock(beneficiary);\\n        }\\n\\n        _lockedBalances[beneficiary] = currentlyLocked;\\n        uint256 amountToAdd = previouslyLocked - currentlyLocked;\\n        _balances[beneficiary] += amountToAdd;\\n        emit UnlockedStCelo(beneficiary, previouslyLocked - _lockedBalances[beneficiary]);\\n    }\\n\\n    /**\\n     * @notice Returns vote stCELO locked balance.\\n     * @param account The address of locked stCELO balance.\\n     * @return The amount of locked stCELO.\\n     */\\n    function lockedVoteBalanceOf(address account) public view returns (uint256) {\\n        return _lockedBalances[account];\\n    }\\n\\n    /**\\n     * @notice Registers transfer to manager whenever stCELO is being transfered.\\n     **/\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        if (from == address(0) || to == address(0)) {\\n            // mint or burn\\n            return;\\n        }\\n        IManager(manager).transfer(from, to, amount);\\n    }\\n\\n    function _approve(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override onlyWhenNotPaused {\\n        super._approve(from, to, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override onlyWhenNotPaused {\\n        super._transfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xae1a176fa131b9ecf7de523a4c1549768e681ed5d7017d44a0872c11bade78b1\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// Only change is in that _balances have internal modifier instead of private modifier\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    IERC20Upgradeable,\\n    IERC20MetadataUpgradeable\\n{\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\\n        internal\\n        onlyInitializing\\n    {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        // solhint-disable-next-line reason-string\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solhint-disable-next-line reason-string\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        // solhint-disable-next-line reason-string\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        // solhint-disable-next-line reason-string\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        // solhint-disable-next-line reason-string\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        // solhint-disable-next-line reason-string\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        // solhint-disable-next-line reason-string\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        // solhint-disable-next-line reason-string\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to\\n     * xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to\\n     * xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xe9a6d7e5d89751f362993cd1484c843f5a37ad47d8eb21375291e07f5146b25d\",\"license\":\"MIT\"},\"contracts/common/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Provides some common general errors.\\n */\\nabstract contract Errors {\\n    /**\\n     * @notice Used when attempting to pass in address zero where not allowed.\\n     */\\n    error AddressZeroNotAllowed();\\n}\\n\",\"keccak256\":\"0xf05b0cd54af69df277819c986819d7ab9d475a6ff955fbaf1d26ec61d9e44b00\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UUPSOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title A contract that links UUPSUUpgradeable with OwanbleUpgradeable to gate upgrades.\\n */\\nabstract contract UUPSOwnableUpgradeable is UUPSUpgradeable, OwnableUpgradeable {\\n    /**\\n     * @notice Guard method for UUPS (Universal Upgradable Proxy Standard)\\n     * See: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent-vs-uups\\n     * @dev This methods overrides the virtual one in UUPSUpgradeable and\\n     * adds the onlyOwner modifer.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x5dbad350c6ae75b9d15c2080b1de6f02d8b7f32a71a6bcf775c9731820d115ec\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/UsingRegistryUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccounts.sol\\\";\\nimport \\\"../interfaces/IElection.sol\\\";\\nimport \\\"../interfaces/IGoldToken.sol\\\";\\nimport \\\"../interfaces/ILockedGold.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IGovernance.sol\\\";\\nimport \\\"../interfaces/IValidators.sol\\\";\\n\\n/**\\n * @title A helper for getting Celo core contracts from the Registry.\\n */\\nabstract contract UsingRegistryUpgradeable is Initializable {\\n    /// @notice The canonical address of the Registry.\\n    address internal constant CANONICAL_REGISTRY = 0x000000000000000000000000000000000000ce10;\\n\\n    /// @notice The registry ID for the Accounts contract.\\n    bytes32 private constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n\\n    /// @notice The registry ID for the Election contract.\\n    bytes32 private constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n\\n    /// @notice The registry ID for the GoldToken contract.\\n    bytes32 private constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n\\n    /// @notice The registry ID for the LockedGold contract.\\n    bytes32 private constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n\\n    /// @notice The registry ID for the Governance contract.\\n    bytes32 private constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n\\n    /// @notice The registry ID for the Validator contract.\\n    bytes32 private constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n\\n    /// @notice The Registry.\\n    IRegistry public registry;\\n\\n    /**\\n     * @notice Initializes the UsingRegistryUpgradable contract in an upgradable scenario\\n     * @param _registry The address of the Registry. For convenience, if the zero address is\\n     * provided, the registry is set to the canonical Registry address, i.e. 0x0...ce10. This\\n     * parameter should only be a non-zero address when testing.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __UsingRegistry_init(address _registry) internal onlyInitializing {\\n        if (_registry == address(0)) {\\n            registry = IRegistry(CANONICAL_REGISTRY);\\n        } else {\\n            registry = IRegistry(_registry);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the Accounts contract from the Registry.\\n     * @return The Accounts contract from the Registry.\\n     */\\n    function getAccounts() internal view returns (IAccounts) {\\n        return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the Election contract from the Registry.\\n     * @return The Election contract from the Registry.\\n     */\\n    function getElection() internal view returns (IElection) {\\n        return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the GoldToken contract from the Registry.\\n     * @return The GoldToken contract from the Registry.\\n     */\\n    function getGoldToken() internal view returns (IGoldToken) {\\n        return IGoldToken(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the LockedGold contract from the Registry.\\n     * @return The LockedGold contract from the Registry.\\n     */\\n    function getLockedGold() internal view returns (ILockedGold) {\\n        return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the Governance contract from the Registry.\\n     * @return The Governance contract from the Registry.\\n     */\\n    function getGovernance() internal view returns (IGovernance) {\\n        return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n    }\\n\\n    /**\\n     * @notice Gets the validators contract from the Registry.\\n     * @return The validators contract from the Registry.\\n     */\\n    function getValidators() internal view returns (IValidators) {\\n        return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n    }\\n}\\n\",\"keccak256\":\"0xabb9ce841ce13529276159c75e3e6a8d74d1bbd219a02de1eb11bb3aef61bed0\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAccounts.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IAccounts {\\n    function isAccount(address) external view returns (bool);\\n\\n    function voteSignerToAccount(address) external view returns (address);\\n\\n    function validatorSignerToAccount(address) external view returns (address);\\n\\n    function attestationSignerToAccount(address) external view returns (address);\\n\\n    function signerToAccount(address) external view returns (address);\\n\\n    function getAttestationSigner(address) external view returns (address);\\n\\n    function getValidatorSigner(address) external view returns (address);\\n\\n    function getVoteSigner(address) external view returns (address);\\n\\n    function hasAuthorizedVoteSigner(address) external view returns (bool);\\n\\n    function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n\\n    function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n    function setAccountDataEncryptionKey(bytes calldata) external;\\n\\n    function setMetadataURL(string calldata) external;\\n\\n    function setName(string calldata) external;\\n\\n    function setWalletAddress(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function setAccount(\\n        string calldata,\\n        bytes calldata,\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function getDataEncryptionKey(address) external view returns (bytes memory);\\n\\n    function getWalletAddress(address) external view returns (address);\\n\\n    function getMetadataURL(address) external view returns (string memory);\\n\\n    function batchGetMetadataURL(address[] calldata)\\n        external\\n        view\\n        returns (uint256[] memory, bytes memory);\\n\\n    function getName(address) external view returns (string memory);\\n\\n    function authorizeVoteSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function authorizeValidatorSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function authorizeValidatorSignerWithPublicKey(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32,\\n        bytes calldata\\n    ) external;\\n\\n    function authorizeValidatorSignerWithKeys(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32,\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external;\\n\\n    function authorizeAttestationSigner(\\n        address,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function createAccount() external returns (bool);\\n}\\n\",\"keccak256\":\"0x661b5c89e143c166a8667ea927d787939c27a59bd52e12c94d67d7377003e734\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IElection.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IElection {\\n    function vote(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function activate(address) external returns (bool);\\n\\n    function activateForAccount(address, address) external returns (bool);\\n\\n    function revokeActive(\\n        address,\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function revokeAllActive(\\n        address,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function revokePending(\\n        address,\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function markGroupIneligible(address) external;\\n\\n    function markGroupEligible(\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function forceDecrementVotes(\\n        address,\\n        uint256,\\n        address[] calldata,\\n        address[] calldata,\\n        uint256[] calldata\\n    ) external returns (uint256);\\n\\n    // only owner\\n    function setElectableValidators(uint256, uint256) external returns (bool);\\n\\n    function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n\\n    function setElectabilityThreshold(uint256) external returns (bool);\\n\\n    // only VM\\n    function distributeEpochRewards(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external;\\n\\n    function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n\\n    function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n    // view functions\\n    function electValidatorSigners() external view returns (address[] memory);\\n\\n    function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n\\n    function getElectableValidators() external view returns (uint256, uint256);\\n\\n    function getElectabilityThreshold() external view returns (uint256);\\n\\n    function getNumVotesReceivable(address) external view returns (uint256);\\n\\n    function getTotalVotes() external view returns (uint256);\\n\\n    function getActiveVotes() external view returns (uint256);\\n\\n    function getTotalVotesByAccount(address) external view returns (uint256);\\n\\n    function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n\\n    function getTotalVotesForGroup(address) external view returns (uint256);\\n\\n    function getActiveVotesForGroup(address) external view returns (uint256);\\n\\n    function getPendingVotesForGroup(address) external view returns (uint256);\\n\\n    function getGroupEligibility(address) external view returns (bool);\\n\\n    function getGroupEpochRewards(\\n        address,\\n        uint256,\\n        uint256[] calldata\\n    ) external view returns (uint256);\\n\\n    function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n\\n    function getEligibleValidatorGroups() external view returns (address[] memory);\\n\\n    function getTotalVotesForEligibleValidatorGroups()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    function getCurrentValidatorSigners() external view returns (address[] memory);\\n\\n    function canReceiveVotes(address, uint256) external view returns (bool);\\n\\n    function hasActivatablePendingVotes(address, address) external view returns (bool);\\n\\n    function maxNumGroupsVotedFor() external view returns (uint256);\\n\\n    function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n\\n    function numberValidatorsInCurrentSet() external view returns (uint256);\\n\\n    function getEpochNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdb5870e4b37333b3ba2932b6adc14b86404d3f9e785061f85517c5558f6f217f\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGoldToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGoldToken {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferWithComment(\\n        address to,\\n        uint256 value,\\n        string calldata comment\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\\n\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x230bde369f53b4c36033c7b5465637d706873bf684f732afa7e083636d7c9d68\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IGovernance {\\n    function votePartially(\\n        uint256 proposalId,\\n        uint256 index,\\n        uint256 yesVotes,\\n        uint256 noVotes,\\n        uint256 abstainVotes\\n    ) external returns (bool);\\n\\n    function getProposal(uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            string memory\\n        );\\n\\n    function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x21958f1d6595964dd706b5dc17455e59d7f1fc21a8f5c76b47b528e17f7f7d96\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ILockedGold.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface ILockedGold {\\n    function lock() external payable;\\n\\n    function incrementNonvotingAccountBalance(address, uint256) external;\\n\\n    function unlock(uint256) external;\\n\\n    function relock(uint256, uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function slash(\\n        address account,\\n        uint256 penalty,\\n        address reporter,\\n        uint256 reward,\\n        address[] calldata lessers,\\n        address[] calldata greaters,\\n        uint256[] calldata indices\\n    ) external;\\n\\n    function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n    function unlockingPeriod() external view returns (uint256);\\n\\n    function getAccountTotalLockedGold(address) external view returns (uint256);\\n\\n    function getTotalLockedGold() external view returns (uint256);\\n\\n    function getPendingWithdrawal(address, uint256) external view returns (uint256, uint256);\\n\\n    function getSlashingWhitelist() external view returns (bytes32[] memory);\\n\\n    function getPendingWithdrawals(address)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getTotalPendingWithdrawals(address) external view returns (uint256);\\n\\n    function isSlasher(address) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x50b09d43e613cd03c8ed1c83b6ff3dde9a22f4a426b0a0391d90bcc1ab08bd87\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IManager {\\n    function updateHistoryAndReturnLockedStCeloInVoting(address beneficiary)\\n        external\\n        returns (uint256);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function scheduleTransferWithinStrategy(\\n        address[] calldata fromGroups,\\n        address[] calldata toGroups,\\n        uint256[] calldata fromVotes,\\n        uint256[] calldata toVotes\\n    ) external;\\n\\n    function toCelo(uint256 stCeloAmount) external view returns (uint256);\\n\\n    function toStakedCelo(uint256 celoAmount) external view returns (uint256);\\n\\n    function getReceivableVotesForGroup(address group) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae2e3dc80238a25d5d402dbb696c5c78445a6e9ac2676b0c25e33a45c7fbbbeb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function isPaused() external returns (bool);\\n}\\n\",\"keccak256\":\"0x09a0bc3c0f05fa42f8fdc22ca85217a732c1a676e292866bc4a08ba6f4947ee1\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IRegistry {\\n    function setAddressFor(string calldata, address) external;\\n\\n    function getAddressForOrDie(bytes32) external view returns (address);\\n\\n    function getAddressFor(bytes32) external view returns (address);\\n\\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n\\n    function getAddressForString(string calldata identifier) external view returns (address);\\n\\n    function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x15c870de545b84dea2aa846e91f15ab50f6e5090cec02bbf3b7cc085d23fc2eb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IValidators.sol\":{\"content\":\"//SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.11;\\n\\ninterface IValidators {\\n    function registerValidator(\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function deregisterValidator(uint256) external returns (bool);\\n\\n    function affiliate(address) external returns (bool);\\n\\n    function deaffiliate() external returns (bool);\\n\\n    function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n\\n    function registerValidatorGroup(uint256) external returns (bool);\\n\\n    function deregisterValidatorGroup(uint256) external returns (bool);\\n\\n    function addMember(address) external returns (bool);\\n\\n    function addFirstMember(\\n        address,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function removeMember(address) external returns (bool);\\n\\n    function reorderMember(\\n        address,\\n        address,\\n        address\\n    ) external returns (bool);\\n\\n    function updateCommission() external;\\n\\n    function setNextCommissionUpdate(uint256) external;\\n\\n    function resetSlashingMultiplier() external;\\n\\n    // only owner\\n    function setCommissionUpdateDelay(uint256) external;\\n\\n    function setMaxGroupSize(uint256) external returns (bool);\\n\\n    function setMembershipHistoryLength(uint256) external returns (bool);\\n\\n    function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n\\n    function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n\\n    function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n\\n    function setSlashingMultiplierResetPeriod(uint256) external;\\n\\n    // view functions\\n    function getMaxGroupSize() external view returns (uint256);\\n\\n    function getCommissionUpdateDelay() external view returns (uint256);\\n\\n    function getValidatorScoreParameters() external view returns (uint256, uint256);\\n\\n    function getMembershipHistory(address)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            address[] memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function calculateEpochScore(uint256) external view returns (uint256);\\n\\n    function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n\\n    function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n\\n    function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n\\n    function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n\\n    function getValidator(address account)\\n        external\\n        view\\n        returns (\\n            bytes memory,\\n            bytes memory,\\n            address,\\n            uint256,\\n            address\\n        );\\n\\n    function getValidatorGroup(address)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getGroupNumMembers(address) external view returns (uint256);\\n\\n    function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n\\n    function getGroupsNumMembers(address[] calldata accounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getNumRegisteredValidators() external view returns (uint256);\\n\\n    function groupMembershipInEpoch(\\n        address,\\n        uint256,\\n        uint256\\n    ) external view returns (address);\\n\\n    // only registered contract\\n    function updateEcdsaPublicKey(\\n        address,\\n        address,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function updatePublicKeys(\\n        address,\\n        address,\\n        bytes calldata,\\n        bytes calldata,\\n        bytes calldata\\n    ) external returns (bool);\\n\\n    function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n\\n    function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n\\n    function getRegisteredValidators() external view returns (address[] memory);\\n\\n    function getRegisteredValidatorSigners() external view returns (address[] memory);\\n\\n    function getRegisteredValidatorGroups() external view returns (address[] memory);\\n\\n    function isValidatorGroup(address) external view returns (bool);\\n\\n    function isValidator(address) external view returns (bool);\\n\\n    function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n\\n    function getMembershipInLastEpoch(address) external view returns (address);\\n\\n    function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n\\n    // only VM\\n    function updateValidatorScoreFromSigner(address, uint256) external;\\n\\n    function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n    // only slasher\\n    function forceDeaffiliateIfValidator(address) external;\\n\\n    function halveSlashingMultiplier(address) external;\\n}\\n\",\"keccak256\":\"0x8aa4b70dab85380f94c0d7d2538268988d7153060660e48afece5a9c2f92fa6e\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50600060019054906101000a900460ff166200006f5760008054906101000a900460ff161562000080565b6200007f6200013c60201b60201c565b5b620000c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b99062000204565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000113576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620001355760008060016101000a81548160ff0219169083151502179055505b5062000226565b600062000154306200015a60201b62001b651760201c565b15905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000620001ec602e836200017d565b9150620001f9826200018e565b604082019050919050565b600060208201905081810360008301526200021f81620001dd565b9050919050565b60805161414b6200025760003960008181610865015281816108f401528181610da40152610e33015261414b6000f3fe6080604052600436106101e35760003560e01c8063715018a6116101025780639fd0506d11610095578063d0ebdbe711610064578063d0ebdbe7146106b4578063dd62ed3e146106dd578063e37d49b81461071a578063f2fde38b14610743576101e3565b80639fd0506d146105e4578063a457c2d71461060f578063a9059cbb1461064c578063b187bd2614610689576101e3565b80639468ba0e116100d15780639468ba0e1461053c57806395d89b41146105675780639caa9e29146105925780639dc29fac146105bb576101e3565b8063715018a6146104cc5780637c0d530f146104e35780638456cb59146104fa5780638da5cb5b14610511576101e3565b80633f4ba83a1161017a5780634f1ef286116101495780634f1ef28614610408578063536a5f271461042457806354255be01461046157806370a082311461048f576101e3565b80633f4ba83a1461037457806340c10f191461038b578063481c6a75146103b4578063485cc955146103df576101e3565b8063313ce567116101b6578063313ce567146102b85780633659cfe6146102e3578063395093511461030c5780633cbf587214610349576101e3565b806306fdde03146101e8578063095ea7b31461021357806318160ddd1461025057806323b872dd1461027b575b600080fd5b3480156101f457600080fd5b506101fd61076c565b60405161020a9190612fdb565b60405180910390f35b34801561021f57600080fd5b5061023a600480360381019061023591906130a5565b6107fe565b6040516102479190613100565b60405180910390f35b34801561025c57600080fd5b50610265610821565b604051610272919061312a565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d9190613145565b61082b565b6040516102af9190613100565b60405180910390f35b3480156102c457600080fd5b506102cd61085a565b6040516102da91906131b4565b60405180910390f35b3480156102ef57600080fd5b5061030a600480360381019061030591906131cf565b610863565b005b34801561031857600080fd5b50610333600480360381019061032e91906130a5565b6109ec565b6040516103409190613100565b60405180910390f35b34801561035557600080fd5b5061035e610a96565b60405161036b9190613215565b60405180910390f35b34801561038057600080fd5b50610389610acc565b005b34801561039757600080fd5b506103b260048036038101906103ad91906130a5565b610b70565b005b3480156103c057600080fd5b506103c9610c10565b6040516103d6919061323f565b60405180910390f35b3480156103eb57600080fd5b506104066004803603810190610401919061325a565b610c36565b005b610422600480360381019061041d91906133cf565b610da2565b005b34801561043057600080fd5b5061044b600480360381019061044691906131cf565b610edf565b604051610458919061312a565b60405180910390f35b34801561046d57600080fd5b50610476610f28565b604051610486949392919061342b565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b191906131cf565b610f43565b6040516104c3919061312a565b60405180910390f35b3480156104d857600080fd5b506104e1610f8c565b005b3480156104ef57600080fd5b506104f8611014565b005b34801561050657600080fd5b5061050f6110a2565b005b34801561051d57600080fd5b50610526611146565b604051610533919061323f565b60405180910390f35b34801561054857600080fd5b50610551611170565b60405161055e9190613215565b60405180910390f35b34801561057357600080fd5b5061057c6111a6565b6040516105899190612fdb565b60405180910390f35b34801561059e57600080fd5b506105b960048036038101906105b491906130a5565b611238565b005b3480156105c757600080fd5b506105e260048036038101906105dd91906130a5565b611443565b005b3480156105f057600080fd5b506105f96114e3565b604051610606919061323f565b60405180910390f35b34801561061b57600080fd5b50610636600480360381019061063191906130a5565b611529565b6040516106439190613100565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e91906130a5565b611613565b6040516106809190613100565b60405180910390f35b34801561069557600080fd5b5061069e611636565b6040516106ab9190613100565b60405180910390f35b3480156106c057600080fd5b506106db60048036038101906106d691906131cf565b61167c565b005b3480156106e957600080fd5b5061070460048036038101906106ff919061325a565b611704565b604051610711919061312a565b60405180910390f35b34801561072657600080fd5b50610741600480360381019061073c91906131cf565b61178b565b005b34801561074f57600080fd5b5061076a600480360381019061076591906131cf565b611a6d565b005b60606036805461077b9061349f565b80601f01602080910402602001604051908101604052809291908181526020018280546107a79061349f565b80156107f45780601f106107c9576101008083540402835291602001916107f4565b820191906000526020600020905b8154815290600101906020018083116107d757829003601f168201915b5050505050905090565b600080610809611b88565b9050610816818585611b90565b600191505092915050565b6000603554905090565b600080610836611b88565b9050610843858285611bdf565b61084e858585611c6b565b60019150509392505050565b60006012905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156108f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e990613543565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610931611cba565b73ffffffffffffffffffffffffffffffffffffffff1614610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e906135d5565b60405180910390fd5b61099081611d11565b6109e981600067ffffffffffffffff8111156109af576109ae6132a4565b5b6040519080825280601f01601f1916602001820160405280156109e15781602001600182028036833780820191505090505b506000611d90565b50565b6000806109f7611b88565b9050610a8b818585603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a869190613624565b611b90565b600191505092915050565b60017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c610ac6919061367a565b60001b81565b610ad46114e3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b38576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b426000611f61565b7f0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f9460405160405180910390a1565b3373ffffffffffffffffffffffffffffffffffffffff16609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c0257336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401610bf9919061323f565b60405180910390fd5b610c0c8282611f9f565b5050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff16610c5e5760008054906101000a900460ff1615610c67565b610c66612100565b5b610ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9d90613720565b60405180910390fd5b60008060019054906101000a900460ff161590508015610cf6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d6a6040518060400160405280600b81526020017f5374616b65642043454c4f0000000000000000000000000000000000000000008152506040518060400160405280600681526020017f737443454c4f0000000000000000000000000000000000000000000000000000815250612111565b610d738361216e565b610d7c826121c9565b8015610d9d5760008060016101000a81548160ff0219169083151502179055505b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610e31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2890613543565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e70611cba565b73ffffffffffffffffffffffffffffffffffffffff1614610ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebd906135d5565b60405180910390fd5b610ecf82611d11565b610edb82826001611d90565b5050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060018060036000935093509350935090919293565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f94611b88565b73ffffffffffffffffffffffffffffffffffffffff16610fb2611146565b73ffffffffffffffffffffffffffffffffffffffff1614611008576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fff9061378c565b60405180910390fd5b61101260006121c9565b565b61101c611b88565b73ffffffffffffffffffffffffffffffffffffffff1661103a611146565b73ffffffffffffffffffffffffffffffffffffffff1614611090576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110879061378c565b60405180910390fd5b6110a061109b611146565b61228f565b565b6110aa6114e3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110e576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111186001611f61565b7fab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d26760405160405180910390a1565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c6111a0919061367a565b60001b81565b6060603780546111b59061349f565b80601f01602080910402602001604051908101604052809291908181526020018280546111e19061349f565b801561122e5780601f106112035761010080835404028352916020019161122e565b820191906000526020600020905b81548152906001019060200180831161121157829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112ca57336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016112c1919061323f565b60405180910390fd5b6000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561143e5781609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008183611368919061367a565b9050600061137585610f43565b9050818110156113bc57846040517f302eac670000000000000000000000000000000000000000000000000000000081526004016113b3919061323f565b60405180910390fd5b818103603360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fe37e8cb8ed38bb9b63754c5710e41c3475ab33b84179eaa49e7d1d3f19375b0785856040516114339291906137ac565b60405180910390a150505b505050565b3373ffffffffffffffffffffffffffffffffffffffff16609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114d557336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016114cc919061323f565b60405180910390fd5b6114df828261236b565b5050565b600080600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c611518919061367a565b60001b905080549150819250505090565b600080611534611b88565b90506000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156115fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f190613847565b60405180910390fd5b6116078286868403611b90565b60019250505092915050565b60008061161e611b88565b905061162b818585611c6b565b600191505092915050565b600080600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c61166b919061367a565b60001b905080549150819250505090565b611684611b88565b73ffffffffffffffffffffffffffffffffffffffff166116a2611146565b73ffffffffffffffffffffffffffffffffffffffff16146116f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ef9061378c565b60405180910390fd5b61170181612544565b50565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611793611636565b156117ca576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561185457816040517f52113b8900000000000000000000000000000000000000000000000000000000815260040161184b919061323f565b60405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348fd6ea6846040518263ffffffff1660e01b81526004016118b1919061323f565b6020604051808303816000875af11580156118d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f4919061387c565b905080821161193a57826040517fca9f0336000000000000000000000000000000000000000000000000000000008152600401611931919061323f565b60405180910390fd5b80609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000818361198c919061367a565b905080603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119dd9190613624565b925050819055507fda5d2c5893395f22bb4bb4ecad229f58d2403a4b1b2683e0d065b86a5df5c86a84609860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611a51919061367a565b604051611a5f9291906137ac565b60405180910390a150505050565b611a75611b88565b73ffffffffffffffffffffffffffffffffffffffff16611a93611146565b73ffffffffffffffffffffffffffffffffffffffff1614611ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae09061378c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b509061391b565b60405180910390fd5b611b62816121c9565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b611b98611636565b15611bcf576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bda838383612632565b505050565b6000611beb8484611704565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611c655781811015611c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4e90613987565b60405180910390fd5b611c648484848403611b90565b5b50505050565b611c73611636565b15611caa576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611cb58383836127fd565b505050565b6000611ce87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612a81565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611d19611b88565b73ffffffffffffffffffffffffffffffffffffffff16611d37611146565b73ffffffffffffffffffffffffffffffffffffffff1614611d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d849061378c565b60405180910390fd5b50565b6000611d9a611cba565b9050611da584612a8b565b600083511180611db25750815b15611dc357611dc18484612b44565b505b6000611df17f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612b71565b90508060000160009054906101000a900460ff16611f5a5760018160000160006101000a81548160ff021916908315150217905550611ebd8583604051602401611e3b919061323f565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b44565b5060008160000160006101000a81548160ff021916908315150217905550611ee3611cba565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4790613a19565b60405180910390fd5b611f5985612b7b565b5b5050505050565b600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c611f93919061367a565b60001b90508181555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561200f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200690613a85565b60405180910390fd5b61201b60008383612bca565b806035600082825461202d9190613624565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120839190613624565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120e8919061312a565b60405180910390a36120fc60008383612bcf565b5050565b600061210b30611b65565b15905090565b600060019054906101000a900460ff16612160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215790613b17565b60405180910390fd5b61216a8282612cd7565b5050565b600060019054906101000a900460ff166121bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b490613b17565b60405180910390fd5b6121c681612544565b50565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122f6576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c612328919061367a565b60001b90508181557fd11d57c2c7468878b1035df11c670bcd0091aa840bf8aa166365397622237bea8260405161235f919061323f565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d290613ba9565b60405180910390fd5b6123e782600083612bca565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561246e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246590613c3b565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603560008282546124c6919061367a565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161252b919061312a565b60405180910390a361253f83600084612bcf565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125ab576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269990613ccd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270990613d5f565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516127f0919061312a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561286d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286490613df1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d490613e83565b60405180910390fd5b6128e8838383612bca565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561296f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296690613f15565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a049190613624565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612a68919061312a565b60405180910390a3612a7b848484612bcf565b50505050565b6000819050919050565b612a9481612d58565b612ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aca90613fa7565b60405180910390fd5b80612b007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612a81565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060612b6983836040518060600160405280602781526020016140ef60279139612d6b565b905092915050565b6000819050919050565b612b8481612a8b565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612c365750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612c4057612cd2565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc88484846040518463ffffffff1660e01b8152600401612c9f93929190613fc7565b600060405180830381600087803b158015612cb957600080fd5b505af1158015612ccd573d6000803e3d6000fd5b505050505b505050565b600060019054906101000a900460ff16612d26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1d90613b17565b60405180910390fd5b8160369080519060200190612d3c929190612e9f565b508060379080519060200190612d53929190612e9f565b505050565b600080823b905060008111915050919050565b6060612d7684612d58565b612db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dac90614070565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051612ddd91906140d7565b600060405180830381855af49150503d8060008114612e18576040519150601f19603f3d011682016040523d82523d6000602084013e612e1d565b606091505b5091509150612e2d828286612e38565b925050509392505050565b60608315612e4857829050612e98565b600083511115612e5b5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e8f9190612fdb565b60405180910390fd5b9392505050565b828054612eab9061349f565b90600052602060002090601f016020900481019282612ecd5760008555612f14565b82601f10612ee657805160ff1916838001178555612f14565b82800160010185558215612f14579182015b82811115612f13578251825591602001919060010190612ef8565b5b509050612f219190612f25565b5090565b5b80821115612f3e576000816000905550600101612f26565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f7c578082015181840152602081019050612f61565b83811115612f8b576000848401525b50505050565b6000601f19601f8301169050919050565b6000612fad82612f42565b612fb78185612f4d565b9350612fc7818560208601612f5e565b612fd081612f91565b840191505092915050565b60006020820190508181036000830152612ff58184612fa2565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061303c82613011565b9050919050565b61304c81613031565b811461305757600080fd5b50565b60008135905061306981613043565b92915050565b6000819050919050565b6130828161306f565b811461308d57600080fd5b50565b60008135905061309f81613079565b92915050565b600080604083850312156130bc576130bb613007565b5b60006130ca8582860161305a565b92505060206130db85828601613090565b9150509250929050565b60008115159050919050565b6130fa816130e5565b82525050565b600060208201905061311560008301846130f1565b92915050565b6131248161306f565b82525050565b600060208201905061313f600083018461311b565b92915050565b60008060006060848603121561315e5761315d613007565b5b600061316c8682870161305a565b935050602061317d8682870161305a565b925050604061318e86828701613090565b9150509250925092565b600060ff82169050919050565b6131ae81613198565b82525050565b60006020820190506131c960008301846131a5565b92915050565b6000602082840312156131e5576131e4613007565b5b60006131f38482850161305a565b91505092915050565b6000819050919050565b61320f816131fc565b82525050565b600060208201905061322a6000830184613206565b92915050565b61323981613031565b82525050565b60006020820190506132546000830184613230565b92915050565b6000806040838503121561327157613270613007565b5b600061327f8582860161305a565b92505060206132908582860161305a565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132dc82612f91565b810181811067ffffffffffffffff821117156132fb576132fa6132a4565b5b80604052505050565b600061330e612ffd565b905061331a82826132d3565b919050565b600067ffffffffffffffff82111561333a576133396132a4565b5b61334382612f91565b9050602081019050919050565b82818337600083830152505050565b600061337261336d8461331f565b613304565b90508281526020810184848401111561338e5761338d61329f565b5b613399848285613350565b509392505050565b600082601f8301126133b6576133b561329a565b5b81356133c684826020860161335f565b91505092915050565b600080604083850312156133e6576133e5613007565b5b60006133f48582860161305a565b925050602083013567ffffffffffffffff8111156134155761341461300c565b5b613421858286016133a1565b9150509250929050565b6000608082019050613440600083018761311b565b61344d602083018661311b565b61345a604083018561311b565b613467606083018461311b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806134b757607f821691505b602082108114156134cb576134ca613470565b5b50919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b600061352d602c83612f4d565b9150613538826134d1565b604082019050919050565b6000602082019050818103600083015261355c81613520565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006135bf602c83612f4d565b91506135ca82613563565b604082019050919050565b600060208201905081810360008301526135ee816135b2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061362f8261306f565b915061363a8361306f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561366f5761366e6135f5565b5b828201905092915050565b60006136858261306f565b91506136908361306f565b9250828210156136a3576136a26135f5565b5b828203905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061370a602e83612f4d565b9150613715826136ae565b604082019050919050565b60006020820190508181036000830152613739816136fd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613776602083612f4d565b915061378182613740565b602082019050919050565b600060208201905081810360008301526137a581613769565b9050919050565b60006040820190506137c16000830185613230565b6137ce602083018461311b565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000613831602583612f4d565b915061383c826137d5565b604082019050919050565b6000602082019050818103600083015261386081613824565b9050919050565b60008151905061387681613079565b92915050565b60006020828403121561389257613891613007565b5b60006138a084828501613867565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613905602683612f4d565b9150613910826138a9565b604082019050919050565b60006020820190508181036000830152613934816138f8565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000613971601d83612f4d565b915061397c8261393b565b602082019050919050565b600060208201905081810360008301526139a081613964565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b6000613a03602f83612f4d565b9150613a0e826139a7565b604082019050919050565b60006020820190508181036000830152613a32816139f6565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613a6f601f83612f4d565b9150613a7a82613a39565b602082019050919050565b60006020820190508181036000830152613a9e81613a62565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613b01602b83612f4d565b9150613b0c82613aa5565b604082019050919050565b60006020820190508181036000830152613b3081613af4565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b93602183612f4d565b9150613b9e82613b37565b604082019050919050565b60006020820190508181036000830152613bc281613b86565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000613c25602283612f4d565b9150613c3082613bc9565b604082019050919050565b60006020820190508181036000830152613c5481613c18565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613cb7602483612f4d565b9150613cc282613c5b565b604082019050919050565b60006020820190508181036000830152613ce681613caa565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613d49602283612f4d565b9150613d5482613ced565b604082019050919050565b60006020820190508181036000830152613d7881613d3c565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613ddb602583612f4d565b9150613de682613d7f565b604082019050919050565b60006020820190508181036000830152613e0a81613dce565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613e6d602383612f4d565b9150613e7882613e11565b604082019050919050565b60006020820190508181036000830152613e9c81613e60565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000613eff602683612f4d565b9150613f0a82613ea3565b604082019050919050565b60006020820190508181036000830152613f2e81613ef2565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000613f91602d83612f4d565b9150613f9c82613f35565b604082019050919050565b60006020820190508181036000830152613fc081613f84565b9050919050565b6000606082019050613fdc6000830186613230565b613fe96020830185613230565b613ff6604083018461311b565b949350505050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061405a602683612f4d565b915061406582613ffe565b604082019050919050565b600060208201905081810360008301526140898161404d565b9050919050565b600081519050919050565b600081905092915050565b60006140b182614090565b6140bb818561409b565b93506140cb818560208601612f5e565b80840191505092915050565b60006140e382846140a6565b91508190509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204ed41342fe0528209a2ed63d360796b585d8675b65398bcd52c7835ace8a28ab64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063715018a6116101025780639fd0506d11610095578063d0ebdbe711610064578063d0ebdbe7146106b4578063dd62ed3e146106dd578063e37d49b81461071a578063f2fde38b14610743576101e3565b80639fd0506d146105e4578063a457c2d71461060f578063a9059cbb1461064c578063b187bd2614610689576101e3565b80639468ba0e116100d15780639468ba0e1461053c57806395d89b41146105675780639caa9e29146105925780639dc29fac146105bb576101e3565b8063715018a6146104cc5780637c0d530f146104e35780638456cb59146104fa5780638da5cb5b14610511576101e3565b80633f4ba83a1161017a5780634f1ef286116101495780634f1ef28614610408578063536a5f271461042457806354255be01461046157806370a082311461048f576101e3565b80633f4ba83a1461037457806340c10f191461038b578063481c6a75146103b4578063485cc955146103df576101e3565b8063313ce567116101b6578063313ce567146102b85780633659cfe6146102e3578063395093511461030c5780633cbf587214610349576101e3565b806306fdde03146101e8578063095ea7b31461021357806318160ddd1461025057806323b872dd1461027b575b600080fd5b3480156101f457600080fd5b506101fd61076c565b60405161020a9190612fdb565b60405180910390f35b34801561021f57600080fd5b5061023a600480360381019061023591906130a5565b6107fe565b6040516102479190613100565b60405180910390f35b34801561025c57600080fd5b50610265610821565b604051610272919061312a565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d9190613145565b61082b565b6040516102af9190613100565b60405180910390f35b3480156102c457600080fd5b506102cd61085a565b6040516102da91906131b4565b60405180910390f35b3480156102ef57600080fd5b5061030a600480360381019061030591906131cf565b610863565b005b34801561031857600080fd5b50610333600480360381019061032e91906130a5565b6109ec565b6040516103409190613100565b60405180910390f35b34801561035557600080fd5b5061035e610a96565b60405161036b9190613215565b60405180910390f35b34801561038057600080fd5b50610389610acc565b005b34801561039757600080fd5b506103b260048036038101906103ad91906130a5565b610b70565b005b3480156103c057600080fd5b506103c9610c10565b6040516103d6919061323f565b60405180910390f35b3480156103eb57600080fd5b506104066004803603810190610401919061325a565b610c36565b005b610422600480360381019061041d91906133cf565b610da2565b005b34801561043057600080fd5b5061044b600480360381019061044691906131cf565b610edf565b604051610458919061312a565b60405180910390f35b34801561046d57600080fd5b50610476610f28565b604051610486949392919061342b565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b191906131cf565b610f43565b6040516104c3919061312a565b60405180910390f35b3480156104d857600080fd5b506104e1610f8c565b005b3480156104ef57600080fd5b506104f8611014565b005b34801561050657600080fd5b5061050f6110a2565b005b34801561051d57600080fd5b50610526611146565b604051610533919061323f565b60405180910390f35b34801561054857600080fd5b50610551611170565b60405161055e9190613215565b60405180910390f35b34801561057357600080fd5b5061057c6111a6565b6040516105899190612fdb565b60405180910390f35b34801561059e57600080fd5b506105b960048036038101906105b491906130a5565b611238565b005b3480156105c757600080fd5b506105e260048036038101906105dd91906130a5565b611443565b005b3480156105f057600080fd5b506105f96114e3565b604051610606919061323f565b60405180910390f35b34801561061b57600080fd5b50610636600480360381019061063191906130a5565b611529565b6040516106439190613100565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e91906130a5565b611613565b6040516106809190613100565b60405180910390f35b34801561069557600080fd5b5061069e611636565b6040516106ab9190613100565b60405180910390f35b3480156106c057600080fd5b506106db60048036038101906106d691906131cf565b61167c565b005b3480156106e957600080fd5b5061070460048036038101906106ff919061325a565b611704565b604051610711919061312a565b60405180910390f35b34801561072657600080fd5b50610741600480360381019061073c91906131cf565b61178b565b005b34801561074f57600080fd5b5061076a600480360381019061076591906131cf565b611a6d565b005b60606036805461077b9061349f565b80601f01602080910402602001604051908101604052809291908181526020018280546107a79061349f565b80156107f45780601f106107c9576101008083540402835291602001916107f4565b820191906000526020600020905b8154815290600101906020018083116107d757829003601f168201915b5050505050905090565b600080610809611b88565b9050610816818585611b90565b600191505092915050565b6000603554905090565b600080610836611b88565b9050610843858285611bdf565b61084e858585611c6b565b60019150509392505050565b60006012905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156108f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e990613543565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610931611cba565b73ffffffffffffffffffffffffffffffffffffffff1614610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e906135d5565b60405180910390fd5b61099081611d11565b6109e981600067ffffffffffffffff8111156109af576109ae6132a4565b5b6040519080825280601f01601f1916602001820160405280156109e15781602001600182028036833780820191505090505b506000611d90565b50565b6000806109f7611b88565b9050610a8b818585603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a869190613624565b611b90565b600191505092915050565b60017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c610ac6919061367a565b60001b81565b610ad46114e3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b38576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b426000611f61565b7f0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f9460405160405180910390a1565b3373ffffffffffffffffffffffffffffffffffffffff16609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c0257336040517f3b2495f1000000000000000000000000000000000000000000000000000000008152600401610bf9919061323f565b60405180910390fd5b610c0c8282611f9f565b5050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff16610c5e5760008054906101000a900460ff1615610c67565b610c66612100565b5b610ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9d90613720565b60405180910390fd5b60008060019054906101000a900460ff161590508015610cf6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d6a6040518060400160405280600b81526020017f5374616b65642043454c4f0000000000000000000000000000000000000000008152506040518060400160405280600681526020017f737443454c4f0000000000000000000000000000000000000000000000000000815250612111565b610d738361216e565b610d7c826121c9565b8015610d9d5760008060016101000a81548160ff0219169083151502179055505b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610e31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2890613543565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e70611cba565b73ffffffffffffffffffffffffffffffffffffffff1614610ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebd906135d5565b60405180910390fd5b610ecf82611d11565b610edb82826001611d90565b5050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060018060036000935093509350935090919293565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f94611b88565b73ffffffffffffffffffffffffffffffffffffffff16610fb2611146565b73ffffffffffffffffffffffffffffffffffffffff1614611008576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fff9061378c565b60405180910390fd5b61101260006121c9565b565b61101c611b88565b73ffffffffffffffffffffffffffffffffffffffff1661103a611146565b73ffffffffffffffffffffffffffffffffffffffff1614611090576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110879061378c565b60405180910390fd5b6110a061109b611146565b61228f565b565b6110aa6114e3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110e576040517f75df51dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111186001611f61565b7fab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d26760405160405180910390a1565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c6111a0919061367a565b60001b81565b6060603780546111b59061349f565b80601f01602080910402602001604051908101604052809291908181526020018280546111e19061349f565b801561122e5780601f106112035761010080835404028352916020019161122e565b820191906000526020600020905b81548152906001019060200180831161121157829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112ca57336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016112c1919061323f565b60405180910390fd5b6000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561143e5781609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008183611368919061367a565b9050600061137585610f43565b9050818110156113bc57846040517f302eac670000000000000000000000000000000000000000000000000000000081526004016113b3919061323f565b60405180910390fd5b818103603360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fe37e8cb8ed38bb9b63754c5710e41c3475ab33b84179eaa49e7d1d3f19375b0785856040516114339291906137ac565b60405180910390a150505b505050565b3373ffffffffffffffffffffffffffffffffffffffff16609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114d557336040517f3b2495f10000000000000000000000000000000000000000000000000000000081526004016114cc919061323f565b60405180910390fd5b6114df828261236b565b5050565b600080600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c611518919061367a565b60001b905080549150819250505090565b600080611534611b88565b90506000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156115fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f190613847565b60405180910390fd5b6116078286868403611b90565b60019250505092915050565b60008061161e611b88565b905061162b818585611c6b565b600191505092915050565b600080600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c61166b919061367a565b60001b905080549150819250505090565b611684611b88565b73ffffffffffffffffffffffffffffffffffffffff166116a2611146565b73ffffffffffffffffffffffffffffffffffffffff16146116f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ef9061378c565b60405180910390fd5b61170181612544565b50565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611793611636565b156117ca576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561185457816040517f52113b8900000000000000000000000000000000000000000000000000000000815260040161184b919061323f565b60405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348fd6ea6846040518263ffffffff1660e01b81526004016118b1919061323f565b6020604051808303816000875af11580156118d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f4919061387c565b905080821161193a57826040517fca9f0336000000000000000000000000000000000000000000000000000000008152600401611931919061323f565b60405180910390fd5b80609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000818361198c919061367a565b905080603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119dd9190613624565b925050819055507fda5d2c5893395f22bb4bb4ecad229f58d2403a4b1b2683e0d065b86a5df5c86a84609860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611a51919061367a565b604051611a5f9291906137ac565b60405180910390a150505050565b611a75611b88565b73ffffffffffffffffffffffffffffffffffffffff16611a93611146565b73ffffffffffffffffffffffffffffffffffffffff1614611ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae09061378c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b509061391b565b60405180910390fd5b611b62816121c9565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b611b98611636565b15611bcf576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bda838383612632565b505050565b6000611beb8484611704565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611c655781811015611c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4e90613987565b60405180910390fd5b611c648484848403611b90565b5b50505050565b611c73611636565b15611caa576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611cb58383836127fd565b505050565b6000611ce87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612a81565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611d19611b88565b73ffffffffffffffffffffffffffffffffffffffff16611d37611146565b73ffffffffffffffffffffffffffffffffffffffff1614611d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d849061378c565b60405180910390fd5b50565b6000611d9a611cba565b9050611da584612a8b565b600083511180611db25750815b15611dc357611dc18484612b44565b505b6000611df17f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612b71565b90508060000160009054906101000a900460ff16611f5a5760018160000160006101000a81548160ff021916908315150217905550611ebd8583604051602401611e3b919061323f565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b44565b5060008160000160006101000a81548160ff021916908315150217905550611ee3611cba565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4790613a19565b60405180910390fd5b611f5985612b7b565b5b5050505050565b600060017f8f989356aeb576065c8d201815b96ac9c10cf89197a532e428ebd68581557c2360001c611f93919061367a565b60001b90508181555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561200f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200690613a85565b60405180910390fd5b61201b60008383612bca565b806035600082825461202d9190613624565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120839190613624565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120e8919061312a565b60405180910390a36120fc60008383612bcf565b5050565b600061210b30611b65565b15905090565b600060019054906101000a900460ff16612160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215790613b17565b60405180910390fd5b61216a8282612cd7565b5050565b600060019054906101000a900460ff166121bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b490613b17565b60405180910390fd5b6121c681612544565b50565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122f6576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060017f29f060ba1cf8d3659516b02281c85dcc3e81b4287766ae4751c0f500688be30f60001c612328919061367a565b60001b90508181557fd11d57c2c7468878b1035df11c670bcd0091aa840bf8aa166365397622237bea8260405161235f919061323f565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d290613ba9565b60405180910390fd5b6123e782600083612bca565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561246e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246590613c3b565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603560008282546124c6919061367a565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161252b919061312a565b60405180910390a361253f83600084612bcf565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125ab576040517f0855380c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa6960405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269990613ccd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270990613d5f565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516127f0919061312a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561286d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286490613df1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d490613e83565b60405180910390fd5b6128e8838383612bca565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561296f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296690613f15565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a049190613624565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612a68919061312a565b60405180910390a3612a7b848484612bcf565b50505050565b6000819050919050565b612a9481612d58565b612ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aca90613fa7565b60405180910390fd5b80612b007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612a81565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060612b6983836040518060600160405280602781526020016140ef60279139612d6b565b905092915050565b6000819050919050565b612b8481612a8b565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612c365750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612c4057612cd2565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc88484846040518463ffffffff1660e01b8152600401612c9f93929190613fc7565b600060405180830381600087803b158015612cb957600080fd5b505af1158015612ccd573d6000803e3d6000fd5b505050505b505050565b600060019054906101000a900460ff16612d26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1d90613b17565b60405180910390fd5b8160369080519060200190612d3c929190612e9f565b508060379080519060200190612d53929190612e9f565b505050565b600080823b905060008111915050919050565b6060612d7684612d58565b612db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dac90614070565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051612ddd91906140d7565b600060405180830381855af49150503d8060008114612e18576040519150601f19603f3d011682016040523d82523d6000602084013e612e1d565b606091505b5091509150612e2d828286612e38565b925050509392505050565b60608315612e4857829050612e98565b600083511115612e5b5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e8f9190612fdb565b60405180910390fd5b9392505050565b828054612eab9061349f565b90600052602060002090601f016020900481019282612ecd5760008555612f14565b82601f10612ee657805160ff1916838001178555612f14565b82800160010185558215612f14579182015b82811115612f13578251825591602001919060010190612ef8565b5b509050612f219190612f25565b5090565b5b80821115612f3e576000816000905550600101612f26565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f7c578082015181840152602081019050612f61565b83811115612f8b576000848401525b50505050565b6000601f19601f8301169050919050565b6000612fad82612f42565b612fb78185612f4d565b9350612fc7818560208601612f5e565b612fd081612f91565b840191505092915050565b60006020820190508181036000830152612ff58184612fa2565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061303c82613011565b9050919050565b61304c81613031565b811461305757600080fd5b50565b60008135905061306981613043565b92915050565b6000819050919050565b6130828161306f565b811461308d57600080fd5b50565b60008135905061309f81613079565b92915050565b600080604083850312156130bc576130bb613007565b5b60006130ca8582860161305a565b92505060206130db85828601613090565b9150509250929050565b60008115159050919050565b6130fa816130e5565b82525050565b600060208201905061311560008301846130f1565b92915050565b6131248161306f565b82525050565b600060208201905061313f600083018461311b565b92915050565b60008060006060848603121561315e5761315d613007565b5b600061316c8682870161305a565b935050602061317d8682870161305a565b925050604061318e86828701613090565b9150509250925092565b600060ff82169050919050565b6131ae81613198565b82525050565b60006020820190506131c960008301846131a5565b92915050565b6000602082840312156131e5576131e4613007565b5b60006131f38482850161305a565b91505092915050565b6000819050919050565b61320f816131fc565b82525050565b600060208201905061322a6000830184613206565b92915050565b61323981613031565b82525050565b60006020820190506132546000830184613230565b92915050565b6000806040838503121561327157613270613007565b5b600061327f8582860161305a565b92505060206132908582860161305a565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132dc82612f91565b810181811067ffffffffffffffff821117156132fb576132fa6132a4565b5b80604052505050565b600061330e612ffd565b905061331a82826132d3565b919050565b600067ffffffffffffffff82111561333a576133396132a4565b5b61334382612f91565b9050602081019050919050565b82818337600083830152505050565b600061337261336d8461331f565b613304565b90508281526020810184848401111561338e5761338d61329f565b5b613399848285613350565b509392505050565b600082601f8301126133b6576133b561329a565b5b81356133c684826020860161335f565b91505092915050565b600080604083850312156133e6576133e5613007565b5b60006133f48582860161305a565b925050602083013567ffffffffffffffff8111156134155761341461300c565b5b613421858286016133a1565b9150509250929050565b6000608082019050613440600083018761311b565b61344d602083018661311b565b61345a604083018561311b565b613467606083018461311b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806134b757607f821691505b602082108114156134cb576134ca613470565b5b50919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b600061352d602c83612f4d565b9150613538826134d1565b604082019050919050565b6000602082019050818103600083015261355c81613520565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006135bf602c83612f4d565b91506135ca82613563565b604082019050919050565b600060208201905081810360008301526135ee816135b2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061362f8261306f565b915061363a8361306f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561366f5761366e6135f5565b5b828201905092915050565b60006136858261306f565b91506136908361306f565b9250828210156136a3576136a26135f5565b5b828203905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061370a602e83612f4d565b9150613715826136ae565b604082019050919050565b60006020820190508181036000830152613739816136fd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613776602083612f4d565b915061378182613740565b602082019050919050565b600060208201905081810360008301526137a581613769565b9050919050565b60006040820190506137c16000830185613230565b6137ce602083018461311b565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000613831602583612f4d565b915061383c826137d5565b604082019050919050565b6000602082019050818103600083015261386081613824565b9050919050565b60008151905061387681613079565b92915050565b60006020828403121561389257613891613007565b5b60006138a084828501613867565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613905602683612f4d565b9150613910826138a9565b604082019050919050565b60006020820190508181036000830152613934816138f8565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000613971601d83612f4d565b915061397c8261393b565b602082019050919050565b600060208201905081810360008301526139a081613964565b9050919050565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b6000613a03602f83612f4d565b9150613a0e826139a7565b604082019050919050565b60006020820190508181036000830152613a32816139f6565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613a6f601f83612f4d565b9150613a7a82613a39565b602082019050919050565b60006020820190508181036000830152613a9e81613a62565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613b01602b83612f4d565b9150613b0c82613aa5565b604082019050919050565b60006020820190508181036000830152613b3081613af4565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b93602183612f4d565b9150613b9e82613b37565b604082019050919050565b60006020820190508181036000830152613bc281613b86565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000613c25602283612f4d565b9150613c3082613bc9565b604082019050919050565b60006020820190508181036000830152613c5481613c18565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613cb7602483612f4d565b9150613cc282613c5b565b604082019050919050565b60006020820190508181036000830152613ce681613caa565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613d49602283612f4d565b9150613d5482613ced565b604082019050919050565b60006020820190508181036000830152613d7881613d3c565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613ddb602583612f4d565b9150613de682613d7f565b604082019050919050565b60006020820190508181036000830152613e0a81613dce565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613e6d602383612f4d565b9150613e7882613e11565b604082019050919050565b60006020820190508181036000830152613e9c81613e60565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000613eff602683612f4d565b9150613f0a82613ea3565b604082019050919050565b60006020820190508181036000830152613f2e81613ef2565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000613f91602d83612f4d565b9150613f9c82613f35565b604082019050919050565b60006020820190508181036000830152613fc081613f84565b9050919050565b6000606082019050613fdc6000830186613230565b613fe96020830185613230565b613ff6604083018461311b565b949350505050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061405a602683612f4d565b915061406582613ffe565b604082019050919050565b600060208201905081810360008301526140898161404d565b9050919050565b600081519050919050565b600081905092915050565b60006140b182614090565b6140bb818561409b565b93506140cb818560208601612f5e565b80840191505092915050565b60006140e382846140a6565b91508190509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204ed41342fe0528209a2ed63d360796b585d8675b65398bcd52c7835ace8a28ab64736f6c634300080b0033",
  "devdoc": {
    "errors": {
      "CallerNotManager(address)": [
        {
          "params": {
            "caller": "`msg.sender` that called the function."
          }
        }
      ],
      "NoLockedStakedCelo(address)": [
        {
          "params": {
            "account": "The account's address."
          }
        }
      ],
      "NotEnoughStCeloToLock(address)": [
        {
          "params": {
            "account": "The account's address."
          }
        }
      ],
      "NothingToUnlock(address)": [
        {
          "params": {
            "account": "The account's address."
          }
        }
      ]
    },
    "events": {
      "LockedStCelo(address,uint256)": {
        "params": {
          "account": "The owner of locked stCELO.",
          "amount": "The amount of locked stCELO."
        }
      },
      "UnlockedStCelo(address,uint256)": {
        "params": {
          "account": "The owner of unlocked stCELO.",
          "amount": "The amount of unlocked stCELO."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(address,uint256)": {
        "params": {
          "amount": "The amount of stCELO to burn.",
          "from": "The address that will have its stCELO burned."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "Storage version of the contract.",
          "_1": "Major version of the contract.",
          "_2": "Minor version of the contract.",
          "_3": "Patch version of the contract."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,address)": {
        "params": {
          "_manager": "The address of the Manager contract.",
          "_owner": "The address to set as the owner."
        }
      },
      "isPaused()": {
        "returns": {
          "_0": "`true` if the contract is paused, `false` otherwise."
        }
      },
      "lockVoteBalance(address,uint256)": {
        "params": {
          "account": "The address that will have its stCELO balance locked.",
          "amount": "The amount of stCELO to lock."
        }
      },
      "lockedVoteBalanceOf(address)": {
        "params": {
          "account": "The address of locked stCELO balance."
        },
        "returns": {
          "_0": "The amount of locked stCELO."
        }
      },
      "mint(address,uint256)": {
        "params": {
          "amount": "The amount of stCELO to mint.",
          "to": "The address that will receive the new stCELO."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setManager(address)": {
        "params": {
          "_manager": "The new manager address."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockVoteBalance(address)": {
        "params": {
          "beneficiary": "The address that will have its stCELO balance unlocked."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "An ERC-20 token that is a fungible and transferrable representation of reward-earning voted LockedGold (i.e. locked CELO).",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressZeroNotAllowed()": [
        {
          "notice": "Used when attempting to pass in address zero where not allowed."
        }
      ],
      "CallerNotManager(address)": [
        {
          "notice": "Used when an `onlyManager` function is called by a non-manager."
        }
      ],
      "NoLockedStakedCelo(address)": [
        {
          "notice": "Used when attempting to unlock stCELO when there is no locked stCELO."
        }
      ],
      "NotEnoughStCeloToLock(address)": [
        {
          "notice": "Used when attempting to lock stCELO when there is not enough stCELO."
        }
      ],
      "NothingToUnlock(address)": [
        {
          "notice": "Used when attempting to unlock stCELO when there is no stCELO to unlock."
        }
      ],
      "OnlyPauser()": [
        {
          "notice": "Used when an `onlyPauser` function is called with a different address."
        }
      ],
      "Paused()": [
        {
          "notice": "Used when an `onlyWhenNotPaused` function is called while the contract is paused."
        }
      ]
    },
    "events": {
      "ContractPaused()": {
        "notice": "Emitted when this contract is paused."
      },
      "ContractUnpaused()": {
        "notice": "Emitted when this contract is unpaused."
      },
      "LockedStCelo(address,uint256)": {
        "notice": "Emitted when stCELO is locked."
      },
      "ManagerSet(address)": {
        "notice": "Emitted when the manager is initially set or later modified."
      },
      "PauserSet(address)": {
        "notice": "Emitted when the address authorized to pause/unpause the contract is changed."
      },
      "UnlockedStCelo(address,uint256)": {
        "notice": "Emitted when stCELO is inlocked."
      }
    },
    "kind": "user",
    "methods": {
      "PAUSED_POSITION()": {
        "notice": "The storage slot under which we store a boolean representing whether or not the contract is currently paused."
      },
      "PAUSER_POSITION()": {
        "notice": "The storage slot under which we store an address representing the address permissioned to pause/unpause this contract."
      },
      "burn(address,uint256)": {
        "notice": "Burns stCELO from an address."
      },
      "constructor": {
        "notice": "Empty constructor for proxy implementation, `initializer` modifer ensures the implementation gets initialized."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "initialize(address,address)": {
        "notice": "Initializes the contract."
      },
      "isPaused()": {
        "notice": "Returns whether or not the contract is paused."
      },
      "lockVoteBalance(address,uint256)": {
        "notice": "Locks vote stCELO from an address."
      },
      "lockedVoteBalanceOf(address)": {
        "notice": "Returns vote stCELO locked balance."
      },
      "mint(address,uint256)": {
        "notice": "Mints new stCELO to an address."
      },
      "pause()": {
        "notice": "Pauses the contract."
      },
      "pauser()": {
        "notice": "Returns the address permissioned to pause/unpause this contract."
      },
      "setManager(address)": {
        "notice": "Sets the manager address."
      },
      "setPauser()": {
        "notice": "Sets that address permissioned to pause/unpause this contract to the owner of this contract."
      },
      "unlockVoteBalance(address)": {
        "notice": "Unlocks vote stCELO from an address."
      },
      "unpause()": {
        "notice": "Unpauses the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 584,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12209,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12215,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 12217,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 12219,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 12221,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 12802,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7214,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "manager",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 10849,
        "contract": "contracts/StakedCelo.sol:StakedCelo",
        "label": "_lockedBalances",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}